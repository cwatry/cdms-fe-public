/*
*   These are functions used in services or controllers across modules
*/

//there are quite a lot of functions in here related to Date handling -- it would be
// a very good idea to not maintain our own date code since there is an excellent
// date package called "Moment" that we should use instead of rolling our own. It is
// well-maintained and tested.


//anything we might need to do in initializing edit/entry pages.
function initEdit() {
    // Prevent the backspace key from navigating back.
    //http://stackoverflow.com/questions/1495219/how-can-i-prevent-the-backspace-key-from-navigating-back/1495435#1495435
    $(document).unbind('keydown').bind('keydown', function (event) {
        var doPrevent = false;
        if (event.keyCode === 8) {
            var d = event.srcElement || event.target;
            if ((d.tagName.toUpperCase() === 'INPUT' && (d.type.toUpperCase() === 'TEXT' || d.type.toUpperCase() === 'PASSWORD' || d.type.toUpperCase() === 'FILE'))
                || d.tagName.toUpperCase() === 'TEXTAREA') {
                doPrevent = d.readOnly || d.disabled;
            }
            else {
                doPrevent = true;
            }
        }

        if (doPrevent) {
            event.preventDefault();
        }
    });
}


//in any array with an "Id" attribute, get the matching item
function getById(list, search_name) {
    return getByField(list, search_name, 'Id');
}



//in any array with a "Name" attribute, get the matching item
function getByName(list, search_name) {
    return getByField(list, search_name, 'Name');
}

//returns single match in any fieldname
function getByField(list, search, field) {
    for (var i = 0; i < list.length; i++) {
        var pref = list[i];
        if (pref[field] == search)
            return pref;
    };

    return null;
}

//returns array with matching field value
function getMatchingByField(data, search, field) {
	//console.log("data is next...");
	//console.dir(data);
	//console.log("search is next...");
	//console.dir(search);
	
    var newlist = [];

    for (var key in data) {
		//console.log("key = " + key + ", field = " + field);
		//console.dir(key);
        if (data[key][field] == search)
		{
			//console.log("Found it...");
            newlist.push(data[key]);
		}
    }

    //console.log("did a search on " + search + " for " + field);
    //console.dir(newlist);

    return newlist;
}

//returns array with matching field value
function getMatchingByFieldArray(data, search, field) {
    var newlist = [];
    var theSearch = "";

    for (var key2 in search) {
        //console.log("key2 " + key2);
        for (var key in data) {
            //console.log("key " + key);
            //console.log("Field = " + data[key][field] + "  " + "Search = " + search[key2]);
            if ((data[key][field] !== "undefined") && (data[key][field] !== null)) {
                if (data[key][field] === search[key2]) {
                    newlist.push(data[key]);
                    var theSearch = theSearch + search[key2] + ",";
                    console.log("Searched and found " + search[key2] + " for " + field);
                }
            }
        }
    }

    //console.log("did a search on " + search + " for " + field);
    console.log("newlist display is next...");
    console.dir(newlist);   // the result is an array.
    //newList = sortLocations(sortLocations);
    //console.dir(newlist);   // the result is an array.

    return newlist;
}

//takes an array and iterates into key/value object array
//also needs keyProperty and valueProperty strings; property names of individual items in the list.
//use like:  makeObjects(project.Locations, 'Id','Label')
//returns "{keyProperty: valueProperty, ...}
function makeObjects(optionList, keyProperty, valueProperty) {
    //console.log("Inside services.js, makeObjects...");
    //console.log("optionList is next...  keyProperty = " + keyProperty + ", valueProperty = " + valueProperty);
    //console.dir(optionList);
    var objects = {};

    angular.forEach(optionList, function (item) {
        //console.log("item is next...");
        //console.dir(item);
        //console.log("item[keyProperty] = " + item[keyProperty] + ", item[valueProperty] = " + item[valueProperty]);
        objects[item[keyProperty]] = item[valueProperty];
    });

    return objects;
}

//specific for instruments because we need the serial number too
function makeInstrumentObjects(optionList) {
    console.log("Inside services.js, makeInstrumentObjects...");
    var objects = {};

    angular.forEach(optionList, function (item) {
        //console.dir(item);
        //objects[item['Id']] = item['Name'] + '(' + item['SerialNumber'] + ')';
        objects[item['Id']] = item['Name'] + '(' + item['SerialNumber'] + ')';
    });

    return objects;
}

//TODO: this will be handy in the future when we refactor the way lookupOptions works to use
// an array of objects instead of properties of a single object.
function sortObjectsByValue(list) {
    var sorted = [];

    Object.keys(list)
        .map(function (k) { return [k, list[k]]; })
        .sort(function (a, b) {
            if (a[1] < b[1]) return -1;
            if (a[1] > b[1]) return 1;
            return 0;
        })
        .forEach(function (d) {
            var nextObj = {};
            nextObj[d[0]] = d[1];
            sorted.push(nextObj);
        });

    return sorted;

}
//takes a possiblevalues field list and turns it into a list we can use in a select
//give us a unique key to reference it by for caching.
function makeObjectsFromValues(key, valuesList) {
    var objects = angular.rootScope.Cache[key]; //see if we have it squirreled away in our cache

    if (!objects) {
        objects = {};

        if (!valuesList) {
            //throw new Exception("No values provided.");
            throw ("No values provided.");
        }

        var selectOptions = "";

        try {
            selectOptions = angular.fromJson(valuesList);
        } catch (e) {
            console.log("problem parsing: " + valuesList + " for field: " + key);
        }

        //make array elements have same key/value
        if (angular.isArray(selectOptions)) {
            selectOptions.forEach(function (item) {
                objects[item] = item;
            });
        }
        else {
            for (var idx in selectOptions) {
                objects[idx] = selectOptions[idx];
            }

        }
        angular.rootScope.Cache[key] = objects; //save into our cache
    }

    return objects;
}

function order2dArrayByAlpha(a, b) {
    if (!a || !b)
        return 0;

    //console.log(a[1] + ", " + b[1]);
    var a = a[1].toLowerCase();
    var b = b[1].toLowerCase();
    //console.log(a + ", " + b);

    if (a < b)
        return -1;
    else if (a > b)
        return 1;
    else
        return 0;
}

function orderByAlpha(a, b) {
    if (!a || !b || !a.Label || !b.Label)
        return 0;

    var nameA = a.Label.toLowerCase(), nameB = b.Label.toLowerCase()
    if (nameA < nameB) //sort string ascending
        return -1
    if (nameA > nameB)
        return 1
    return 0 //default return value (no sorting)
}

function orderByAlphaName(a, b) {
    if (!a || !b || !a.Label || !b.Label)
        return 0;

    var nameA = a.Name.toLowerCase(), nameB = b.Name.toLowerCase()
    if (nameA < nameB) //sort string ascending
        return -1
    if (nameA > nameB)
        return 1
    return 0 //default return value (no sorting)
}

function orderUserByAlpha(a, b) {
    var nameA = a.Fullname.toLowerCase(), nameB = b.Fullname.toLowerCase()
    if (nameA < nameB) //sort string ascending
        return -1
    if (nameA > nameB)
        return 1
    return 0 //default return value (no sorting)
}

function orderByIndex(a, b) {
    if (!a || !b || !a.OrderIndex || !b.OrderIndex || !a.FieldRoleId || !b.FieldRoleId)
        return 0;

    if (a.OrderIndex && b.OrderIndex)
        return (a.OrderIndex - b.OrderIndex);
    else
        return (a.FieldRoleId - b.FieldRoleId);
}

//works for either regular arrays or associative arrays
function array_count(the_array) {
    var count = 0;
    var keys = (Array.isArray(the_array)) ? the_array : Object.keys(the_array);
    for (var i = 0; i < keys.length; i++) {
        count++;
    };

    return count;
}




function stringIsNumber(s) {
    return !isNaN(parseFloat(s)) && isFinite(s);
}


function stringIsTime(s) {
    if (s == null)
        return false;

    if (typeof s != 'string')
        return false;

    s = s.trim();

    //return s.match(/^\s*([01]?\d|2[0-3]):([0-5]\d)\s*$/);
    return s.match(/^([01]?\d|2[0-3]):([0-5]\d)$/);
}


function is_empty(obj) {

    // null and undefined are empty
    if (obj == null) return true;
    // Assume if it has a length property with a non-zero value
    // that that property is correct.
    if (obj.length && obj.length > 0) return false;
    if (obj.length === 0) return true;

    for (var key in obj) {
        if (hasOwnProperty.call(obj, key)) return false;
    }

    // Doesn't handle toString and toValue enumeration bugs in IE < 9

    return true;
}




function capitalizeFirstLetter(someText) {
    var firstLetter = someText.toUpperCase(someText.charAt(0));
    var remainingLetters = someText.toLowerCase(someText.substring(1));
    var newNext = firstLetter + remainingLetters;

    return newText;
}




function sortLocations(a, b) {
    //if ((a !== 'undefined') && (a !== null) && (b !== 'undefined') && (b !== null))
    if ((b !== 'undefined') && (b !== null)) {
        var l1 = a[8];
        var l2 = b[8];

        if ((l1 !== "undefined") && (l1 !== null))
            l1.toLowerCase();
        if ((l2 !== "undefined") && (l2 !== null))
            l2.toLowerCase();



        if (l1 < l2) return -1;
        if (l1 > l2) return 1;
        return 0;
    }
}

//returns array with UN-matching field value
function getUnMatchingByField(data, search, field) {
    var newlist = [];

    for (var key in data) {
        if (data[key][field] != search)
            newlist.push(data[key]);
    }

    //console.log("did a search on " + search + " for " + field);
    //console.dir(newlist);

    return newlist;
}



function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}


//give me an instrument's accuracy check and I'll give you the datagrade to display
function getDataGrade(check) {
    if (!check)
        return;

    var grade = "N/A";
    if (check.CheckMethod == 1)
        grade = check.Bath1Grade + "-" + check.Bath2Grade;
    else if (check.CheckMethod == 2)
        grade = check.Bath1Grade;

    return grade;
};

function populateMetadataDropdowns(scope, property) {
    if (property.ControlType == "select" || property.ControlType == "multiselect") {
        scope.CellOptions[property.Id + '_Options'] = makeObjectsFromValues(property.Id + "_Options", property.PossibleValues);
    }
};

function getLocationObjectIdsByType(type, locations) {
    console.log("Inisde services, getLocationObjectIdsByType...");
    //var locationsArray = getUnMatchingByField(locations,type,"LocationTypeId");
    var locationsArray = getMatchingByField(locations, type, "LocationTypeId");
    var locationObjectIdArray = [];

    angular.forEach(locationsArray, function (item, key) {
        locationObjectIdArray.push(item.SdeObjectId);
    });

    var locationObjectIds = locationObjectIdArray.join();
    console.log("found project locations (locationObjectIds): " + locationObjectIds);

    return locationObjectIds;
}

function getLocationObjectIdsByInverseType(type, locations) {
    //console.log("reloading project locations");
    //var locationsArray = getUnMatchingByField(locations,type,"LocationTypeId");
    var locationsArray = getMatchingByField(locations, type, "LocationTypeId");
    var locationObjectIdArray = [];

    angular.forEach(locationsArray, function (item, key) {
        if (item.SdeObjectId)
            locationObjectIdArray.push(item.SdeObjectId);
    });

    var locationObjectIds = locationObjectIdArray.join();
    //console.log("In services, getLocationObjectIdsByInverseType, found project locations: " + locationObjectIds);

    return locationObjectIds;
}

function getLocationObjectIdsFromLocationsWithSubprojects(locations) {
    //console.log("reloading project locations");
    //var locationsArray = getUnMatchingByField(locations,type,"LocationTypeId");
    //var locationsArray = getMatchingByField(locations,type,"LocationTypeId");
    var locationObjectIdArray = [];

    angular.forEach(locations, function (item, key) {
        if (item.SdeObjectId)
            locationObjectIdArray.push(item.SdeObjectId);
    });

    var locationObjectIds = locationObjectIdArray.join();
    console.log("In services, getLocationObjectIdsFromLocationsWithSubprojects, found project locations: " + locationObjectIds);

    return locationObjectIds;
}


function extractYearFromString(strDateTime) {
    // This function takes an incomving date as string (YYYY-MM-DDTHH:mm:SS format), and extracts the year (YYYY) from it.
    var theString = strDateTime;
    var hyphenLocation = theString.indexOf("-");
    if (hyphenLocation < 0)
        return hyphenLocation;

    theString = theString.substr(0, hyphenLocation); //(start where, how many)

    // Some fields may have double quotes on the time fields.
    // To determine if they do, we remove (via replace) the double quotes.
    // Then we compare the string length from before and after the replace action.
    var stringLength = theString.length;
    var tmpString = theString.replace("\"", "");
    var tmpStringLength = tmpString.length;
    //console.log("hyphenLocation = " + hyphenLocation + ", stringLength = " + stringLength);

    if (stringLength !== tmpStringLength) {
        //console.log("The string includes double quotes..");
        // The string includes "" (coming from a CSV file) so we must allow for them.
        theString = theString.substr(1, 4);
    }
    else {
        //console.log("The string DOES NOT have double quotes...");
        theString = theString.substr(0, 4);
    }
    return theString;
}


/* Regarding the following functions (checkInteger, checkSixFloat, checkSevenFloat),
the ..._REGEXP is also found in the directives.js file.  According to my research,
we cannot call a directive from a service.  Therefore, we had to copy the content
of the directives having ..._REGEXP and implement it/them here.
*/
// Given text that could be an integer, this function verifies that it is an integer.
function checkInteger(aNumber) {
    var INTEGER_REGEXP = /^\-?\d+$/;
    var n = "" + aNumber;
    n = n.replace(',', '.');

    if (INTEGER_REGEXP.test(n)) {
        return parseFloat(n.replace(',', '.'));
    }
    else {
        return undefined;
    }
}

function check4Digits(aNumber) {
    var INTEGER_REGEXP = /^\d{4}$/;
    var n = "" + aNumber;
    n = n.replace(',', '.');

    if (INTEGER_REGEXP.test(n)) {
        return n; //parseFloat(n.replace(',', '.'));
    }
    else {
        return undefined;
    }
}

function check2Digits(aNumber) {
    var INTEGER_REGEXP = /^\d{2}$/;
    var n = "" + aNumber;
    //n = n.replace(',', '.');

    if (INTEGER_REGEXP.test(n)) {
        return n; //parseFloat(n.replace(',', '.'));
    }
    else {
        return undefined;
    }
}

// Given a float type number, this function verifies that it has six digits before the decimal.
function checkSixFloat(aNumber) {
    // Regular Expression explanation.  Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
    // Enclosing characters:  / ... /
    // At the beginning:  ^
    // Escape character for special characters:  \  , in this case the - has special meaning
    // Match the preceding character 0 or 1 time; in other words, like -123.  The - sign in front may or may not be present:  ?
    // A sequence of 6 digits:  \d{6}
    // Start a section to be remembered:  (       and another section   (
    // Look for a decimal, but the decimal needs escaping, because the . is special:  \.
    // Close the decimal section:  )
    // Look for a digit:  \d
    // Match the preceding character 1 or more times:  +
    // Closed this section for the fractional value:  )
    // The decimal followed by 1 or more numbers may or may not be present (the whole .123 section):  ?
    // The fractional part (.123) is treated as the end of the number, and we want to see if the number has a fractional part:  $
    // Basically, the $ matches the whole () section before the ?, so the decimal section must be at the end of the number.
    // Example:  For example, /t$/ does not match the 't' in "eater", but does match it in "eat".
    var FLOAT_REGEXP6 = /^\-?\d{6}((\.)\d+)?$/;
    var n = "" + aNumber;
    n = n.replace(',', '.');

    if (FLOAT_REGEXP6.test(n)) {
        return parseFloat(n.replace(',', '.'));
    }
    else {
        return undefined;
    }
}

// Given a float type number, this function verifies that it has seven digits before the decimal.
function checkSevenFloat(aNumber) {
    var FLOAT_REGEXP7 = /^\-?\d{7}((\.)\d+)?$/;
    var n = "" + aNumber;
    n = n.replace(',', '.');

    if (FLOAT_REGEXP7.test(n)) {
        return parseFloat(n.replace(',', '.'));
    }
    else {
        return undefined;
    }
}

function checkTime(aTime) {
    var FLOAT_REGEXPTIME = /^\d{2}((\:)\d{2})$/;
    var t = "" + aTime;
    //t = t.replace(',', '.');

    if (FLOAT_REGEXPTIME.test(t)) {
        //return parseFloat(t.replace(/\D+/,""));
        return t;
    }
    else {
        return undefined;
    }
}

function checkDateTimeFormat1(strDateTime) {
    //var DateTime_REGEXP = /^\d{4}(\-)\d{2}(\-)\d{2}(\ )\d{2}(\:)\d{2}$/;
    //var dt = strDateTime

    //if (DateTime_REGEXP.test(dt))
    //{
    //	return dt;
    //}
    //else
    //{
    //	return undefined;
    //}

    var strYear = strDateTime.substr(0, 4);
    //console.log("strYear = " + strYear);
    var intYear = parseInt(strYear);
    //console.log("intYear = " + intYear);
    //console.log("typeof intYear = " + typeof intYear);

    if (typeof intYear !== 'number')
        return false;
    else
        strDateTime = strDateTime.slice(4);

    //console.log("strDateTime = " + strDateTime);

    var isLeapYear = (intYear % 100 === 0) ? (intYear % 400 === 0) : (intYear % 4 === 0);
    //console.log("isLeapYear = " + isLeapYear);

    if (strDateTime.charAt(0) !== '-')
        return false;
    else
        strDateTime = strDateTime.slice(1);

    //console.log("strDateTime = " + strDateTime);

    var strMonth = strDateTime.substr(0, 2);
    //console.log("strMonth = " + strMonth);
    var intMonth = parseInt(strMonth);

    if (typeof intMonth !== 'number')
        return false;
    else if (intMonth > 12)
        return false;
    else
        strDateTime = strDateTime.slice(2);

    //console.log("strDateTime = " + strDateTime);

    if (strDateTime.charAt(0) !== '-')
        return false;
    else
        strDateTime = strDateTime.slice(1);

    //console.log("strDateTime = " + strDateTime);

    var strDay = strDateTime.substr(0, 2);
    //console.log("strDay = " + strDay);
    var intDay = parseInt(strDay);

    if (typeof intDay !== 'number')
        return false;

    switch (intMonth) {
        case 1:
        case 3:
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            if (intDay > 31) {
                return false;
            }
            break;
        case 4:
        case 6:
        case 9:
        case 11:
            if (intDay > 30) {
                return false;
            }
            break;
        case 2:
            if ((isLeapYear) && (intDay > 29)) {
                return false;
            }
            else if (intDay > 28) {
                return false;
            }
            break;
    }
    strDateTime = strDateTime.slice(2);
    //console.log("strDateTime = " + strDateTime);

    if (strDateTime.charAt(0) !== ' ')
        return false;
    else
        strDateTime = strDateTime.slice(1);

    //console.log("strDateTime = " + strDateTime);

    var strHours = strDateTime.substr(0, 2);
    //console.log("strHours = " + strHours);
    var intHours = parseInt(strHours);

    if (typeof intHours !== 'number')
        return false;
    else if (intHours > 23)
        return false;
    else
        strDateTime = strDateTime.slice(2);

    //console.log("strDateTime = " + strDateTime);

    if (strDateTime.charAt(0) !== ':')
        return false;
    else
        strDateTime = strDateTime.slice(1);

    //console.log("strDateTime = " + strDateTime);

    var strMinutes = strDateTime.substr(0, 2);
    //console.log("strMinutes = " + strMinutes);
    var intMinutes = parseInt(strMinutes);

    if (typeof intMinutes !== 'number')
        return false;
    else if (intMinutes > 59)
        return false;

    //console.log("strDateTime = " + strDateTime);

    if (strDateTime.length === 2)
        return true;
    else
        return false;
}

//give me a date and I will convert it to a UTC date.
//  used in rules.
function dateToUTC(a_date) {
    var utc = new Date(Date.UTC(
        a_date.getFullYear(),
        a_date.getMonth(),
        a_date.getDate(),
        a_date.getHours(),
        a_date.getMinutes(),
        a_date.getSeconds()
    ));

    return utc;
}

function pad(number) {
    if (number < 10) {
        return '0' + number;
    }
    return number;
}


function toExactISOString(a_date) {
    // If an 2-digit year comes in, let's say 17 for 2017, the system will default 17 to 1917 instead.
    // Therefore, the idea was to just add 100 years to the number, to put it into the correct century.
    // TODO: better way to fix this?
    //if(a_date.getFullYear() < 1950)
    //    a_date.setFullYear(a_date.getFullYear() + 100);

    // We decided to put the onus on the user to enter the correct data.
    var s_utc = a_date.getFullYear() +
        '-' + pad(a_date.getMonth() + 1) +
        '-' + pad(a_date.getDate()) +
        'T' + pad(a_date.getHours()) +
        ':' + pad(a_date.getMinutes()) +
        ':' + pad(a_date.getSeconds()) +
        '.' + (a_date.getMilliseconds() / 1000).toFixed(3).slice(2, 5);

    return s_utc;
}

function setDateTo0000(a_date) {
    console.log("a_date = " + a_date);
    console.log("type of a_date = " + typeof a_date);
    var inDate = a_date;

    var theYear = inDate.getFullYear();
    console.log("theYear = " + theYear);
    var theMonth = inDate.getMonth();
    console.log("theMonth = " + theMonth);
    var theDay = inDate.getDate();
    console.log("theDay = " + theDay);
    var theHour = 0;
    var theMinutes = 0;
    var theSeconds = 0;
    var theMilliseconds = 0;

    var newDate = new Date(theYear, theMonth, theDay, theHour, theMinutes, theSeconds, theMilliseconds);
    console.log("newDate = " + newDate);

    return newDate;
}

function toTimeString(a_date) {
    var t = 'T' + pad(a_date.getHours()) +
        ':' + pad(a_date.getMinutes()) +
        ':' + pad(a_date.getSeconds());

    return t;

}

function getTimeFromDate(a_date) {
    var d = a_date.toString();
    //console.log("d = " + d);
    var theYear = d.substring(0, 4);
    //console.log("theYear = " + theYear);

    var separatorLocation = d.indexOf("-");
    d = d.substring(separatorLocation + 1);
    //console.log("d = " + d);
    var theMonth = d.substring(0, 2);
    //console.log("theMonth = " + theMonth);

    separatorLocation = d.indexOf("-");
    d = d.substring(separatorLocation + 1);
    //console.log("d = " + d);
    var theDay = d.substring(0, 2);
    //console.log("theDay = " + theDay);

    d = d.substring(3);
    //console.log("d = " + d);
    var theHour = d.substring(0, 2);
    //console.log("theHour = " + theHour);

    separatorLocation = d.indexOf(":");
    d = d.substring(separatorLocation + 1);
    //console.log("d = " + d);
    var theMinutes = d.substring(0, 2);
    //console.log("theMinutes = " + theMinutes);

    return theHour + ":" + theMinutes;
}

//give me a date string and offset (in ms) and I'll give you back a Date
//  with the offset applied.
//  used in rules.
function toDateOffset(str_date, int_offset) {
    //console.log(int_offset);
    //console.log(str_date);
    var orig_date = new Date(str_date);
    //console.log(orig_date.toISOString());
    var d = new Date(orig_date.getTime() + int_offset);
    //console.log(d.toISOString());

    return d;
}

//date to friendly format: "12/05/2014 04:35:44"
function formatDate(d) {
    var d_str =
        [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/') + " " +
        [("00" + d.getHours()).slice(-2), ("00" + d.getMinutes()).slice(-2), ("00" + d.getSeconds()).slice(-2)].join(':');

    return d_str;
}

// Date from 2010-08-11T12:25:00.000
// To 08/11/2010 12:25
function formatDateFromUtcToFriendly(d) {
    console.log("d = " + d);
    var theYear = d.substring(0, 4);
    console.log("theYear = " + theYear);

    var separatorLocation = d.indexOf("-");
    d = d.substring(separatorLocation + 1);
    console.log("d = " + d);
    var theMonth = d.substring(0, 2);
    console.log("theMonth = " + theMonth);

    separatorLocation = d.indexOf("-");
    d = d.substring(separatorLocation + 1);
    console.log("d = " + d);
    var theDay = d.substring(0, 2);
    console.log("theDay = " + theDay);

    d = d.substring(3);
    console.log("d = " + d);
    var theHour = d.substring(0, 2);
    console.log("theHour = " + theHour);

    separatorLocation = d.indexOf(":");
    d = d.substring(separatorLocation + 1);
    console.log("d = " + d);
    var theMinutes = d.substring(0, 2);
    console.log("theMinutes = " + theMinutes);

    separatorLocation = d.indexOf(":");
    d = d.substring(separatorLocation + 1);
    console.log("d = " + d);
    var theSeconds = d.substring(0, 2);
    console.log("theSeconds = " + theSeconds);

    separatorLocation = d.indexOf(".");
    d = d.substring(separatorLocation + 1);
    console.log("d = " + d);
    var theMilli = d.substring(0);
    console.log("theMilli = " + theMilli);

    var friendlyDate = theMonth + "/" + theDay + "/" + theYear + " " + theHour + ":" + theMinutes;

    return friendlyDate
}

// The date may come in different formats:
//		1/1/2015 8:00:00 or
//		01/01/2015 08:00:00
// Therefore, we must allow for either format and convert.
function formatDateFromFriendlyToUtc(d) {
    console.log("d = " + d);
    var separatorLocation = d.indexOf("/");
    console.log("slashLocation = " + separatorLocation);
    if (separatorLocation < 2) {
        var theMonth = d.substring(0, 1);
        console.log("theMonth = " + theMonth);
        theMonth = pad(theMonth);
        console.log("theMonth = " + theMonth);
        d = d.substring(2);
    }
    else {
        var theMonth = d.substring(0, 2);
        console.log("theMonth = " + theMonth);
        d = d.substring(3);
    }

    console.log("d = " + d);

    separatorLocation = d.indexOf("/");
    if (separatorLocation < 2) {
        var theDay = d.substring(0, 1);
        console.log("theDay = " + theDay);
        theDay = pad(theDay);
        console.log("theDay = " + theDay);
        d = d.substring(2);
    }
    else {
        var theDay = d.substring(0, 2);
        console.log("theDay = " + theDay);
        d = d.substring(3);
    }

    console.log("d = " + d);

    var theYear = d.substring(0, 4);
    //console.log("theYear = " + theYear);
    d = d.substring(5);
    console.log("d = " + d);

    separatorLocation = d.indexOf(":");
    if (separatorLocation < 2) {
        var theHour = d.substring(0, 1);
        console.log("theHour = " + theHour);
        theHour = pad(theHour);
        console.log("theHour = " + theHour);
        d = d.substring(2);
    }
    else {
        var theHour = d.substring(0, 2);
        console.log("theHour = " + theHour);
        d = d.substring(3);
    }

    console.log("d = " + d);

    var theMinutes = d.substring(0, 2);
    //console.log("theMinutes = " + theMinutes);
    d = d.substring(3);
    //console.log("d = " + d);
    d = "" + d;
    console.log("d = " + d);
    if ((d.length > 0) && (d.length < 2))
        var theSeconds = pad(d);
    else
        var theSeconds = "00";

    //console.log("theSeconds = " + theSeconds);

    var utc = theYear +
        "-" + theMonth +
        "-" + theDay +
        " " + theHour +
        ":" + theMinutes +
        ":" + theSeconds +
        "." + "000";

    console.log("utc = " + utc);
    return utc;
}

//if(somearray.contains("a"))... (case insensitive) -- can't be used with ints
if (!Array.prototype.contains) {
    Array.prototype.contains = function (searchElement) {
        searchElement = searchElement.toLowerCase();

        if (this == null)
            throw new TypeError('Array.contains: "this" is null or not defined');

        if (this.length == 0)
            return false;

        for (var i = this.length - 1; i >= 0; i--) {
            if (this[i].toLowerCase() == searchElement)
                return true;
        };

        return false;
    }
}

//if(somearray.contains(17))...  -- use with ints
if (!Array.prototype.containsInt) {
    Array.prototype.containsInt = function (searchElement) {
        if (this == null)
            throw new TypeError('Array.contains: "this" is null or not defined');

        if (this.length == 0)
            return false;

        for (let i = 0; i < this.length; i++) {
            if (this[i] === searchElement)
                return true;
        };

        return false;
    }
}

//might be a list of metadata values from project.Metadata or a list of actual properties.
function addMetadataProperties(metadata_list, all_metadata, scope, CommonService) {
    angular.forEach(metadata_list, function (i_property, key) {

        var property = i_property;
        if (i_property.MetadataPropertyId) //is it a value from project.Metadata? if so then grab the property.
            property = CommonService.getMetadataProperty(i_property.MetadataPropertyId);

        //property var is a "metadataProperty" (not a metadata value)

        //console.log("typeof property.Name = " + property.Name);
        //if (typeof property.Name !== 'undefined')
        //	console.log("property.Name = " + property.Name);
        //else
        //	console.log("property.Name = " + "'undefined'");

        //if it isn't already there, add it as an available option
        //if(!(property.Name in all_metadata))
        if ((typeof property.Name !== 'undefined') && (property.Name !== null) && !(property.Name in all_metadata)) {
            scope.metadataList[property.Name] =
                {
                    field: property.Name,
                    MetadataPropertyId: property.Id,
                    controlType: property.ControlType,
                };
        }

        //set the value no matter what if we have it.
        if (i_property.Values) {
            if (property.ControlType == "multiselect") {
                //need to see if we are dealing with old style (just a list) or if it is a bonafide object.
                var values;
                try {
                    values = angular.fromJson(i_property.Values);
                }
                catch (e)  //if we can't then it wasn't an object... use split instead.
                {
                    values = i_property.Values.split(",")
                }

                all_metadata[property.Name].Values = values;
            }
            else {
                all_metadata[property.Name].Values = i_property.Values;
            }

            if (scope.project)
                scope.project.MetadataValue[property.Id] = all_metadata[property.Name].Values; //make it easy to get values by metadata id.
        }
        else
            all_metadata[property.Name].Values = "";



        if (property.PossibleValues) {
            populateMetadataDropdowns(scope, property); //setup the dropdown
            all_metadata[property.Name].options = scope.CellOptions[property.Id + "_Options"];
        }


    });
};


define("core/common/common-functions", function(){});

//CommonService includes:
//  Location (since locations exist in projects and dataset activities)
//  User
//  List things (the common ones like: waterbodies, sources, timezones, departments)
//  MetadataProperties (projects, datasets)

common_module.factory('GetMetadataProperties', ['$resource', function($resource){
        return $resource(serviceUrl+'/api/v1/metadata/getmetadataproperties');
}]);

common_module.factory('SaveDatasetMetadata', ['$resource', function($resource){
    return $resource(serviceUrl +'/api/v1/metadata/setdatasetmetadata');
}]);

// NB: why a POST?
common_module.factory('GetMetadataFor',['$resource', function($resource){
    return $resource(serviceUrl +'/api/v1/metadata/getmetadatafor', {}, {
           save: {method: 'POST', isArray: true}
        });
}]);

common_module.factory('GetWaterBodies', ['$resource', function($resource){
        return $resource(serviceUrl+'/api/v1/list/getwaterbodies');
}]);

common_module.factory('GetSources', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/list/getsources');
}]);

common_module.factory('GetTimeZones', ['$resource', function($resource){
        return $resource(serviceUrl+'/api/v1/list/gettimezones');
}]);

common_module.factory('GetDepartments', ['$resource', function($resource){
        return $resource(serviceUrl+'/api/v1/department/getdepartments');
}]);

common_module.factory('Users', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/user/getusers', {}, {
        query: { method: 'GET', params: {}, isArray: true }
    });
}]);

common_module.factory('SaveProjectLocation', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/location/saveprojectlocation');
}]);

common_module.factory('DeleteLocationAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/location/deletelocation');
}]);

common_module.factory('GetAllPossibleDatastoreLocations', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/getdatastorelocations');
}]);

common_module.factory('GetLocationTypes', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/location/getlocationtypes');
}]);


common_module.service('CommonService', ['$q',
    'GetMetadataProperties',
    'SaveDatasetMetadata',
    'GetMetadataFor',
    'GetWaterBodies',
    'GetSources',
    'GetTimeZones',
    'GetDepartments',
    'Users',
    'DeleteLocationAction',
    'GetAllPossibleDatastoreLocations',
    'GetLocationTypes',
    'SaveProjectLocation',
    function ($q,
        GetMetadataProperties,
        SaveDatasetMetadata,
        GetMetadataFor,
        GetWaterBodies,
        GetSources,
        GetTimeZones,
        GetDepartments,
        Users,
        DeleteLocationAction,
        GetAllPossibleDatastoreLocations,
        GetLocationTypes,
        SaveProjectLocation) {

        var service = {

            datastoreId: null,
            metadataProperties: null,

            getLocations: function(id)
            {
                service.datastoreId = id;
                return GetAllPossibleDatastoreLocations.query({id: id});
            },

            getLocationTypes: function () {
                return GetLocationTypes.query();
            },
            
            getWaterBodies: function()
            {
                return GetWaterBodies.query();
            },

            getSources: function ()
            {
                return GetSources.query();
            },
            
            
			// We don't really like to set things this way...  Is there a better way?
			getDatasetLocationType: function(aDatastoreName)
			{
				//console.log("Inside services.js, getDatasetLocationType...");
				//console.log("aDatastoreName = " + aDatastoreName);
				// The settings for these are in the config.js file.
				var theLocationType = 0;
				if (aDatastoreName === "AdultWeir")
				{
					console.log("This dataset is for Adult Weir...");
					theLocationType = LOCATION_TYPE_AdultWeir;
				}
				else if (aDatastoreName === "BSample")
				{
					console.log("This dataset is for Water Temperature...");
					theLocationType = LOCATION_TYPE_BSample;
				}
				else if (aDatastoreName === "WaterTemp")
				{
					console.log("This dataset is for Water Temperature...");
					theLocationType = LOCATION_TYPE_WaterTemp;
				}
                else if (aDatastoreName === "SpawningGroundSurvey")
				{
					console.log("This dataset is for Spawning Ground Survey...");
					theLocationType = LOCATION_TYPE_SpawningGroundSurvey;
				}
				else if (aDatastoreName === "CreelSurvey")
				{
					console.log("This dataset is for Creel Survey...");
					theLocationType = LOCATION_TYPE_CreelSurvey;
				}
                else if (aDatastoreName === "Electrofishing")
                {
                    console.log("This dataset is for Electrofishing...");
                    theLocationType = LOCATION_TYPE_Electrofishing;
                }
                else if (aDatastoreName === "SnorkelFish")
                {
                    console.log("This dataset is for Snorkel Fish...");
                    theLocationType = LOCATION_TYPE_SnorkelFish;
                }
                else if (aDatastoreName === "ScrewTrap")
                {
                    console.log("This dataset is for Screw Trap...");
                    theLocationType = LOCATION_TYPE_ScrewTrap;
                }
                else if (aDatastoreName === "FishScales")
                {
                    console.log("This dataset is for Fish Scales...");
                    theLocationType = LOCATION_TYPE_FishScales;
                }
                else if (aDatastoreName === "WaterQuality")
                {
                    console.log("This dataset is for Water Quality with Labs...");
                    theLocationType = LOCATION_TYPE_WaterQuality;
                }
                else if (aDatastoreName === "StreamNet_RperS")
                {
                    console.log("This dataset is for StreamNet_RperS...");
                    theLocationType = LOCATION_TYPE_StreamNet_NOSA;
                }
                else if (aDatastoreName === "StreamNet_NOSA")
                {
                    console.log("This dataset is for StreamNet_NOSA...");
                    theLocationType = LOCATION_TYPE_StreamNet_NOSA;
                }
                else if (aDatastoreName === "StreamNet_SAR")
                {
                    console.log("This dataset is for StreamNet_SAR...");
                    theLocationType = LOCATION_TYPE_StreamNet_SAR;
                }
                else if (aDatastoreName === "ArtificialProduction")
                {
                    console.log("This dataset is for ArtificialProduction...");
                    theLocationType = LOCATION_TYPE_ArtificialProduction;
                }
                else if (aDatastoreName === "Metrics")
                {
                    console.log("This dataset is for Metrics...");
                    theLocationType = LOCATION_TYPE_Metrics;
                }
                else if (aDatastoreName === "JvRearing")
                {
                    console.log("This dataset is for JvRearing...");
                    theLocationType = LOCATION_TYPE_JvRearing;
                }
                else if (aDatastoreName === "Genetic")
                {
                    console.log("This dataset is for Genetic...");
                    theLocationType = LOCATION_TYPE_Genetic;
                }
                else if (aDatastoreName === "Benthic")
                {
                    console.log("This dataset is for Benthic...");
                    theLocationType = LOCATION_TYPE_Benthic;
                }
                else if (aDatastoreName === "Drift")
                {
                    console.log("This dataset is for Drift...");
                    theLocationType = LOCATION_TYPE_Drift;
                }

				return theLocationType;
            },
            
            deleteLocation: function(locationId)
            {
                return DeleteLocationAction.save({LocationId: locationId});
            },

            //NB: not used anywhere
            getTimeZones: function ()
            {
                return GetTimeZones.query();
            }, 

            getUsers: function () {
                return Users.query();
            },

            getDepartments: function () {
                return GetDepartments.query();
            },

            saveNewProjectLocation: function (projectId, location) {
                return SaveProjectLocation.save({ ProjectId: projectId, Location: location });
            },

            getMetadataProperty: function (propertyId) {

                if (!service.metadataProperties) {
                    this._loadMetadataProperties().$promise.then(function () {
                        return service.metadataProperties["ID_" + propertyId];
                    });
                }
                else {
                    return service.metadataProperties["ID_" + propertyId];
                }
            },

            getMetadataProperties: function (propertyTypeId) {

                var properties = $q.defer();

                if (!service.metadataProperties) {
                    this._loadMetadataProperties().$promise.then(function () {
                        properties.resolve(getMatchingByField(service.metadataProperties, propertyTypeId, 'MetadataEntityId'));
                    });
                } else {
                    properties.resolve(getMatchingByField(service.metadataProperties, propertyTypeId, 'MetadataEntityId'));
                }

                return properties;

            },

            getMetadataFor: function (projectId, typeId) {
                return GetMetadataFor.save({ ProjectId: projectId, EntityTypeId: typeId });
            },

            //returns promise so you can carry on once it loads.
            _loadMetadataProperties: function () {
                return GetMetadataProperties.query(function (data) {
                    service.metadataProperties = {};
                    angular.forEach(data, function (value, key) {
                        service.metadataProperties["ID_" + value.Id] = value;
                    });
                });

            },

            saveDatasetMetadata: function (datasetId, metadata, saveResults) {
                var payload = {
                    DatasetId: datasetId,
                    Metadata: metadata
                };

                return SaveDatasetMetadata.save(payload);

            },
        };

        service.getMetadataProperty(1); //cause our metadata properties to be loaded early.

        return service;
    }
]);

define("core/common/services/common-service", function(){});


common_module.service('Logger', [
    function () {

        var service = {
            log: function () {
                for (var i = 0; i < arguments.length; i++) {

                    //output the argument
                    //console.log("arguments is next...");
                    //console.dir(arguments[i]);

                    //traverse recursively if it is an array
                    if (arguments[i] instanceof Array) {
                        var arrayArg = arguments[i];
                        this.log.apply(this, arrayArg);
                    }

                }
            },

            debug: function () {
                this.log.apply(this, arguments);
            },

            error: function () {
                this.log.apply(this, arguments);
                var message = { Message: arguments[0], Type: "ERROR" };
            },

            audit: function () {
                var message = { Message: arguments[0], Type: "AUDIT" };
                log.debug("AUDIT Message POSTED to server: " + arguments[0]);
            },
        };

        return service;

    }]);
define("core/common/services/logger", function(){});


common_module.service('ServiceUtilities', ['Logger', '$window', '$route',
    //mod.service('ServiceUtilities',[ 'Logger', '$window', '$route', $q, // Note:  If you had the $q on this line, it causes an error.
    function (Logger, $window, $route, $q) {

        var service = {

            // ***** Date and Time functions start *****
            checkDateTimeFormat1: function (strDateTime) {
                var DateTime_REGEXP = /^\d{4}(-)\d{2}(-)\d{2}( )\d{2}(:)\d{2}$/;

                if (DateTime_REGEXP.test(strDateTime)) {
                    return true;
                }
                else {
                    return undefined;
                }
            },

            dateTimeNowToStrYYYYMMDD_HHmmSS: function () {
                // This function gets a date/time hack (now), and returns it in the format of YYYYMMDD_HHmmSS
                var dtNow = new Date();
                var intYear = dtNow.getFullYear();
                var intMonth = dtNow.getMonth();
                var strMonth = this.padNumber(intMonth);
                var intDate = dtNow.getDate();
                var strDate = this.padNumber(intDate);
                var intHours = dtNow.getHours();
                var strHours = this.padNumber(intHours);
                var intMinutes = dtNow.getMinutes();
                var strMinutes = this.padNumber(intMinutes);
                var intSeconds = dtNow.getSeconds();
                var strSeconds = this.padNumber(intSeconds);
                var strNow = intYear + strMonth + strDate + "_" + strHours + strMinutes + strSeconds;
                return strNow;
            },

            dateTimeNowToStrYYYYMMDD_HHmmSS2: function () {
                // This function takes a date/time hack (now), and returns it in the format of YYYY-MM-DD HH:mm:SS.nnn
                var dtNow = new Date();
                var intYear = dtNow.getFullYear();
                var intMonth = dtNow.getMonth();
                var strMonth = this.padNumber(intMonth);
                var intDate = dtNow.getDate();
                var strDate = this.padNumber(intDate);
                var intHours = dtNow.getHours();
                var strHours = this.padNumber(intHours);
                var intMinutes = dtNow.getMinutes();
                var strMinutes = this.padNumber(intMinutes);
                var intSeconds = dtNow.getSeconds();
                var strSeconds = this.padNumber(intSeconds);
                var intMilliseconds = dtNow.getMilliseconds();
                var strMilliseconds = this.padNumber(intMilliseconds);
                var strNow = intYear + "-" + strMonth + "-" + strDate + " " + strHours + ":" + strMinutes + ":" + strSeconds + "." + strMilliseconds;
                return strNow;
            },

            removeTSfromDateTimeString: function (strDate) {
                // This function takes a date/time string like this:  2015-08-14T00:00:00
                // and make it look like this:  2015-08-14 00:00
                console.log("strDate = " + strDate);
                strDate = strDate.replace("T", " ");
                strDate = strDate.substring(0, (strDate.length - 3));
                return strDate;
            },

            extractDateFromString: function (strDate) {
                // This function takes an incoming date in this format:  2015-08-14T00:00:00
                // and extracts/converts it to this format:  2015-08-14
                console.log("Inside extractDateFromString...");
                console.log("strDate = " + strDate);

                var newDate = strDate.substring(0, 10);
                console.log("newDate = " + newDate);

                return newDate;
            },

            extractTimeFromString: function (strDateTime) {
                // This function takes an incoming date in this format:  2015-08-14T08:00:00
                // and extracts/converts it to this format:  08:00
                console.log("Inside extractTimeFromString...");
                console.log("strDateTime = " + strDateTime);

                var newTime = strDateTime.substring(11, 16);
                console.log("newTime = " + newTime);

                return newTime;
            },

            extractTimeFromString2: function (strDateTime) {
                // This function takes an incoming date as string, in one of these formats,
				/*	(HH:MM),
				*	(HH:MM:SS),
				*	(YYYY-MM-DDTHH:mm:SS format)
				*/
                // and extracts the time (HH:MM) from the string.

                //console.log("strDateTime = " + strDateTime);
                var theString = strDateTime;
                //var theLength = theString.length;
                var colonLocation = theString.indexOf(":");

                // Some fields may have double quotes on the time fields.
                // To determine if they do, we remove (via replace) the double quotes.
                // Then we compare the string length from before and after the replace action.
                var stringLength = theString.length;
                var tmpString = theString.replace("\"", "");
                var tmpStringLength = tmpString.length;
                //console.log("colonLocation = " + colonLocation + ", stringLength = " + stringLength);

                if (stringLength !== tmpStringLength) {
                    //console.log("The string includes double quotes..");
                    // The string includes "" (coming from a CSV file) so we must allow for them.
                    if (stringLength > 5)	// "HH:MM:SS"  Note the "", or YYYY-MM-DDTHH:mm:SS
                        theString = theString.substring(colonLocation - 2, stringLength - 4);
                }
                else {
                    //console.log("The string DOES NOT have double quotes...");
                    if (stringLength > 5)	// "HH:MM:SS"  Note the "", or YYYY-MM-DDTHH:mm:SS
                        theString = theString.substring(colonLocation - 2, stringLength - 3);
                }
                return theString;
            },

            extractYearFromString: function (strDateTime) {
                // This function takes an incomving date as string (YYYY-MM-DDTHH:mm:SS format), and extracts the year (YYYY) from it.
                var theString = strDateTime;
                var hyphenLocation = theString.indexOf("-");
                if (hyphenLocation < 0)
                    return hyphenLocation;

                theString = theString.substr(0, hyphenLocation); //(start where, how many)

                // Some fields may have double quotes on the time fields.
                // To determine if they do, we remove (via replace) the double quotes.
                // Then we compare the string length from before and after the replace action.
                var stringLength = theString.length;
                var tmpString = theString.replace("\"", "");
                var tmpStringLength = tmpString.length;
                //console.log("hyphenLocation = " + hyphenLocation + ", stringLength = " + stringLength);

                if (stringLength !== tmpStringLength) {
                    //console.log("The string includes double quotes..");
                    // The string includes "" (coming from a CSV file) so we must allow for them.
                    theString = theString.substr(1, 4);
                }
                else {
                    //console.log("The string DOES NOT have double quotes...");
                    theString = theString.substr(0, 4);
                }
                return theString;
            },

            padNumber: function (number) {
                // This function takes a number (< 10) as string, and adds a leading zero to it.
                // Changes this:  "2"
                // To this:  "02"
                console.log("Inside padNumber...");

                if (number < 10) {
                    return '0' + number;
                }
                return number;
            },


            toExactISOString: function (a_date) {
                // This function takes a date as DateTime, and converts is to a string
                // that looks like this:  2017-02-04T08:05:04.123Z
                console.log("Inside toExactISOString...");
                console.log("a_date is next...");
                console.dir(a_date);

                if (a_date.getFullYear() < 1950)
                    a_date.setFullYear(a_date.getFullYear() + 100);

                var s_utc = a_date.getFullYear() +
                    '-' + this.padNumber(a_date.getMonth() + 1) +
                    '-' + this.padNumber(a_date.getDate()) +
                    'T' + this.padNumber(a_date.getHours()) +
                    ':' + this.padNumber(a_date.getMinutes()) +
                    ':' + this.padNumber(a_date.getSeconds()) +
                    // '.' + (a_date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); // original line
                    '.' + (a_date.getMilliseconds() / 1000).toFixed(3).slice(2, 5) +
                    'Z';

                return s_utc;
            },

            formatDate: function (d) {
                //date to friendly format: "3/05/2014 04:35:44"

                var d_str =
                    [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/') + " " +
                    [("00" + d.getHours()).slice(-2), ("00" + d.getMinutes()).slice(-2), ("00" + d.getSeconds()).slice(-2)].join(':');

                return d_str;
            },

            formatDate2: function (d) {
                //date to friendly format: "03/05/2014 04:35:44"  Note the 2-digit month.

                var d_str =
                    [this.padNumber(d.getMonth() + 1), this.padNumber(d.getDate()), d.getFullYear()].join('/') + " " +
                    [("00" + d.getHours()).slice(-2), ("00" + d.getMinutes()).slice(-2), ("00" + d.getSeconds()).slice(-2)].join(':');

                return d_str;
            },

            convertHhMmToMinutes: function (aTime) {
                // This function expects a time duration like this:  01:15 (an hour and 15 minutes), and converts it to minutes.
                console.log("typeof aTime = " + typeof aTime);


                var numberMinutes = 0;

                var theHours = parseInt(aTime.substr(0, 2)); // (start at, get this many)
                //console.log("theHours = " + theHours);
                var theMinutes = parseInt(aTime.substr(3, 2));
                //console.log("theMinutes = " + theMinutes);
                numberMinutes = theHours * 60 + theMinutes;
                //console.log("TotalTimeFished (in min) = " + TotalTimeFished);
                return numberMinutes;
            },

            convertMinutesToHhMm: function (numberMinutes) {
                // This function expects a number of minutes, and converts it to a time duration (as a string) formatted like this:  hh:mm

                var NumMinutes = numberMinutes;
                //console.log("NumMinutes = " + NumMinutes);
                var theHours = parseInt(NumMinutes / 60, 10);
                //console.log("theHours = " + theHours);
                var theMinutes = NumMinutes - (theHours * 60);
                //console.log("theMinutes = " + theMinutes);
                var strTime = "";

                if (theHours < 10)
                    var strHours = "0" + theHours;
                else
                    var strHours = "" + theHours;

                if (theMinutes < 10)
                    var strMinutes = "0" + theMinutes;
                else
                    var strMinutes = "" + theMinutes;

                strTime = strHours + ":" + strMinutes;

                return strTime;
            },
            // ***** Date and Time functions end *****

            // ***** Number-related (how many digits, etc.) functions start *****
            // Given a float type number, this function verifies that it has six digits before the decimal.
            checkSixFloat: function (aNumber) {
                // Regular Expression explanation.  Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
                // Enclosing characters:  / ... /
                // At the beginning:  ^
                // Escape character for special characters:  \  , in this case the - has special meaning
                // Match the preceding character 0 or 1 time; in other words, like -123.  The - sign in front may or may not be present:  ?
                // A sequence of 6 digits:  \d{6}
                // Start a section to be remembered:  (       and another section   (
                // Look for a decimal, but the decimal needs escaping, because the . is special:  \.
                // Close the decimal section:  )
                // Look for a digit:  \d
                // Match the preceding character 1 or more times:  +
                // Closed this section for the fractional value:  )
                // The decimal followed by 1 or more numbers may or may not be present (the whole .123 section):  ?
                // The fractional part (.123) is treated as the end of the number, and we want to see if the number has a fractional part:  $
                // Basically, the $ matches the whole () section before the ?, so the decimal section must be at the end of the number.
                // Example:  For example, /t$/ does not match the 't' in "eater", but does match it in "eat".
                var FLOAT_REGEXP6 = /^\-?\d{6}((\.)\d+)?$/;
                var n = "" + aNumber;
                n = n.replace(',', '.');

                if (FLOAT_REGEXP6.test(n)) {
                    return parseFloat(n.replace(',', '.'));
                }
                else {
                    return undefined;
                }
            },
            // Given text that could be an integer, this function verifies that it is an integer.
            checkInteger: function (aNumber) {
                var INTEGER_REGEXP = /^\-?\d+$/;
                var n = "" + aNumber;
                n = n.replace(',', '.');

                if (INTEGER_REGEXP.test(n)) {
                    return parseFloat(n.replace(',', '.'));
                }
                else {
                    return undefined;
                }
            },

            check4Digits: function (aNumber) {
                console.log("Inside check4Digits...")
                var INTEGER_REGEXP = /^\d{4}$/;
                var n = "" + aNumber;
                n = n.replace(',', '.');

                if (INTEGER_REGEXP.test(n)) {
                    return parseFloat(n.replace(',', '.'));
                }
                else {
                    return undefined;
                }
            },


            // ***** Number-related (how many digits, etc.) functions end *****

            setFileName: function (aFileName, scope) {
                scope.FieldSheetFile = aFileName;
            }
        }

        return service;

    }]);

define("core/common/services/service-utilities", function(){});


//from : http://stackoverflow.com/questions/17547399/angularjs-arcgis
common_module.service('wish', function () {

    // it's not require... it's a wish?
    var wish = {};

    function _loadDependencies(deps, next) {
        var reqArr = {}; var keysArr = {};

        angular.forEach(Array.keys, function (key, val) {
            keysArr.push(key);
            reqArr.push(val);
        });

        // use the dojo require (required by arcgis + dojo) && save refs
        // to required obs
        try {
            require(reqArr, function () {
                var args = arguments;

                angular.forEach(keysArr, function (name, idx) {
                    wish[name] = args[idx];
                });

                next();
            });

        } catch (e) {
            console.dir(e);

        }
    }

    return {
        loadDependencies: function (deps, next) {
            _loadDependencies(deps, next);
        },

        get: function () {
            return wish;
        }
    };
});
define("core/common/services/wish", function(){});

var modal_quick_add_accuracycheck = ['$scope', '$modalInstance', 'ProjectService',
    function ($scope, $modalInstance, ProjectService){

    $scope.ac_row = {};

    $scope.save = function(){
      
      var promise = ProjectService.saveInstrumentAccuracyCheck($scope.viewInstrument.Id, $scope.ac_row);
      promise.$promise.then(function(){
          $scope.reloadProject();  
          $modalInstance.dismiss();  
      });
    };

    $scope.cancel = function(){
      $modalInstance.dismiss();
    };

  }
];
define("core/common/components/modals/modal-quick-add-accuracycheck", function(){});


//kb 11/1 - I don't see this anywhere used in the system - it isn't being loaded by our module

var modal_quick_add_characteristic = ['$scope','$modalInstance', 'DatasetService','DatastoreService',
  function($scope,  $modalInstance, DatasetService, DatastoreService){

    $scope.char_row = {};

    $scope.save = function(){
      
      var promise = DatastoreService.saveCharacteristic($scope.viewLabCharacteristic.Id, $scope.char_row);
      promise.$promise.then(function(){
          $scope.reloadProject();  
          $modalInstance.dismiss();  
      });
    };

    $scope.cancel = function(){
      $modalInstance.dismiss();
    };

  }
];

define("core/common/components/modals/modal-quick-add-characteristic", function(){});


//modal that handles both saving and editing locations on a project
var modal_add_location = ['$scope', '$modalInstance', 'DatasetService', 'ProjectService', 'CommonService',
    function ($scope, $modalInstance, DatasetService, ProjectService, CommonService) {

        //if $scope.selectedLocation is set then we are EDITING, otherwise CREATING
        if ($scope.selectedLocation) {
            $scope.headingMessage = "Editing existing location";
            $scope.row = $scope.selectedLocation;
        }
        else {
            $scope.headingMessage = "Create new location for a project"; //default mode =
            $scope.row = angular.copy(DEFAULT_LOCATION_PROJECTION_ZONE);
        }


        $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
        $scope.locationTypes = CommonService.getLocationTypes();
        $scope.waterbodies = CommonService.getWaterBodies();

        $scope.save = function () {
            console.log("Inside ModalAddLocationCtrl, save...");

            if (!$scope.row.GPSEasting || !$scope.row.GPSNorthing) {
                $scope.locationErrorMessage = "Please enter an Easting and a Northing for this point.";
                return;
            }

            // Clean-up, just in case we had an error and then the user supplied the necessary info.
            $scope.locationErrorMessage = undefined;

            //OK -- if we are saving a NEW location then start off by adding the point to the featurelayer
            if (!$scope.row.Id) {
                console.log("$scope.row.Id = " + $scope.row.Id);
                //OK so lets move their point to the Easting/Northing they entered.

                //if they had already clicked somewhere, remove that point.
                if ($scope.newGraphic)
                    $scope.map.graphics.remove($scope.newGraphic);

                $scope.map.reposition(); //this is important or else we end up with our map points off somehow.

                //nad83 zone 11...  might have to have this as alist somehwere...
                var inSR = new esri.SpatialReference({ wkt: NAD83_SPATIAL_REFERENCE });
                var outSR = new esri.SpatialReference({ wkid: 102100 })
                var geometryService = new esri.tasks.GeometryService(GEOMETRY_SERVICE_URL);
                $scope.newPoint = new esri.geometry.Point($scope.row.GPSEasting, $scope.row.GPSNorthing, inSR);

                //convert spatial reference
                var PrjParams = new esri.tasks.ProjectParameters();

                PrjParams.geometries = [$scope.newPoint];
                // PrjParams.outSR is not set yet, so we must set it also.
                PrjParams.outSR = outSR;

                //do the projection (conversion)
                geometryService.project(PrjParams, function (outputpoint) {

                    $scope.newPoint = new esri.geometry.Point(outputpoint[0], outSR);
                    $scope.newGraphic = new esri.Graphic($scope.newPoint, new esri.symbol.SimpleMarkerSymbol());
                    $scope.map.graphics.add($scope.newGraphic);

                    //add the graphic to the map and get SDE_ObjectId
                    $scope.map.locationLayer.applyEdits([$scope.newGraphic], null, null).then(function (results) {
                        if (results[0].success) {
                            $scope.row.SdeObjectId = results[0].objectId;
                            console.log("Created a new point! " + $scope.row.SdeObjectId);

                            var promise = CommonService.saveNewProjectLocation($scope.project.Id, $scope.row);
                            promise.$promise.then(function () {
                                console.log("done and success!");
                                //reload the project -- this will cause the locations and locationlayer to be reloaded!  wow!  go AngularJS!  :)
                                $scope.refreshProjectLocations();
                                $modalInstance.dismiss();
                            });

                        }
                        else {
                            $scope.locationErrorMessage = "There was a problem saving that location.";
                        }

                    });
                });
            }
            else //updating an existing...
            {
                //need to remove these info objects for saving
                var save_row = angular.copy($scope.row);
                save_row.LocationType = undefined;
                save_row.WaterBody = undefined;

                var promise = CommonService.saveNewProjectLocation($scope.project.Id, save_row);
                promise.$promise.then(function () {
                    //success
                    $scope.reloadActivities();
                    $modalInstance.dismiss();
                },
                    function () {
                        //failed
                        $scope.locationErrorMessage = "There was a problem saving that location.";
                    });
            }

            $scope.map.infoWindow.hide();
            if ($scope.newGraphic)
                $scope.map.graphics.remove($scope.newGraphic);


        };

        $scope.cancel = function () {
            $modalInstance.dismiss();
        };

    }
];


define("core/common/components/modals/modal-add-location", function(){});

var modal_create_instrument = ['$scope', '$modalInstance', 'DatasetService', 'ProjectService', 'CommonService',
    function ($scope, $modalInstance, DatasetService, ProjectService, CommonService){

    $scope.header_message = "Create new instrument";

    $scope.instrument_row = {
        StatusId: 0,
        OwningDepartmentId: 1,
    };

    if($scope.viewInstrument)
    {
        $scope.header_message = "Edit instrument: " + $scope.viewInstrument.Name;
        $scope.instrument_row = $scope.viewInstrument;
    }


    $scope.InstrumentTypes = ProjectService.getInstrumentTypes();
    $scope.Departments = CommonService.getDepartments();
    $scope.RawProjects = ProjectService.getProjects();


    $scope.save = function(){
		console.log("Inside ModalCreateInstrumentCtrl, save...");
		if (!$scope.instrument_row.InstrumentTypeId)
		{
			alert("You must select an Instrument Type!");
			return;
		}
		
        var saveRow = angular.copy($scope.instrument_row);
		console.log("saveRow is next...");
		console.dir(saveRow);
		
        saveRow.AccuracyChecks = undefined;
        //saveRow.InstrumentType = undefined; // We have an InstrumentTypeId, but no InstrumentType.  Why is this here?
        saveRow.OwningDepartment = undefined;
        var promise = ProjectService.saveInstrument($scope.project.Id, saveRow);
        promise.$promise.then(function(){
            //$scope.reloadProject();
            $scope.postSaveInstrumentUpdateGrid(promise);
            $modalInstance.dismiss();
        });
    };

    $scope.cancel = function(){
        $modalInstance.dismiss();
    };
  }
];


define("core/common/components/modals/modal-create-instrument", function(){});

//modal to bulk update RowQAStatus
var modal_bulk_rowqa_change = ['$scope', '$modalInstance',

    function ($scope, $modalInstance) {

        $scope.newRowQAStatus = {};

        $scope.save = function () {
            $scope.setSelectedBulkQAStatus($scope.newRowQAStatus.Id);
            $modalInstance.dismiss();
        };

        $scope.cancel = function () {
            $modalInstance.dismiss();
        };

    }
];

define("core/common/components/modals/modal-bulk-rowqa-change", function(){});

var modal_save_success = ['$scope','$modalInstance',
  function($scope,  $modalInstance){

    $scope.header_message = "Save Successful!";

    $scope.cancel = function(){
        $modalInstance.dismiss();
    };
  }
];

define("core/common/components/modals/modal-save-success", function(){});

var modal_create_fisherman = ['$scope', '$modalInstance','ProjectService','ServiceUtilities','ConvertStatus',
    function ($scope, $modalInstance, ProjectService,  ServiceUtilities, ConvertStatus){

    $scope.header_message = "Create new fisherman";
	$scope.saveResults = null;

    $scope.fisherman_row = {
        StatusId: 0,
    };
	
	console.log("$scope in ModalCreateFishermanCtrl is next...");
	//console.dir($scope);	

    if($scope.viewFisherman)
    {
        $scope.header_message = "Edit fisherman: " + $scope.viewFisherman.FullName;
		console.log("viewfisherman...");
		console.dir($scope.viewFisherman);
        $scope.fisherman_row = $scope.viewFisherman;
		
		var strInDate = $scope.viewFisherman.DateAdded;
		console.log("strInDate = " + strInDate);
		$scope.viewFisherman.DateAdded = ServiceUtilities.extractDateFromString(strInDate);
		console.log("$scope.viewFisherman.DateAdded = " + $scope.viewFisherman.DateAdded);

		$scope.fisherman_row.DateAdded = $scope.viewFisherman.DateAdded;
		console.log($scope.fisherman_row.DateAdded);
		console.log("$scope.fisherman_row.DateAdded = " + $scope.fisherman_row.DateAdded);
		
		$scope.fisherman_row.StatusId = $scope.viewFisherman.StatusId;
		$scope.viewFisherman.Status = ConvertStatus.convertStatus($scope.viewFisherman.StatusId);
		console.log("$scope.viewFisherman.Status = " + $scope.viewFisherman.Status);

		$scope.fisherman_row.OkToCallId = $scope.viewFisherman.OkToCallId;
		$scope.viewFisherman.OkToCall = ConvertStatus.convertOkToCall($scope.viewFisherman.OkToCallId);
        console.log("$scope.viewFisherman.OkToCall = " + $scope.viewFisherman.OkToCall);

        if ((typeof $scope.fisherman_row.Aka !== 'undefined') && ($scope.fisherman_row.Aka !== null))
            $scope.fisherman_row.FullName = $scope.fisherman_row.FirstName + " (" + $scope.fisherman_row.Aka + ") " + $scope.fisherman_row.LastName;
        else
            $scope.fisherman_row.FullName = $scope.fisherman_row.FirstName + " " + $scope.fisherman_row.LastName;	
    }
	else
	{
		$scope.fisherman_row['DateAdded'] = new Date();			
	}	

    $scope.updateFullName = function () {
        if ((typeof $scope.fisherman_row.Aka !== 'undefined') && ($scope.fisherman_row.Aka !== null) && ($scope.fisherman_row.Aka !== ''))
            $scope.fisherman_row.FullName = $scope.fisherman_row.FirstName + " (" + $scope.fisherman_row.Aka + ") " + $scope.fisherman_row.LastName;
        else
            $scope.fisherman_row.FullName = $scope.fisherman_row.FirstName + " " + $scope.fisherman_row.LastName;	
    }
	
    $scope.saveFisherman = function(){
        console.log("$scope in saveFisherman is next...");
		//console.dir($scope);
		
		$scope.fishermanSave = [];		

		if ((!$scope.viewFisherman) || ($scope.viewFisherman === null))
		{
			// First check if the fisherman is already in the database -- no duplicates allowed.
			angular.forEach($scope.fishermenList, function(fishermanInfo, index){
				// Verify whether or not the Aka is present
				if (typeof $scope.fisherman_row.Aka !== 'undefined')
				{
					// AKA is present, so we need to check the First, AKA, and Last name.
					if (($scope.fisherman_row.FirstName === fishermanInfo.FirstName) && ($scope.fisherman_row.Aka === fishermanInfo.Aka) && ($scope.fisherman_row.LastName === fishermanInfo.LastName))
						$scope.fishermanSave.error = true;
				}
				else
				{	
					// AKA is missing, so we only check the First and Last names.
					if (($scope.fisherman_row.FirstName === fishermanInfo.FirstName) && ($scope.fisherman_row.LastName === fishermanInfo.LastName))
						$scope.fishermanSave.error = true;
				}
			});
			
			var strInDate = ServiceUtilities.toExactISOString($scope.fisherman_row.DateAdded);
			console.log("strInDate = " + strInDate);
			$scope.fisherman_row.DateAdded = ServiceUtilities.extractDateFromString(strInDate);
			console.log($scope.fisherman_row.DateAdded);			
		}
		
		if (!$scope.fishermanSave.error)
		{		
			if ((typeof $scope.fisherman_row.Aka !== 'undefined') && ($scope.fisherman_row.Aka !== null))
				$scope.fisherman_row.FullName = $scope.fisherman_row.FirstName + " (" + $scope.fisherman_row.Aka + ") " + $scope.fisherman_row.LastName;
			else
				$scope.fisherman_row.FullName = $scope.fisherman_row.FirstName + " " + $scope.fisherman_row.LastName;			

			//var strInDate = $scope.fisherman_row.DateAdded;
			//console.log("strInDate = " + strInDate);
			//$scope.fisherman_row.DateAdded = ServiceUtilities.extractDateFromString(strInDate);
			//console.log($scope.fisherman_row.DateAdded);
			
			$scope.fisherman_row.Status = ConvertStatus.convertStatus($scope.fisherman_row.StatusId);			
			console.log("$scope.fisherman_row.Status = " + $scope.fisherman_row.Status);			

			$scope.fisherman_row.OkToCall = ConvertStatus.convertOkToCall($scope.fisherman_row.OkToCallId);			
			console.log("$scope.fisherman_row.OkToCall = " + $scope.fisherman_row.OkToCall);
			
			//$scope.fisherman_row.Id = 0;
			console.log("$scope.fisherman_row is next...");
			console.dir($scope.fisherman_row);
			var saveRow = angular.copy($scope.fisherman_row);
			console.log("saveRow is next...");
			console.dir(saveRow);
			$scope.saveResults = {};
			console.log("$scope.saveResults is next...");
			console.dir($scope.saveResults);
			
			var promise = ProjectService.saveFisherman($scope.project.Id, saveRow, $scope.saveResults);
			if (typeof promise !== 'undefined')
			{
				console.log("promise is next...");
				console.dir(promise);
				promise.$promise.then(function(){
					//$scope.reloadProject();
					//location.reload(true);
                    $scope.postSaveFishermanUpdateGrid(promise);
					$modalInstance.dismiss();
				});	
			}
		}
    };

    $scope.cancel = function(){
        $modalInstance.dismiss();
    };
  }
];
define("core/common/components/modals/modal-create-fisherman", function(){});


var modal_link_field = ['$scope', '$modalInstance', '$rootScope',
    function ($scope, $modalInstance, $rootScope) {
        console.log("Inside modals-controller.js, LinkModalCtrl...");
        //console.log("$scope is next...");
        //console.dir($scope);

        if (typeof $scope.onRow !== 'undefined')
            $scope.onRow.errors = [];

        $scope.foundDuplicate = false;
        //note: link selected for upload are managed by onLinkSelect from parent scope, in the following place:
        // ModalAddHabitatItemCtrl

        $scope.makeNewLink = function () { $scope.newLink = { Name: "", Link: "" } };
        $scope.makeNewLink();

        console.log("$scope.link_field.DbColumnName = " + $scope.link_field.DbColumnName);
        //$scope.currentLinks = $scope.link_field[$scope.link_field.DbColumnName];
        $scope.currentLinks = $scope.link_row[$scope.link_field.DbColumnName];
        console.log("$scope.currentLinks (before check) is next...");
        console.dir($scope.currentLinks);
        if ($scope.currentLinks)
            $scope.currentLinks = angular.fromJson($scope.currentLinks);
        else
            $scope.currentLinks = [];

        console.log("$scope.currentLinks (after check) is next...");
        console.dir($scope.currentLinks);

        $rootScope.currentLinks = angular.copy($scope.currentLinks);
        console.log("$rootScope.currentLinks is next...");
        console.dir($rootScope.currentLinks);

        $scope.removeLink = function (link) {
            console.log("Inside FileModalCtrl, removeLink...");
            console.log("link is next...");
            console.dir(link);

            console.log("$rootScope.currentLinks is next...");
            console.dir($rootScope.currentLinks);
            angular.forEach($scope.currentLinks, function (existing_link, key) {
                if (existing_link.Link == link.Link)
                    $scope.currentLinks.splice(key, 1);
            });
            angular.forEach($rootScope.currentLinks, function (existing_link, key) {
                console.log("existing_link.Link = " + existing_link.Link + ", link.Link = " + link.Link);
                var existing_linkLength = existing_link.Link.length;
                var linkLength = link.Link.length;
                console.log("existing_linkLength = " + existing_linkLength + ", linkLength = " + linkLength);

                console.log("Check: " + existing_link.Name.indexOf(link.Link));
                //if(existing_link.Name == link.Link)
                if (existing_linkLength === linkLength) {
                    console.log("Lengths match...");
                    if (existing_link.Link.indexOf(link.Link) !== -1) {
                        console.log("Link matches...");
                        if ($scope.subprojectType === "Habitat") {
                            console.log("Habitat file...");
                            //kb - 11/1: the following function doesn't actually exist anywhere...
                            //DatastoreService.deleteHabitatItemLink($scope.projectId, $scope.subprojectId, $scope.hi_row.Id, file);
                        }

                        $scope.currentLinks.splice(key, 1);
                    }
                }
            });
        }

        $scope.addLink = function () {
            $scope.currentLinks.push($scope.newLink);
            console.log("$scope.currentLinks is next...");
            console.dir($scope.currentLinks);
            $scope.makeNewLink();
        }

        $scope.save = function () {
            console.log("Inside modals-controller, LinkModalCtrl, save...");
            console.log("Adding link name(s) to the list.");
            //console.log("$scope is next...");
            //console.dir($scope);
            $rootScope.viewSubproject = $scope.viewSubproject; // Add this to the $rootScope, so that the filters can see it.
            //var errors = [];

            //copy back to the actual row field
            $scope.link_row[$scope.link_field.DbColumnName] = angular.toJson($scope.currentLinks);
            console.log("$scope.link_row is next...");
            console.dir($scope.link_row);
            $modalInstance.dismiss();
        };

        $scope.cancel = function () {
            $modalInstance.dismiss();
        };

    }
];

define("core/common/components/modals/modal-link-field", function(){});


var modal_verify_action = ['$scope', '$rootScope', '$modalInstance', 'SubprojectService',
    function ($scope, $rootScope, $modalInstance, SubprojectService){
	console.log("Inside ModalVerifyActionCtrl...");
	//console.log("$scope is next...");
	//console.dir($scope);
	console.log("$scope.verifyAction = " + $scope.verifyAction);
	console.log("$scope.verifyingCaller = " + $scope.verifyingCaller);
	
	console.log("Calling program = " + $scope.verifyingCaller);
	if ($scope.verifyingCaller === "CrppSubproject")
	{
		console.log("CrppSubproject is calling...");
		$scope.header_title = $scope.verifyAction + " this CRPP project: " + $scope.viewSubproject.ProjectName;
		$scope.header_message = $scope.verifyAction.toLowerCase() + " this CRPP project: " + $scope.viewSubproject.ProjectName;
	}
	else if ($scope.verifyingCaller === "CorrespondenceEvent")
	{
		console.log("CorrespondenceEvent is calling...");
		var intTLocation = $scope.ce_row.CorrespondenceDate.indexOf("T");
		var strCeDate = $scope.ce_row.CorrespondenceDate.substring(0, intTLocation);
		$scope.header_title = $scope.verifyAction + " this Correspondence Event: " + strCeDate;
		//$scope.header_message = $scope.verifyAction + " this Correspondence Event: " + $scope.ce_row.CorrespondenceDate + ", by this Staff member: " + $scope.ce_row.StaffMember;
		$scope.header_message = $scope.verifyAction + " this Correspondence Event: " + strCeDate + ", by this Staff member: " + $scope.ce_row.StaffMember;
	}
	else if ($scope.verifyingCaller === "HabSubproject")
	{
		console.log("HabSubproject is calling...");
		$scope.header_title = $scope.verifyAction + " this Habitat project: " + $scope.viewSubproject.ProjectName;
		$scope.header_message = $scope.verifyAction.toLowerCase() + " this Habitat project: " + $scope.viewSubproject.ProjectName;
	}

    //$scope.header_message = $scope.verifyAction.toLowerCase() + " this CRPP project";


        /* kb - commenting out to see if we can do without now
	var subprojectListwatcher = $scope.$watch('subprojectList.length', function(){
		console.log("Inside ModalVerifyActionCtrl watch, subprojectList");

		if ($scope.subprojectList.length === 0)
		{
			console.log("No subprojects found yet...");
			return;
		}
		
		console.log("$scope.subprojectList is next..");
		console.dir($scope.subprojectList);		
	
		$scope.subprojectOptions = $rootScope.subprojectOptions = makeObjects($scope.subprojectList, 'Id','ProjectName');
		
		// Debug output ... wanted to verify the contents of scope.subprojectOptions
		angular.forEach($scope.subprojectOptions, function(subproject){
			console.dir(subproject);
		});
		
		console.log("$scope.subprojectOptions is next...");
		console.dir($scope.subprojectOptions);
		////console.dir(scope);
		//subprojectListwatcher(); // Turn off this watcher.
		//$modalInstance.dismiss();
	});
	*/


    $scope.cancel = function(){
        $modalInstance.dismiss();
		$scope.verifyAction = 'undefined';
    };
	
	$scope.continueAction = function(){
		console.log("Inside continueAction...");
		//console.log("$scope is next...");
		//console.dir($scope);
		//$scope.continueAction = true;
		//$scope.verifyAction = 'undefined';
		
		console.log("$scope.verifyAction = " + $scope.verifyAction);
		
		var promise = null;
		if (($scope.verifyAction === "Delete") && ($scope.verifyingCaller === "CrppSubproject"))
		{
			console.log("$scope.project.Id = " + $scope.project.Id + ", $scope.viewSubproject.Id = " + $scope.viewSubproject.Id);
            promise = SubprojectService.removeSubproject($scope.project.Id, $scope.viewSubproject.Id);
            promise.$promise.then(function () {
                $scope.postRemoveSubprojectUpdateGrid();
                $modalInstance.dismiss();
            });
		}
		else if (($scope.verifyAction === "Delete") && ($scope.verifyingCaller === "CorrespondenceEvent"))
        {
            //maybe there is no case of this...

			console.log("$scope.project.Id = " + $scope.project.Id + ", $scope.viewSubproject.Id = " + $scope.viewSubproject.Id + ", $scope.ce_RowId = " + $scope.ce_rowId);
			//var promise = SubprojectService.removeCorrespondenceEvent($scope.project.Id, $scope.viewSubproject.Id, $scope.ce_rowId);
            promise = SubprojectService.removeCorrespondenceEvent($scope.project.Id, $scope.viewSubproject.Id, $scope.ce_rowId);
            promise.$promise.then(function () {
                //$scope.postRemoveSubprojectUpdateGrid();
                $modalInstance.dismiss();
            });
		}
		else if (($scope.verifyAction === "Delete") && ($scope.verifyingCaller === "HabSubproject"))
		{
			console.log("$scope.projectId = " + $scope.project.Id + ", $scope.viewSubproject.Id = " + $scope.viewSubproject.Id);
			var theSdeObjectId = 0;
			var keepGoing = true;
			
			// We will handle deleting the point from SDE at a later time.  For now, just delete the location from CDMS.
			// First, get the SdeObjectId from the location associated to this subproject.
			/*angular.forEach($scope.project.Locations, function(aLocation){
				if ((keepGoing) && (aLocation.Id === $scope.viewSubproject.LocationId))
				{
					console.log("Found the location...");
					theSdeObjectId = aLocation.SdeObjectId;
					keepGoing = false;
				}
			});
			
			// Next, call the service and delete the point from the SDE.
			var applyEditsParams = {
				"id": 0,
				"adds":[{}],
				"updates":[{}],
				"deletes":[{theSdeObjectId}],
			};
			/*var applyEditsParams = {
				"id": 0,
				"adds": null,
				"updates": null,
				"deletes": theSdeObjectId
			};
			var applyEditsParams = theSdeObjectId;
			
			
			$scope.map.locationLayer.applyEdits(null,null,applyEditsParams).then(function(results){
				console.log("Inside $scope.map.locationLayer.applyEdits");
				console.log("results is next...");
				console.dir(results);
				if(results[0].success)
				{
					console.log("Deleted point! "+ theSdeObjectId);
				}
			});
			*/
			
			//promise = SubprojectService.removeHabSubproject(parseInt($scope.projectId), $scope.viewSubproject.Id);
			//promise = SubprojectService.removeHabSubproject(parseInt($scope.projectId), $scope.viewSubproject.Id, theSdeObjectId);
            promise = SubprojectService.removeHabSubproject(parseInt($scope.projectId), $scope.viewSubproject.Id, $scope.viewSubproject.LocationId);
            promise.$promise.then(function () {
                $scope.postRemoveHabitatSubprojectUpdateGrid();
                $modalInstance.dismiss();
            });
		}
		
    		
	}
    }];


define("core/common/components/modals/modal-verify-action", function(){});

var modal_invalid_operation =  ['$scope', '$modalInstance',  
    function ($scope, $modalInstance) {

        $scope.header_title = $scope.invalidOperationTitle;
        $scope.header_message = $scope.invalidOperationMessage;

        $scope.cancel = function () {
            $modalInstance.dismiss();
        };
    }
];

define("core/common/components/modals/modal-invalid-operation", function(){});

//handles managing file controltypes
var modal_file_add = ['$scope','$modalInstance', 'DatasetService','ServiceUtilities','$rootScope',
    function($scope, $modalInstance, DatasetService, ServiceUtilities, $rootScope){
		// This controller is for the Dataset Activity / Subproject File modal.
		console.log("Inside modals-controller.js, FileAddModalCtrl");
		//console.log("$scope is next...");
		//console.dir($scope);
		
		if (typeof $scope.onRow !== 'undefined')
			$scope.onRow.errors = [];
		
		$scope.foundDuplicate = false;
    	//note: files selected for upload are managed by onFileSelect from parent scope, in one of the following places: 
		// ModalAddCorrespondenceEventCtrl, ModalAddHabitatItemCtrl

    	//file_field and file_row
    	//console.dir($scope.file_row);
    	//console.dir($scope.file_field);
    	//console.log("Files!");
    	//console.dir($scope.filesToUpload);		
		console.log("$scope.dataset.Files is next...");
		console.dir($scope.dataset.Files);

		console.log("$scope.file_field.DbColumnName = " + $scope.file_field.DbColumnName);
    	$scope.currentFiles = $scope.file_row[$scope.file_field.DbColumnName];
    	if($scope.currentFiles)
    		$scope.currentFiles = angular.fromJson($scope.currentFiles);
    	else
    		$scope.currentFiles = [];

		console.log("$scope.currentFiles (after check) is next...");
    	console.dir($scope.currentFiles);
		
		$rootScope.currentFiles = angular.copy($scope.currentFiles);
		console.log("$rootScope.currentFiles is next...");
		console.dir($rootScope.currentFiles);

        $scope.save = function(){
			console.log("Inside modals-controller, FileAddModalCtrl, save...");
			console.log("Adding file name(s) to the list.");
			//console.log("$scope is next...");
			//console.dir($scope);
			$rootScope.viewSubproject = $scope.viewSubproject; // Add this to the $rootScope, so that the filters can see it.
			var errors = [];
			
			console.log("$scope.filesToUpload is next...");
			console.dir($scope.filesToUpload);
			//add any newly scheduled to upload files to the list for display
        	angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(incoming_file, key){
        		incoming_file.Name = incoming_file.name; //copy this value!
				console.log("incoming_file.Name = " + incoming_file.Name);
				
        		$scope.currentFiles.push(incoming_file);
				
				$scope.foundDuplicate = false;
				console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
				console.log("$scope.viewSubproject is next...");
				console.dir($scope.viewSubproject);
				//if (($scope.DatastoreTablePrefix === "CrppContracts") && ($scope.viewSubproject))
				if (($scope.viewSubproject) && ( ($scope.DatastoreTablePrefix === "CrppContracts") || ($scope.DatastoreTablePrefix === "Metrics")) )
				{
					console.log("Need to check subprojects for duplicate document...");
					for (var p = 0; p < $scope.viewSubproject.Files.length; p++)
					{
						if (incoming_file.Name.length <= $scope.viewSubproject.Files[p].Name.length)
						{
							if ($scope.viewSubproject.Files[p].Name.indexOf(incoming_file.Name) > -1)
							{
								$scope.foundDuplicate = true;
								console.log(incoming_file.Name + " already exists in the subproject file list.");
								errors.push(incoming_file.Name + " already exists in list of subproject documents.");
							}
						}
					}
				}
				else if ($scope.dataset)
				{
					console.log("Need to check dataset-level files for duplicate document...");
					for (var p = 0; p < $scope.dataset.Files.length; p++)
					{
						if (incoming_file.Name.length <= $scope.dataset.Files[p].Name.length)
						{
							if ($scope.dataset.Files[p].Name.indexOf(incoming_file.Name) > -1)
							{
								$scope.foundDuplicate = true;
								console.log(incoming_file.Name + " already exists in the dataset file list.");
								errors.push(incoming_file.Name + " already exists in list of dataset documents.\n");
							}
						}
					}
				}
				else
				{
					console.log("Need to check project-level files for duplicate document...");
					for (var p = 0; p < $scope.project.Files.length; p++)
					{
						if (incoming_file.Name.length <= $scope.project.Files[p].Name.length)
						{
							if ($scope.project.Files[p].Name.indexOf(incoming_file.Name) > -1)
							{
								$scope.foundDuplicate = true;
								console.log(incoming_file.Name + " already exists in the project file list.");
								errors.push(incoming_file.Name + " already exists in list of project documents.\n");
							}
						}
					}
				}
        	});
			
			console.log("$scope.foundDuplicate = " + $scope.foundDuplicate);
			if (!$scope.foundDuplicate)
			{
				//copy back to the actual row field
				console.log("$scope.file_field.DbColumnName = " + $scope.file_field.DbColumnName);
				$scope.file_row[$scope.file_field.DbColumnName] = angular.toJson($scope.currentFiles);
				console.log("$scope.file_row is next...");
				console.dir($scope.file_row);
				
				// Notes are in order...
				// When first building this, I was working with Harvest, and it had files in "FieldSheetFile".
				// Later, when working with ScrewTrap, I discovered that it had files in FileTitle.
				// So, we put whatever the flavor into FieldSheetFile.
				if ($scope.DatastoreTablePrefix === "Harvest")
					$rootScope.FieldSheetFile = $scope.FieldSheetFile = $scope.file_row.FieldSheetFile;
				else if ($scope.DatastoreTablePrefix === "ScrewTrap")
					$rootScope.FieldSheetFile = $scope.FieldSheetFile = $scope.file_row.FileTitle;
				else if ($scope.DatastoreTablePrefix === "CrppContracts")
					$rootScope.FieldSheetFile = $scope.FieldSheetFile = $scope.file_row.DocumentLink;
				else
					$rootScope.FieldSheetFile = $scope.FieldSheetFile = $scope.file_row.FieldSheetFile;	
				
				$rootScope.currentFiles = $scope.currentFiles;
			}
			else
			{
				$scope.filesToUpload[$scope.file_field.DbColumnName] = undefined;
			}
			
			//console.log("$scope is next...");
			//console.dir($scope);
			console.log("$rootScope is next...");
			console.dir($rootScope);
            $modalInstance.dismiss();
			
			// Inform the user immediately, if there are duplicate files.
			if ($scope.foundDuplicate)
				alert(errors);
			
			//ServiceUtilities.setFileName($scope.file_row.FieldSheetFile, $scope)
        };


        $scope.uploadWaypoints = function(){
            var formData = new FormData();

            angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(incoming_file, key){
                formData.append('file', incoming_file);
            });

            //TODO: we probably want to refactor this into our usual pattern (factory + service)
            $.ajax({
                url: serviceUrl + '/api/v1/file/handlewaypoints',
                type : 'POST',
                data : formData,
                processData: false,  // tell jQuery not to process the data
                contentType: false,  // tell jQuery not to set contentType
                success : function(data) {
                    
                    var waypoints = eval("(" + data + ")");
                    var size = 0, key;

                    for (key in waypoints)
                        size++;

                    alert(size + " waypoints loaded");

                    $scope.__proto__.waypoints = waypoints;     // This is probably not right, but not sure how else to get the outer scope object
                },
                error: function(jqXHR, error, errorThrown) {
                    if(jqXHR.status&&jqXHR.status == 400) {
                        alert(jqXHR.responseText + "\n\n" + "Waypoints not loaded!");
                    } else{
                        alert("Error uploading file!");
                    }
                }
            });

            $modalInstance.dismiss();
        };

        $scope.cancel = function(){
            $modalInstance.dismiss();
        };

    }
];
define("core/common/components/file/modal-file-add", function(){});


//handles managing file controltypes
var modal_file_delete = ['$scope', '$modalInstance', 'DatasetService','SubprojectService','$rootScope',
    function ($scope, $modalInstance, DatasetService, SubprojectService, $rootScope) {

		// This controller is for the Dataset Activity / Subproject File modal.
		console.log("Inside modals-controller.js, FileDeleteModalCtrl");
		//console.log("$scope is next...");
		//console.dir($scope);
		
		$scope.verifyBeforeDelete = false;
		$scope.readyToClose = false;
		
		if (typeof $scope.onRow !== 'undefined')
			$scope.onRow.errors = [];
		
		$scope.foundDuplicate = false;
    	//note: files selected for upload are managed by onFileSelect from parent scope, in one of the following places: 
		// ModalAddCorrespondenceEventCtrl, ModalAddHabitatItemCtrl

    	//file_field and file_row
    	//console.dir($scope.file_row);
    	//console.dir($scope.file_field);
    	//console.log("Files!");
    	//console.dir($scope.filesToUpload);
		console.log("$scope.dataset.Files is next...");
		console.dir($scope.dataset.Files);

		console.log("$scope.file_field.DbColumnName = " + $scope.file_field.DbColumnName);
    	$scope.currentFiles = $scope.file_row[$scope.file_field.DbColumnName];
    	if($scope.currentFiles)
    		$scope.currentFiles = angular.fromJson($scope.currentFiles);
    	else
    		$scope.currentFiles = [];

		console.log("$scope.currentFiles (after check) is next...");
    	console.dir($scope.currentFiles);
		
		$rootScope.currentFiles = angular.copy($scope.currentFiles);
		console.log("$rootScope.currentFiles is next...");
		console.dir($rootScope.currentFiles);
	
		$scope.verifyDelete = function()
		{
			console.log("Inside FileDeleteModalCtrl, verifyDelete...");
			$scope.verifyBeforeDelete = true;
			console.dir($scope.currentFiles);
			$rootScope.currentFiles = $scope.currentFiles;
			//console.dir($scope);
		}
	
    	$scope.removeFiles = function()
    	{
			console.log("Inside FileDeleteModalCtrl, removeFiles...");
			//console.log("$scope is next...");
			console.log($scope);
			
			var tmpFiles = [];
			
			console.log("$rootScope.currentFiles is next...");
			console.dir($rootScope.currentFiles);
			
			angular.forEach($rootScope.currentFiles, function(existing_file, key){
				if (existing_file.DeleteThisFile)
				{
					// We will need the file name later, so make a note of it.
					tmpFiles.push(existing_file);
					
					// First, we delete the file from the backend (server drive and database)
					// *** Backend start
					console.log("existing_file.Name = " + existing_file.Name);

					if ($scope.DatastoreTablePrefix === "CrppContracts")
					{
						console.log("CRPP file...");
						SubprojectService.deleteCorresEventFile($scope.projectId, $scope.subprojectId, $scope.ce_row.Id, file);
					}
					//else if ($scope.project.Id === 1223)
					//else if ($scope.project.Id === HAB_PROJECTID)
					//else if (ProjectService.getProjectType($scope.project.Id) === "Habitat")
					else if ($scope.DatastoreTablePrefix === "Metrics")
					{
						console.log("Habitat file...");
						// Subproject or Habitat Item-related?
						if ((typeof $scope.hi_row !== 'undefined') && ($scope.hi_row.Id !== null))
						{
							console.log("We want to delete a Habitat Item file...");
							SubprojectService.deleteHabitatItemFile($scope.projectId, $scope.subprojectId, $scope.hi_row.Id, file);
						}
						else
						{
							console.log("We want to delete a Subproject file...");
							SubprojectService.deleteHabSubprojectFile($scope.projectId, $scope.subprojectId, file);								
						}
					}
					//else if ($scope.subprojectId)
					//{
						
					//}
					else if ($scope.datasetId)
					{
						console.log("Dataset file...");
						DatasetService.deleteDatasetFile($scope.projectId, $scope.datasetId, existing_file);
					}
					// *** Backend end					

					//$rootScope.currentFiles.splice(key,1);
					//console.log("Deleted file from currentFiles");
					//$scope.currentFiles = $rootScope.currentFiles;
					//console.dir($rootScope.currentFiles);
					// *** Now let's delete it from the front end.
					var foundFile = false;
					while (!foundFile)
					{
						// First check the dataset and project files.
						if ($scope.datasetId)
						{
							console.log("We have a dataset file...");
							angular.forEach($scope.dataset.Files, function(dFile){
								//console.log("dFile.Id = " + dFile.Id + ", file.Id = " + file.Id);
								if (!foundFile)
								{
									//console.log("We have not found the file yet...");
									//console.log("typeof file.Id = " + typeof file.Id);
									if ((typeof existing_file.Id === 'undefined') || (existing_file.Id === null))
									{
										//console.log("Either file file.Id is undefined, or the file.Id is null.");
										console.log("dFile.Name = " + dFile.Name + ", existing_file.Name = " + existing_file.Name);
										if (dFile.Name === existing_file.Name)
										{
											//console.log("Found file in $scope.dataset.Files...");
											foundFile = true;
											$scope.dataset.Files.splice(dFile.Id, 1);
											console.log("Removed file from $scope.dataset.Files...");
											
											angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
												//console.dir(to_upload_file);
												//console.dir(file);
												//console.dir(key);

												if(to_upload_file.Name === dFile.Name){
													$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
													console.log("Removed file from $scope.filesToUpload...");
												}
											});
										}
									}
									else if (dFile.Id === existing_file.Id)
									{
										//console.log("Found file in $scope.project.Files...");
										foundFile = true;
										$scope.dataset.Files.splice(dFile.Id, 1);
										console.log("Removed file from $scope.dataset.Files...");
										
										angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
											//console.dir(to_upload_file);
											//console.dir(file);
											//console.dir(key);

											if(to_upload_file.Name === dFile.Name){
												$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
												console.log("Removed file from $scope.filesToUpload...");
											}
										});
									}
								}
							});
							if (foundFile)
							{
								console.log("Found file in $scope.dataset.Files and removed it...");
							}
							else
							{
								console.log("Did not find file in $scope.dataset.Files...");
								foundFile = true; // Set to true, to exit the loop.
							}
						}
						else
						{
							console.log("We have a project file...");
							angular.forEach($scope.project.Files, function(pFile){
								//console.log("pFile.Id = " + pFile.Id + ", file.Id = " + file.Id);
								if (!foundFile)
								{
									//console.log("We have not found the file yet...");
									//console.log("typeof file.Id = " + typeof file.Id);
									if ((typeof existing_file.Id === 'undefined') || (existing_file.Id === null))
									{
										//console.log("Either file file.Id is undefined, or the file.Id is null.");
										//console.log("pFile.Name = " + pFile.Name + ", file.Name = " + file.Name);
										if (pFile.Name === existing_file.Name)
										{
											//console.log("Found file in $scope.project.Files...");
											foundFile = true;
											$scope.project.Files.splice(pFile.Id, 1);
											console.log("Removed file from $scope.project.Files...");
											
											angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
												//console.dir(to_upload_file);
												//console.dir(file);
												//console.dir(key);

												if(to_upload_file.Name === pFile.Name){
													$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
													console.log("Removed file from $scope.filesToUpload...");
												}
											});
										}
									}
									else if (pFile.Id === existing_file.Id)
									{
										//console.log("Found file in $scope.project.Files...");
										foundFile = true;
										$scope.project.Files.splice(pFile.Id, 1);
										console.log("Removed file from $scope.project.Files...");
										
										angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
											//console.dir(to_upload_file);
											//console.dir(file);
											//console.dir(key);

											if(to_upload_file.Name === pFile.Name){
												$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
												console.log("Removed file from $scope.filesToUpload...");
											}
										});
									}
								}
							});
							if (foundFile)
								console.log("Found file in $scope.project.Files and removed it.");
							else
							{
								console.log("Did not find file in $scope.project.Files...");
								foundFile = true; // Set to true, to exit the loop.
							}
						}
					}
					
					// Now adjust the items that keep track of files.
					// currentFiles
					$rootScope.currentFiles.splice(key,1);
					console.log("Deleted file from currentFiles");
					$scope.currentFiles = $rootScope.currentFiles;
					console.dir($rootScope.currentFiles);
					
					// Remove the file name from the actual field.
					angular.forEach($scope.file_row, function(field, key){
						console.log("field = " + field + ", key = " + key);
						if (key === $scope.file_field.DbColumnName)
						{
							console.log("Found the field...");
							
							// The field is a JSON option, so extract the files into an array.
							var theFiles = JSON.parse(field);
							console.dir(theFiles);
							angular.forEach(theFiles, function(item, key){
								console.log("item = " + item + ", key = " + key);
								console.dir(item);
								if (item.Name === existing_file.Name)
								{
									console.log("Names match...");
									theFiles.splice(key, 1);
								}
							});
							$scope.file_row[$scope.file_field.DbColumnName] = JSON.stringify(theFiles);//theFiles.toString();
							console.log("$scope.file_row[$scope.file_field.DbColumnName] = " + $scope.file_row[$scope.file_field.DbColumnName]);
						}

					});
					console.log("$scope.file_row is next...");
					console.dir($scope.file_row);
				}
			});
	    	

			angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
				//console.dir(to_upload_file);
				//console.dir(key);
				angular.forEach(tmpFiles, function(tmpFile){
					if(to_upload_file.Name == tmpFile.Name)
					{
						$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
					}
				});

			});
//	    	console.dir($scope.filesToUpload);

			//console.dir($scope);
            //$modalInstance.dismiss();
			$scope.readyToClose = true;
    	}

        $scope.cancel = function(){
            $modalInstance.dismiss();
        };

    }
];

define("core/common/components/file/modal-file-delete", function(){});


//handles managing file controltypes
var modal_files = ['$scope', '$modalInstance', 'DatasetService','SubprojectService','$rootScope',
    function ($scope, $modalInstance, DatasetService, SubprojectService, $rootScope){
		// This controller is for the Dataset Activity / Subproject File modal.
		console.log("Inside modals-controller.js, FileModalCtrl");
		//console.log("$scope is next...");
		//console.dir($scope);
		
		if (typeof $scope.onRow !== 'undefined')
			$scope.onRow.errors = [];
		
		$scope.foundDuplicate = false;
    	//note: files selected for upload are managed by onFileSelect from parent scope, in one of the following places: 
		// ModalAddCorrespondenceEventCtrl, ModalAddHabitatItemCtrl

    	//file_field and file_row
    	//console.dir($scope.file_row);
    	//console.dir($scope.file_field);
    	//console.log("Files!");
    	//console.dir($scope.filesToUpload);

		console.log("$scope.file_field.DbColumnName = " + $scope.file_field.DbColumnName);
    	$scope.currentFiles = $scope.file_row[$scope.file_field.DbColumnName];
    	if($scope.currentFiles)
    		$scope.currentFiles = angular.fromJson($scope.currentFiles);
    	else
    		$scope.currentFiles = [];

		console.log("$scope.currentFiles (after check) is next...");
    	console.dir($scope.currentFiles);
		
		$rootScope.currentFiles = angular.copy($scope.currentFiles);
		console.log("$rootScope.currentFiles is next...");
		console.dir($rootScope.currentFiles);

    	$scope.removeFile = function(file)
    	{
			console.log("Inside FileModalCtrl, removeFile...");
			console.log("file is next...");
			console.dir(file);
			console.log($scope);
			
			console.log("$rootScope.currentFiles is next...");
			console.dir($rootScope.currentFiles);
			
			angular.forEach($rootScope.currentFiles, function(existing_file, key){
				console.log("existing_file.Name = " + existing_file.Name + ", file.Name = " + file.Name);
				var existing_fileLength = existing_file.Name.length;
				var fileNameLength = file.Name.length;
				console.log("existing_fileLength = " + existing_fileLength + ", fileNameLength = " + fileNameLength);
				
				console.log("Check: " + existing_file.Name.indexOf(file.Name));
				//if(existing_file.Name == file.Name)
				if (existing_fileLength === fileNameLength)
				{
					console.log("Lengths match...");
					if (existing_file.Name.indexOf(file.Name) !== -1)
					{
						console.log("Name matches...");
						if ($scope.DatastoreTablePrefix === "CrppContracts")
						{
							console.log("CRPP file...");
							SubprojectService.deleteCorresEventFile($scope.projectId, $scope.subprojectId, $scope.ce_row.Id, file);
						}
						//else if ($scope.project.Id === 1223)
						//else if ($scope.project.Id === HAB_PROJECTID)
						//else if (ProjectService.getProjectType($scope.project.Id) === "Habitat")
						else if ($scope.DatastoreTablePrefix === "Metrics")
						{
							console.log("Habitat file...");
							// Subproject or Habitat Item-related?
							if ((typeof $scope.hi_row !== 'undefined') && ($scope.hi_row.Id !== null))
							{
								console.log("We want to delete a Habitat Item file...");
								SubprojectService.deleteHabitatItemFile($scope.projectId, $scope.subprojectId, $scope.hi_row.Id, file);
							}
							else
							{
								console.log("We want to delete a Subproject file...");
								SubprojectService.deleteHabSubprojectFile($scope.projectId, $scope.subprojectId, file);								
							}							
						}
						else if ($scope.datasetId)
						{
							console.log("Dataset file...");
							DatasetService.deleteDatasetFile($scope.projectId, $scope.datasetId, file);
						}

						$rootScope.currentFiles.splice(key,1);
						console.log("Deleted file from currentFiles");
						$scope.currentFiles = $rootScope.currentFiles;
						console.dir($rootScope.currentFiles);
						
						var foundFile = false;
						while (!foundFile)
						{
							if ($scope.datasetId)
							{
								angular.forEach($scope.dataset.Files, function(dFile){
									//console.log("dFile.Id = " + dFile.Id + ", file.Id = " + file.Id);
									if (!foundFile)
									{
										//console.log("We have not found the file yet...");
										//console.log("typeof file.Id = " + typeof file.Id);
										if ((typeof file.Id === 'undefined') || (file.Id === null))
										{
											//console.log("Either file file.Id is undefined, or the file.Id is null.");
											//console.log("dFile.Name = " + dFile.Name + ", file.Name = " + file.Name);
											if (dFile.Name === file.Name)
											{
												//console.log("Found file in $scope.dataset.Files...");
												foundFile = true;
												$scope.dataset.Files.splice(dFile.Id, 1);
												console.log("Removed file from $scope.dataset.Files...");
												
												angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
													//console.dir(to_upload_file);
													//console.dir(file);
													//console.dir(key);

													if(to_upload_file.Name === dFile.Name){
														$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
														console.log("Removed file from $scope.filesToUpload...");
													}
												});
											}
										}
										else if (dFile.Id === file.Id)
										{
											//console.log("Found file in $scope.project.Files...");
											foundFile = true;
											$scope.dataset.Files.splice(dFile.Id, 1);
											console.log("Removed file from $scope.dataset.Files...");
											
											angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
												//console.dir(to_upload_file);
												//console.dir(file);
												//console.dir(key);

												if(to_upload_file.Name === dFile.Name){
													$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
													console.log("Removed file from $scope.filesToUpload...");
												}
											});
										}
									}
								});
								if (foundFile)
									console.log("Found file in $scope.dataset.Files and removed it.");
								else
								{
									console.log("Did not find file in $scope.dataset.Files...");
									foundFile = true; // Set to true, to exit the loop.
								}
							}
							else
							{
								angular.forEach($scope.project.Files, function(pFile){
									//console.log("pFile.Id = " + pFile.Id + ", file.Id = " + file.Id);
									if (!foundFile)
									{
										//console.log("We have not found the file yet...");
										//console.log("typeof file.Id = " + typeof file.Id);
										if ((typeof file.Id === 'undefined') || (file.Id === null))
										{
											//console.log("Either file file.Id is undefined, or the file.Id is null.");
											//console.log("pFile.Name = " + pFile.Name + ", file.Name = " + file.Name);
											if (pFile.Name === file.Name)
											{
												//console.log("Found file in $scope.project.Files...");
												foundFile = true;
												$scope.project.Files.splice(pFile.Id, 1);
												console.log("Removed file from $scope.project.Files...");
												
												angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
													//console.dir(to_upload_file);
													//console.dir(file);
													//console.dir(key);

													if(to_upload_file.Name === pFile.Name){
														$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
														console.log("Removed file from $scope.filesToUpload...");
													}
												});
											}
										}
										else if (pFile.Id === file.Id)
										{
											//console.log("Found file in $scope.project.Files...");
											foundFile = true;
											$scope.project.Files.splice(pFile.Id, 1);
											console.log("Removed file from $scope.project.Files...");
											
											angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
												//console.dir(to_upload_file);
												//console.dir(file);
												//console.dir(key);

												if(to_upload_file.Name === pFile.Name){
													$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
													console.log("Removed file from $scope.filesToUpload...");
												}
											});
										}
									}
								});
								if (foundFile)
									console.log("Found file in $scope.project.Files and removed it.");
								else
								{
									console.log("Did not find file in $scope.project.Files...");
									foundFile = true; // Set to true, to exit the loop.
								}
							}
						}
					}
				}
			});
	    	
	    	if(!file.Id) //removing a not-yet-saved file, so remove it from the tobeuploaded list
	    	{
	    		//also look in the previously scheduled for upload files...
	    		try{
	    		angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(to_upload_file, key){
	    			//console.dir(to_upload_file);
	    			//console.dir(file);
	    			//console.dir(key);

	    			if(to_upload_file.Name == file.Name){
	    				$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);
	    			}
	    		});
	    		}
	    		catch(e)
	    		{
	    			console.dir(e);
	    		}
	    	}

//	    	console.dir($scope.filesToUpload);
    	}

        $scope.save = function(){
			console.log("Inside modals-controller, FileModalCtrl, save...");
			console.log("Adding file name(s) to the list.");
			//console.log("$scope is next...");
			//console.dir($scope);
			$rootScope.viewSubproject = $scope.viewSubproject; // Add this to the $rootScope, so that the filters can see it.
			var errors = [];
			
			console.log("$scope.filesToUpload is next...");
			console.dir($scope.filesToUpload);
			//add any newly scheduled to upload files to the list for display
        	angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(incoming_file, key){
        		incoming_file.Name = incoming_file.name; //copy this value!
				console.log("incoming_file.Name = " + incoming_file.Name);
        		$scope.currentFiles.push(incoming_file);
				
				$scope.foundDuplicate = false;
				console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
				console.log("$scope.dataset is next..");
				console.dir($scope.dataset);
				console.log("$scope.viewSubproject is next...");
				console.dir($scope.viewSubproject);
				//if (($scope.DatastoreTablePrefix === "CrppContracts") && ($scope.viewSubproject))
				if (($scope.viewSubproject) && ( ($scope.DatastoreTablePrefix === "CrppContracts") || ($scope.DatastoreTablePrefix === "Metrics")) )
				{
					console.log("Need to check subprojects for duplicate document...");
					// If a subproject is has no files yet, Files will not be defined.
					if ($scope.viewSubproject.Files)
					{
						for (var p = 0; p < $scope.viewSubproject.Files.length; p++)
						{
							if (incoming_file.Name.length <= $scope.viewSubproject.Files[p].Name.length)
							{
								if ($scope.viewSubproject.Files[p].Name.indexOf(incoming_file.Name) > -1)
								{
									$scope.foundDuplicate = true;
									console.log(incoming_file.Name + " already exists in the subproject file list.");
									errors.push(incoming_file.Name + " already exists in list of subproject documents.");
								}
							}
						}
					}
				}
				else if ($scope.dataset)
				{
					console.log("Need to check dataset-level files for duplicate document...");
					if ($scope.dataset.Files)
					{
						console.log("$scope.dataset.Files is next...");
						console.dir($scope.dataset.Files);
						for (var p = 0; p < $scope.dataset.Files.length; p++)
						{
							if (incoming_file.Name.length <= $scope.dataset.Files[p].Name.length)
							{
								if ($scope.dataset.Files[p].Name.indexOf(incoming_file.Name) > -1)
								{
									$scope.foundDuplicate = true;
									console.log(incoming_file.Name + " already exists in the dataset file list.");
									errors.push(incoming_file.Name + " already exists in list of dataset documents.\n");
								}
							}
						}
					}
				}
				else
				{
					console.log("Need to check project-level files for duplicate document...");
					if ($scope.project.Files)
					{
						for (var p = 0; p < $scope.project.Files.length; p++)
						{
							if (incoming_file.Name.length <= $scope.project.Files[p].Name.length)
							{
								if ($scope.project.Files[p].Name.indexOf(incoming_file.Name) > -1)
								{
									$scope.foundDuplicate = true;
									console.log(incoming_file.Name + " already exists in the project file list.");
									errors.push(incoming_file.Name + " already exists in list of project documents.\n");
								}
							}
						}
					}
				}
        	});
			
			console.log("$scope.foundDuplicate = " + $scope.foundDuplicate);			
			if (!$scope.foundDuplicate)
			{
				//copy back to the actual row field
				console.log("$scope.file_field.DbColumnName = " + $scope.file_field.DbColumnName);
				$scope.file_row[$scope.file_field.DbColumnName] = angular.toJson($scope.currentFiles);
				console.log("$scope.file_row is next...");
				console.dir($scope.file_row);
				
				// Notes are in order...
				// When first building this, I was working with Harvest, and it had files in "FieldSheetFile".
				// Later, when working with ScrewTrap, I discovered that it had files in FileTitle.
				// So, we put whatever the flavor into FieldSheetFile.
				if ($scope.DatastoreTablePrefix === "Harvest")
					$rootScope.FieldSheetFile = $scope.FieldSheetFile = $scope.file_row.FieldSheetFile;
				else if ($scope.DatastoreTablePrefix === "ScrewTrap")
					$rootScope.FieldSheetFile = $scope.FieldSheetFile = $scope.file_row.FileTitle;
				else
				{
					console.log("Neither Harvest nor ScrewTrap");
					$rootScope.FieldSheetFile = $scope.FieldSheetFile = $scope.file_row.FieldSheetFile;
				}
				
				$rootScope.currentFiles = $scope.currentFiles;
			}
			else
			{
				$scope.filesToUpload[$scope.file_field.DbColumnName] = undefined;
			}
			
			//console.dir($scope);
            $modalInstance.dismiss();
			
			// Inform the user immediately, if there are duplicate files.
			if ($scope.foundDuplicate)
				alert(errors);
			
			//ServiceUtilities.setFileName($scope.file_row.FieldSheetFile, $scope)
        };


        $scope.uploadWaypoints = function(){
            var formData = new FormData();

            angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName], function(incoming_file, key){
                formData.append('file', incoming_file);
            });

            $.ajax({
                url: serviceUrl + '/api/v1/file/handlewaypoints',
                type : 'POST',
                data : formData,
                processData: false,  // tell jQuery not to process the data
                contentType: false,  // tell jQuery not to set contentType
                success : function(data) {
                    
                    var waypoints = eval("(" + data + ")");
                    var size = 0, key;

                    for (key in waypoints)
                        size++;

                    alert(size + " waypoints loaded");

                    $scope.__proto__.waypoints = waypoints;     // This is probably not right, but not sure how else to get the outer scope object
                },
                error: function(jqXHR, error, errorThrown) {
                    if(jqXHR.status&&jqXHR.status == 400) {
                        alert(jqXHR.responseText + "\n\n" + "Waypoints not loaded!");
                    } else{
                        alert("Error uploading file!");
                    }
                }
            });

            $modalInstance.dismiss();
        };

        $scope.cancel = function(){
            $modalInstance.dismiss();
        };

    }
];
define("core/common/components/file/modal-files", function(){});

var modal_exportfile = ['$scope','DatasetService','$modalInstance','$window',
	function($scope, DatasetService,$modalInstance, $window) {

		//$scope.alerts 
		$scope.Export = { Filename: "Export.csv" };

		$scope.ok = function(){
			$scope.downloadQuery = $scope.buildQuery(); 
			$scope.downloadQuery.criteria.Filename = $scope.Export.Filename;
			DatasetService.exportActivities($scope.downloadQuery);

			//$modalInstance.dismiss();
		};

		$scope.cancel = function(){
			$modalInstance.dismiss();
		};
	}
];
define("core/common/components/file/modal-exportfile", function(){});

/**
 * Checklist-model
 * AngularJS directive for list of checkboxes
 */

common_module
.directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
  // contains
  function contains(arr, item) {
    if (angular.isArray(arr)) {
      for (var i = 0; i < arr.length; i++) {
        if (angular.equals(arr[i], item)) {
          return true;
        }
      }
    }
    return false;
  }

  // add
  function add(arr, item) {
    arr = angular.isArray(arr) ? arr : [];
    for (var i = 0; i < arr.length; i++) {
      if (angular.equals(arr[i], item)) {
        return arr;
      }
    }    
    arr.push(item);
    return arr;
  }  

  // remove
  function remove(arr, item) {
    if (angular.isArray(arr)) {
      for (var i = 0; i < arr.length; i++) {
        if (angular.equals(arr[i], item)) {
          arr.splice(i, 1);
          break;
        }
      }
    }
    return arr;
  }

  // http://stackoverflow.com/a/19228302/1458162
  function postLinkFn(scope, elem, attrs) {
    // compile with `ng-model` pointing to `checked`
    $compile(elem)(scope);

    // getter / setter for original model
    var getter = $parse(attrs.checklistModel);
    var setter = getter.assign;

    // value added to list
    var value = $parse(attrs.checklistValue)(scope.$parent);

    // watch UI checked change
    scope.$watch('checked', function(newValue, oldValue) {
      if (newValue === oldValue) { 
        return;
      } 
      var current = getter(scope.$parent);
      if (newValue === true) {
        setter(scope.$parent, add(current, value));
      } else {
        setter(scope.$parent, remove(current, value));
      }
    });

    // watch original model change
    scope.$parent.$watch(attrs.checklistModel, function(newArr, oldArr) {
      scope.checked = contains(newArr, value);
    }, true);
  }

  return {
    restrict: 'A',
    priority: 1000,
    terminal: true,
    scope: true,
    compile: function(tElement, tAttrs) {
      if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {
        throw 'checklist-model should be applied to `input[type="checkbox"]`.';
      }

      if (!tAttrs.checklistValue) {
        throw 'You should provide `checklist-value`.';
      }

      // exclude recursion
      tElement.removeAttr('checklist-model');
      
      // local scope var storing individual checkbox model
      tElement.attr('ng-model', 'checked');

      return postLinkFn;
    }
  };
}]);
define("core/common/directives/checklists", function(){});

//analytics configuration
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
ga('create', ANALYTICS_CODE, 'auto');
ga('send', 'pageview');

define('app',[
  'angular'
], function(angular){


  // define our app as an angular module - with our dependencies and our routes
  var app = angular.module("app",
	 [
	  'ngRoute',						// assets/js/angular/angular-route.js (referred to in js/controllers/login-controller.js)
      'ngGrid',							// assets/js/ng-grid-2.0.7.ken.js (referred to in js/main.js)
      
      //these are the cdms modules
      'CommonModule',
      'ProjectModule',
      'DatasetModule',
      'AdminModule',
      'PreferencesModule',

      'angularFileUpload',				
      'angularCharts',					

      //these are ctuir specific
      'CrppModule',
      'AppraisalsModule',
      'HabitatModule',

	  ])
	    .config(['$routeProvider', function($routeProvider) {

            $routeProvider.when('/projects', { templateUrl: 'app/core/projects/components/project-list/templates/projects.html', controller: 'project-list-ctrl'});
            $routeProvider.when('/projects/:Id', { templateUrl: 'app/core/projects/components/project-detail/templates/project-datasets.html', controller: 'project-detail-ctrl'});

            $routeProvider.when('/mydata', { templateUrl: 'app/core/preferences/components/dataset-preferences/templates/mydatasets.html', controller: 'MyDatasetsCtrl'});
            $routeProvider.when('/myprojects', { templateUrl: 'app/core/preferences/components/project-preferences/templates/myprojects.html', controller: 'MyProjectsCtrl'});
            $routeProvider.when('/mypreferences', { templateUrl: 'app/core/preferences/components/my-preferences/templates/mypreferences.html', controller: 'MyPreferencesCtrl'});
            $routeProvider.when('/activities/:Id', { templateUrl: 'app/core/datasets/components/dataset-activities-list/templates/dataset-activities.html', controller: 'DatasetActivitiesCtrl', permission: 'Edit'});
            $routeProvider.when('/dataview/:Id', { templateUrl: 'app/core/datasets/components/dataset-view/templates/dataset-view.html', controller: 'DatasetViewCtrl'});
            $routeProvider.when('/dataentry/:Id', { templateUrl: 'app/core/datasets/components/dataset-entry-sheet/templates/dataset-entry-sheet.html', controller: 'DataEntryDatasheetCtrl', permission: 'Edit'});
            $routeProvider.when('/dataentryform/:Id', { templateUrl: 'app/core/datasets/components/dataset-entry-form/templates/dataset-entry-form.html', controller: 'DataEntryFormCtrl', permission: 'Edit'});
            $routeProvider.when('/edit/:Id', { templateUrl: 'app/core/datasets/components/dataset-editor/templates/dataset-edit-form.html', controller: 'DataEditCtrl', permission: 'Edit'});
            $routeProvider.when('/datasetquery/:Id', { templateUrl: 'app/core/datasets/components/dataset-query/templates/dataset-query.html', controller: 'DataQueryCtrl'});
            $routeProvider.when('/dataset-details/:Id', { templateUrl: 'app/core/datasets/components/dataset-detail/templates/dataset-details-view.html', controller: 'DatasetDetailsCtrl'});
            $routeProvider.when('/datasetimport/:Id', { templateUrl: 'app/core/datasets/components/dataset-import/templates/dataset-import.html', controller: 'DatasetImportCtrl', permission: 'Edit'});
            $routeProvider.when('/dataset-edit/:Id', { templateUrl: 'app/core/datasets/components/dataset-detail/templates/dataset-details-edit.html', controller: 'DatasetDetailsCtrl', permission: 'Edit'});

            $routeProvider.when('/query/:Id', { templateUrl: 'app/core/datasets/components/dataset-query/templates/dataset-query.html', controller: 'DatastoreQueryCtrl'});
            $routeProvider.when('/admin', { templateUrl: 'app/core/admin/components/admin-page/templates/admin.html', controller: 'AdminCtrl'});
            $routeProvider.when('/admin-dataset/:Id', { templateUrl: 'app/core/admin/components/admin-page/templates/admin-dataset.html', controller: 'AdminEditDatasetCtrl'});

            $routeProvider.when('/admin-master/:Id', { templateUrl: 'app/core/admin/components/admin-page/templates/admin-master.html', controller: 'AdminEditMasterCtrl'});

	        //custom routes for datasets that require custom controller+pages
            $routeProvider.when('/appraisals/:Id', { templateUrl: 'app/private/appraisals/components/appraisal-activities/templates/appraisal-activities.html', controller: 'AppraisalCtrl'});
            //$routeProvider.when('/crpp/:Id', { templateUrl: 'private/crpp/components/crpp-contracts/templates/Crpp-contracts.html', controller: 'CrppContractsCtrl'});
            $routeProvider.when('/unauthorized', { templateUrl: 'app/core/common/templates/unauthorized.html',controller: 'ErrorCtrl'});

	        //when all else fails...
	        $routeProvider.otherwise({redirectTo: '/projects'});
	    }]);

	//any functions in here are available to EVERY scope.  use sparingly!
	app.run(function($rootScope,$window, $location) {
	  $rootScope.config = {
	      version: CURRENT_VERSION,
	      CDMS_DOCUMENTATION_URL: CDMS_DOCUMENTATION_URL,
	  };

	  $rootScope.Cache = {};
	  $rootScope.Profile = configureProfile(profile); // profile defined in init.js

	  $rootScope.go = function ( path ) {
		  $location.path( path );
	  };

	  angular.rootScope = $rootScope; //just so we can get to it later. :)

	  $rootScope.SystemTimezones = SystemTimezones; //defined in init.js
	  $rootScope.DataGradeMethods = DataGradeMethods; //ditto

    //Fire analytics call on location change in URL for SPA.
      $rootScope.$on('$locationChangeSuccess', function () {
          if(ENVIRONMENT != "prod") return; 
          console.log("Sending "+ $location.url() +" to: "+ANALYTICS_CODE);
          $window.ga('send', {
            'hitType': 'screenview',
            'appName' : 'CDMS',
            'screenName' : $location.url()
          });
    });
  });

	return app;

});


//configure profile permission functions
function configureProfile(profile)
{
	//setup our favoritedatasets array for checking later.
	console.log("Inside main.js, configureProfile...");
	//console.log("profile is next...");
	//console.dir(profile);
	if ((typeof profile === 'undefined') || (profile === null))
	{
		return;
	}
	
	var favoriteDatasets = getByName(profile.UserPreferences, "Datasets");
	if(favoriteDatasets)
		profile.favoriteDatasets = favoriteDatasets.Value.split(",");
	else
		profile.favoriteDatasets = [];

	//same for favorite projects
	var favoriteProjects = getByName(profile.UserPreferences, "Projects");
	if(favoriteProjects)
		profile.favoriteProjects = favoriteProjects.Value.split(",");
	else
		profile.favoriteProjects = [];


	if(profile.Roles)
		profile.Roles = angular.fromJson(profile.Roles);

	profile.isAdmin = function()
	{
		return (profile.hasRole("Admin"));
	};

	profile.hasRole = function(role)
	{
		if(profile.Roles)
			return profile.Roles.contains(role);

		return false;
	}

	profile.canEdit = function(project)
	{
		return (profile.isProjectOwner(project) || profile.isProjectEditor(project));
	};

	//is the profile owner of the given project?
	profile.isProjectOwner = function(project){
		if(project && project.OwnerId == profile.Id)
			return true;

		if(profile.isAdmin())
			return true;

		//console.log(profile.Id + " is not owner: " + project.OwnerId);
		return false;
	};

	//is the profile editor for the given project?
	profile.isProjectEditor = function(project){

		var isEditor = false;

		if(project && project.Editors)
		{
        	for (var i = 0; i < project.Editors.length; i++) {
                var editor = project.Editors[i];
                if(editor.Id == profile.Id)
                {
             		isEditor = true;
             		break;
                }
            }
        }

        return isEditor;
	};

	profile.isDatasetFavorite = function(datasetId){
		return (profile.favoriteDatasets.indexOf(datasetId+"") != -1);
	};

	profile.isProjectFavorite = function(projectId){
		return (profile.favoriteProjects.indexOf(projectId+"") != -1);
	};

	profile.toggleDatasetFavorite = function(dataset)
	{
		var dsid = dataset.Id+"";
		var index = profile.favoriteDatasets.indexOf(dsid);
		if(index == -1) //doesn't exist
			profile.favoriteDatasets.push(dsid);
		else
			profile.favoriteDatasets.splice(index,1);
	};

	profile.toggleProjectFavorite = function(project)
	{
		var dsid = project.Id+"";
		var index = profile.favoriteProjects.indexOf(dsid);
		if(index == -1) //doesn't exist
			profile.favoriteProjects.push(dsid);
		else
			profile.favoriteProjects.splice(index,1);
	};


	return profile;
}
;
define('core/common/directives/feature-layer',[
  'app',
  'esri/layers/FeatureLayer'
], function (app, FeatureLayer) {
  app.directive('esriFeatureLayer', function(){
    // this object will tell angular how our directive behaves
    return {
      // only allow esriFeatureLayer to be used as an element (<esri-feature-layer>)
      restrict: 'E',

      // require the esriFeatureLayer to have its own controller as well an esriMap controller
      // you can access these controllers in the link function
      require: ["esriFeatureLayer", "^esriMap"],

      // replace this element with our template.
      // since we aren't declaring a template this essentially destroys the element
      replace: true,

      // define an interface for working with this directive
      controller: function($scope, $element, $attrs){

        // now is a good time to declare our FeautreLayer
        var layer = new FeatureLayer($attrs.url);
        var filter = $attrs.filter;

        // lets expose a function to get the layer
        this.getLayer = function(){
          return layer;
        };

        this.getFilter = function(){
          return filter;
        };
      },

      // now we can link our directive to the scope, but we can also add it to the map..
      link: function(scope, element, attrs, controllers){
        // controllers is now an array of the controllers from the 'require' option
        var layerController = controllers[0];
        var mapController = controllers[1];

        // now we can use the 'addLayer' method exposed on the controller
        // of the esriMap directive to add the layer to the map
        mapController.addLayer(layerController.getLayer(), layerController.getFilter());
      }
    };
  });
});



define('core/common/directives/map',[
  'app',
  'esri/map',
  'esri/geometry/Point',
  'esri/dijit/InfoWindow',
  'esri/InfoTemplate',
  'esri/dijit/BasemapLayer',
  'esri/dijit/BasemapGallery',
  'esri/dijit/Basemap',
  'esri/virtualearth/VETiledLayer'
], function (app, Map, Point, InfoWindow, InfoTemplate, VETiledLayer) {


  
  // register a new directive called esriMap with our app
  app.directive('esriMap', function(){
    // this object will tell angular how our directive behaves
    return {
      // only allow esriMap to be used as an element (<esri-map>)
      restrict: 'E',

      // this directive shares $scope with its parent (this is the default)
      scope: false,

      // define how our template is compiled this gets the $element our directive is on as well as its attributes ($attrs)
      compile: function($element, $attrs){
        // remove the id attribute from the main element
        $element.removeAttr("id");

        // append a new div inside this element, this is where we will create our map
        $element.append("<div id=" + $attrs.id + "></div>");

        // since we are using compile we need to return our linker function
        // the 'link' function handles how our directive responds to changes in $scope
        return function (scope, element, attrs, controller){
          scope.$watch("center", function (newCenter, oldCenter) {
            if(newCenter !== oldCenter){
              controller.centerAt(newCenter);
            }
          });
        };
      },

      // even though $scope is shared we can declare a controller for manipulating this directive
      // this is great for when you need to expose an API for manipulating your directive
      // this is also the best place to setup our map
      controller: function($scope, $element, $attrs){
        //possible bing maps
        var bing_layers_map = {
          BingMapsRoad: esri.virtualearth.VETiledLayer.MAP_STYLE_ROAD,
          BingMapsAerial: esri.virtualearth.VETiledLayer.MAP_STYLE_AERIAL ,
          BingMapsHybrid: esri.virtualearth.VETiledLayer.MAP_STYLE_AERIAL_WITH_LABELS
        };

		console.dir(bing_layers_map);
        // setup our map options based on the attributes and scope
        var mapOptions = {
          center: ($attrs.center) ? $attrs.center.split(",") : $scope.center,
          zoom: ($attrs.zoom) ? $attrs.zoom : $scope.zoom,
          //basemap: 'streets', //($attrs.basemap) ? $attrs.basemap : $scope.basemap,
          spatialReference: {
              wkid:102100 //mercator
              //wkid:26911 //nad_1983
              //"wkt":'PROJCS["NAD83(NSRS2007) / UTM zone 11N",GEOGCS["NAD83(NSRS2007)",DATUM["D_",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-117],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["Meter",1]]'

            }
        };

        // declare our map
        var map = new Map($attrs.id, mapOptions);

        map.selectedBasemap = defaultLayer;
        
        map.basemaps = [];
        for (var property in datasetActivitiesBasemapConfig) {
          if(datasetActivitiesBasemapConfig.hasOwnProperty(property))
          {
              map.basemaps.push({label: datasetActivitiesBasemapConfig[property].Display, name: property});
          }
        };

        map.updateLayers = function(){

            console.log("Changing Layer: "+map.selectedBasemap);

            try{
				//console.log("Loading layer: " + datasetActivitiesBasemapConfig[map.selectedBasemap].ServiceURL);      

				map.removeAllLayers();

				var new_layer = undefined;

				//add the selected basemap
				if(datasetActivitiesBasemapConfig[map.selectedBasemap].library == 'CTUIR')
					new_layer = new esri.layers.ArcGISTiledMapServiceLayer(datasetActivitiesBasemapConfig[map.selectedBasemap].ServiceURL);
				else if(datasetActivitiesBasemapConfig[map.selectedBasemap].library == 'Esri')
				{
					//new_layer = new esri.layers.ArcGISTiledMapServiceLayer(datasetActivitiesBasemapConfig[map.selectedBasemap].ServiceURL);
					//new_layer = new esri.layers.ArcGISTiledMapServiceLayer("http://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer");
					new_layer = new esri.layers.ArcGISTiledMapServiceLayer(datasetActivitiesBasemapConfig[map.selectedBasemap].type);
					console.log("Created new_layer using ESRI...");					
				}
				else if(datasetActivitiesBasemapConfig[map.selectedBasemap].library == 'Bing')
				{
					new_layer = new esri.virtualearth.VETiledLayer({
						bingMapsKey: BING_KEY,
						mapStyle: bing_layers_map[datasetActivitiesBasemapConfig[map.selectedBasemap].type]
					});
					console.log("Created new_layer using Bing...");
				}



              map.addLayer(new_layer);
              map.currentBasemapLayer = new_layer;

              if(map.locationLayer)
                map.addLayer(map.locationLayer);

              map.parcelLayer = new esri.layers.GraphicsLayer();
              map.addLayer(map.parcelLayer);

              console.log("done!");
              map.reposition();
            }
            catch(e)
            {
              console.dir(e);
            }
        };

        map.updateLayers();





        // start exposing an API by setting properties on "this" which is our controller
        // lets expose the "addLayer" method so child directives can add themselves to the map
        this.addLayer = function(layer, filter){
          map.locationLayer = map.addLayer(layer);

//          console.log("Added layer to map");
//          console.log("layer_"+layer.id);

            //setup our layer locationid function so we can all it again sometime
            layer.showLocationsById = function(locationObjectIds){
				
              try{
                this.clearSelection();
				
                var definitionExpression = "";
				// If we have a new user, 
				if (locationObjectIds === "")
				{
					console.log("locationObjectIds is blank; give it a number, but we won't pull anything...");
					definitionExpression = "OBJECTID IN (0)";
				}
				else
				{
					console.log("locationObjectIds has something; pull only those points...");
					definitionExpression = "OBJECTID IN (" + locationObjectIds + ")";
				}
                console.log("Definition expression: " + definitionExpression);
                //console.log("In Map.js, definitionExpression: ...");
				
                this.setDefinitionExpression(definitionExpression);
                this.refresh();
				
              }
			  catch(e)
              {
                console.dir(e);
              }                  
            };

          if(filter && filter == "location")
          {
              if(typeof $scope.locationObjectIds == "undefined")
              {
                $scope.$watch('locationObjectIds', function(){

                  //skip the first run
                  if(typeof $scope.locationObjectIds == "undefined")
                    return;
                  
                  layer.showLocationsById($scope.locationObjectIds); // now call it

                  layer.show();                  

                });
              }
          }
          
          return map.locationLayer;
        };

        // lets expose a version of centerAt that takes an array of [lng,lat]
        this.centerAt = function(center){
          var point = new Point({
            x: center[0],
            y: center[1],
            spatialReference: {
              wkid:102100 //mercator
              //wkid:26911 //nad_1983
              //"wkt":'PROJCS["NAD83(NSRS2007) / UTM zone 11N",GEOGCS["NAD83(NSRS2007)",DATUM["D_",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-117],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["Meter",1]]'

            }
          });

          map.centerAt(point);
        };

        // listen for click events and expost them as broadcasts on the scope and suing the scopes click handler
        map.on("click", function(e){
          // emit a message that bubbles up scopes, listen for it on your scope
          $scope.$emit("map.click", e);

          // use the scopes click fuction to handle the event
          $scope.$apply(function($scope) {
            $scope.click.call($scope, e);
          });
        });

        map.on("load", function(e){
          //createBasemapDropdown(map);
        });

        $scope.map = map;
        //map.resize();
        
        //console.log("Map is complete and in scope.");

      }
    };
  });
});



//defines field directives

common_module.directive('ctuirTextField',
    function(){
        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-text.html',
            restrict: 'E',
        };

        return result;

    });

common_module.directive('ctuirTextareaField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-textarea.html',
            restrict: 'E',
        };

        return result;

    });

common_module.directive('ctuirDateField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-date.html',
            restrict: 'E',
        };

        return result;

    });

common_module.directive('ctuirTimeField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-time.html',
            restrict: 'E',
        };

        return result;

    });

common_module.directive('ctuirEastingField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-easting.html',
            restrict: 'E',
        };

        return result;
    });

common_module.directive('ctuirNorthingField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-northing.html',
            restrict: 'E',
        };

        return result;
    });

common_module.directive('ctuirNumberField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-number.html',
            restrict: 'E',
        };

        return result;

    });

common_module.directive('ctuirSelectField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-select.html',
            restrict: 'E',
            controller: function($scope, $element, $attrs) {
                $scope.selectOptions = makeObjectsFromValues($scope.dataset.DatastoreId+$scope.field.DbColumnName, $scope.field.Field.PossibleValues);
            }
        };

        return result;

    });

common_module.directive('ctuirMultiselectField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-multiselect.html',
            restrict: 'E',
            controller: function($scope, $element, $attrs) {
               $scope.selectOptions = makeObjectsFromValues($scope.dataset.DatastoreId+$scope.field.DbColumnName, $scope.field.Field.PossibleValues);
            }
        };
        
        return result;

    });

common_module.directive('ctuirMultilookupField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-multilookup.html',
            restrict: 'E',
            controller: function($scope, $element, $attrs) {
               $scope.selectOptions = makeObjectsFromValues($scope.dataset.DatastoreId+$scope.field.DbColumnName, $scope.field.Field.PossibleValues);
            }
        };
        
        return result;

    });

common_module.directive('ctuirLookupField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-lookup.html',
            restrict: 'E',
            controller: function($scope, $element, $attrs) {
                $scope.selectOptions = makeObjectsFromValues($scope.dataset.DatastoreId+$scope.field.DbColumnName, $scope.field.Field.PossibleValues);
            }
        };

        return result;

    });

common_module.directive('ctuirFileField',
    function($modal){
        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-file.html',
            restrict: 'E',
        };

        return result;
    });

common_module.directive('ctuirTempWaypointFileField',
    function($modal){
        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-waypoint-file.html',
            restrict: 'E',
        };

        return result;
    });

common_module.directive('ctuirLinkField',
    function($modal){
        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-link.html',
            restrict: 'E',
            controller: function($scope, $element, $attrs)
            {
                //add a function that will enable file modal capability for all fields with controlType = link
                $scope.openLinkModal = function(row, field)
                {
                    //console.dir(row);
                    //console.dir(field);
                    $scope.link_row = row;
                    $scope.link_field = field;
                    
                    var modalInstance = $modal.open({
                        templateUrl: 'app/core/common/components/modals/templates/modal-link-field.html',
                        controller: 'LinkModalCtrl',
                        scope: $scope, //scope to make a child of
                    });
                };
            }
        };

        return result;
    });

common_module.directive('ctuirRadioField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-radio.html',
            restrict: 'E',
        };

        return result;

    });

common_module.directive('ctuirCheckboxField',
    function(){

        var result = {
            templateUrl: 'app/core/common/templates/grid-fields/field-checkbox.html',
            restrict: 'E',
        };

        return result;

    });
	
common_module.directive('uiSelectWrapper',
    function(){

		return {
			link: function(scope, element, attrs) {
				var uiSelectController = element.children().controller('uiSelect');
				console.log("uiSelectController is next...");
				console.dir(uiSelectController);
			}
		}

    });

common_module.directive('multiselect', function () {
 
        return {
 
            scope: true,
            link: function (scope, element, attrs) {
 
                element.multiselect({
 
                    // Replicate the native functionality on the elements so
                    // that angular can handle the changes for us.
                    onChange: function (optionElement, checked) {
 
                        optionElement.removeAttr('selected');
 
                        if (checked) {
                            optionElement.attr('selected', 'selected');
                        }
 
                        element.change();
                    }
                });
 
                // Watch for any changes to the length of our select element
                scope.$watch(function () {
                    return element[0].length;
                }, function () {
                    element.multiselect('rebuild');
                });
 
                // Watch for any changes from outside the directive and refresh
                scope.$watch(attrs.ngModel, function () {
                    element.multiselect('refresh');
                });
 
            }
 
        };
});
define("core/common/directives/field-definitions", function(){});

common_module.directive('showtab',
        function () {
            return {
                link: function (scope, element, attrs) {
                    element.click(function (e) {
                        e.preventDefault();
                        $(element).tab('show');
                    });
                }
            };
        });


common_module.directive('ngBlur', function () {
        return function( scope, elem, attrs ) {
            elem.bind('blur', function() {
                scope.$apply(attrs.ngBlur);
            });
        };
    });


//Hides or shows any element with: project-role="owner"
//  if the project is owned by the current user
//  available project roles = owner, editor
//NOTE: to use this directive, your controller must have the $rootScope defined.
common_module.directive('projectRole', function($rootScope){
    return {
        link: function(scope,element, attrs)
        {
            if(!attrs.projectRole)
            {
                throw new Exception("Configuration error: project-role attribute must specify a target role name, 'owner' or 'editor'.");
            }

            var role = attrs.projectRole.trim();

            if(role != 'owner' && role != 'editor')
                throw new Exception("Configuration error: project-role attribute must be 'owner' or 'editor'.");

            var show = false; //default to NOT show.

            function applyRoleToElement()
            {                

                if(role == 'owner' && $rootScope.Profile.isProjectOwner(scope.project))
                {
                    //console.log("Showing role 'owner' because user is owner.");
                    show = true;
                }

                if(role == 'editor' && ($rootScope.Profile.isProjectOwner(scope.project) || $rootScope.Profile.isProjectEditor(scope.project)))
                {
                    //console.log("Showing role 'editor' because user is owner or editor.");
                    show = true;
                }

                if(show)
                    element.show();
                else
                    element.hide();
            }

            if(!scope.project || !scope.project.$resolved)
            {
//                console.log("setting watch");
                var projectWatch = scope.$watch('project',function(){
                    if(scope.project != null)
                    {
  //                      console.log("got a new project hit");
                        projectWatch();
                        scope.project.$promise.then(function(){
    //                        console.log("Promise completed.");
                            applyRoleToElement();
                        });
                    }
                });
            }

            applyRoleToElement();
        }
    };
});

//Hides or Shows any element with: has-role="someRole"
//  where "someRole" is in the current user's roles list
common_module.directive('hasRole', function($rootScope){
    return{
        link: function(scope, element, attrs) {
            //console.log("checking permission");

            if(!attrs.hasRole)
                return;

            var value = attrs.hasRole.trim();
            
            var notPermissionFlag = value[0] === '!';
            
            if(notPermissionFlag)
                value.slice(1).trim();

            //console.dir($rootScope.Profile.Roles);
            //console.dir($rootScope.Profile.Fullname);

            if(!$rootScope.Profile.Roles)
                $rootScope.Profile.Roles = [];
            //else
                //if(!Array.isArray($rootScope.Profile.Roles))
                //    $rootScope.Profile.Roles = angular.fromJson($rootScope.Profile.Roles);

            //console.dir($rootScope.Profile.Roles);

            var hasPermission = $rootScope.Profile.Roles[value] ? true : false;

            //console.log(value + " ? " + hasPermission);

            if(hasPermission || (notPermissionFlag && !hasPermission) )
            {
                console.log("hasPermission("+value+") = true");
                element.show();
            }
            else
            {
                console.log("hasPermission("+value+") = false");
                element.hide();
            }
        }
    };
});
define("core/common/directives/roles", function(){});


// Regular Expression explanation.  Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
// Enclosing characters:  / ... /
// At the beginning:  ^
// Escape character for special characters:  \  , in this case the - has special meaning
// Match the preceding character 0 or 1 time; in other words, like -123.  The - sign in front may or may not be present:  ?
// A sequence of 6 digits:  \d{6}
// Start a section to be remembered:  (       and another section   (
// Look for a decimal, but the decimal needs escaping, because the . is special:  \.
// Close the decimal section:  )
// Look for a digit:  \d
// Match the preceding character 1 or more times:  +
// Closed this section for the fractional value:  )
// The decimal followed by 1 or more numbers may or may not be present (the whole .123 section):  ?
// The fractional part (.123) is treated as the end of the number, and we want to see if the number has a fractional part:  $
// Basically, the $ matches the whole () section before the ?, so the decimal section must be at the end of the number.
// Example:  For example, /t$/ does not match the 't' in "eater", but does match it in "eat".
var INTEGER_REGEXP = /^\-?\d+$/;
common_module.directive('integer', function () {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function (viewValue) {
                if (viewValue == "") {
                    ctrl.$setValidity('integer', true);
                    return true;
                }

                if (INTEGER_REGEXP.test(viewValue)) {
                    // it is valid
                    ctrl.$setValidity('integer', true);
                    return parseInt(viewValue);
                } else {
                    // it is invalid, return undefined (no model update)
                    ctrl.$setValidity('integer', false);
                    return undefined;
                }
            });
        }
    };
});

var INTEGER_REGEXP = /^\d{4}$/;
common_module.directive('integerfour', function () {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function (viewValue) {
                if (viewValue == "") {
                    ctrl.$setValidity('integer', true);
                    return true;
                }

                if (INTEGER_REGEXP.test(viewValue)) {
                    // it is valid
                    ctrl.$setValidity('integer', true);
                    return parseInt(viewValue);
                } else {
                    // it is invalid, return undefined (no model update)
                    ctrl.$setValidity('integer', false);
                    return undefined;
                }
            });
        }
    };
});

var FLOAT_REGEXP = /^\-?\d+((\.)\d+)?$/;
//common_module.directive('smartFloat', function() { // Note:  with the one uppercase letter, the caller cannot find this directive.
common_module.directive('smartfloat', function () { // With all lowercase like this, the caller CAN find this directive.
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function (viewValue) {
                if (viewValue == "") {
                    ctrl.$setValidity('float', true);
                    return true;
                }

                if (FLOAT_REGEXP.test(viewValue)) {
                    ctrl.$setValidity('float', true);
                    return parseFloat(viewValue.replace(',', '.'));
                } else {
                    ctrl.$setValidity('float', false);
                    return undefined;
                }
            });
        }
    };
});

var FLOAT_REGEXP6 = /^\-?\d{6}((\.)\d+)?$/;
common_module.directive('sixfloat', function () {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function (viewValue) {
                if (viewValue == "") {
                    ctrl.$setValidity('float', true);
                    return true;
                }

                if (FLOAT_REGEXP6.test(viewValue)) {
                    ctrl.$setValidity('float', true);
                    return parseFloat(viewValue.replace(',', '.'));
                } else {
                    ctrl.$setValidity('float', false);
                    return undefined;
                }

            });
        }
    };
});

var FLOAT_REGEXP7 = /^\-?\d{7}((\.)\d+)?$/;
common_module.directive('sevenfloat', function () {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function (viewValue) {
                if (viewValue == "") {
                    ctrl.$setValidity('float', true);
                    return true;
                }

                if (FLOAT_REGEXP7.test(viewValue)) {
                    ctrl.$setValidity('float', true);
                    return parseFloat(viewValue.replace(',', '.'));
                } else {
                    ctrl.$setValidity('float', false);
                    return undefined;
                }

            });
        }
    };
});

common_module.directive('textrequired', function () {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function (viewValue) {
                if (viewValue == "") {
                    ctrl.$setValidity('text', false);
                    return undefined;
                }
                else {
                    ctrl.$setValidity('text', true);
                    return true;
                }

            });
        }
    };
});
define("core/common/directives/validation", function(){});

var adultweir_chartservice =  [
    function () {
        var service = {

            dataset: "AdultWeir",

            getChartConfig: function () {
                var config = {
                    title: 'Fish by Species',
                    tooltips: true,
                    labels: false,

                    legend: {
                        display: true,
                        position: 'right'
                    }
                };

                return config;
            },


            getDefaultChartData: function () {
                var defaultChartData = { "series": [], "data": [{ "x": "Loading...", "y": [0], "tooltip": "" }] }; //default
                return defaultChartData;
            },


            getChartData: function (data) {
                //console.log("Inside getChartData...");
                var dataCalc = {};

                angular.forEach(data, function (row, key) {
                    var num = (row.TotalFishRepresented) ? row.TotalFishRepresented : 1;
                    //console.log(row);

                    if (row.Species) {

                        if (!dataCalc[row.Species])
                            dataCalc[row.Species] = { total: 0, males: 0, females: 0 };

                        dataCalc[row.Species].total += num;

                        if (row.Sex == "M")
                            dataCalc[row.Species].males += num;
                        if (row.Sex == "F")
                            dataCalc[row.Species].females += num;

                    }

                    //console.log(row.Species + " = ");
                    //console.dir(dataCalc[row.Species]);

                });

                var data = {
                    "series": [
                        "Total",
                        "Male",
                        "Female"
                    ],
                    "data": [
                    ]
                };

                angular.forEach(dataCalc, function (vals, species) {
                    data['data'].push({
                        "x": species,
                        "y": [vals.total, vals.males, vals.females],
                    });
                });

                //console.log(data);

                return data;

            },

            buildChart: function () {

            },

        };

        return service;
    }
];

define("core/common/components/chart/adultweir-chartservice", function(){});

var artificialproduction_chartservice = [ 
    function(){
        var service = {

        	dataset: "ArtificialProduction",

			getChartConfig: function(){
				console.log("Inside getChartConfig...");
				var config = {
    			  title : 'Fish by Species',
				  tooltips: true,
				  labels : false,
				  
				  legend: {
				    display: true,
				    position: 'right'
				  }
				};

				return config;
			},


			getDefaultChartData: function()
			{
				var defaultChartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default
				return defaultChartData;
			},


			getChartData: function(data)
			{
				console.log("Inside getChartData...");
			    var dataCalc = {};

			    angular.forEach(data, function(row, key){
			        var num = (row.TotalFishRepresented) ? row.TotalFishRepresented : 1;
			        //console.log(row);

			        if(row.Species)
			        {

			            if(!dataCalc[row.Species])
			                dataCalc[row.Species] = { total: 0, males: 0, females: 0};

			            dataCalc[row.Species].total += num;

			            if(row.Sex == "M")
			                dataCalc[row.Species].males += num;
			            if(row.Sex == "F")
			                dataCalc[row.Species].females += num;
			            
			        }
			        
			        //console.log(row.Species + " = ");
			        //console.dir(dataCalc[row.Species]);
			        
			    });

			    var data = {
			              "series": [
			                "Total",
			                "Male",
			                "Female"
			              ],
			              "data": [
			              ]
			            };

			    angular.forEach(dataCalc, function(vals, species){
			        data['data'].push({
			          "x": species,
			          "y": [vals.total,vals.males,vals.females],
			        });
			    });

			    console.log(data);

			    return data;

			},

			buildChart: function(){

			},

        };

        return service;
    }
];
define("core/common/components/chart/artificialproduction-chartservice", function(){});

var bsample_chartservice = [ 
    function(){
        var service = {

        	dataset: "BSample",

			getChartConfig: function(){
				var config = {
    			  title : 'Fish by Species',
				  tooltips: true,
				  labels : false,
				  
				  legend: {
				    display: true,
				    position: 'right'
				  }
				};

				return config;
			},


			getDefaultChartData: function()
			{
				var defaultChartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default
				return defaultChartData;
			},


			getChartData: function(data)
			{
				//console.log("Inside getChartData...");
			    var dataCalc = {};

			    angular.forEach(data, function(row, key){
			        var num = (row.TotalFishRepresented) ? row.TotalFishRepresented : 1;
			        //console.log(row);

			        if(row.Species)
			        {

			            if(!dataCalc[row.Species])
			                dataCalc[row.Species] = { total: 0, males: 0, females: 0};

			            dataCalc[row.Species].total += num;

			            if(row.Sex == "M")
			                dataCalc[row.Species].males += num;
			            if(row.Sex == "F")
			                dataCalc[row.Species].females += num;
			            
			        }
			        
			        //console.log(row.Species + " = ");
			        //console.dir(dataCalc[row.Species]);
			        
			    });

			    var data = {
			              "series": [
			                "Total",
			                "Male",
			                "Female"
			              ],
			              "data": [
			              ]
			            };

			    angular.forEach(dataCalc, function(vals, species){
			        data['data'].push({
			          "x": species,
			          "y": [vals.total,vals.males,vals.females],
			        });
			    });

			    //console.log(data);

			    return data;

			},

			buildChart: function(){

			},

        };

        return service;
    }
];
define("core/common/components/chart/bsample-chartservice", function(){});


var creelsurvey_chartservice = [ 
    function(){
		//console.log("Inside CreelSurvey_ChartService...");
        var service = {

        	dataset: "CreelSurvey",

			getChartConfig: function(){
				var config = {
    			  title : 'Fish by Species',
				  tooltips: true,
				  labels : false,
				  
				  legend: {
				    display: true,
				    position: 'right'
				  }
				};

				return config;
			},


			getDefaultChartData: function()
			{
				var defaultChartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default
				return defaultChartData;
			},


			getChartData: function(data)
			{
			    var dataCalc = {};

			    angular.forEach(data, function(row, key){
			        //var num = (row.TotalFishRepresented) ? row.TotalFishRepresented : 1; // From AdultWeir
			        var num = row.FishCount;
			        //console.log("row is next...");
					//console.dir(row);
					//console.log("num = " + num);

			        if(row.Species)
			        {
						//console.log("Inside row.Species if...");
			            if(!dataCalc[row.Species])
			                dataCalc[row.Species] = { total: 0, males: 0, females: 0};

			            dataCalc[row.Species].total += num;

			            if(row.Sex == "M")
			                dataCalc[row.Species].males += num;
			            if(row.Sex == "F")
			                dataCalc[row.Species].females += num;
			            
			        }
			        
			        //console.log(row.Species + " = ");
			        //console.dir(dataCalc[row.Species]);
			        
			    });

			    var data = {
			              "series": [
			                "Total",
			                "Male",
			                "Female"
			              ],
			              "data": [
			              ]
			            };

			    angular.forEach(dataCalc, function(vals, species){
			        data['data'].push({
			          "x": species,
			          "y": [vals.total,vals.males,vals.females],
			        });
			    });

				//console.log("Inside chartservices.js, CreelSurvey, at end of getChartData, data is next...");
			    //console.dir(data);

			    return data;

			},

			buildChart: function(){

			},

        };

        return service;
    }
];
define("core/common/components/chart/creelsurvey-chartservice", function(){});


var electrofishing_chartservice = [ 
    function(){
        var service = {

        	dataset: "ElectroFishing",

			getChartConfig: function(){
				var config = {
    			  title : 'Fish Count',
				  tooltips: true,
				  labels : false,
				  
				  legend: {
				    display: true,
				    position: 'right'
				  }
				};

				return config;
			},


			getDefaultChartData: function()
			{
				var defaultChartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default
				return defaultChartData;
			},


			getChartData: function(data)
			{
			    var dataCalc = {};

			    angular.forEach(data, function(row, key){
			        var num = row.FishCount || 1;
			        var species = row.SpeciesRunRearing || row.OtherSpecies || row.Species || 'Not specified';
			        //console.log("species = " + species);

			        if(species)
			        {
			            if(!dataCalc[species])
			                dataCalc[species] = { total: 0 };

			            dataCalc[species].total += num;
			        }
			    });

			    var data = {
			              "series": ["Total"],
			              "data": [] 
			          };

			    angular.forEach(dataCalc, function(vals, species){
			        data['data'].push({
			          "x": species,
			          "y": [vals.total],
			        });
			    });

				console.log("Inside chartservices.js, getChartData (EF, ST, FS, SGS), data is next...");
			    console.dir(data);

			    return data;

			},

			buildChart: function(){

			},

        };

        return service;
    }
];
define("core/common/components/chart/electrofishing-chartservice", function(){});

var snorkelfish_chartservice = [ 
    function(){
		//console.log("Inside SnorkelFish_ChartService...");
        var service = {

        	dataset: "SnorkelFish",

			getChartConfig: function(){
				var config = {
    			  title : 'Fish Count',
				  tooltips: true,
				  labels : false,
				  
				  legend: {
				    display: true,
				    position: 'right'
				  }
				};

				return config;
			},


			getDefaultChartData: function()
			{
				var defaultChartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default
				return defaultChartData;
			},


			getChartData: function(data)
			{
			    var dataCalc = {};

			    angular.forEach(data, function(row, key){
			        //var num = (row.TotalFishRepresented) ? row.TotalFishRepresented : 1; // From AdultWeir
			        var num = row.FishCount;
			        //console.log("row is next...");
					//console.dir(row);
					//console.log("num = " + num);

			        if(row.Species)
			        {
						//console.log("Inside row.Species if...");
			            if(!dataCalc[row.Species])
			                dataCalc[row.Species] = { total: 0 };

			            dataCalc[row.Species].total += num;
			        }
			    });

			    var data = {
			              "series": ["Total"],
			              "data": [] 
			          };

			    angular.forEach(dataCalc, function(vals, species){
			        data['data'].push({
			          "x": species,
			          "y": [vals.total],
			        });
			    });

				console.log("Inside chartservices.js, snorkelfish at end of getChartData, data is next...");
			    console.dir(data);

			    return data;

			},

			buildChart: function(){

			},

        };

        return service;
    }
];

define("core/common/components/chart/snorkelfish-chartservice", function(){});

var water_quality = [ 
    function(){
        var service = {

        	dataset: "WaterQuality",

			getChartConfig: function(){
				var config = {
    			  title : 'Sample Count',
				  tooltips: true,
				  labels : false,
				  
				  legend: {
				    display: true,
				    position: 'right'
				  }
				};

				return config;
			},


			getDefaultChartData: function()
			{
				var defaultChartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default
				return defaultChartData;
			},


			getChartData: function(data)
			{
			    var dataCalc = {};

			    angular.forEach(data, function(row, key){
			        var characteristic = row.CharacteristicName || 'Unknown';

			        if(characteristic)
			        {
			            if(!dataCalc[characteristic])
			                dataCalc[characteristic] = { total: 0 };

			            dataCalc[characteristic].total++;
			        }
			    });

			    var data = {
			              "series": ["Total"],
			              "data": [] 
			          };

			    angular.forEach(dataCalc, function(vals, characteristic){
			        data['data'].push({
			          "x": characteristic,
			          "y": [vals.total],
			        });
			    });

			    return data;

			},

			buildChart: function(){

			},

        };

        return service;
    }
];

define("core/common/components/chart/waterquality-chartservice", function(){});


var watertemp_chartservice = [ 
    function(){
        var service = {

        	dataset: "WaterTemp",

			buildChart: function(data_in, config)
			{
				if(data_in.length == 0)
					return;

				if(!config)
					config = {width: 400, height: 200};

					var margin = {top: 10, right: 10, bottom: 20, left: 30},
					    width = config.width - margin.left - margin.right,
					    height = config.height - margin.top - margin.bottom;

					var x = d3.time.scale()
					    .range([0, width]);

					var y = d3.scale.linear()
					    .range([height, 0]);

					var color = d3.scale.ordinal()
					  		.domain([1,12,13,14,15,16])
					  		.range(["FF0000","#009933" , "#0000FF","#0FF933" , "#00FFFF","#00FFAAFB"]);

					var xAxis = d3.svg.axis()
					    .scale(x)
					    .orient("bottom");

					var yAxis = d3.svg.axis()
					    .scale(y)
					    .orient("left");

					var line = d3.svg.line()
						//.interpolate("basis")
					    .x(function(d) { return x(d.chart_date); })
					    .y(function(d) { return y(d.chart_temp); });

					    d3.select("#chart-div").selectAll("svg").remove();

					var svg = d3.select("#chart-div").append("svg")
					    .attr("width", width + margin.left + margin.right)
					    .attr("height", height + margin.top + margin.bottom)
					  .append("g")
					    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	
					//converting via new Date() seems to work better.
					//var parseDate = d3.time.format("%Y-%m-%dT%H:%M:%S").parse;

					//color.domain(d3.keys(data[0]).filter(function(key) { return key !== "date"; }));

					var data = [];

					data_in.forEach(function(d) {
					  	//only show rows with default QA status (OK)
					  	//if(d.QAStatusId == scope.dataset.DefaultRowQAStatusId)
					  	//{
					  	if(!isNaN(d.WaterTemperature))
					  	{
					  		d.chart_date = new Date(d.ReadingDateTime);
					    	d.chart_temp = +d.WaterTemperature;
					    	d.chart_QAStatusId = d.QAStatusId;
					    	data.push(d);
					    }
					    //}

					    //console.dir(d);
					  });

					//console.dir(data);

					  //x.domain(d3.extent(data, function(d) { return d.date; }));
					  //y.domain(d3.extent(data, function(d) { return d.close; }));


					  x.domain(d3.extent(data, function(d) { return d.chart_date; }));
					  y.domain(d3.extent(data, function(d) { return d.chart_temp; }));

					  svg.append("g")
					      .attr("class", "x axis")
					      .attr("transform", "translate(0," + height + ")")
					      .call(xAxis);

					  svg.append("g")
					      .attr("class", "y axis")
					      .call(yAxis)
					    .append("text")
					      .attr("transform", "rotate(-90)")
					      .attr("y", 6)
					      .attr("dy", ".71em")
					      .style("text-anchor", "end")
					      .text("H2O Temp (C)");

					  svg.append("path")
					      .datum(data)
					      .attr("class", "line")
					      .attr("d", line);
					      /*
					      .style("stroke", function(d,i) { 
					      	console.dir(d);
					      	console.dir(i);
					      	console.dir(color(d.chart_QAStatusId));
					      	return color(d.chart_QAStatusId); 
					      });*/
			},
        };

        return service;
    }
];

define("core/common/components/chart/watertemp-chartservice", function(){});

// defines cross-module functions, components and services that we can use in anywhere

var common_module = angular.module('CommonModule', ['ui.bootstrap', 'ngResource']);

//I wish you could just specify a directory and it would find the files and load them, but
// requirejs doesn't work that way so we have to reference each one by hand. -kb
require([

    //loads a variety of common functions
    'core/common/common-functions',

    //loads services used by other modules
    'core/common/services/common-service',
    'core/common/services/logger',
    'core/common/services/service-utilities',
    'core/common/services/wish',

    //loads the common controllers
    'core/common/components/modals/modal-quick-add-accuracycheck',
    'core/common/components/modals/modal-quick-add-characteristic',
    'core/common/components/modals/modal-add-location',
    'core/common/components/modals/modal-create-instrument',
    'core/common/components/modals/modal-bulk-rowqa-change',
    'core/common/components/modals/modal-save-success',
    'core/common/components/modals/modal-create-fisherman',
    'core/common/components/modals/modal-link-field',
    'core/common/components/modals/modal-verify-action',
    'core/common/components/modals/modal-invalid-operation',

    'core/common/components/file/modal-file-add',
    'core/common/components/file/modal-file-delete',
    'core/common/components/file/modal-files',
    'core/common/components/file/modal-exportfile',
    
    //load other common directives
    'core/common/directives/checklists',
    'core/common/directives/feature-layer',
    'core/common/directives/map',
    'core/common/directives/field-definitions',
    'core/common/directives/roles',
    'core/common/directives/validation',



], function () {
    //add the controllers and services to the module once the files are loaded!

    //controllers 
    common_module.controller('ModalQuickAddAccuracyCheckCtrl', modal_quick_add_accuracycheck);
    //common_module.controller('ModalQuickAddCharacteristicCtrl', modal_quick_add_characteristic); //kb 11/1 - this is not used anywhere...
    common_module.controller('ModalAddLocationCtrl', modal_add_location);
    common_module.controller('ModalCreateInstrumentCtrl', modal_create_instrument);
    common_module.controller('ModalBulkRowQAChangeCtrl', modal_bulk_rowqa_change);
    common_module.controller('ModalSaveSuccess', modal_save_success);
    common_module.controller('ModalCreateFishermanCtrl', modal_create_fisherman);
    common_module.controller('ModalExportController', modal_exportfile);
    common_module.controller('LinkModalCtrl', modal_link_field);
    common_module.controller('ModalVerifyActionCtrl', modal_verify_action);
    common_module.controller('ModalInvalidOperation', modal_invalid_operation);

    common_module.controller('FileAddModalCtrl', modal_file_add);
    common_module.controller('FileDeleteModalCtrl', modal_file_delete);
    common_module.controller('FileModalCtrl', modal_files); 
    
});


//We load these asych with the others
require([
    //loads chart services
    'core/common/components/chart/adultweir-chartservice',
    'core/common/components/chart/artificialproduction-chartservice',
    'core/common/components/chart/bsample-chartservice',
    'core/common/components/chart/creelsurvey-chartservice',
    'core/common/components/chart/electrofishing-chartservice',
    'core/common/components/chart/snorkelfish-chartservice',
    'core/common/components/chart/waterquality-chartservice',
    'core/common/components/chart/watertemp-chartservice',

], function () {

    //there is a chartservice for each dataset.
    // NOTE: If you are creating a new dataset, you'll want to make a chartservice for it.
    common_module.service('AdultWeir_ChartService', adultweir_chartservice);
    common_module.service('ArtificialProduction_ChartService', artificialproduction_chartservice);
    common_module.service('BSample_ChartService', bsample_chartservice);
    common_module.service('CreelSurvey_ChartService', creelsurvey_chartservice);
    common_module.service('ElectroFishing_ChartService', electrofishing_chartservice);
    common_module.service('SnorkelFish_ChartService', snorkelfish_chartservice);
    common_module.service('WaterQuality_ChartService', water_quality);
    common_module.service('WaterTemp_ChartService', watertemp_chartservice);

    //and then we only load this one after the others are done...
    require([
        'core/common/components/chart/chart-services',                    //the wrapper for them all...
    ], function () {
        //the master chartservice that exposes all of the other dataset-specific chart services
        common_module.service('ChartService', chart_services);
        
    });
});
define("core/common/common-module", function(){});


var modal_add_correspondence_event = ['$scope', '$rootScope', '$modalInstance', '$modal', 'DatasetService','SubprojectService','ServiceUtilities',
	'$filter', 'FileUploadService','$upload','$location', '$anchorScroll',
    function ($scope, $rootScope, $modalInstance, $modal, DatasetService, SubprojectService, ServiceUtilities, 
	$filter, FileUploadService, $upload, $location, $anchorScroll){
	console.log("Inside ModalAddCorrespondenceEventCtrl...");
	
	if ((typeof $scope.viewSubproject !== 'undefined') && ($scope.viewSubproject !== null))
		$rootScope.subprojectId = $scope.viewSubproject.Id;
	
	$scope.filesToUpload = {};
	$scope.verifyActionFormOpen = "No";
	$scope.showOtherResponseType = false;
	$scope.showOtherCorrespondenceType = false;
	$scope.ReadyToClose = ""; // Set to "", so that "False" does not show on the form.
	$scope.showCloseButton = false;
	$scope.showCancelButton = true;
	$scope.showFormItems = true;
	$scope.fileCount = 0;
	$scope.fileProgress = 0;

    $scope.ce_row = angular.copy($scope.ce_row);
	
	console.log("$scope.ce_row is next...");
	console.dir($scope.ce_row);
	
	$scope.ceCorrespondenceType = [];
		$scope.ceCorrespondenceType.push({Id: 0, Label: "Project Notification"});
		$scope.ceCorrespondenceType.push({Id: 1, Label: "Notice of Application"});
		$scope.ceCorrespondenceType.push({Id: 2, Label: "Seeking Concurrence"});
		$scope.ceCorrespondenceType.push({Id: 3, Label: "Document Review"});
		$scope.ceCorrespondenceType.push({Id: 4, Label: "Permit Review"});
		$scope.ceCorrespondenceType.push({Id: 5, Label: "Sending materials for our records"});
		$scope.ceCorrespondenceType.push({Id: 6, Label: "Other"});		
	
	/*$scope.ceResponseType = [];
		$scope.ceResponseType.push("APE letter");
		$scope.ceResponseType.push("Asked to be consulting party");
		$scope.ceResponseType.push("Defer to other tribe(s)");
		$scope.ceResponseType.push("Determination of Eligibility");
		$scope.ceResponseType.push("Did not review");
		$scope.ceResponseType.push("Emailed Comments");
		$scope.ceResponseType.push("Finding of Effect");
		$scope.ceResponseType.push("Issued survey/excavation permit");
		$scope.ceResponseType.push("Let it go");
		$scope.ceResponseType.push("Missed opportunity to review");
		$scope.ceResponseType.push("NAGPRA FR Notice");
		$scope.ceResponseType.push("NAGPRA inventory/summary");
		$scope.ceResponseType.push("none--ok");
		$scope.ceResponseType.push("Other");
		$scope.ceResponseType.push("Out of area");
		$scope.ceResponseType.push("Permit Application");
		$scope.ceResponseType.push("Report for Review");
		$scope.ceResponseType.push("Requested a monitor");
		$scope.ceResponseType.push("Requested a survey");
		$scope.ceResponseType.push("Requested additional information");
		$scope.ceResponseType.push("Requested report");
		$scope.ceResponseType.push("Requested testing");
		$scope.ceResponseType.push("Response to comments");
		$scope.ceResponseType.push("Reviewed report");
		$scope.ceResponseType.push("Same as previously reviewed project");
		$scope.ceResponseType.push("Sent letter");
		$scope.ceResponseType.push("Signed off on");
		$scope.ceResponseType.push("Simple Notification");
	*/
	$scope.ceResponseType = [];
		$scope.ceResponseType.push({Id: 0, Label: "APE letter"});
		$scope.ceResponseType.push({Id: 1, Label: "Asked to be consulting party"});
		$scope.ceResponseType.push({Id: 2, Label: "Defer to other tribe(s)"});
		$scope.ceResponseType.push({Id: 3, Label: "Determination of Eligibility"});
		$scope.ceResponseType.push({Id: 4, Label: "Did not review"});
		$scope.ceResponseType.push({Id: 5, Label: "Emailed Comments"});
		$scope.ceResponseType.push({Id: 6, Label: "Finding of Effect"});
		$scope.ceResponseType.push({Id: 7, Label: "Issued survey/excavation permit"});
		$scope.ceResponseType.push({Id: 8, Label: "Let it go"});
		$scope.ceResponseType.push({Id: 9, Label: "Missed opportunity to review"});
		$scope.ceResponseType.push({Id: 10, Label: "NAGPRA FR Notice"});
		$scope.ceResponseType.push({Id: 11, Label: "NAGPRA inventory/summary"});
		$scope.ceResponseType.push({Id: 12, Label: "none--ok"});
		$scope.ceResponseType.push({Id: 13, Label: "Notice of Application"});
		$scope.ceResponseType.push({Id: 14, Label: "Other"});
		$scope.ceResponseType.push({Id: 15, Label: "Out of area"});
		$scope.ceResponseType.push({Id: 16, Label: "Permit Application"});
		$scope.ceResponseType.push({Id: 17, Label: "Report for Review"});
		$scope.ceResponseType.push({Id: 18, Label: "Requested a monitor"});
		$scope.ceResponseType.push({Id: 19, Label: "Requested a survey"});
		$scope.ceResponseType.push({Id: 20, Label: "Requested additional information"});
		$scope.ceResponseType.push({Id: 21, Label: "Requested report"});
		$scope.ceResponseType.push({Id: 22, Label: "Requested testing"});
		$scope.ceResponseType.push({Id: 23, Label: "Response to comments"});
		$scope.ceResponseType.push({Id: 24, Label: "Reviewed report"});
		$scope.ceResponseType.push({Id: 25, Label: "Same as previously reviewed project"});
		$scope.ceResponseType.push({Id: 26, Label: "Sent letter"});
		$scope.ceResponseType.push({Id: 27, Label: "Signed off on"});
		$scope.ceResponseType.push({Id: 28, Label: "Simple Notification"});
	
	/*$scope.ceResponseType = [];
		$scope.ceResponseType.push("APE letter");
		$scope.ceResponseType.push("Asked to be consulting party");
		$scope.ceResponseType.push("Defer to other tribe(s)");
		$scope.ceResponseType.push("Determination of Eligibility");
		$scope.ceResponseType.push("Did not review");
		$scope.ceResponseType.push("Emailed Comments");
		$scope.ceResponseType.push("Finding of Effect");
		$scope.ceResponseType.push("Issued survey/excavation permit");
		$scope.ceResponseType.push("Let it go");
		$scope.ceResponseType.push("Missed opportunity to review");
		$scope.ceResponseType.push("NAGPRA FR Notice");
		$scope.ceResponseType.push("NAGPRA inventory/summary");
		$scope.ceResponseType.push("none--ok");
		$scope.ceResponseType.push("Other");
		$scope.ceResponseType.push("Out of area");
		$scope.ceResponseType.push("Permit Application");
		$scope.ceResponseType.push("Report for Review");
		$scope.ceResponseType.push("Requested a monitor");
		$scope.ceResponseType.push("Requested a survey");
		$scope.ceResponseType.push("Requested additional information");
		$scope.ceResponseType.push("Requested report");
		$scope.ceResponseType.push("Requested testing");
		$scope.ceResponseType.push("Response to comments");
		$scope.ceResponseType.push("Reviewed report");
		$scope.ceResponseType.push("Same as previously reviewed project");
		$scope.ceResponseType.push("Sent letter");
		$scope.ceResponseType.push("Signed off on");
		$scope.ceResponseType.push("Simple Notification");
	*/	
	console.log("$scope.ceResponseType is next...");
	console.dir($scope.ceResponseType);
	
	/*$scope.responseTypeOptions = $rootScope.responseTypeOptions = makeObjects($scope.ceResponseType, 'Id','Label') ;
	console.log("$scope.responseTypeOptions is next...");
	console.dir($scope.responseTypeOptions);
	*/

	var keepGoing = true;
	var foundIt = false;
	//var responseTypeIndex = 0;
	//var responseTypeMarker = "";
	/*angular.forEach($scope.responseTypeOptions, function(option){
		console.log("option = x" + option + "x, $scope.ce_row.ResponseType = x" + $scope.ce_row.ResponseType + "x.");
		if ((keepGoing) && (option.indexOf($scope.ce_row.ResponseType) >= 0))
		{
			console.log("option = " + option);
			console.log("Found the ResponseType...");
			responseTypeMarker = responseTypeIndex;
			$scope.ce_row.ResponseType = "" + responseTypeMarker;
			foundIt = true;
			keepGoing = false;
		}
		responseTypeIndex++;
	});
	*/
	
	// If ce_row.CorrespondenceDate exists, then we are editing.
	if ($scope.ce_row.CorrespondenceDate)
	{
		angular.forEach($scope.ceResponseType, function(option){
		//console.log("option.Label = x" + option.Label + "x, $scope.ce_row.ResponseType = x" + $scope.ce_row.ResponseType + "x.");
			if ((keepGoing) && (option.Label === $scope.ce_row.ResponseType))
			{
				//console.log("option.Label = " + option.Label);
				//console.log("Found the ResponseType...");
				foundIt = true;
				keepGoing = false;
			}
			//responseTypeIndex++;
		});
	
		if (!foundIt)
		{
			console.log("Value of ResponseType is not in the list...");
			$scope.ce_row.OtherResponseType = $scope.ce_row.ResponseType;
			$scope.ce_row.ResponseType = "Other";
			$scope.showOtherResponseType = true;		
		}
		
		foundIt = false;
		keepGoing = true;
		//console.log("$scope.ce_row.CorrespondenceType is next...");
		//console.dir($scope.ce_row.CorrespondenceType);
		angular.forEach($scope.ceCorrespondenceType, function(option){
			//console.log("option is next...");
			//console.dir(option);
			//console.log("option.Label = x" + option.Label + "x, $scope.ce_row.CorrespondenceType = x" + $scope.ce_row.CorrespondenceType + "x.");
			if ((keepGoing) && (option.Label === $scope.ce_row.CorrespondenceType))
			{
				//console.log("option.Label = " + option.Label);
				//console.log("Found the CorrespondenceType...");
				foundIt = true;
				keepGoing = false;
			}
		});
		
	
		if (!foundIt)
		{
			console.log("Value of CorrespondenceType is not in the list...");
			$scope.ce_row.OtherCorrespondenceType = $scope.ce_row.CorrespondenceType;
			$scope.ce_row.CorrespondenceType = "Other";
			$scope.showOtherCorrespondenceType = true;		
		}
	}
	/*console.log("Location of ResponseType = " + $scope.ceResponseType.indexOf($scope.ce_row.ResponseType));
	if ($scope.ceResponseType.indexOf($scope.ce_row.ResponseType) < 0)
	{
		// The value of ResponseType IS NOT in our array of possible values, which means we have an odd item,
		// so we must do some jiggling...
		console.log("Value of ResponseType is not in the list...");
		$scope.ce_row.OtherResponseType = $scope.ce_row.ResponseType;
		$scope.ce_row.ResponseType = "Other";
		$scope.showOtherResponseType = true;
	}
	*/
    if($scope.ce_row.Id > 0)
    {
        $scope.header_message = "Edit Event for Project " + $scope.viewSubproject.ProjectName;
    }
	else
	{
		if ((typeof $scope.viewSubproject !== 'undefined' ) && ($scope.viewSubproject !== null))
			$scope.header_message = "Add Event to Project " + $scope.viewSubproject.ProjectName;
		else if ((typeof $scope.crppProjectName !== 'undefined' ) && ($scope.crppProjectName !== null))
			$scope.header_message = "Add Event to Project " + $scope.crppProjectName;
	}
	
	if (!$scope.ce_row.NumberOfDays)
		$scope.ce_row.NumberOfDays = "Other";
	
	//console.log("$scope.ce_row is next...");
	//console.dir($scope.ce_row);
	
	$scope.field = {
		DbColumnName: "EventFiles"
	};
	
	//console.log("$scope is next...");
	//console.dir($scope);
	
	/*$scope.ceEvents = function(items, key) {
		element.all(by.repeater(key + ' in $scope.viewSubproject.CorrespondenceEvents').column(key + '.EventComments')).then(function(arr) {
			arr.forEach(function(wd, i) {
			  expect(wd.getText()).toMatch(items[i]);
			});
		});
	};
	
	$scope.ceFilterEventComments = function()
	{
		var searchEventComments = element(by.model('correspondenceEventsFilter.EventComments'));
		var strict = element(by.model('strict'));
		searchEventComments.clear();
		searchEventComments.sendKeys('i');
		$scope.ceEvents($scope.viewSubproject.CorrespondenceEvents, event);
		//strict.click();
	}
	*/
	
	$scope.openFileModal = function(row, field)
	{
		console.log("Inside ModalAddCorrespondenceEventCtrl, openFileModal...");
		console.log("row is next...");
		console.dir(row);
		console.log("field is next...");
		console.dir(field);
		$scope.file_row = row;
		$scope.file_field = field;
		
		var modalInstance = $modal.open({
			templateUrl: 'app/core/common/components/file/templates/modal-file.html',
			controller: 'FileModalCtrl',
			scope: $scope, //scope to make a child of
		});
	};
	
	$scope.selectCorrespondenceType = function () {
		console.log("Inside selectCorrespondenceType...");
		console.log("$scope.ce_row at top of selectCorrespondenceType is next...");
		console.dir($scope.ce_row);
		if ($scope.ce_row.CorrespondenceType === "Other")
			$scope.showOtherCorrespondenceType = true;
		else
		{
			$scope.showOtherCorrespondenceType = false;
			$scope.ce_row.OtherCorrespondenceType = null;
		}
		
		console.log("$scope.showOtherCorrespondenceType = " + $scope.showOtherCorrespondenceType);
		console.log("$scope.ce_row at end of selectCorrespondenceType is next...");
		console.dir($scope.ce_row);
	};
	
	/*$scope.responseTypeChanged = function () {
		console.log("Inside responseTypeChanged...");
		console.log("$scope.ce_row is next...");
		console.dir($scope.ce_row);
		if ($scope.ce_row.ResponseType === "Other")
			$scope.showOtherResponseType = true;
		else
		{
			$scope.showOtherResponseType = false;
			$scope.ce_row.OtherResponseType = 'undefined';
		}
		
		console.log("$scope.showOtherResponseType = " + $scope.showOtherResponseType);
	};
	*/
	
	$scope.selectResponseType = function () {
		console.log("Inside selectResponseType...");
		console.log("$scope.ce_row at top of selectResponseType is next...");
		console.dir($scope.ce_row);
		if ($scope.ce_row.ResponseType === "Other")
			$scope.showOtherResponseType = true;
		else
		{
			$scope.showOtherResponseType = false;
			$scope.ce_row.OtherResponseType = null;
		}
		
		console.log("$scope.showOtherResponseType = " + $scope.showOtherResponseType);
		console.log("$scope.ce_row at end of selectResponseType is next...");
		console.dir($scope.ce_row);
	};

	$scope.GetTypeOfResponse = function(){
		var theName = [];
		theName.push($filter('ResponseTypeFilter')($scope.ResponseTypeList, $scope.ce_row.ResponseType.Id))[0];
		console.log("theName is next...");
		console.dir(theName);
		
	};


	
	//field = DbColumnName
	$scope.onFileSelect = function(field, files)
	{
		console.log("Inside ModalAddCorrespondenceEventCtrl, onFileSelect");
		console.log("file selected! " + field);
		$scope.filesToUpload[field] = files;
	};
	
	/*$scope.$watch("CorrespondenceDate", function(newValue, oldValue){
		console.log("CorrespondenceDate changed...");
	});
	*/
	
	$scope.calculateDateOfResponse = function(){
		console.log("Inside calculateDateOfResponse...");
		console.log("$scope.ShowDateOfResponsePopup = " + $scope.ShowDateOfResponsePopup);
		console.log("$scope.ce_row is next...");
		console.dir($scope.ce_row);
		//console.log("$scope.ce_row.NumberOfDays.length = " + $scope.ce_row.NumberOfDays.length);
		
		var	dtDateOfResponse = 'undefined';
		var	strDateOfResponse = 'undefined';
		
		/* 	Initially, we set NumberOfDays to Other, with the placeholder in the box on the form.
		*	When the user chooses a number, we change the NumberOfDays to a DatePicker.
		*	If the user chooses Other again, we switch back to the placeholder.
		*/
		if ($scope.ce_row.NumberOfDays.length < 3)
		{
			//if ($scope.ce_row.CorrespondenceDate)
			//console.log("$scope.ce_row.CorrespondenceDate text:  " + $scope.ce_row.CorrespondenceDate.toString());

			// If the user left the Date of Correspondence blank, get today's date.
			// Otherwise, use the date they picked.
			if ((!$scope.ce_row.CorrespondenceDate) || ($scope.ce_row.CorrespondenceDate === null))
			{
				console.log("Date of Correspondence left blank; using today's date...");
				dtDateOfResponse = new Date();
			}
			else
			{
				console.log("User picked this date...");
				console.dir($scope.ce_row.CorrespondenceDate);

				// If we just copy $scope.ce_row.CorrespondenceDate into dtDateOfResponse,
				// all that really gets copied is the reference.  As we do calculations
				// and change dtDateOfResponse, the same changes happen to $scope.ce_row.CorrespondenceDate.
				// To avoid this, we clone the object in the next line, in order to break that link.
				var strTmpDate = JSON.parse(JSON.stringify($scope.ce_row.CorrespondenceDate));
				//console.log("strTmpDate = " + strTmpDate);

				var dtTempDate = new Date(strTmpDate);
				//var dtTempDate = Date.parse(strTmpDate);
				console.log("dtTempDate " + dtTempDate);
				dtDateOfResponse = dtTempDate;
			}
			
			console.log("dtDateOfResponse initial setting is next...");
			console.dir(dtDateOfResponse);
			
			dtDateOfResponse.setDate(dtDateOfResponse.getDate() + parseInt($scope.ce_row.NumberOfDays));
			//console.log("dtDateOfResponse after adding days = " + dtDateOfResponse);

			var strDateOfResponse = ServiceUtilities.formatDate2(dtDateOfResponse);
			//console.log("strDateOfResponse after formatting = " + strDateOfResponse);

			// Extract the date info from the date/time string.
			var intSpaceLocation = strDateOfResponse.indexOf(" ");
			strDateOfResponse = strDateOfResponse.substring(0, intSpaceLocation);
			console.log("strDateOfResponse (text version) = " + strDateOfResponse);


			$scope.ce_row.ResponseDate = strDateOfResponse;
			console.log("$scope.ce_row.ResponseDate = " + $scope.ce_row.ResponseDate);
			
			console.log("$scope.ce_row is next...");
			console.dir($scope.ce_row);
			//$scope.ShowDateOfResponsePopup  = true;
		}
		else
		{
			$scope.ShowDateOfResponsePopup  = false;
			//$scope.ce_row.ResponseDate = null;
		}
	};
	
	$scope.$watch('fileProgress', function(){
		console.log("Inside watch fileProgress...");
		console.log("$scope.fileCount = " + $scope.fileCount + ", $scope.fileProgress = " + $scope.fileProgress);
		if($scope.fileProgress < $scope.fileCount)
			return;
		
		if ($scope.saving)
		{
			$scope.loading = false; // Stop the fish spinner.
			$scope.showCloseButton = true;
			$scope.showCancelButton = false;
			$scope.showFormItems = false;
		}
	});
	
    $scope.save = function(){
		console.log("Inside ModalAddCorrespondenceEventCtrl, save...");
		//console.log("$scope is next...");
		//console.dir($scope);
		
		$scope.saving = true; // Used in $scope.$watch('fileProgress'
		$scope.loading = true; // Start the fish spinner.
		
		//console.log("$scope.ce_row.ResponseType.Id = " + $scope.ce_row.ResponseType.Id);
		//console.log("$scope.ce_row.ResponseType.Name = " + $scope.ce_row.ResponseType.Name);
		console.log("$scope.ce_row.ResponseType = " + $scope.ce_row.ResponseType);
		var saveRow = angular.copy($scope.ce_row);
		console.log("saveRow is next, before checking the Id...");
		console.dir(saveRow);
		if (!saveRow.Id)
			saveRow.Id = 0;
		//$scope.foundDuplicate = false;
		
		console.log("saveRow is next, after checking/setting the Id...");
		console.dir(saveRow);

		if ($scope.foundDuplicate)
		{
			alert("One or more of the files to upload is a duplicate!");
			return;
		}
		
		var subprojectId = 0;
		if ($scope.viewSubproject)
			subprojectId = $scope.viewSubproject.Id
		else
			subprojectId = $scope.subprojectId;
		
		// First let's handle the files.
		if ($scope.filesToUpload.EventFiles)
		{
			// Count how many files we have.
			$scope.fileCount = 0;
			angular.forEach($scope.filesToUpload.EventFiles, function(aFile){
				$scope.fileCount++;
			});
			console.log("$scope.fileCount = " + $scope.fileCount + ", $scope.fileProgress = " + $scope.fileProgress);
			
			console.log("$scope.filesToUpload.EventFiles is next...");
			console.dir($scope.filesToUpload.EventFiles);
			for(var i = 0; i < $scope.filesToUpload.EventFiles.length; i++)
			{
				var file = $scope.filesToUpload.EventFiles[i];
				console.log("file is next...");
				console.dir(file);
				
				var newFileNameLength = file.name.length;
				console.log("file name length = " + newFileNameLength);

				// Inform the user immediately, if there are duplicate files.
				if ($scope.foundDuplicate)
					alert(errors);
				else
				{
					console.log("file.success = " + file.success);
					if(file.success != "Success")
					{
						console.log("No file.success, so let's save the file...");
						$scope.upload = $upload.upload({
                            url: serviceUrl + '/api/v1/crppsubproject/uploadcrppsubprojectfile',
							method: "POST",
							// headers: {'headerKey': 'headerValue'},
							// withCredential: true,
							//data: {ProjectId: $scope.project.Id, SubprojectId: subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name},
							data: {ProjectId: $scope.project.Id, SubprojectId: subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name, DatastoreTablePrefix: $scope.DatastoreTablePrefix},
							file: file,

							}).progress(function(evt) {
								console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
							}).success(function(data, status, headers, config) {
								console.dir(data);
								console.dir(status);
								console.dir(headers);
								console.dir(config);
								console.dir(file);
								config.file.success = "Success";
								console.log("done and success!");
								$scope.fileProgress++;
								console.log("$scope.fileCount = " + $scope.fileCount + ", $scope.fileProgress = " + $scope.fileProgress);
							})
							.error(function(data, status, headers, config) {
								$scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
								//console.log(file.name + " was error.");
								config.file.success = "Failed";
							});
						console.log("$scope.upload is next...");
						console.dir($scope.upload);
					}
				}
			}
			
			angular.forEach($scope.filesToUpload, function(files, field){

				if(field == "null" || field == "")
					return;
				
				var local_files = [];

				for(var i = 0; i < files.length; i++)
				{
					console.log("$scope is next...")
					//console.dir($scope);
				  
					var file = files[i];
					console.log("Reviewing results on file " + file.Name);
					console.dir(file);
				  
					console.log("$scope.errors is next...");
					console.dir($scope.errors);
					console.log("typeof $scope.errors = " + typeof $scope.errors);
					if(file.data && file.data.length == 1) //since we only upload one at a time...
					{
						//console.dir(file.data);
						local_files.push(file.data[0]); //only ever going to be one if there is any...
						//console.log("file id = "+file.data[0].Id);
					}
					else if (typeof $scope.errors === 'undefined')
					{
						console.log("No errors...");
					}
					else
					{
						//console.log("no file id.");
						$scope.foundDuplicate = true;
						$scope.errors.heading.push("There was a problem saving file: " + file.Name + " - Try a unique filename.");
						//console.log("$scope is next...");
						//console.dir($scope);
						throw "Problem saving file: " + file.Name;
					}
				}

				//console.log("$scope is next...");
				//console.dir($scope);
				console.log("$scope.file_row is next...");
				console.dir($scope.file_row);
				console.log("field = " + field);
				//if we already had actual files in this field, copy them in
				if($scope.file_row[field])
				{
					console.log("On Files field...");
					var current_files = angular.fromJson($scope.file_row[field]);
					angular.forEach(current_files, function(file){
						if(file.Id) //our incoming files don't have an id, just actual files.
							local_files.push(file);		
					});
				}

				$scope.file_row[field] = angular.toJson(local_files);
				//console.log("Ok our new list of files: "+$scope.row[field]);
			});
		}
		
		// Now let's handle the other fields on the form.
		console.log("typeof saveRow.CorrespondenceDate = " + typeof saveRow.CorrespondenceDate);
		if (typeof saveRow.CorrespondenceDate !== "string")
		{
			var strCorrespondenceDate = ServiceUtilities.toExactISOString(saveRow.CorrespondenceDate);
			console.log("strCorrespondenceDate = " + strCorrespondenceDate);
			saveRow.CorrespondenceDate = ServiceUtilities.extractDateFromString(strCorrespondenceDate);
			console.log("saveRow.CorrespondenceDate = " + saveRow.CorrespondenceDate);
		}
		
		//saveRow.CorrespondenceDate = ServiceUtilities.formatDate2(saveRow.CorrespondenceDate);
		//console.log("saveRow.CorrespondenceDate = " + saveRow.CorrespondenceDate);
		
		if (saveRow.ResponseDate)
		{
			console.log("saveRow.ResponseDate initially = " + saveRow.ResponseDate);
			console.log("typeof saveRow.ResponseDate = " + typeof saveRow.ResponseDate);
			if (typeof saveRow.ResponseDate !== "string")
			{
				var strResponseDate = ServiceUtilities.toExactISOString(saveRow.ResponseDate);
				console.log("strResponseDate = " + strResponseDate);
			}
			else
			{
				var dtDateOfResponse = new Date(saveRow.ResponseDate);
				console.log("dtDateOfResponse = " + dtDateOfResponse);
				var strResponseDate = ServiceUtilities.toExactISOString(dtDateOfResponse);
				console.log("strResponseDate = " + strResponseDate);
			}
			saveRow.ResponseDate = ServiceUtilities.extractDateFromString(strResponseDate);
			console.log("saveRow.ResponseDate after conversion = " + saveRow.ResponseDate);
			
		}
		
		console.log("saveRow is next, after processing dates...");
		console.dir(saveRow);
		
		if (saveRow.NumberOfDays === "Other")
			saveRow.NumberOfDays = null;
		
		if (saveRow.CorrespondenceType === "Other")
		{
			saveRow.CorrespondenceType = saveRow.OtherCorrespondenceType;
			saveRow.OtherCorrespondenceType = 'undefined';  // Throw this away, because we do not want to save it; no database field or it.
		}
		
		// Note:  I could not get the following working; while it pulled the ResponseType name OK for the select, when you clicked save, 
		// the ResponseTypeName was always 'undefined'.
		/* On the form, $scope.subproject_row.ResponseType is an object, like this: (Id: theId Name: theName)
		* The technique used to grab the ResponseType works on the first click (an improvement).  
		* Note:  The improvement only occurred on the subproject page; the select box for ResponseType did not behave the same way.
		* Therefore, I (gc) kept the technique, and chose to extract/reset $scope.subproject_row.Agency here in the controller, as just the name.
		*/
		//console.log("typeof saveRow.ResponseType = " + typeof saveRow.ResponseType);
		//saveRow.ResponseType = 'undefined';
		//saveRow.ResponseType = $scope.ce_row.ResponseType.Name;
		//console.log("saveRow.ResponseType = " + saveRow.ResponseType);
		
		// Response Type:  If the user selected Other, we must use the name they supplied in OtherResponseType.
		//if ((saveRow.OtherResponseType) && (typeof saveRow.OtherResponseType !== 'undefined'))
		if (saveRow.ResponseType === "Other")
		{
			saveRow.ResponseType = saveRow.OtherResponseType;
			saveRow.OtherResponseType = 'undefined'; // Throw this away, because we do not want to save it; no database field or it.
		}

		/*var promise = SubprojectService.saveCorrespondenceEvent($scope.project.Id, $scope.viewSubproject.Id, saveRow);
		if (typeof promise !== 'undefined')
		{
			promise.$promise.then(function(){
				$scope.reloadSubprojects();
				$scope.viewSelectedSubproject();
				$("#correspondenceEvents").load("correspondenceEvents.html #correspondenceEvents");
				$modalInstance.dismiss();
				})
		}
		*/
		
		//console.log("$scope is next...");
		//console.dir($scope);
		
		/*	If the user chooses to create a Correspondence Event (CE), at the same time that they are creating a new Subproject,
		*   $scope.viewSubproject is not available yet, so we cannot pass the Id from there.  When we create the new Subproject,
		*   we capture the Id from the Subproject, which is the same thing, so we pass that instead, to create the CE.
		*/
		if ($rootScope.crppProjectName)
			$scope.crppProjectName = $rootScope.crppProjectName;
		
		if ($scope.viewSubproject !== null)
        {
            console.log("$scope.viewSubproject is present, using that...");
			console.log("$scope.viewSubproject.Id = " + $scope.viewSubproject.Id);
			var promise = SubprojectService.saveCorrespondenceEvent($scope.project.Id, $scope.viewSubproject.Id, saveRow);
			if (typeof promise !== 'undefined')
			{
                promise.$promise.then(function () {
                    //$scope.reloadSubprojects();
                    //$scope.viewSelectedSubproject();
                    //$scope.viewSelectedSubproject($scope.viewSubproject);
                    //$("#correspondenceEvents").load("correspondenceEvents.html #correspondenceEvents");
                    //$modalInstance.dismiss();
                    if (saveRow.Id === 0) //we saved a new one!
                        $scope.postAddCorrespondenceEventUpdateGrid(promise);
                    else //we edited one!
                        $scope.postEditCorrespondenceEventUpdateGrid(promise);

                    console.log("all done saving correspondence event!");

                    console.log("1 typeof $scope.errors = " + typeof $scope.errors + ", $scope.fileCount = " + $scope.fileCount + ", $scope.fileProgress = " + $scope.fileProgress);
                    if ($scope.fileCount === 0) {
                        $scope.loading = false; // Stop the fish spinner.
                        $scope.showCloseButton = true;
                        $scope.showCancelButton = false;
                        $scope.showFormItems = false;
                    }
                });
			}	
		}
		else if ((typeof $scope.crppProjectName !== 'undefined' ) && ($scope.crppProjectName !== null))
		{
			console.log("$scope.viewSubproject missing, using $scope.subprojectId:  " + $scope.subprojectId);
			var promise = SubprojectService.saveCorrespondenceEvent($scope.project.Id, $scope.subprojectId, saveRow);
			if (typeof promise !== 'undefined')
			{
				promise.$promise.then(function(){
					$scope.reloadSubprojects();
					//$scope.viewSelectedSubproject();
					$("#correspondenceEvents").load("correspondenceEvents.html #correspondenceEvents");
					//$modalInstance.dismiss();
					})
					
				if ($scope.fileCount === 0)
				{
					$scope.loading = false; // Stop the fish spinner.
					$scope.showCloseButton = true;
					$scope.showCancelButton = false;
					$scope.showFormItems = false;					
				}
			}
		}
    };
	
	$scope.close = function(){
		console.log("Inside $scope.close...");
		$modalInstance.dismiss();	
	};

    $scope.cancel = function(){
		$modalInstance.dismiss();
    };
	
	$scope.gotoBottom = function (){
		// set the location.hash to the id of
		// the element you wish to scroll to.
		$location.hash('bottom');
		
		// call $anchorScroll()
		$anchorScroll();
	};
	  
	$scope.gotoTopCorrespondenceEventsTop = function (){
		// set the location.hash to the id of
		// the element you wish to scroll to.
		console.log("Inside gotoTopCorrespondenceEventsTop...");
		//$location.hash('top');
		$location.hash('ceTop');
		
		// call $anchorScroll()
		$anchorScroll();
	};
	  
	$scope.gotoCategory = function (category) {
		$location.hash(category);
		$anchorScroll();
	};

  }
];

define("private/crpp/components/crpp-contracts/modal-add-correspondence-event", function(){});


var modal_create_crpp_subproject = ['$scope', '$rootScope', '$modalInstance', 'DatasetService', 'SubprojectService', 'ServiceUtilities',
    '$timeout', '$location', '$anchorScroll', '$document',
    function ($scope, $rootScope, $modalInstance, DatasetService, SubprojectService, ServiceUtilities,
        $timeout, $location, $anchorScroll, $document) {
        console.log("Inside ModalCreateSubprojectCtrl...");

        //$scope.agencyInfo = [[]];

        $document.on('keydown', function (e) {
            //console.log("Inside document.on keydown...");
            //console.log("e is next...");
            //console.dir(e);
            //console.log("e.target.nodeName = " + e.target.nodeName);

            // Note:  keyCode 8 = Backspace; the nodeName value is in uppercase, so we must check for that here.
            if ((e.keyCode === 8) && (e.target.nodeName === "TEXTAREA")) {
                //console.log("  Backspace pressed...and we are in a TEXTAREA");
                //e.preventDefault();

                var keyboardEvent = $document[0].createEvent("KeyboardEvent");
                var initMethod = typeof keyboardEvent.initKeyboardEvent !== 'undefined' ? "initKeyboardEvent" : "initKeyEvent";

                keyboardEvent[initMethod](
                    "keydown", // event type : keydown, keyup, keypress
                    true, // bubbles
                    true, // cancelable
                    window, // viewArg: should be window
                    false, // ctrlKeyArg
                    false, // altKeyArg
                    false, // shiftKeyArg
                    false, // metaKeyArg
                    37, // keyCodeArg : unsigned long the virtual key code, else 0.  37 = Left Arrow key
                    0 // charCodeArgs : unsigned long the Unicode character associated with the depressed key, else 0				
                );
                //console.log("Just did left arrow...");

                document.dispatchEvent(keyboardEvent);

                keyboardEvent[initMethod](
                    "keydown", // event type : keydown, keyup, keypress
                    true, // bubbles
                    true, // cancelable
                    window, // viewArg: should be window
                    false, // ctrlKeyArg
                    false, // altKeyArg
                    false, // shiftKeyArg
                    false, // metaKeyArg
                    46, // keyCodeArg : unsigned long the virtual key code, else 0.  46 = Delete key
                    0 // charCodeArgs : unsigned long the Unicode character associated with the depressed key, else 0				
                );

                //console.log("Doing delete...");			
                return document.dispatchEvent(keyboardEvent);
            }
        });

        $scope.header_message = "Create new CRPP project";
        $rootScope.crppProjectName = $scope.crppProjectName = "";
        $rootScope.projectId = $scope.project.Id;

        $scope.subproject_row = {
            StatusId: 0,
            //OwningDepartmentId: 1,
        };

        $scope.agencyList = [];
        $scope.agencyList.push({ Id: 0, Label: "ACHP" });
        $scope.agencyList.push({ Id: 1, Label: "Anderson Perry" });
        $scope.agencyList.push({ Id: 2, Label: "Army" });
        $scope.agencyList.push({ Id: 3, Label: "Baker County" });
        $scope.agencyList.push({ Id: 4, Label: "Benton County" });
        $scope.agencyList.push({ Id: 5, Label: "BIA" });
        $scope.agencyList.push({ Id: 6, Label: "BLM" });
        $scope.agencyList.push({ Id: 7, Label: "Blue Mountain Ranger District" });
        $scope.agencyList.push({ Id: 8, Label: "BNSF" });
        $scope.agencyList.push({ Id: 9, Label: "BOR" });
        $scope.agencyList.push({ Id: 10, Label: "BPA" });
        $scope.agencyList.push({ Id: 11, Label: "Camas" });
        $scope.agencyList.push({ Id: 12, Label: "CenturyLink" });
        $scope.agencyList.push({ Id: 13, Label: "Clark County" });
        $scope.agencyList.push({ Id: 14, Label: "College Place" });
        $scope.agencyList.push({ Id: 15, Label: "Columbia County" });
        $scope.agencyList.push({ Id: 16, Label: "Corps Portland District" });
        $scope.agencyList.push({ Id: 17, Label: "Corps Regulatory" });
        $scope.agencyList.push({ Id: 18, Label: "Corps Walla Walla District" });
        $scope.agencyList.push({ Id: 19, Label: "CRGNSA" });
        $scope.agencyList.push({ Id: 20, Label: "CTUIR" });
        $scope.agencyList.push({ Id: 21, Label: "DAHP" });
        $scope.agencyList.push({ Id: 22, Label: "DECD" });
        $scope.agencyList.push({ Id: 23, Label: "Department of Ecology" });
        $scope.agencyList.push({ Id: 24, Label: "DEQ" });
        $scope.agencyList.push({ Id: 25, Label: "DOE" });
        $scope.agencyList.push({ Id: 26, Label: "DOGAMI" });
        $scope.agencyList.push({ Id: 27, Label: "DSL" });
        $scope.agencyList.push({ Id: 28, Label: "EPA" });
        $scope.agencyList.push({ Id: 29, Label: "FAA" });
        $scope.agencyList.push({ Id: 30, Label: "FCC" });
        $scope.agencyList.push({ Id: 31, Label: "Federal Transit Authority" });
        $scope.agencyList.push({ Id: 32, Label: "FEMA" });
        $scope.agencyList.push({ Id: 33, Label: "FERC" });
        $scope.agencyList.push({ Id: 34, Label: "FHWA" });
        $scope.agencyList.push({ Id: 35, Label: "Fisheries" });
        $scope.agencyList.push({ Id: 36, Label: "Fort Vancouver (NPS)" });
        $scope.agencyList.push({ Id: 37, Label: "Franklin County" });
        $scope.agencyList.push({ Id: 38, Label: "FSA" });
        $scope.agencyList.push({ Id: 39, Label: "Hells Canyon NRA" });
        $scope.agencyList.push({ Id: 40, Label: "Heppner Ranger District" });
        $scope.agencyList.push({ Id: 41, Label: "Hermiston" });
        $scope.agencyList.push({ Id: 42, Label: "Hood River County" });
        $scope.agencyList.push({ Id: 43, Label: "HUD" });
        $scope.agencyList.push({ Id: 44, Label: "Idaho Power" });
        $scope.agencyList.push({ Id: 45, Label: "Irrigon" });
        $scope.agencyList.push({ Id: 46, Label: "John Day Fossil Beds (NPS)" });
        $scope.agencyList.push({ Id: 47, Label: "Kennewick" });
        $scope.agencyList.push({ Id: 48, Label: "Klickitat County" });
        $scope.agencyList.push({ Id: 49, Label: "La Grande Ranger District" });
        $scope.agencyList.push({ Id: 50, Label: "Landowner" });
        $scope.agencyList.push({ Id: 51, Label: "Malheur National Forest" });
        $scope.agencyList.push({ Id: 52, Label: "Morrow County" });
        $scope.agencyList.push({ Id: 53, Label: "Navy" });
        $scope.agencyList.push({ Id: 54, Label: "Nez Perce National Historical Park (NPS)" });
        $scope.agencyList.push({ Id: 55, Label: "North Fork John Day Ranger District" });
        $scope.agencyList.push({ Id: 56, Label: "Northwest Pipeline" });
        $scope.agencyList.push({ Id: 57, Label: "NPS" });
        $scope.agencyList.push({ Id: 58, Label: "NRCS" });
        $scope.agencyList.push({ Id: 59, Label: "ODEQ" });
        $scope.agencyList.push({ Id: 60, Label: "ODOE" });
        $scope.agencyList.push({ Id: 61, Label: "ODOT" });
        $scope.agencyList.push({ Id: 62, Label: "OPRD" });
        $scope.agencyList.push({ Id: 63, Label: "Oregon City" });
        $scope.agencyList.push({ Id: 64, Label: "Oregon Military Department/Oregon Army National Guard" });
        $scope.agencyList.push({ Id: 65, Label: "Other" });
        $scope.agencyList.push({ Id: 66, Label: "OWRD" });
        $scope.agencyList.push({ Id: 67, Label: "PacifiCorp" });
        $scope.agencyList.push({ Id: 68, Label: "Pasco" });
        $scope.agencyList.push({ Id: 69, Label: "PGE" });
        $scope.agencyList.push({ Id: 70, Label: "Planning Dept" });
        $scope.agencyList.push({ Id: 71, Label: "Pomeroy Ranger District" });
        $scope.agencyList.push({ Id: 72, Label: "Port of Benton" });
        $scope.agencyList.push({ Id: 73, Label: "Port of Clarkston" });
        $scope.agencyList.push({ Id: 74, Label: "Port of Columbia" });
        $scope.agencyList.push({ Id: 75, Label: "Port of Kennewick" });
        $scope.agencyList.push({ Id: 76, Label: "Port of Morrow" });
        $scope.agencyList.push({ Id: 77, Label: "Port of Umatilla" });
        $scope.agencyList.push({ Id: 78, Label: "Port of Walla Walla" });
        $scope.agencyList.push({ Id: 79, Label: "Public Works" });
        $scope.agencyList.push({ Id: 80, Label: "RAF" });
        $scope.agencyList.push({ Id: 81, Label: "Recreation and Conservation Office" });
        $scope.agencyList.push({ Id: 82, Label: "Richland" });
        $scope.agencyList.push({ Id: 83, Label: "Rural Development" });
        $scope.agencyList.push({ Id: 84, Label: "RUS" });
        $scope.agencyList.push({ Id: 85, Label: "SHPO Oregon" });
        $scope.agencyList.push({ Id: 86, Label: "Skamania County" });
        $scope.agencyList.push({ Id: 87, Label: "Skamania County PUD" });
        $scope.agencyList.push({ Id: 88, Label: "Umatilla County" });
        $scope.agencyList.push({ Id: 89, Label: "Umatilla National Forest" });
        $scope.agencyList.push({ Id: 90, Label: "UPRR" });
        $scope.agencyList.push({ Id: 91, Label: "USACE" });
        $scope.agencyList.push({ Id: 92, Label: "USFWS" });
        $scope.agencyList.push({ Id: 93, Label: "VA" });
        $scope.agencyList.push({ Id: 94, Label: "Vancouver" });
        $scope.agencyList.push({ Id: 95, Label: "Walla Walla City" });
        $scope.agencyList.push({ Id: 96, Label: "Walla Walla County" });
        $scope.agencyList.push({ Id: 97, Label: "Walla Walla Ranger District" });
        $scope.agencyList.push({ Id: 98, Label: "Wallowa County" });
        $scope.agencyList.push({ Id: 99, Label: "Wallowa Valley Ranger District" });
        $scope.agencyList.push({ Id: 100, Label: "Wallowa-Whitman National Forest" });
        $scope.agencyList.push({ Id: 101, Label: "Wasco County" });
        $scope.agencyList.push({ Id: 102, Label: "Washington Department of Commerce" });
        $scope.agencyList.push({ Id: 103, Label: "Washington Department of Health" });
        $scope.agencyList.push({ Id: 104, Label: "Washington Department of Natural Resources" });
        $scope.agencyList.push({ Id: 105, Label: "Washington State Parks" });
        $scope.agencyList.push({ Id: 106, Label: "Water Resources" });
        $scope.agencyList.push({ Id: 107, Label: "WDFW" });
        $scope.agencyList.push({ Id: 108, Label: "Western Federal Lands Highway Division" });
        $scope.agencyList.push({ Id: 109, Label: "Whitman Mission (NPS)" });
        $scope.agencyList.push({ Id: 110, Label: "Whitman Unit" });
        $scope.agencyList.push({ Id: 111, Label: "Wildlife" });
        $scope.agencyList.push({ Id: 112, Label: "WSDOT" });
        $scope.agencyList.push({ Id: 113, Label: "Yellowstone National Park" });

        console.log("$scope.agencyList is next...");
        console.dir($scope.agencyList);

        //$scope.agencyOptions = $rootScope.responseTypeOptions = makeObjects($scope.agencyList, 'Id','Label') ;
        //console.log("$scope.agencyOptions is next...");
        //console.dir($scope.agencyOptions);

        $scope.counties = [];

        $scope.countyList = [];
        $scope.countyList.push({ Id: 0, Label: "Asotin" });
        $scope.countyList.push({ Id: 1, Label: "Baker" });
        $scope.countyList.push({ Id: 2, Label: "Benton" });
        $scope.countyList.push({ Id: 3, Label: "Clark" });
        $scope.countyList.push({ Id: 4, Label: "Columbia" });
        $scope.countyList.push({ Id: 5, Label: "Franklin" });
        $scope.countyList.push({ Id: 7, Label: "Garfield" });
        $scope.countyList.push({ Id: 8, Label: "Gilliam" });
        $scope.countyList.push({ Id: 9, Label: "Garfield" });
        $scope.countyList.push({ Id: 10, Label: "Grant, WA" });
        $scope.countyList.push({ Id: 11, Label: "Grant, OR" });
        $scope.countyList.push({ Id: 12, Label: "Hood River" });
        $scope.countyList.push({ Id: 13, Label: "Klickitat" });
        $scope.countyList.push({ Id: 14, Label: "Malheur" });
        $scope.countyList.push({ Id: 15, Label: "Morrow" });
        $scope.countyList.push({ Id: 16, Label: "Multnomah" });
        $scope.countyList.push({ Id: 17, Label: "Other" });
        $scope.countyList.push({ Id: 18, Label: "Sherman" });
        $scope.countyList.push({ Id: 19, Label: "Skamania" });
        $scope.countyList.push({ Id: 20, Label: "Umatilla" });
        $scope.countyList.push({ Id: 21, Label: "Union" });
        $scope.countyList.push({ Id: 22, Label: "Walla Walla" });
        $scope.countyList.push({ Id: 23, Label: "Wallowa" });
        $scope.countyList.push({ Id: 24, Label: "Wasco" });
        $scope.countyList.push({ Id: 25, Label: "Wheeler" });
        $scope.countyList.push({ Id: 26, Label: "Whitman" });

        console.log("$scope.countyList is next...");
        console.dir($scope.countyList);
        //$scope.countyOptions = $rootScope.countyOptions = makeObjects($scope.countyList, 'Id','Label') ;

        $scope.showOtherAgency = false;
        $scope.showOtherProjectProponent = false;
        $scope.showOtherCounty = false;
        $scope.showCountyOptions = false;
        $scope.showAddDocument = true;

        $scope.example1model = [];
        $scope.example1data = [{ id: 1, label: "David" }, { id: 2, label: "Jhon" }, { id: 3, label: "Danny" }];

        if ($scope.viewSubproject) {
            $scope.header_message = "Edit CRPP project: " + $scope.viewSubproject.ProjectName;
            $scope.subproject_row = angular.copy($scope.viewSubproject);
            console.log("$scope.subproject_row is next...");
            console.dir($scope.subproject_row);

            $scope.showAddDocument = false;

            console.log("$scope.subproject_row.Agency = " + $scope.subproject_row.Agency);
            var keepGoing = true;
            var foundIt = false;
            //var responseTypeIndex = 0;

            /*
            *	Need to redo the Agency, Project Proponent, and County
            *
            */
            // Check the Agency
            /*angular.forEach($scope.agencyList, function(option){
            //console.log("option.Label = x" + option.Label + "x, $scope.subproject_row.Agency = x" + $scope.subproject_row.Agency + "x.");
                if ((keepGoing) && (option.Label === $scope.subproject_row.Agency))
                {
                    //console.log("option.Label = " + option.Label);
                    //console.log("Found the Agency...");
                    foundIt = true;
                    keepGoing = false;
                }
                //responseTypeIndex++;
            });
        	
            if (!foundIt)
            {
                console.log("Value of Agency is not in the list...");
                $scope.subproject_row.OtherAgency = $scope.subproject_row.Agency;
                $scope.subproject_row.Agency = "Other";
                $scope.showOtherAgency = true;		
            }
            */
            if ((typeof $scope.subproject_row.OtherAgency !== 'undefined') && ($scope.subproject_row.OtherAgency !== null))
                $scope.showOtherAgency = true;

            /*
            keepGoing = true;
            foundIt = false;
            // Check the Project Proponent  Note:  We use the same list as for the Agency.
            console.log("$scope.subproject_row.ProjectProponent = " + $scope.subproject_row.ProjectProponent);
            angular.forEach($scope.agencyList, function(option){
            //console.log("option.Label = x" + option.Label + "x, $scope.subproject_row.ProjectProponent = x" + $scope.subproject_row.ProjectProponent + "x.");
                if ((keepGoing) && (option.Label === $scope.subproject_row.ProjectProponent))
                {
                    //console.log("option.Label = " + option.Label);
                    //console.log("Found the ProjectProponent...");
                    foundIt = true;
                    keepGoing = false;
                }
                //responseTypeIndex++;
            });
        	
            if (!foundIt)
            {
                console.log("Value of ProjectProponent is not in the list...");
                $scope.subproject_row.OtherProjectProponent = $scope.subproject_row.ProjectProponent;
                $scope.subproject_row.ProjectProponent = "Other";
                $scope.showOtherProjectProponent = true;		
            }
            */
            if ((typeof $scope.subproject_row.OtherProjectProponent !== 'undefined') && ($scope.subproject_row.OtherProjectProponent !== null))
                $scope.showOtherProjectProponent = true;

            /*
            keepGoing = true;
            foundIt = false;
            // Check the County
            console.log("$scope.subproject_row.County = " + $scope.subproject_row.County);
        	
            // Copy the array into a string.
            var strCounty = "";
            angular.forEach($scope.subproject_row.County, function(item){
                strCounty += item + ",";
            });
            console.log("strCounty = " + strCounty);
        	
            // Remove the trailing comma.
            strCounty = strCounty.substring(0, strCounty.length - 1);
            console.log("strCounty = " + strCounty);
            */

            // Now, strip off the "[]".
            if ((typeof $scope.subproject_row.County !== 'undefined') && ($scope.subproject_row.County !== null)) {
                var strCounty = $scope.subproject_row.County;
                strCounty = strCounty.replace(/["\[\]]+/g, '');
                console.log("strCounty = " + strCounty);
                $scope.subproject_row.County = strCounty;
                console.log("$scope.subproject_row.County = " + $scope.subproject_row.County);

                $scope.subproject_row.txtCounty = strCounty;
            }

            if ((typeof $scope.subproject_row.OtherCounty !== 'undefined') && ($scope.subproject_row.OtherCounty !== null))
                $scope.showOtherCounty = true;


            // Now convert our string to an array, to compare with the countyList.
            /*var aryCounties = $scope.subproject_row.County.split(",");
            console.log("aryCounties is next...");
            console.dir(aryCounties);
    
            angular.forEach(aryCounties, function(county){		
            //console.log("option.Label = x" + option.Label + "x, $scope.subproject_row.County = x" + $scope.subproject_row.County + "x.");
                angular.forEach($scope.countyList, function(option){
                    if ((keepGoing) && (option.Label === county))
                    {
                        //console.log("option.Label = " + option.Label);
                        console.log("Found county:  " + county);
                        foundIt = true;
                        keepGoing = false;
                    }
                });
                if (!foundIt)
                {
                	
                }
            });		
            */

            /*angular.forEach($scope.countyList, function(option){
            //console.log("option.Label = x" + option.Label + "x, $scope.subproject_row.County = x" + $scope.subproject_row.County + "x.");
                if ((keepGoing) && (option.Label === $scope.subproject_row.County))
                {
                    //console.log("option.Label = " + option.Label);
                    //console.log("Found the County...");
                    foundIt = true;
                    keepGoing = false;
                }
            });
    
        	
            if (!foundIt)
            {
                console.log("Value of County is not in the list...");
                $scope.subproject_row.OtherCounty = $scope.subproject_row.County;
                $scope.subproject_row.County = "Other";
                $scope.showOtherCounty = true;		
            }
            */



            // First convert our county string into an array.
            /*var strCounty = $scope.subproject_row.County;
            console.log("strCounty = " + strCounty);
        	
            strCounty = strCounty.substring(1, strCounty.length -1);
            console.log("strCounty = " + strCounty);
        	
            strCounty = strCounty.replace(/["]+/g, '');
            console.log("strCounty = " + strCounty);		
        	
            var aryCounty = strCounty.split(",");
            console.log("aryCounty is next...");
            console.dir(aryCounty);
        	
            //var result = document.getElementsByTagName("select");
            //var result = document.getElementById("County");
            //console.dir(result);
            var c = 0;
            angular.forEach(result, function(item){
                console.log(item[c].innerHTML);
                c++;
            });
        	
            var wrappedResult = angular.element(result);
            console.dir(wrappedResult);
            angular.forEach(element.find('select'), function(node)
            {
                if (node.Id === 'County')
                    console.log("Found County select...");
            	
            });
        	
            var counties = angular.element("County").options;
            console.log("counties is next...");
            console.dir(counties);
            angular.forEach(aryCounty, function (county){
                for (var i = 0, max = counties.length; i < max; i++)
                {
                    if (counties[i].innerHTML === county)
                        counties[i].selected = true;
                }
            	
            });		
            $scope.subproject_row.County = aryCounty;
            */
            /*scope.subproject_row.County = 'undefined';
            $scope.subproject_row.County = [];
            angular.forEach(aryCounty, function(county){
                $scope.subproject_row.County.push(county);
            });
            */
            console.log("$scope.subproject_row.County is next...");
            console.dir($scope.subproject_row.County);

            angular.forEach($scope.countyList, function (option) {
                //console.log("option.Label = x" + option.Label + "x, $scope.subproject_row.County = x" + $scope.subproject_row.County + "x.");
                if ((keepGoing) && (option.Label === $scope.subproject_row.County)) {
                    //console.log("option.Label = " + option.Label);
                    //console.log("Found the County...");
                    foundIt = true;
                    keepGoing = false;
                }
            });
            angular.forEach($scope.subproject_row.County, function (county) {
                if (county === "Other")
                    foundIt = true;

            });

            if (!foundIt) {
                console.log("Value of County is not in the list...");
                $scope.subproject_row.OtherCounty = $scope.subproject_row.County;
                $scope.subproject_row.County = "Other";
                $scope.showOtherCounty = true;
            }
        }

        console.log("$scope inside ModalCreateSubprojectCtrl, after initializing, is next...");
        //console.dir($scope);

        $scope.selectAgency = function () {
            console.log("Inside selectAgency...");
            //console.dir($scope);
            console.log("$scope.subproject_row is next...");
            console.dir($scope.subproject_row);

            $scope.showCountyOptions = false;

            if ($scope.subproject_row.Agency === "Other") {
                $scope.showOtherAgency = true;
                $scope.subproject_row.OtherAgency = "";
            }
            else {
                $scope.showOtherAgency = false;
                $scope.subproject_row.OtherAgency = 'undefined';
            }

            console.log("$scope.showOtherAgency = " + $scope.showOtherAgency);
        };

        /*$scope.agencyChanged = function () {
            console.log("Inside agencyChanged...");
            console.log("$scope.subproject_row is next...");
            console.dir($scope.subproject_row);
            if ($scope.subproject_row.Agency === "Other")
            {
                $scope.showOtherAgency = true;
                $scope.subproject_row.OtherAgency = "";
            }
            else
                $scope.showOtherAgency = false;
                $scope.subproject_row.OtherAgency = 'undefined';
        	
            console.log("$scope.showOtherAgency = " + $scope.showOtherAgency);
        };
        */

        $scope.selectProjectProponent = function () {
            console.log("Inside selectProjectProponent...");
            console.log("$scope.subproject_row is next...");
            console.dir($scope.subproject_row);

            $scope.showCountyOptions = false;

            if ($scope.subproject_row.ProjectProponent === "Other") {
                $scope.showOtherProjectProponent = true;
                $scope.subproject_row.OtherProjectProponent = "";
            }
            else {
                $scope.showOtherProjectProponent = false;
                $scope.subproject_row.OtherProjectProponent = 'undefined';
            }

            console.log("$scope.showOtherProjectProponent = " + $scope.showOtherProjectProponent);
        };

        /*$scope.selectCounty = function () {
            console.log("Inside selectCounty...");
            console.log("$scope.subproject_row is next...");
            console.dir($scope.subproject_row);
        	
            var strCounty = $scope.subproject_row.County.toString();
            if (strCounty.indexOf("Other") > -1)
            {
                $scope.showOtherCounty = true;
            }
            else
            {
                $scope.showOtherCounty = false;
            }
            */
		/*if ($scope.subproject_row.County === "Other")
		{
			$scope.showOtherCounty = true;
			$scope.subproject_row.OtherCounty = "";
		}
		else
		{
			$scope.showOtherCounty = false;
			$scope.subproject_row.OtherCounty = 'undefined';
		}
		*/
		/*
		console.log("$scope.showOtherCounty = " + $scope.showOtherCounty);
	};
	*/

        /*$scope.projectProponentChanged = function () {
            console.log("Inside projectProponentChanged...");
            console.log("$scope.viewSubproject is next...");
            console.dir($scope.subproject_row);
            if ($scope.subproject_row.ProjectProponent === "Other")
                $scope.showOtherProjectProponent = true;
            else
                $scope.showOtherProjectProponent = false;
        	
            console.log("$scope.showOtherProjectProponent = " + $scope.showOtherProjectProponent);
        };
        */

        $scope.enteredSelectedCounties = function () {
            $scope.showCountyOptions = true;
        };

        $scope.enteredSomethingElse = function () {
            $scope.showCountyOptions = false;
        };

        $scope.countyChanged = function () {
            console.log("Inside countyChanged...");
            console.log("$scope.subproject_row is next...");
            console.dir($scope.subproject_row);

            $scope.subproject_row.txtCounty = $scope.subproject_row.County.toString();
            if ($scope.subproject_row.txtCounty.indexOf("Other") > -1) {
                $scope.showOtherCounty = true;
            }
            else {
                $scope.showOtherCounty = false;
                $scope.subproject_row.OtherCounty = null;
            }

            /*if ($scope.subproject_row.County === "Other")
                $scope.showOtherCounty = true;
            else
                $scope.showOtherCounty = false;
            */

            //$scope.showOtherCounty = false;
            //var foundOther = false;
            //angular.forEach($scope.subproject_row.County, function(county){
            // There is only one entry for "Other"
			/*if(county === "Other")
			{
				foundOther = true;
				$scope.showOtherCounty = true
				$scope.subproject_row.OtherCounty = [];
			}
			*/
            //});

            //if (!foundOther)
            //	$scope.subproject_row.OtherCounty = 'undefined';


            console.log("$scope.showOtherCounty = " + $scope.showOtherCounty);
        };

        /*$scope.checkKeyPress = function(event){
            if (event.keyCode === 8) {
                console.log("Backspace pressed...");
            }
        };
        */

        $scope.save = function () {
            console.log("Inside ModalCreateSubprojectCtrl, save...");
            $scope.subprojectSave = undefined;
            $scope.subprojectSave = [];
            $scope.createNewSubproject = false;
            if ((typeof $scope.subproject_row.ProjectName === 'undefined') || ($scope.subproject_row.ProjectName === null)) {
                console.log("Project name is empty...");
                $scope.subprojectSave.error = true;
            }
            //console.dir($scope);

            if (!$scope.subprojectSave.error) {
                // Capture the AddDocument flag, before discarding it.
                console.log("$scope.subproject_row, full is next...");
                console.dir($scope.subproject_row);

                var addDocument = $scope.subproject_row.AddDocument;
                $scope.subproject_row.AddDocument = null;
                console.log("addDocument = " + addDocument);
                console.log("$scope.subproject_row, after del is next...");
                console.dir($scope.subproject_row);

                var saveRow = angular.copy($scope.subproject_row);
                console.log("saveRow is next..");
                console.dir(saveRow);
                /* On the form, $scope.subproject_row.Agency is an object, like this: (Id: theId Name: theName)
                * The technique used to grab the Agency works on the first click (an improvement).
                * Therefore, I (gc) kept the technique, and chose to extract/reset $scope.subproject_row.Agency here in the controller, as just the name.
                */
                //console.log("typeof saveRow.Agency = " + saveRow.Agency);
                //saveRow.Agency = 'undefined';
                //saveRow.Agency = $scope.subproject_row.Agency.Name;
                //console.log("saveRow.Agency = " + saveRow.Agency);

                // Agency Name:  If the user selected Other, we must use the name they supplied in OtherAgency.
                // 20160721:  Colette said that we need the OtherAgency, OtherProjectProponent, and OtherCounty to have their own columns in the database,
                // so that she can easily filter out and determine what "other" agencies, Project Proponents, or Counties that CRPP has interacted with.
                /*if ((typeof saveRow.OtherAgency !== 'undefined') && (saveRow.OtherAgency !== null) && (saveRow.OtherAgency !== 'undefined'))
                {
                    saveRow.Agency = saveRow.OtherAgency;
                    saveRow.OtherAgency = null; // Throw this away, because we do not want to save it; no database field or it.
                }
                */

                // Project Proponent Name:  If the user selected Other, we must use the name they supplied in OtherProjectProponent.
                /*if ((typeof saveRow.OtherProjectProponent !== 'undefined') && (saveRow.OtherProjectProponent !== null) && (saveRow.OtherProjectProponent !== 'undefined'))
                {
                    saveRow.ProjectProponent = saveRow.OtherProjectProponent;
                    saveRow.OtherProjectProponent = null; // Throw this away, because we do not want to save it; no database field or it.
                }
                */

                // County Name:  If the user selected Other, we must use the name they supplied in OtherCounty.
                //if (saveRow.OtherCounty)
                /*if ((typeof saveRow.OtherCounty !== 'undefined') && (saveRow.OtherCounty !== null) && (saveRow.OtherCounty !== 'undefined'))
                {
                    console.log("OtherCounty has a value...");
                    saveRow.County = saveRow.OtherCounty; // For single select
                    //saveRow.County.push(saveRow.OtherCounty); // For multiSelect
                	
                    saveRow.OtherCounty = null; // Throw this away, because we do not want to save it; no database field or it.
                }*/

                // Convert the multiselect (array) values into a json array string.
                //saveRow.County = angular.toJson(saveRow.County).toString();
                //var strCounty = "[";
                saveRow.County = saveRow.txtCounty;
                //angular.forEach(saveRow.County, function(county){
                //	strCounty += '"' + county + '",'; // Use single-quotes and double-quotes, so that JavaScript does not get confused.
                //});

                //console.log("strCounty = " + strCounty);
                // Trim the trailing ","
                //if (strCounty.length > 1)
                //	strCounty = strCounty.substring(0, strCounty.length -1);

                //strCounty += "]";
                //saveRow.County = strCounty;


                saveRow.YearDate = ServiceUtilities.dateTimeNowToStrYYYYMMDD_HHmmSS();
                console.log("saveRow.TrackingNumber = " + saveRow.TrackingNumber);
                if (saveRow.TrackingNumber) {
                    // The tracking number exists, but let's verify that is it not just spaces.
                    var tmpTrackingNumber = saveRow.TrackingNumber;
                    if ((tmpTrackingNumber !== null) && (tmpTrackingNumber.length > 0)) {
                        // The tracking number contains something.  Replace all the spaces and see what is left.
                        tmpTrackingNumber = tmpTrackingNumber.replace(" ", "");
                    }

                    if (tmpTrackingNumber.length === 0) {
                        saveRow.TrackingNumber = saveRow.YearDate
                    }
                }
                else {
                    // The user does not want the TrackingNumber to be set, if they leave it blank.
                    //saveRow.TrackingNumber = saveRow.YearDate
                }
                console.log("saveRow.TrackingNumber = " + saveRow.TrackingNumber);

                //if(!saveRow.CompleteDate)
                //	saveRow.CompleteDate = null;
                saveRow.CorrespondenceEvents = undefined;
                console.log("saveRow is next...");
                console.dir(saveRow);

                $scope.saveResults = {};
                //console.log("$scope is next...");
                //console.dir($scope);
                var promise = SubprojectService.saveSubproject($scope.project.Id, saveRow, $scope.saveResults);
                if (typeof promise !== 'undefined') {
                    promise.$promise.then(function () {
                        //window.location.reload();
                        console.log("promise is next...");
                        console.dir(promise);
                        $scope.subprojectId = $rootScope.subprojectId = promise.Id;
                        console.log("$scope.subprojectId = " + $scope.subprojectId);

                        $scope.subproject_row = 'undefined';
                        $scope.crppProjectName = saveRow.ProjectName;

                        //$scope.reloadSubprojects();
                        $scope.postSaveSubprojectUpdateGrid(promise);

                        if (addDocument === "Yes") {
                            console.log("addDocument = Yes...");

                            // If the user wishes to add a Correspondence Event right away, we must wait to get the ID of the new subproject, before we can continue.
                            //$scope.reloadSubproject(promise.Id);
                            //var promise2 = $scope.reloadSubproject(promise.Id);
                            //console.log("Inside reloadSubproject...");
                            SubprojectService.clearSubproject();
                            $scope.reloadSubproject($scope.subprojectId);
                            $modalInstance.dismiss();
                            $scope.openCorrespondenceEventForm();
                            //$scope.subproject = SubprojectService.getSubproject(id);
                        }
                        else {
                            console.log("addDocument != Yes");

                            // If the user just wants to create the Subproject, we can continue without waiting.
                            $scope.reloadSubproject($scope.subprojectId);
                            $modalInstance.dismiss();
                        }
                    });
                }
            }
        };

        $scope.cancel = function () {
            // If the user clicks on Cancel, we need to grab the contents of the Other... boxes and put it back into the main box.

            // Agency Name:  If the user selected Other, we must use the name they supplied in OtherAgency.
            if ($scope.subproject_row.OtherAgency) {
                $scope.subproject_row.Agency = $scope.subproject_row.OtherAgency;
                $scope.subproject_row.OtherAgency = null; // Throw this away, because we do not want to save it; no database field or it.
            }

            // Project Proponent Name:  If the user selected Other, we must use the name they supplied in OtherProjectProponent.
            if ($scope.subproject_row.OtherProjectProponent) {
                $scope.subproject_row.ProjectProponent = $scope.subproject_row.OtherProjectProponent;
                $scope.subproject_row.OtherProjectProponent = null; // Throw this away, because we do not want to save it; no database field or it.
            }

            // County Name:  If the user selected Other, we must use the name they supplied in OtherCounty.
            if ($scope.subproject_row.OtherCounty) {
                $scope.subproject_row.County = $scope.subproject_row.OtherCounty;
                $scope.subproject_row.OtherCounty = null; // Throw this away, because we do not want to save it; no database field or it.
            }
            $scope.subproject_row = 'undefined';
            //$scope.reloadSubprojects();
            $modalInstance.dismiss();
        };
        /*
        $scope.gotoBottom = function (){
            // set the location.hash to the id of
            // the element you wish to scroll to.
            $location.hash('bottom');
        	
            // call $anchorScroll()
            $anchorScroll();
        };
          
        $scope.gotoSubprojectsTop = function (){
            // set the location.hash to the id of
            // the element you wish to scroll to.
            console.log("Inside gotoSubprojectsTop...");
            //$location.hash('top');
            $location.hash('spTop');
        	
            // call $anchorScroll()
            $anchorScroll();
        };
          
        $scope.gotoCategory = function (category) {
            $location.hash(category);
            $anchorScroll();
        };
        */
    }
];

define("private/crpp/components/crpp-contracts/modal-create-crpp-subproject", function(){});

//this is a nested controller used on the project-details page to load
// the correspondence tab grid. It only appears for projects that are CRPP Correspondence.

//var METADATA_PROPERTY_PROGRAM = 23; //add this to your config.js


var tab_correspondence = ['$scope', '$timeout', 'SubprojectService', 'ProjectService', 'DatasetService', 'CommonService', 'PreferencesService',
    '$modal', 'ServiceUtilities', 'ConvertStatus',
    function (scope, $timeout, SubprojectService, ProjectService, DatasetService, CommonService, PreferencesService, $modal,
        ServiceUtilities, ConvertStatus) {
        //console.log("Inside tab correspondence controller...");

       
        //this is for the crpp/subproject correspondence tab below - might can move this all out sometime...
        var otherAgencyTemplate = function (params) {
            return '<span>' + params.node.data.Agency + '</span>'
                + ((params.node.data.OtherAgency) ? ('<span> (' + params.node.data.OtherAgency + ')</span>') : ''); //ternery: if otheragency then show it
        };

        var EventCount = function (params) {
            if (params.node.data.CorrespondenceEvents === undefined || params.node.data.CorrespondenceEvents === null)
                return '0';

            return '' + params.node.data.CorrespondenceEvents.length;
        };

        var EditMasterLinksTemplate = function (param) {

            var div = document.createElement('div');

            var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
            editBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.editCrppSubproject(param.data);
            });
            div.appendChild(editBtn);
            div.appendChild(document.createTextNode("|"));

            var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
            delBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.removeCrppSubproject(param.data);
            });
            div.appendChild(delBtn);
            div.appendChild(document.createTextNode("|"));

            var addBtn = document.createElement('a'); addBtn.href = '#'; addBtn.innerHTML = 'Add Event';
            addBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.openCorrespondenceEventForm(param.data, {});
            });
            div.appendChild(addBtn);

            return div;
            /* can't do angular stuff in here unless we enable it as an angular grid... let's see if we can do without...
            return '<div project-role="editor">' +
                        '<a ng-click="editViewSubproject();">Edit</a>|' +
                        '<a ng-click="removeViewSubproject();">Delete</div>|' + 
                        '<a ng-click="openCorrespondenceEventForm();">Add</div>' +
                '</div>';
                */
        };


        var FileListCellTemplate = function (params) {
            var list = '<div class="event-file-list"><ul>';

            var file_links = scope.getSubprojectFilesArrayAsLinks(scope.project.Id, params.node.data.SubprojectId, params.node.data.EventFiles);

            file_links.forEach(function (link) {
                list += '<li>' + link + '</li>';
            });

            list += '</ul></div>';

            return list;
        };


        //this template gives the Edit|Delete|Add for the detail.
        var EditDetailLinksTemplate = function (detailparam) {
            var subproject = getById(scope.subprojectList, detailparam.data.SubprojectId);

            var div = document.createElement('div');

            var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
            editBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.openCorrespondenceEventForm(subproject, detailparam.data); //parent subproject, detail line.
            });
            div.appendChild(editBtn);
            div.appendChild(document.createTextNode("|"));

            var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
            delBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.removeCrppCorrespondenceEvent(subproject, detailparam.data);
            });
            div.appendChild(delBtn);
            div.appendChild(document.createTextNode("|"));

            var addBtn = document.createElement('a'); addBtn.href = '#'; addBtn.innerHTML = 'Add';
            addBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.openCorrespondenceEventForm(subproject, {});
            });
            div.appendChild(addBtn);

            return div;
            /* can't do angular stuff in here unless we enable it as an angular grid... let's see if we can do without...
            return '<div project-role="editor">' +
                        '<a ng-click="editViewSubproject();">Edit</a>|' +
                        '<a ng-click="removeViewSubproject();">Delete</div>|' + 
                        '<a ng-click="openCorrespondenceEventForm();">Add</div>' +
                '</div>';
                */
        };


        //grid columns for crpp correspondence tab (master/subprojects)
        scope.corrAgColumnDefs = [  //in order the columns will display, by the way...
            {
                width: 140, cellRenderer: EditMasterLinksTemplate, menuTabs: [],
            },
            {
                headerName: 'ID',
                field: 'Id',
                width: 80,
                cellRenderer: 'group',
                cellRendererParams: { suppressCount: true },
                menuTabs: ['filterMenuTab'],
                filter: 'number'
            },
            {
                field: 'EffDt',
                headerName: 'Updated',
                width: 120,
                valueFormatter: function (params) {
                    if (params.node.data.EffDt !== undefined && params.node.data.EffDt !== null)
                        return moment(params.node.data.EffDt).format('L');
                },
                sort: 'desc',
                menuTabs: [],
            },
            {
                headerName: 'Events', width: 60,
                cellRenderer: EventCount,
                valueGetter: function (params) {
                    return (params.data.CorrespondenceEvents !== undefined && params.data.CorrespondenceEvents.length > 0) ? params.data.CorrespondenceEvents.length : 0;
                },
                menuTabs: [],
            },
            { field: 'ProjectName', headerName: 'Name', width: 275, menuTabs: ['filterMenuTab'], filter: 'text' },
            { field: 'ProjectLead', headerName: 'Project Lead', width: 150, menuTabs: ['filterMenuTab'], },
            { field: 'Closed', headerName: 'Closed?', width: 80, menuTabs: ['filterMenuTab'], },
            {
                //note: white-space here causes word-wrap
                field: 'Comments', headerName: 'Comments', width: 300, cellStyle: { 'white-space': 'normal' }, menuTabs: ['filterMenuTab'], filter: 'text'
            },
            { field: 'Agency', headerName: 'Agency', cellRenderer: otherAgencyTemplate, width: 150, menuTabs: ['filterMenuTab'], },
            { field: 'County', headerName: 'County', width: 150, menuTabs: ['filterMenuTab'], },
            { field: 'ProjectProponent', headerName: 'Project Proponent', width: 150, menuTabs: ['filterMenuTab'], },


        ];

        //details for the correspondence
        var detailColumnDefs = [
            {
                headerName: '', width: 100, cellRenderer: EditDetailLinksTemplate, menuTabs: [],
            },
            {
                headerName: 'Notice Date', field: 'CorrespondenceDate', width: 120, cellClass: 'event-record-cell',
                valueFormatter: function (params) {
                    if (params.node.data.CorrespondenceDate !== undefined && params.data.CorrespondenceDate !== null)
                        return moment(params.node.data.CorrespondenceDate).format('L');
                },
                sort: 'desc',
                menuTabs: [],
            },
            { headerName: 'Notice Type', field: 'CorrespondenceType', cellClass: 'event-record-cell', width: 150, menuTabs: ['filterMenuTab'], },
            { headerName: 'Type of Response', field: 'ResponseType', cellClass: 'event-record-cell', width: 150, menuTabs: ['filterMenuTab'], },
            { headerName: 'Days to Respond', field: 'NumberOfDays', cellClass: 'event-record-cell', width: 100, menuTabs: [], },

            {
                field: 'ResponseDate',
                headerName: 'Date of Response',
                width: 120,
                valueFormatter: function (params) {
                    if (params.data.ResponseDate !== undefined && params.data.ResponseDate !== null)
                        return moment(params.node.data.ResponseDate).format('L');
                },
                menuTabs: [],
            },
            { headerName: 'Technician', field: 'StaffMember', cellClass: 'event-record-cell', width: 150, menuTabs: ['filterMenuTab'], },
            {
                headerName: 'Comments', field: 'EventComments', cellClass: 'event-record-cell', width: 300, cellStyle: {
                    'white-space': 'normal'
                },
                menuTabs: ['filterMenuTab'], filter: 'text'
            },
            { headerName: 'Documents', field: 'EventFiles', width: 300, cellRenderer: FileListCellTemplate, menuTabs: [], },

            //{ headerName: 'EventFiles', field: 'EventFiles', cellClass: 'event-record-cell', cellRenderer: FileListCellTemplate },
        ];

        //detail grid options correspondence events
        scope.corrDetailGridOptions = {
            enableSorting: true,
            enableFilter: true,
            enableColResize: true,
            //rowSelection: 'single',
            //onSelectionChanged: function (params) {
            //    console.log("selection changed!");
            //scope.corrAgGridOptions.selectedItems = scope.corrAgGridOptions.api.getSelectedRows();
            //scope.$apply(); //trigger angular to update our view since it doesn't monitor ag-grid
            //},
            //onFilterModified: function () {
            //    scope.corrAgGridOptions.api.deselectAll();
            //},
            //selectedItems: [],
            //rowData: eventRecords,
            columnDefs: detailColumnDefs,
            onGridReady: function (params) {
                //setTimeout(function () { params.api.sizeColumnsToFit(); }, 0);
            },
            getRowHeight: function (params) {
                var comment_length = (params.data.EventComments === null) ? 1 : params.data.EventComments.length;
                var comment_height = 25 * (Math.floor(comment_length / 45) + 1); //base our detail height on the comments field.
                var file_height = 25 * (scope.getFilesArrayAsList(params.data.EventFiles).length); //count up the number of file lines we will have.
                return (comment_height > file_height) ? comment_height : file_height;
            },
            //onRowClicked: function (row) {
            //console.dir(row);

            //    row.node.setSelected(true);
            //    console.log("detail selected!");
            //},
            //defaultColDef: {
            //    editable: true
            //},
            //enableRangeSelection: true
        };



        scope.corrAgGridOptions = {

            masterDetail: true,
            detailCellRendererParams: {
                detailGridOptions: scope.corrDetailGridOptions,
                getDetailRowData: function (params) {
                    params.successCallback(params.data.CorrespondenceEvents);
                },
            },

            animateRows: true,
            enableSorting: true,
            enableFilter: true, //turning it off because: https://github.com/ag-grid/ag-grid/issues/1324
            enableColResize: true,
            showToolPanel: false,
            columnDefs: scope.corrAgColumnDefs,
            rowData: null,
            //filterParams: { apply: true }, //enable option: doesn't do the filter unless you click apply
            //debug: true,
            rowSelection: 'single',
            onSelectionChanged: function (params) {
                console.log("selection changed fired!");
                /*
                var rows = scope.corrAgGridOptions.api.getSelectedRows();
                if (Array.isArray(rows) && rows[0] != null)
                {
                    console.log("rows:");
                    console.dir(rows);
                    if (!Array.isArray(rows[0]) && !rows[0].hasOwnProperty('SubprojectId')) //only change the selection if they clicked a header row.
                    {
                        scope.corrAgGridOptions.selectedItems = scope.corrAgGridOptions.api.getSelectedRows();
                        //scope.corrAgGridOptions.api.redrawRows();
                        //scope.$apply(); //trigger angular to update our view since it doesn't monitor ag-grid
                        console.log("selected a header row so selection actually changed");
                        scope.viewSubproject = rows[0];
                        console.dir(scope.viewSubproject);
                    }
                }
                */
            },
            //onFilterModified: function () {
            //    scope.corrAgGridOptions.api.deselectAll();
            //},
            selectedItems: [],
            //isFullWidthCell: function (rowNode) {
            //    return rowNode.level === 1;
            //},
            onGridReady: function (params) {
                //params.api.sizeColumnsToFit();
            },
            //fullWidthCellRenderer: CorrespondenceDetailCellRenderer,
            getRowHeight: function (params) {
                var rowIsDetailRow = params.node.level === 1;
                // return dynamic height when detail row, otherwise return 25
                if (rowIsDetailRow) {
                    return 300;
                } else {
                    var comment_length = (params.data.Comments === null) ? 1 : params.data.Comments.length;
                    return 25 * (Math.floor(comment_length / 45) + 1); //base our detail height on the comments field.
                }
                //return rowIsDetailRow ? 200 : 25;
            },
            /*
            getNodeChildDetails: function (record) {
                //console.dir(record);
                if (record.CorrespondenceEvents) {
                    //console.log("yep we have events!");
                    return {
                        group: true,
                        // the key is used by the default group cellRenderer
                        key: record.CorrespondenceDate,
                        // provide ag-Grid with the children of this group
                        parentData: record,
                        children: [record.CorrespondenceEvents],
                    };
                } else {
                    //console.log("didn't find any correspondence events for that record.");
                    return null;
                }
            },*/
            onRowDoubleClicked: function (row) {
                scope.corrAgGridOptions.api.collapseAll();
                row.node.setSelected(true);
                row.node.setExpanded(true);
            },
            onRowClicked: function (row) {
                row.node.setSelected(true);
            },
        };

        //watch the project on the parent-detail page to load... once it does, check to see if we should show our tab
        var crpp_ds_watcher = scope.$parent.$watch('project', function () {
            //console.log("Inside TAB CORRESPONDENCE watch project... --------------------------");

            if (typeof scope.project === 'undefined' || typeof scope.project.Id === 'undefined')
                return;

            //console.log("OK TAB CORRESPONDNEC .  The project is loaded...");

            crpp_ds_watcher(); //turn off watcher

            if (scope.isCRPPProject(scope.project)) {

                console.log("Adding Correspondence to tab bar because we are a CRPP project...");
                scope.ShowSubproject = true;

                $timeout(function () {

                    var ag_grid_div = document.querySelector('#crpp-correspondence-grid');    //get the container id...
                    //console.dir(ag_grid_div);
                    scope.ag_grid = new agGrid.Grid(ag_grid_div, scope.corrAgGridOptions); //bind the grid to it.
                    scope.corrAgGridOptions.api.showLoadingOverlay(); //show loading...

                    scope.subprojectList = SubprojectService.getSubprojects();
                    //console.log("Fetching CRPP subprojects...");

                    var watcher = scope.$watch('subprojectList.length', function () {
                        if (scope.subprojectList === undefined || scope.subprojectList == null || scope.subprojectList.length === 0)
                            return;

                        console.log("our crpp subproject list is back -- build the grid. we have " + scope.subprojectList.length + " of them.");
                        scope.corrAgGridOptions.api.setRowData(scope.subprojectList);

                        watcher();
                    });
                }, 0);

            } else {
                console.log(" we are NOT a crpp project so no Correspondence tab.");
            }

        },true);



        //if you are creating a new one for the project, the ce_row should be empty {}
        // if you are editing an existing one, send in the project and the ce_row.
        scope.openCorrespondenceEventForm = function (subproject, ce_row) {
            //console.log("Inside openCorrespondenceEventForm...")

            scope.viewSubproject = subproject;
            //console.log("ok subproject set: ");
            //console.dir(scope.viewSubproject);

            scope.ce_row = ce_row;

            var modalInstance = $modal.open({
                templateUrl: 'app/private/crpp/components/crpp-contracts/templates/modal-new-correspondenceEvent.html',
                controller: 'ModalAddCorrespondenceEventCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        scope.removeCrppSubproject = function (subproject) {
            //console.log("Inside removeViewSubproject, scope is next...");

            if (!subproject)
                return;

            scope.viewSubproject = subproject;

            if (scope.viewSubproject.CorrespondenceEvents.length > 0) {
                alert("This project has associated correspondence events.  Those must be deleted first.");
            } else {
                scope.verifyAction = "Delete";
                scope.verifyingCaller = "CrppSubproject";
                //console.log("scope.verifyAction = " + scope.verifyAction + ", scope.verifyingCaller = " + scope.verifyingCaller + ", scope.viewSubproject.Id = " + scope.viewSubproject.Id);
                var modalInstance = $modal.open({
                    templateUrl: 'app/core/common/components/modals/templates/modal-verifyAction.html',
                    controller: 'ModalVerifyActionCtrl',
                    scope: scope, //very important to pass the scope along...
                });
            }
        };

        scope.postRemoveSubprojectUpdateGrid = function () {
            //the scope.subproject is the one we removed.
            console.log("ok - we removed one so update the grid...");

            scope.subprojectList.forEach(function (item, index) {
                if (item.Id === scope.viewSubproject.Id) {
                    scope.subprojectList.splice(index, 1);
                    //console.log("ok we removed :" + index);
                    //console.dir(scope.subprojectList[index]);
                    scope.corrAgGridOptions.api.setRowData(scope.subprojectList);
                    //scope.corrAgGridOptions.api.redrawRows();
                    //console.log("done reloading grid.");
                }
            });
        };

        //called by the modal once the correspondence event is successfully saved.
        scope.postEditCorrespondenceEventUpdateGrid = function (edited_event) {
            console.log("editCrppCorrespondenceEvent..." + edited_event.Id + " for subproject " + edited_event.SubprojectId);

            //edit our correspondence item and then reload the grid.
            scope.subprojectList.forEach(function (item, index) {
                if (item.Id === edited_event.SubprojectId) {
                    item.EffDt = moment(new Date()).format() + ""; //touch the effdt to bump the sort. - this was already updated in the be
                    item.CorrespondenceEvents.forEach(function (event_item, event_item_index) {
                        if (event_item.Id === edited_event.Id) {
                            angular.extend(event_item, edited_event); //replace the data for that item
                            //console.log("OK!! we edited that correspondence event");
                        }
                    });
                }
            });

            scope.corrAgGridOptions.api.setRowData(scope.subprojectList);

            //after we setRowData, the grid collapses our expanded item. we want it to re-expand that item and make sure it is visible.
            var the_node = scope.expandSubProjectById(edited_event.SubprojectId);
            if (the_node != null)
                scope.corrAgGridOptions.api.ensureNodeVisible(the_node);

            console.log("done reloading grid after removing item.");

        };

        //called by the modal once a correspondence event (edit) is saved
        scope.postAddCorrespondenceEventUpdateGrid = function (new_event) {
            //console.dir(new_event);
            console.log("saving correspondence event for " + new_event.SubprojectId);

            var subproject = getById(scope.subprojectList, new_event.SubprojectId);

            if (subproject === undefined || subproject == null) { //TODO: the case where they create items before the proejct is saved?
                console.log("no subproject...");
            } else {
                scope.subprojectList.forEach(function (item, index) {
                    if (item.Id === subproject.Id) {
                        item.EffDt = moment(new Date()).format() + ""; //touch the effdt to bump the sort - this was already updated in the be
                        item.CorrespondenceEvents.push(new_event);
                        //console.log("Added event " + new_event.Id + " to " + subproject.Id);
                    }
                });
                scope.corrAgGridOptions.api.setRowData(scope.subprojectList);

                //after we setRowData, the grid collapses our expanded item. we want it to re-expand that item and make sure it is visible.
                var the_node = scope.expandSubProjectById(subproject.Id);
                if (the_node != null)
                    scope.corrAgGridOptions.api.ensureNodeVisible(the_node);

                console.log("done reloading grid after removing item.");
            }
        };

        //returns the (last) node or null if none found.
        scope.expandSubProjectById = function (id_in) {
            var the_node = null;
            scope.corrAgGridOptions.api.forEachNode(function (node) {
                if (node.data.Id === id_in) {
                    //console.log("Expanding! " + id_in);
                    node.setExpanded(true);
                    the_node = node;
                }
            });
            return the_node;
        };

        //removes the correspondence event and then updates the grid
        scope.removeCrppCorrespondenceEvent = function (subproject, event) {
            console.log("removeCrppCorrespondenceEvent..." + event.Id + " for subproject " + subproject.Id);

            if (confirm('Are you sure that you want to delete this Correspondence Event?')) {
                var promise = SubprojectService.removeCorrespondenceEvent(scope.project.Id, subproject.Id, event.Id, scope.DatastoreTablePrefix);

                promise.$promise.then(function () {
                    //remove from our subprojectList and then reload the grid.
                    scope.subprojectList.forEach(function (item, index) {
                        if (item.Id === subproject.Id) {
                            item.CorrespondenceEvents.forEach(function (event_item, event_item_index) {
                                if (event_item.Id === event.Id) {
                                    item.CorrespondenceEvents.splice(event_item_index, 1);
                                    //console.log("OK!! we removed that correspondence event");
                                }
                            });
                        }
                    });
                    scope.corrAgGridOptions.api.setRowData(scope.subprojectList);

                    //after we setRowData, the grid collapses our expanded item. we want it to re-expand that item and make sure it is visible.
                    var the_node = scope.expandSubProjectById(subproject.Id);
                    if (the_node != null)
                        scope.corrAgGridOptions.api.ensureNodeVisible(the_node);

                    console.log("done reloading grid after removing item.");
                });
            }
        };


        //opens create crpp subproject modal
        scope.createCrppSubproject = function () {
            scope.viewSubproject = null;
            scope.createNewSubproject = true;
            //scope.subprojectList = null;
            scope.subprojectOptions = null;
            //console.log("scope.createNewSubproject = " + scope.createNewSubproject);
            var modalInstance = $modal.open({
                templateUrl: 'app/private/crpp/components/crpp-contracts/templates/modal-create-subproject.html',
                controller: 'ModalCreateSubprojectCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };


        //fired after a user saves a new or edited project.
        // we update the item in the main subproject array and then refresh the grid.
        scope.postSaveSubprojectUpdateGrid = function (the_promise) {
            //console.log("ok - we saved so update the grid...");
            var total = scope.subprojectList.length;
            var count = 0;
            var updated = false;
            scope.subprojectList.forEach(function (item, index) {
                if (item.Id === the_promise.Id) {
                    updated = true;
                    //console.log("ok we found a match! -- updating! before:");
                    //console.dir(scope.subprojectList[index]);

                    if (the_promise.CorrespondenceEvents !== undefined)
                        delete the_promise.CorrespondenceEvents; //remove this before the copy.

                    angular.extend(scope.subprojectList[index], the_promise); //replace the data for that item
                    //console.log("ok we found a match! -- updating! after:");
                    //console.dir(scope.subprojectList[index]);
                    scope.corrAgGridOptions.api.redrawRows();
                    //console.log("done reloading grid.");
                }
                count++;
                if (count == total && updated == false) //if we get all done and we never found it, lets add it to the end.
                {
                    //console.log("ok we found never a match! -- adding!");
                    the_promise.CorrespondenceEvents = [];
                    the_promise.Files = [];
                    scope.subprojectList.push(the_promise); //add that item
                    scope.corrAgGridOptions.api.setRowData([]);
                    scope.corrAgGridOptions.api.setRowData(scope.subprojectList);

                    //console.log("done reloading grid.");
                }
            });
        };

        scope.editCrppSubproject = function (subproject) {
            //console.log("editCrppSubproject...");

            scope.viewSubproject = subproject;

            var modalInstance = $modal.open({
                    templateUrl: 'app/private/crpp/components/crpp-contracts/templates/modal-create-subproject.html',
                    controller: 'ModalCreateSubprojectCtrl',
                    scope: scope, //very important to pass the scope along...
            });
        };

        scope.redrawRows = function () {
            scope.corrAgGridOptions.api.setRowData([]);
            setTimeout(function () { scope.corrAgGridOptions.api.setRowData(scope.subprojectList); }, 4000);
        };

        scope.refreshCells = function () {
            scope.corrAgGridOptions.api.refreshCells();
        };

        scope.refreshMemory = function () {
            scope.corrAgGridOptions.api.refreshInMemoryRowModel('group');
        };

        //looks at the metadata setting to see if it is a crpp project
        scope.isCRPPProject = function(a_project)
        {
            return (a_project.MetadataValue[METADATA_PROPERTY_PROGRAM]) === "CRPP";
        }

    }
];

define("private/crpp/components/crpp-contracts/tab-correspondence", function(){});



define('private/crpp/contracts-map-directive',[
  'app',
  'esri/map',
  'esri/geometry/Point',
  'esri/dijit/InfoWindow',
  'esri/InfoTemplate',
  'esri/dijit/BasemapLayer',
  'esri/dijit/BasemapGallery',
  'esri/dijit/Basemap'
], function (app, Map, Point, InfoWindow, InfoTemplate) {

  // register a new directive called esriMap with our app
  app.directive('crppDocumentsMap', function($rootScope){
    // this object will tell angular how our directive behaves
    return {
      // only allow esriMap to be used as an element (<esri-map>)
      restrict: 'E',

      scope: false,

      // define how our template is compiled this gets the $element our directive is on as well as its attributes ($attrs)
      compile: function($element, $attrs){
        // remove the id attribute from the main element
        $element.removeAttr("id");

        // append a new div inside this element, this is where we will create our map
        $element.append("<div id=" + $attrs.id + "></div>");

        // since we are using compile we need to return our linker function
        // the 'link' function handles how our directive responds to changes in $scope
        return function (scope, element, attrs, controller){
          scope.$watch("center", function (newCenter, oldCenter) {
            if(newCenter !== oldCenter){
              controller.centerAt(newCenter);
            }
          });
        };
      },

      // even though $scope is shared we can declare a controller for manipulating this directive
      // this is great for when you need to expose an API for manipulaiting your directive
      // this is also the best place to setup our map
      controller: function($scope, $element, $attrs){

        //console.dir($attrs);

        // setup our map options based on the attributes and scope
        var mapOptions = {
          center: ($attrs.center) ? $attrs.center.split(",") : $scope.center,
          zoom: ($attrs.zoom) ? $attrs.zoom : $scope.zoom,
          spatialReference: {
              wkid:102100 //mercator
              //wkid:26911 //nad_1983
              //"wkt":'PROJCS["NAD83(NSRS2007) / UTM zone 11N",GEOGCS["NAD83(NSRS2007)",DATUM["D_",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-117],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["Meter",1]]'

            }
        };

        // declare our map
        console.log("trying to make the map");

        var map = new Map($attrs.id, mapOptions);
        //our first layer from up above...
        //console.log("//restdata.umatilla.nsn.us/arcgis/rest/services/BasemapParcelViewerCTUIR/MapServer?token=" + security_token);

        //setup basemaps
        map.selectedBasemap = defaultLayer;
        map.selectedServiceLayers = [];

        map.basemaps = [];
        for (var property in parcelLayerConfig) {
          if(parcelLayerConfig.hasOwnProperty(property))
          {
              map.basemaps.push({label: parcelLayerConfig[property].Display, name: property});
          }
        };

        map.serviceLayers = [];
        for (var property in servicesLayerConfig) {
          if(servicesLayerConfig.hasOwnProperty(property))
          {
              map.serviceLayers.push({label: servicesLayerConfig[property].Display, name: property});
          }
        };



        

        //var layer = new esri.layers.ArcGISTiledMapServiceLayer("//restdata.umatilla.nsn.us/arcgis/rest/services/BasemapParcelViewerCTUIR/MapServer?token=" + security_token);

        //var layer = new esri.layers.ArcGISTiledMapServiceLayer(parcelLayerConfig[map.selectedBasemap].ServiceURL);
        //map.addLayer(layer);
        //map.currentBasemapLayer = layer;

        //map.parcelLayer = new esri.layers.GraphicsLayer();
        //map.addLayer(map.parcelLayer);

        map.updateLayers = function(){

            console.log("Changing Layer: "+map.selectedBasemap);

            try{
              console.log("Loading layer: " + parcelLayerConfig[map.selectedBasemap].ServiceURL);      

              map.removeAllLayers();

              //add the selected basemap
              var new_layer = new esri.layers.ArcGISTiledMapServiceLayer(parcelLayerConfig[map.selectedBasemap].ServiceURL);
              map.addLayer(new_layer);
              map.currentBasemapLayer = new_layer;

              //now add any selected service layers
              for (var i = map.selectedServiceLayers.length - 1; i >= 0; i--) {
                var service_layer = new esri.layers.ArcGISDynamicMapServiceLayer(servicesLayerConfig[map.selectedServiceLayers[i]].ServiceURL);
                map.addLayer(service_layer);
              };

              map.parcelLayer = new esri.layers.GraphicsLayer();
              map.addLayer(map.parcelLayer);

              console.log("done!");
              map.reposition();
            }
            catch(e)
            {
              console.dir(e);
            }
        };

        map.updateLayers();


        // start exposing an API by setting properties on "this" which is our controller
        // lets expose the "addLayer" method so child directives can add themselves to the map
        this.addLayer = function(layer, filter){
          map.locationLayer = map.addLayer(layer);

//          console.log("Added layer to map");
//          console.log("layer_"+layer.id);

            //setup our layer locationid function so we can all it again sometime
            layer.showLocationsById = function(locationObjectIds){
              try{
                this.clearSelection();
                var definitionExpression = "OBJECTID IN (" + locationObjectIds + ")";
                console.log("Definition expression: " + definitionExpression);
                this.setDefinitionExpression(definitionExpression);
                this.refresh();
              }catch(e)

              {
                console.dir(e);
              }                  
            };

          if(filter && filter == "location")
          {
              if(typeof $scope.locationObjectIds == "undefined")
              {
                $scope.$watch('locationObjectIds', function(){

                  //skip the first run
                  if(typeof $scope.locationObjectIds == "undefined")
                    return;
                  
                  layer.showLocationsById($scope.locationObjectIds); // now call it

                  layer.show();                  

                });
              }
          }
          
          return map.locationLayer;
        };

        //use this for doing a search by parcelid or address
        map.querySearchParcel = function(searchParam, callback)
        {
          var queryTask = new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);
          var query = new esri.tasks.Query();
          query.where = dojo.string.substitute(parcelLayerConfig[map.selectedBasemap].ParcelQuery, [searchParam]);
          query.returnGeometry = false;
          query.outSpatialReference = this.spatialReference;
          query.outFields = ["*"];
        
          queryTask.execute(query, function (result) {
              callback(result.features); //give back the parcel features we found...
          }, function(err){
              console.log("Failure executing query!");
              console.dir(err);
              console.dir(query);
          });            
        };

        //use this for selecting a specific parcel/allotment by id (no geometry)
        map.queryMatchParcel = function(searchParam, callback)
        {
          var queryTask = new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);
          var query = new esri.tasks.Query();
          query.where = dojo.string.substitute(parcelLayerConfig[map.selectedBasemap].LocateParcelQuery, [searchParam]);
          query.returnGeometry = false;
          query.outSpatialReference = this.spatialReference;
          query.outFields = ["*"];
        
          queryTask.execute(query, function (result) {
              callback(result.features); //give back the parcel features we found...
          }, function(err){
              console.log("Failure executing query!");
              console.dir(err);
              console.dir(query);
          });            
        };


        //use this to select a particular parcel either by objectid (like after a search) or x,y mapPoint
        map.querySelectParcel = function(mapPoint, objectId, callback){

          console.log("Running query on: "+ parcelLayerConfig[map.selectedBasemap].QueryURL);

          var queryTask = new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);
          var query = new esri.tasks.Query();

          query.outSpatialReference = this.spatialReference;
          query.returnGeometry = true;
          query.outFields = ["*"];
          if (mapPoint) {
              query.geometry = mapPoint;
          }
          else {
              query.objectIds = [objectId];
          }
          
          query.spatialRelationship = esri.tasks.Query.SPATIAL_REL_INTERSECTS;
          queryTask.execute(query, function (result) {
              console.dir(result);
              callback(result.features); //give back the parcel features we found...
          }, function(err){
              console.log("Failure executing query!");
              console.dir(err);
              console.dir(query);
          });            

                  
        };

        map.clearGraphics = function(){
          this.parcelLayer.clear();
        }

        map.addParcelToMap = function(feature, color, alpha)
        {
            
                var graphic;
                if(!color)
                  color = "#FF6600";
                
                if(!alpha)
                  alpha = .25;


                var lineColor = new dojo.Color();
                lineColor.setColor(color);

                var fillColor = new dojo.Color();
                fillColor.setColor(color);
                fillColor.a = alpha;

                var symbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,
                    new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, lineColor, 3), fillColor);

                graphic = new esri.Graphic(feature.geometry, symbol, feature.attributes);

                this.parcelLayer.clear();
                this.parcelLayer.add(graphic);
                this.selectedFeature = feature;
                this.selectedGraphic = graphic;

                $scope.$emit("map.selectedFeature",feature); //notify
        }

        map.centerAndZoomToGraphic = function(graphic)
        {
            var centerPoint = graphic.geometry.getExtent().getCenter();
            return map.centerAndZoom(centerPoint, 15);
        };

        // lets expose a version of centerAt that takes an array of [lng,lat]
        this.centerAt = function(center){
          var point = new Point({
            x: center[0],
            y: center[1],
            spatialReference: {
              wkid:102100 //mercator
              //wkid:26911 //nad_1983
              //"wkt":'PROJCS["NAD83(NSRS2007) / UTM zone 11N",GEOGCS["NAD83(NSRS2007)",DATUM["D_",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-117],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["Meter",1]]'

            }
          });

          map.centerAt(point);
        };

        // listen for click events and expost them as broadcasts on the scope and suing the scopes click handler
        map.on("click", function(e){
          // emit a message that bubbles up scopes, listen for it on your scope
          $scope.$emit("map.click", e);

          // use the scopes click fuction to handle the event
          $scope.$apply(function($scope) {
            $scope.click.call($scope, e);
          });
        });

        $scope.map = map;

      }
    };
  });
});


// defines the crpp module

var crpp_module = angular.module('CrppModule', ['ui.bootstrap', 'ngResource']);

require([
    //controllers
    //'private/crpp/components/crpp-contracts/crpp-contracts',
    'private/crpp/components/crpp-contracts/modal-add-correspondence-event',
    'private/crpp/components/crpp-contracts/modal-create-crpp-subproject',
    'private/crpp/components/crpp-contracts/tab-correspondence',

    //directives
    'private/crpp/contracts-map-directive',

    //renderer for master/detail in grid - used on project-details page (until it gets consolidated to this module)
    //'private/crpp/components/crpp-contracts/renderer-correspondence-detail',

], function () {
    //crpp_module.controller('CrppContractsCtrl', crpp_contracts);
    crpp_module.controller('ModalAddCorrespondenceEventCtrl', modal_add_correspondence_event);
    crpp_module.controller('ModalCreateSubprojectCtrl', modal_create_crpp_subproject);
    crpp_module.controller('TabCorrespondenceController', tab_correspondence);
});




define("private/crpp/crpp-module", function(){});

/*
*   This page loads the project details. It includes some tabs that are always populated and some tabs
*   that are conditionally shown and populated depending on the project type.
*
*/

var project_detail = ['$scope', '$routeParams', 'SubprojectService', 'ProjectService', 'DatasetService', 'CommonService', 'PreferencesService',
    '$rootScope', '$modal', '$sce', '$window', '$http',
    'ServiceUtilities', 'ConvertStatus', '$location', '$anchorScroll',
    function (scope, routeParams, SubprojectService, ProjectService, DatasetService, CommonService, PreferencesService, $rootScope, $modal, $sce, $window, $http,
        ServiceUtilities, ConvertStatus, $location, $anchorScroll) {
		//console.log("Inside controllers.js, projectDatasetsController...");
		//console.log("routeParams.Id = " + routeParams.Id);
		
		scope.activities = null;
		
		scope.datasets = ProjectService.getProjectDatasets(routeParams.Id);
		scope.project = ProjectService.getProject(routeParams.Id);
		scope.currentUserId = $rootScope.Profile.Id;
        scope.filteredUsers = false;

        //conditional tabs on the project detail page
        scope.ShowInstruments = false; //water temp only
        scope.ShowFishermen = false;   //harvest (creel)
        scope.ShowSubproject = false;  //crpp correspondence
        scope.ShowHabitat = false;     //habitat


		scope.subprojectList = null;  // Set this to null first, so that we can monitor it later.
        scope.subprojectType = "";
        scope.viewSubproject = null;
        scope.SdeObjectId = 0;
        //scope.FileLocationSubprojectFundersWatchVariable = "";


		scope.uploadFileType = "";
		scope.projectName = "";
		scope.DatastoreTablePrefix = $rootScope.DatastoreTablePrefix = "";
		scope.filesToUpload = {};
		scope.AuthorizedToViewProject = true;

		
		// Get the project ID from the url.
		var theUrl = window.location.href;
		console.log("theUrl = " + theUrl);
		var theLastSlashLoc = theUrl.lastIndexOf("/");
		scope.projectId = theUrl.substring(theLastSlashLoc + 1);
		console.log("scope.projectId = " + scope.projectId);

        
		scope.CellOptions = {}; //for metadata dropdown options
		scope.isFavorite = $rootScope.Profile.isProjectFavorite(routeParams.Id);

		scope.metadataList = {};
		scope.metadataPropertiesPromise = CommonService.getMetadataProperties(METADATA_ENTITY_PROJECTTYPEID);
		scope.habitatPropertiesPromise = CommonService.getMetadataProperties(METADATA_ENTITY_HABITATTYPEID);
        
        scope.users = [];
		scope.thisProjectsLocationObjects = [];
        

		//once the datasets load, make sure each is configured with our scope.
        var dataset_watcher = scope.$watch('datasets', function () {

            if(!scope.datasets.$resolved)
              return;
			
			console.log("Inside project-detail datasets. all done loading!");
            
			if ((scope.datasets) && (scope.datasets.length > 0))
			{
				for (var i = 0; i < scope.datasets.length; i++)
				{
					DatasetService.configureDataset(scope.datasets[i], scope);  // We must pass the scope along on this call.
                    //console.log("dataset CONFIGURED! TablePrefix: " + scope.datasets[i].Datastore.TablePrefix);

                    //this is used in some of the modals -- note that doing this will set the DatastoreTablePrefix to the LAST dataset parsed.
                    scope.DatastoreTablePrefix = $rootScope.DatastoreTablePrefix = scope.datasets[i].Datastore.TablePrefix;
				}
			}
			else
			{
				console.log("This project has no datasets.");
            }

            dataset_watcher();

        },true);

		//once the project loads...
        var project_watcher = scope.$watch('project', function () {

            if (typeof scope.project === 'undefined' || typeof scope.project.Id === 'undefined')
                return;

            project_watcher();

			console.log("Inside project-detail -- our project just loaded...");
			console.log("scope.project.Id = " + scope.project.Id);
			$rootScope.projectId = scope.project.Id;
				
			scope.editors = scope.project.Editors;
            scope.users = CommonService.getUsers();
            scope.project.MetadataValue = {};
                              
            //add in the metadata to our metadataList that came with this dataset
            addMetadataProperties(scope.project.Metadata, scope.metadataList, scope, CommonService);

            //get habitat (and possibly other?) metadata values for this project.  they don't come with project metadata as they are their own category.
            var habitatProjectMetadataPromise = CommonService.getMetadataFor(scope.project.Id, METADATA_ENTITY_HABITATTYPEID);
            habitatProjectMetadataPromise.$promise.then(function(list){
                addMetadataProperties(list, scope.metadataList, scope, CommonService);
            });

            scope.mapHtml = $sce.trustAsHtml(scope.project.MetadataValue[25]);
            scope.imagesHtml = $sce.trustAsHtml(scope.project.MetadataValue[13]);

            //load the project's files
            scope.project.Files = ProjectService.getProjectFiles(scope.project.Id);

            //once they load... (the docs and gallery tabs listen for this and then handle their grids.)
            var file_watcher = scope.$watch('project.Files', function () {
                if (typeof scope.project.Files === 'undefined' || scope.project.Files.length === 0)
                    return;

                file_watcher();
                //console.log('-------------- project FILES are loaded >>>>>>>>>>>>>>>> ');

                //since we want a tab of images and a tab of other files, 
                // split them out into two arrays we will use to populate the two grids.
                scope.project.Images = [];
                scope.project.Docs = [];

                scope.project.Files.forEach(function (file, key) {
                    // If the user created a document and left the Title or Description blank, those fields were saved as "undefined" in the database.
                    // When we read the list of files back in, the "undefined" shows on the page, and the user would rather have a blank show instead.
                    file.Title = (!file.Title || file.Title === 'undefined' || typeof file.Title === 'undefined') ? "" : file.Title;
                    file.Description = (!file.Description || file.Description === 'undefined' || typeof file.Description === 'undefined') ? "" : file.Description;

                    //note: Subproject_CrppId indicates the file belongs to a subproject (not just crpp)
                    if (file.DatasetId === null && file.Subproject_CrppId === null)
                    {
                        if (file.FileType.Name === "Image") { //images go to 'Gallery' tab
                            scope.project.Images.push(file);
                        } else { //everything else goes to 'Documents' tab
                            scope.project.Docs.push(file);
                        }
                    }
                });
                console.log("OK! Done loading files... ");
                //console.dir(scope.project.Images);
                //console.dir(scope.project.Docs);

            }, true); //end after files load watcher.
            
        }, true); //end after project load watcher.

		scope.ShowMap = {
			Display: false,
			Message: "Show Map",
			MessageToOpen: "Show Map",
			MessageToClose: "Hide Map",
		};
		

		
        scope.toggleFavorite = function(){
            scope.isFavorite = !scope.isFavorite; //make the visible change instantly.

            scope.results = {};

            $rootScope.Profile.toggleProjectFavorite(scope.project);

            PreferencesService.saveUserPreference("Projects", $rootScope.Profile.favoriteProjects.join(), scope.results);

            var watcher = scope.$watch('results', function(){
                if(scope.results.done)
                {
                    //if something goes wrong, roll it back.
                    if(scope.results.failure)
                    {
                        scope.isFavorite = !scope.isFavorite;
                        $rootScope.Profile.toggleProjectFavorite(scope.project);
                    }
                    watcher();
                }
            },true);
        }
		
		scope.toggleMap = function(){
			if(scope.ShowMap.Display)
			{
				scope.removeFilter(); //also clears location
				scope.ShowMap.Display = false;
				scope.ShowMap.Message = scope.ShowMap.MessageToOpen;
			}
			else
			{
				scope.ShowMap.Display = true;
				scope.ShowMap.Message = scope.ShowMap.MessageToClose;

				setTimeout(function(){
					scope.map.reposition();
					console.log("repositioned");
				}, 400);

			}
		};
		
		scope.removeFilter = function()
		{
			//scope.activities = scope.allActivities;
			scope.clearLocation();
		};
		
		scope.clearLocation = function(){
			scope.map.infoWindow.hide();
			scope.selectedLocation = null;

			if(scope.newGraphic)
			{
				scope.map.graphics.remove(scope.newGraphic);
				scope.newGraphic = null;
			}

		};
		

        //metadata -- we have a list of metadata properties that are configured for "project" entities.
        //  any metadata already associated with a project come in teh project's Metadata array, but ones that haven't
        //  been given a value yet on a specific project won't appear and need to be added in separately.


        scope.metadataPropertiesPromise.promise.then(function(list){
            addMetadataProperties(list, scope.metadataList, scope, CommonService);
        });

        scope.habitatPropertiesPromise.promise.then(function(list){
            addMetadataProperties(list, scope.metadataList, scope, CommonService);
        });


        scope.openChooseMapImage = function(){
            var modalInstance = $modal.open({
              templateUrl: 'app/core/projects/components/project-detail/templates/modal-choosemap.html',
              controller: 'ModalChooseMapCtrl',
              scope: scope, //very important to pass the scope along...
            });
        };

        scope.openChooseSummaryImages = function(){
            var modalInstance = $modal.open({
                templateUrl: 'app/core/projects/components/project-detail/templates/modal-choosesummaryimages.html',
              controller: 'ModalChooseSummaryImagesCtrl',
              scope: scope, //very important to pass the scope along...
            });
        };
        		
       
		 
        scope.syncToStreamnet = function(){
            $.ajax({
                url: serviceUrl + '/api/v1/streamnet/synctostreamnet',
                type : 'GET',
                // data : formData,
                // processData: false,  // tell jQuery not to process the data
                // contentType: false,  // tell jQuery not to set contentType
                success : function(data) {
                    // var output = eval("(" + data + ")");
                    alert(data.join('\n'));
                },
                error: function(jqXHR, error, errorThrown) {
                    if(jqXHR.status && jqXHR.status == 400) {
                        alert(jqXHR.responseText + "\n\n" + "Error running sync action!");
                    } else {
                        alert("Error running sync action!");
                    }
                }
            });

        };

        scope.openPrintWindow = function()
        {
			$window.open(PROJECT_REPORT_URL+scope.project.Id,'_blank');
        };
        

        scope.reloadProject = function () {
            console.log(" --- *** --- *** Reloading project... are you sure you want this?!!  *****************");
            ProjectService.clearProject();
            scope.project = ProjectService.getProject(routeParams.Id);
        };


		scope.setSdeObjectId = function(sdeObjectId)
		{
			console.log("Inside contollers.js, scope.setSdeObjectId...");
			console.log("sdeObjectId = " + sdeObjectId);
			scope.SdeObjectId = sdeObjectId;
			console.log("scope.SdeObjectId");
		};

       

        //return an array from the eventfiles.
        scope.getFilesArrayAsList = function (theFiles) {
            if (theFiles === undefined || theFiles === null)
                return [];

            var files = angular.fromJson(theFiles);
            return (files === null || !Array.isArray(files)) ? [] : files; //if it isn't an array, make an empty array

        }

        //return an array of file links to cdmsShareUrl (defined in config) for subproject
        scope.getSubprojectFilesArrayAsLinks = function(a_projectId, a_subprojectId, a_files)
        {
            var files = scope.getFilesArrayAsList(a_files);
            var retval = [];

            angular.forEach(files, function (file, value) {
                retval.push("<a href='" + cdmsShareUrl + "P/" + a_projectId + "/S/" + a_subprojectId + "/" + file.Name + "' target=\"_blank\">" + file.Name + "</a>");
            });

            return retval;
        }

		
		scope.refreshProjectLocations = function(){
			//console.log("Inside controllers.js, refreshProjectLocations...");
			ProjectService.clearProject();
			scope.project = null;
			scope.project = ProjectService.getProject(parseInt(scope.projectId));
		};

        scope.clearUsersWatch = scope.$watch('users', function(){
                if(scope.users)
                {
                    if(scope.users.length > 0)
                    {
                        scope.clearUsersWatch();
                        scope.filterUsers();
                    }
                }
                else
                    console.log("not yet.");

        },true); //note this TRUE here... this is required when watching an array directly.

		 

        //remove this editor from the users dropdown.
        scope.filterUsers = function()
        {
            console.log("filterusers starting with " + scope.users.length);

            var newusers = [];

            for (var a = 0; a < scope.users.length; a++) {
                var user = scope.users[a];
                var filterOut = false;

                for (var i = 0; i < scope.editors.length; i++) {
                    //is this user an editor already?  if so leave them off the list.
                    if(scope.editors[i].Id == user.Id)
                    {
                        filterOut = true;
                        break;
                    }
                }

                if(!filterOut)
                    newusers.push(user);


            };

            console.log("set a new group: " + newusers.length);
            scope.users = newusers.sort(orderUserByAlpha);

        }

        scope.select2Options = {
            allowClear:true
        };

        scope.selectedUser = null;

        scope.addEditor = function(){
            console.log("Add Editor.");
            for (var i = 0; i < scope.users.length; i++) {
                var user = scope.users[i];

                if(user.Id == scope.selectedUser)
                {
                    scope.editors.push(user);
                    scope.users.splice(i,1);
                    scope.selectedUser = null;
                    break;
                }
            };
        };

        scope.removeEditor = function(index)
        {
            scope.users.push(scope.editors.splice(index,1)[0]);
            scope.users.sort(orderUserByAlpha);
        };

        scope.saveEditors = function()
        {
            scope.saveResults = {};
            ProjectService.saveEditors(scope.currentUserId, scope.project.Id, scope.editors, scope.saveResults);
        };
		 	  
	
        scope.cancel = function()
        {
           // scope.users =
        };


        scope.openProjectEditor = function () {
            scope.row = scope.project; //
            var modalInstance = $modal.open({
                templateUrl: 'app/core/projects/components/project-detail/templates/modal-edit-project.html',
                controller: 'ModalProjectEditorCtrl',
                scope: scope, //very important to pass the scope along...

            });
        };



        //both docs and gallery tabs use these:
        scope.openDeleteFileModal = function (a_selection, a_callback) {
            scope.row = a_selection;
            scope.callback = a_callback;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/projects/components/project-detail/templates/modal-delete-file.html',
                controller: 'ModalDeleteFileCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        //selection to edit, callback to fire on success.
        scope.openEditFileModal = function (a_selection, a_callback) {
            scope.row = a_selection;
            scope.callback = a_callback;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/projects/components/project-detail/templates/modal-edit-file.html',
                controller: 'ModalEditFileCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        scope.openNewFileModal = function (a_callback) {
            scope.callback = a_callback;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/projects/components/project-detail/templates/modal-upload-files.html',
                controller: 'ModalNewFileCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        //removes the given file from project.Files (usually after deleting an item from docs/gallery already)
        scope.removeFromFiles = function (removed_item) {
            scope.project.Files.forEach(function (item, index) {
                //console.log("item id is " + item.Id + " looking for " + removed_item.File.Id);
                if (item.Id === removed_item.File.Id) {
                    //console.log("FOund an ID that matches for delete");
                    scope.project.Files.splice(index, 1);
                }
            });
        };
	}
];





define("core/projects/components/project-detail/project-detail", function(){});


modal_new_file = ['$scope','$modalInstance', '$upload',
	function($scope,  $modalInstance, $upload){
		// This controller is for the Project File (Documents tab) modal.
		// note: file selected for upload in this controller are managed by onFileSelect in this controller (see below).

		$scope.header_message = "Add file(s) to "+$scope.project.Name;

		$scope.onFileSelect = function($files)
		{
			console.log("Inside ModalNewFileCtrl, file selected! " + $files);
			$scope.uploadFiles = $files;
			//console.dir($scope.uploadFiles);
		};

		$scope.save = function(){
			console.log("Inside controllers.js, ModalNewFileCtrl, save...");
			//console.log("$scope is next...");
			//console.dir($scope);
			// Just in case they clicked the Upload button, without selecting a file first.
			if (!$scope.uploadFiles)
			{
				console.log("No file selected; do nothing...");
				return;
			}

			$scope.foundDuplicate = false;		
			$scope.uploadErrorMessage = undefined;
			var errors = [];

			for(var i = 0; i < $scope.uploadFiles.length; i++)
			{
				var file = $scope.uploadFiles[i];
				console.log("file is next...");
				console.dir(file);
				
				var newFileNameLength = file.name.length;
				console.log("file name length = " + newFileNameLength);

				// $scope.uploadFileType gets set when the user clicks on the new button, 
				// and it determined whether they are in the Project gallery, or Project Documents.
				console.log("$scope.uploadFileType = " + $scope.uploadFileType);
				if ($scope.uploadFileType === "image")
				{
					console.log("We have an image...");
					for(var n = 0; n < $scope.project.Images.length; n++)
					{
						var existingFileName = $scope.project.Images[n].Name;
						console.log("existingFileName = " + existingFileName);
						var existingFileNameLength = existingFileName.length;
						if ((newFileNameLength >= existingFileNameLength) && (file.name.indexOf(existingFileName) > -1))
						{
								$scope.foundDuplicate = true;
								console.log(file.name + " already exists in the project file list.");
								errors.push(file.name + " already exists in the list of project images.");						
						}
					}
				}
				else
				{
					console.log("We have something other than an image...");
					for(var n = 0; n < $scope.project.Files.length; n++)
					{
						var existingFileName = $scope.project.Files[n].Name;
						console.log("existingFileName = " + existingFileName);
						var existingFileNameLength = existingFileName.length;
						if ((newFileNameLength >= existingFileNameLength) && (file.name.indexOf(existingFileName) > -1))
						{
								$scope.foundDuplicate = true;
								console.log(file.name + " already exists in the project file list.");
								errors.push(file.name + " already exists in the list of project Files.");						
						}
					}
				}
				
				console.log("$scope.foundDuplicate = " + $scope.foundDuplicate);
				// Inform the user immediately, if there are duplicate files.
				if ($scope.foundDuplicate)
					alert(errors);
				else
				{
					console.log("file is next...");
					console.dir(file);
					//if(file.success != "Success")
					if(!file.success)
					{
						console.log("file.success does not exist yet...");
						$scope.upload = $upload.upload({
							url: serviceUrl + '/api/v1/file/UploadProjectFile',
							method: "POST",
							// headers: {'headerKey': 'headerValue'},
							// withCredential: true,
							data: {ProjectId: $scope.project.Id, Description: file.Info.Description, Title: file.Info.Title},
							file: file,

							}).progress(function(evt) {
								console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
							}).success(function(data, status, headers, config) {
                                config.file.success = "Success";
                                /*
                                console.log("Back from save = data");
                                console.dir(data);
                                console.log("Back from save = config");
                                console.dir(config);
                                console.log("Back from save = status");
                                console.dir(status);
                                console.log("Back from save = headers");
                                console.dir(headers);
                                */
                                $scope.callback(data);
							})
							.error(function(data, status, headers, config) {
								$scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
								//console.log(file.name + " was error.");
								config.file.success = "Failed";
							});
					}
				}
			}

		};

		$scope.cancel = function(){
			//if($scope.uploadFiles)
			//	$scope.reloadProject();

			$scope.foundDuplicate = undefined;

			$modalInstance.dismiss();
		};
	}
];
define("core/projects/components/project-detail/modal-new-file", function(){});


var modal_edit_file = ['$scope', '$modalInstance', 'ProjectService',
    function ($scope, $modalInstance, ProjectService){

		$scope.header_message = "Edit file";

		$scope.save = function(){
			var promise = ProjectService.updateFile($scope.project.Id, $scope.row);
			promise.$promise.then(function(){
				$scope.callback(promise);
				$modalInstance.dismiss();
			});
		};

		$scope.cancel = function(){
			$modalInstance.dismiss();
		};
	}
];

define("core/projects/components/project-detail/modal-edit-file", function(){});


var modal_edit_project = ['$scope', '$modalInstance', 'ProjectService', 
    function ($scope, $modalInstance, ProjectService) {

        if ($scope.row && $scope.row.Id) {
            $scope.header_message = "Edit project: " + $scope.project.Name;
        }
        else {
            $scope.header_message = "Create new project";
            $scope.row = {};
        }

        $scope.save = function () {
            console.log("Inside ModalProjectEditorCtrl, save...");
            console.log("$scope.row is next...")
            console.dir($scope.row);

            if (!$scope.row.Name) {
                alert("You must enter a Program/Project Name!");
                return;
            }

            $scope.row.Metadata = [];

            //need to make multi-selects into json objects
            angular.forEach($scope.metadataList, function (md) {
                //flatten multiselect values into an json array string
                if (md.Values && md.controlType == "multiselect") {
                    md = angular.copy(md);
                    md.Values = angular.toJson(md.Values).toString(); //wow, definitely need tostring here!
                }

                $scope.row.Metadata.push(md);
            });

            console.log("About to save...");
            var promise = ProjectService.saveProject($scope.row);
            console.log("Just saved...");
            promise.$promise.then(function () {
                console.log("About to reload project...");
                $scope.reloadProject();
                $modalInstance.dismiss();
            });

        };

        $scope.cancel = function () {
            $modalInstance.dismiss();
        };

    }
];

define("core/projects/components/project-detail/modal-edit-project", function(){});

var modal_delete_file = ['$scope', '$modalInstance', 'ProjectService',
    function ($scope, $modalInstance, ProjectService){

		$scope.header_message = "Delete file?";

		$scope.save = function(){
			var promise = ProjectService.deleteFile($scope.project.Id, $scope.row);
			promise.$promise.then(function(){
				$scope.callback(promise);
				$modalInstance.dismiss();
			});
		};

		$scope.cancel = function(){
			$modalInstance.dismiss();
		};
	}
];

define("core/projects/components/project-detail/modal-delete-file", function(){});

var modal_choose_summary_images = ['$scope', '$modalInstance', 'ProjectService',
    function ($scope, $modalInstance, ProjectService){

     var galleryLinkTemplate = '<a href="{{row.getProperty(\'Link\')}}" target="_blank" title="{{row.getProperty(\'Link\')}}">' +
                                '<img ng-src="{{row.getProperty(\'Link\')}}" width="150px"/><br/><div class="ngCellText" ng-class="col.colIndex()">' +
                               '</a>' +
                               '</div>';
        $scope.chooseSummaryImagesSelection = [];
        
        $scope.chooseSummaryImagesGallery = {
            data: 'project.Images',
            columnDefs:
            [
                {field:'Name',displayName: 'File', cellTemplate: galleryLinkTemplate},
                {field: 'Title'},
                {field: 'Description'},
                //{field: 'Size'},
            ],
            multiSelect: true,
            selectedItems: $scope.chooseSummaryImagesSelection

        };
    

    $scope.save = function(){

        if($scope.chooseSummaryImagesSelection.length == 0)
        {
            alert("Please choose at least one image to save by clicking on it and try again.");
            return;
        }

        //is there already a metadata record?
        var imgmd = getByField($scope.project.Metadata, METADATA_PROPERTY_SUMMARYIMAGE, "MetadataPropertyId");
        var imgmd_html = getByField($scope.project.Metadata, METADATA_PROPERTY_SUMMARYIMAGE_HTML, "MetadataPropertyId");

        if(!imgmd)
        {
            imgmd = {   MetadataPropertyId: METADATA_PROPERTY_SUMMARYIMAGE, UserId: $scope.Profile.Id  };
            $scope.project.Metadata.push(imgmd);
        }

        if(!imgmd_html)
        {
            imgmd_html = {  MetadataPropertyId: METADATA_PROPERTY_SUMMARYIMAGE_HTML, UserId: $scope.Profile.Id  };
            $scope.project.Metadata.push(imgmd_html);
        }        

        var selections = [];
        var the_html = "";

        for (var i = $scope.chooseSummaryImagesSelection.length - 1; i >= 0; i--) {
            var selection = $scope.chooseSummaryImagesSelection[i];

            //whip up the html .. might be good to have this in a pattern somewhere external!
            the_html += "<div class='selected-image-div'>";
                the_html += "<img src='" + selection.Link + "' class='selected-image'>";
                if (selection.Description)
                    the_html += "<p>" + selection.Description + "</p>";
                the_html += "</div>";

            selections.push(selection.Id);

        }

        imgmd_html.Values = the_html;
        imgmd.Values = selections.toString();

        //console.dir($scope.project.Metadata);

        var promise = ProjectService.saveProject($scope.project);
            promise.$promise.then(function(){
                $scope.reloadProject();
                $modalInstance.dismiss();
        });

    };


    $scope.cancel = function(){
        $modalInstance.dismiss();
    };
  }
];
define("core/projects/components/project-detail/modal-choose-summary-images", function(){});


var modal_choose_map = ['$scope', '$modalInstance', 'ProjectService',
    function ($scope, $modalInstance, ProjectService){

     var galleryLinkTemplate = '<a href="{{row.getProperty(\'Link\')}}" target="_blank" title="{{row.getProperty(\'Link\')}}">' +
                                '<img ng-src="{{row.getProperty(\'Link\')}}" width="150px"/><br/><div class="ngCellText" ng-class="col.colIndex()">' +
                               '</a>' +
                               '</div>';
        $scope.chooseMapSelection = [];
        
        $scope.chooseMapGallery = {
            data: 'project.Images',
            columnDefs:
            [
                {field:'Name',displayName: 'File', cellTemplate: galleryLinkTemplate},
                {field: 'Title'},
                {field: 'Description'},
                //{field: 'Size'},
            ],
            multiSelect: false,
            selectedItems: $scope.chooseMapSelection

        };
    

    $scope.save = function(){

        if($scope.chooseMapSelection.length == 0)
        {
            alert("Please choose an image to save by clicking on it and try again.");
            return;
        }

        //is there already a mapselection?
        var mapmd = getByField($scope.project.Metadata, METADATA_PROPERTY_MAPIMAGE, "MetadataPropertyId");
        var mapmd_html = getByField($scope.project.Metadata, METADATA_PROPERTY_MAPIMAGE_HTML, "MetadataPropertyId");

        if(!mapmd)
        {
            mapmd = {   MetadataPropertyId: METADATA_PROPERTY_MAPIMAGE, UserId: $scope.Profile.Id  };
            $scope.project.Metadata.push(mapmd);
        }

        if(!mapmd_html)
        {
            mapmd_html = {  MetadataPropertyId: METADATA_PROPERTY_MAPIMAGE_HTML, UserId: $scope.Profile.Id  };
            $scope.project.Metadata.push(mapmd_html);
        }        

        mapmd.Values = $scope.chooseMapSelection[0].Id; //fileid of the chosen image file

        //whip up the html .. might be good to have this in a pattern somewhere external!
        var the_html = "<div class='selected-image-div'>";
            the_html += "<img src='" + $scope.chooseMapSelection[0].Link + "' class='selected-image'>";
            if ($scope.chooseMapSelection[0].Description)
                the_html += "<p>" + $scope.chooseMapSelection[0].Description + "</p>";
            the_html += "</div>";

        mapmd_html.Values = the_html;

        //console.dir($scope.project.Metadata);

        var promise = ProjectService.saveProject($scope.project);
            promise.$promise.then(function(){
                $scope.reloadProject();
                $modalInstance.dismiss();
        });

    };


    $scope.cancel = function(){
        $modalInstance.dismiss();
    };
  }
];




define("core/projects/components/project-detail/modal-choose-map", function(){});


module_add_accuracy_check = ['$scope', '$modalInstance', 'ProjectService',
    function ($scope, $modalInstance, ProjectService) {

        $scope.ac_row = angular.copy($scope.ac_row);

        $scope.save = function () {

            var promise = ProjectService.saveInstrumentAccuracyCheck($scope.viewInstrument.Id, $scope.ac_row);

            promise.$promise.then(function () {
                //$scope.reloadProject();
                $scope.postInstrumentAccuracyCheckUpdateGrid(promise);
                $modalInstance.dismiss();
            });
        };

        $scope.cancel = function () {
            $modalInstance.dismiss();
        };

    }
];
define("core/projects/components/project-detail/modal-add-accuracy-check", function(){});

//this is a nested controller used on the project-details page to load
// the instruments tab if it is a water temperature project. 

var tab_instruments = ['$scope', '$timeout','$routeParams', 'SubprojectService', 'ProjectService', 'DatasetService', 'CommonService', 'PreferencesService',
    '$rootScope', '$modal', '$sce', '$window', '$http',
    'ServiceUtilities', 'ConvertStatus', '$location', '$anchorScroll',
    function (scope, $timeout, routeParams, SubprojectService, ProjectService, DatasetService, CommonService, PreferencesService, $rootScope, $modal, $sce, $window, $http,
        ServiceUtilities, ConvertStatus, $location, $anchorScroll) {
        //console.log("Inside tab instruments controller...");

        scope.allInstruments = null;
        scope.getDataGrade = function (check) { return getDataGrade(check) }; //alias from service ?? TODO: check this kb/11/21
        scope.viewInstrument = null; //what they've clicked to view accuracy checks
        scope.selectedInstrument = null; //what they've selected in the dropdown to add to the project


        var CheckMethodRenderer = function (param) {
            return DataGradeMethods[param.data.CheckMethod]; //DataGradeMethods defined in config.js
        };

        var CheckDateRenderer = function (param) {
            return moment(param.data.CheckDate).format('L');
        };

        var EditLinksTemplate = function (param) {

            var div = document.createElement('div');

            var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
            editBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.editInstrument(param.data);
            });
            div.appendChild(editBtn);
            div.appendChild(document.createTextNode("|"));

            var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
            delBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.removeInstrument(param.data);
            });
            div.appendChild(delBtn);
            div.appendChild(document.createTextNode("|"));

            var addBtn = document.createElement('a'); addBtn.href = '#'; addBtn.innerHTML = 'Add AC';
            addBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.openAccuracyCheckForm(param.data, {});
            });
            div.appendChild(addBtn);

            return div;
        };

        var EditDetailLinksTemplate = function (param) {

            var div = document.createElement('div');

            var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
            editBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.openAccuracyCheckForm(getById(scope.project.Instruments, param.data.InstrumentId), param.data);
            });
            div.appendChild(editBtn);
            div.appendChild(document.createTextNode("|"));

            var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
            delBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.removeAccuracyCheck(param.data);
            });
            div.appendChild(delBtn);
            div.appendChild(document.createTextNode("|"));

            var addBtn = document.createElement('a'); addBtn.href = '#'; addBtn.innerHTML = 'Add';
            addBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.openAccuracyCheckForm(getById(scope.project.Instruments, param.data.InstrumentId), {});
            });
            div.appendChild(addBtn);

            return div;
        };

        //Instrument Accuracy Checks
        var instrDetailColDefs = [
            { cellRenderer: EditDetailLinksTemplate, width: 100, menuTabs: [] },
            { field: 'CheckDate', headerName: 'Check Date', width: 100, sort: 'desc', cellRenderer: CheckDateRenderer, menuTabs: []},
            { field: 'CheckMethod', headerName: 'Check Method', cellRenderer: CheckMethodRenderer, width: 230, menuTabs: ['filterMenuTab'] },
            { field: 'Bath1Grade', headerName: 'Bath 1 Grade', width: 100, menuTabs: ['filterMenuTab'] },
            { field: 'Bath2Grade', headerName: 'Bath 2 Grade', width: 100, menuTabs: ['filterMenuTab'] },
            { field: 'Comments', headerName: 'Comments', width: 275, menuTabs: [] },
        ];

        scope.instrDetailGridOptions = {
                enableSorting: true,
                enableFilter: true,
                enableColResize: true,
                columnDefs: instrDetailColDefs,
        };

        ///////////////instruments grid
        scope.instrGridOptions = {
            masterDetail: true,
            detailCellRendererParams: {
                detailGridOptions: scope.instrDetailGridOptions,
                getDetailRowData: function (params) {
                    params.successCallback(params.data.AccuracyChecks);
                },
            },
            enableSorting: true,
            enableFilter: true,
            enableColResize: true,
            rowSelection: 'single',
            onSelectionChanged: function (params) {
                console.log("selection changed!");
                scope.instrGridOptions.selectedItems = scope.instrGridOptions.api.getSelectedRows();
                //scope.$apply(); //trigger angular to update our view since it doesn't monitor ag-grid
            },
            onFilterModified: function () {
                scope.instrGridOptions.api.deselectAll();
            },
            selectedItems: [],
            columnDefs:
            [
                { cellRenderer: EditLinksTemplate, width: 120, menuTabs: [], },
                { field: 'Name', headerName: 'Name', width: 250, sort: 'asc', menuTabs: ['filterMenuTab'], filter: 'text', cellRenderer: 'group' },
                { field: 'SerialNumber', headerName: 'SerialNumber', width: 120, menuTabs: ['filterMenuTab'], filter: 'text'},
                { field: 'Manufacturer', headerName: 'Manufacturer', width: 150, menuTabs: ['filterMenuTab'], },
                { field: 'Model', headerName: 'Model', width: 150, menuTabs: ['filterMenuTab'], },
                { field: 'InstrumentType.Name', headerName: 'Type', menuTabs: ['filterMenuTab'], },
                //{ field: 'OwningDepartment.Name', headerName: 'Owner', width: 250, menuTabs: ['filterMenuTab'], },
                
                
            ]
        };

        

        
        //watch the datasets on the parent-detail page to load... once they do, check to see if we should show our tab
        var inst_ds_watcher = scope.$parent.$watch('datasets', function () {
            //console.log("Inside TAB INSTRUMENTS watch datasets... --------------------------");

            //console.log("parent datasets");
            //console.dir(scope.$parent.datasets);
            //console.log("our datasets");
            //console.dir(scope.datasets);

            if (scope.datasets === undefined || scope.datasets.length === 0)
                return;

            //console.log("OK TAB INSTRUMENTS .  The datasets are loaded...");

            //scope.datasets = scope.$parent.datasets; //but i dont' want to do this.

            inst_ds_watcher(); //turn off watcher

            for (var i = 0; i < scope.datasets.length; i++) { //look through the datasets for one of ours.

                //console.log("Woohoo! are we water tempproject?"); //TODO!! don't look at the dataset, look at the project type
                //console.dir(scope.project);

                if (scope.datasets[i].Datastore.TablePrefix === "WaterTemp") {
                    console.log("Adding instruments to tab bar...");
                    scope.ShowInstruments = true;
                }
            }
        }, true);

        //when the parent project is loaded...
        scope.$parent.$watch('project.Id', function () {

            if (typeof scope.project === 'undefined' || typeof scope.project.Id === 'undefined')
                return;

            console.log("project done loading: your project instruments:-------------------- *************************");
            console.dir(scope.project.Instruments);

            $timeout(function () {

                var ag_grid_div = document.querySelector('#instruments-tab-grid');    //get the container id...
                scope.ag_grid = new agGrid.Grid(ag_grid_div, scope.instrGridOptions); //bind the grid to it.
                scope.instrGridOptions.api.showLoadingOverlay(); //show loading...

                //build the grid based on our subprojects
                scope.instrGridOptions.api.setRowData(scope.project.Instruments);

            }, 0);

            //these are the ones that show up in the dropdown list to select from -- ALL the instruments in the world.
            scope.allInstruments = ProjectService.getAllInstruments();

            //filter and only show instruments not already in our project.
            scope.allInstruments.$promise.then(function () {    
                scope.filterAllInstruments();
            });


            //console.log("Parent project is loaded! watching from instruments tab ---------------- >>>>>>>>>>>>>>");

            //reload if it is already selected -- this is what allows you to see the new accuracycheck/characteristic immediately after it is added
            //if (scope.viewInstrument)
            //{
            //    scope.viewInstrument = getMatchingByField(scope.project.Instruments, scope.viewInstrument.Id, 'Id')[0];
            //}
        });

        scope.createInstrument = function () {
            scope.viewInstrument = null;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-instrument.html',
                controller: 'ModalCreateInstrumentCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };


        scope.viewSelectedInstrument = function (instrument) {
            scope.viewInstrument = instrument;
        };

        scope.addInstrument = function () {
			/* Verify that situations are true:
			*  scope.selectedInstrument exists				This is important because IE will not actually select something, when you select it the first time.
			*  scope.selectedInstrument is not null			Important for the same reason just mentioned.
			*/

            if (!scope.selectedInstrument || scope.selectedInstrument === null )
            {
                alert("Please select an Instrument from the dropdown to add to this project.");
                return;
            }

            var instrument_to_add = getById(scope.allInstruments, scope.selectedInstrument)
            var promise = ProjectService.saveProjectInstrument(scope.project.Id, instrument_to_add);

            promise.$promise.then(function () {
                //done, add it to the list.
                scope.project.Instruments.push(instrument_to_add);
                scope.filterAllInstruments();
                scope.instrGridOptions.api.setRowData(scope.project.Instruments);
            });
        };


        scope.removeInstrument = function (instrument) {
            scope.viewInstrument = instrument;
            if (!scope.viewInstrument)
                return;

            if (confirm("Are you sure you want to remove this Instrument from this Project?")) {
                var promise = ProjectService.removeProjectInstrument(scope.project.Id, scope.viewInstrument.Id);

                promise.$promise.then(function () {
                    scope.project.Instruments.forEach(function (item, index) {
                        if (item.Id === scope.viewInstrument.Id) {
                            scope.project.Instruments.splice(index, 1);
                            scope.instrGridOptions.api.setRowData(scope.project.Instruments);
                            scope.allInstruments.push(instrument);
                            scope.filterAllInstruments();
                        }
                    });
                });
            }
        };


        scope.removeAccuracyCheck = function (ac) {

            var instrument = getById(scope.project.Instruments, ac.InstrumentId);
            if (typeof instrument === 'undefined') {
                alert("Cannot remove that Accuracy Check. Can't find related instrument. Please share this error with your administrator.");
                return;
            }

            if (confirm("Are you sure you want to remove this Accuracy Check from this Instrument?")) {
                
                var promise = ProjectService.removeInstrumentAccuracyCheck(ac.InstrumentId, ac);

                promise.$promise.then(function () {
                    instrument.AccuracyChecks.forEach(function (item, index) {
                        if (item.Id === ac.Id) {
                            instrument.AccuracyChecks.splice(index, 1);
                            scope.instrGridOptions.api.setRowData(scope.project.Instruments);
                            var the_node = scope.expandById(ac.InstrumentId);
                            if (the_node != null)
                                scope.instrGridOptions.api.ensureNodeVisible(the_node);
                        }
                    });
                });
            }
        };

        scope.editInstrument = function (instrument) {

            scope.viewInstrument = instrument;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-instrument.html',
                controller: 'ModalCreateInstrumentCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        //fired after a user saves a new or edited instrument
        // we update the item in project's instruments then refresh the grid.
        scope.postSaveInstrumentUpdateGrid = function (the_promise) {
            //console.log("ok - we saved so update the grid...");
            var total = scope.project.Instruments.length;
            var count = 0;
            var updated = false;
            scope.project.Instruments.forEach(function (item, index) {
                if (item.Id === the_promise.Id) {
                    updated = true;

                    //console.log("ok we found a match! -- updating! before:");
                    //console.dir(scope.subprojectList[index]);

                    if (the_promise.AccuracyChecks !== undefined)
                        delete the_promise.AccuracyChecks; //remove this before the copy.

                    angular.extend(scope.project.Instruments[index], the_promise); //replace the data for that item
                    //console.log("ok we found a match! -- updating! after:");
                    scope.instrGridOptions.api.redrawRows();
                    console.log("done reloading grid after editing an instrument.");
                }
                count++;
                if (count == total && updated == false) //if we get all done and we never found it, lets add it to the end.
                {
                    //console.log("ok we found never a match! -- adding!");
                    the_promise.AccuracyChecks = [];
                    scope.project.Instruments.push(the_promise); //add that item
                    scope.instrGridOptions.api.setRowData([]);
                    scope.instrGridOptions.api.setRowData(scope.project.Instruments);

                    console.log("done reloading grid after adding an instrument.");
                }
            });

            console.log("updated the list and the grid... now refreshing the instrument lists");
            //scope.refreshSubprojectLists(); //funders, collaborators, etc.

        };


        //returns the (last) node or null if none found.
        scope.expandById = function (id_in) {
            var the_node = null;
            scope.instrGridOptions.api.forEachNode(function (node) {
                if (node.data.Id === id_in) {
                    //console.log("Expanding! " + id_in);
                    node.setExpanded(true);
                    the_node = node;
                }
            });
            return the_node;
        };




        //called by the modal once the instrument accuracy check is successfully saved.
        scope.postInstrumentAccuracyCheckUpdateGrid = function (edited_item) {
            //edit our instrument's accuracy check and then reload the grid.
            var edited = false;
            scope.project.Instruments.forEach(function (item, index) {
                if (item.Id === edited_item.InstrumentId) {
                    item.AccuracyChecks.forEach(function (instr_item, instr_item_index) {
                        if (instr_item.Id === edited_item.Id) {
                            angular.extend(instr_item, edited_item); //replace the data for that item
                            console.log("OK!! we edited that accuracy check item");
                            edited = true;
                        }
                    });
                    if (!edited) {
                        item.AccuracyChecks.push(edited_item);
                        console.log("OK we added that accuracy check item!");
                    }
                }
            });
            

            scope.instrGridOptions.api.setRowData(scope.project.Instruments);

            //after we setRowData, the grid collapses our expanded item. we want it to re-expand that item and make sure it is visible.
            var the_node = scope.expandById(edited_item.InstrumentId);
            if (the_node != null)
                scope.instrGridOptions.api.ensureNodeVisible(the_node);

            console.log("done reloading grid after editing accuracy check item.");

        };

        scope.openAccuracyCheckForm = function (a_instrument, ac_row) {

            scope.viewInstrument = a_instrument;
            console.dir(a_instrument);

            if (ac_row)
                scope.ac_row = ac_row;
            else
                scope.ac_row = {};

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-new-accuracycheck.html',
                controller: 'ModalAddAccuracyCheckCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        scope.filterAllInstruments = function () {
            var filteredInstruments = [];
            scope.allInstruments.forEach(function (item, index) {
                var have_instrument = getById(scope.project.Instruments, item.Id);
                if (typeof have_instrument === 'undefined' || have_instrument == null) {
                    filteredInstruments.push(item);
                }
            });
            scope.allInstruments = filteredInstruments.sort(orderByAlphaName);
        };

}];

define("core/projects/components/project-detail/project-detail-tab-instruments", function(){});

//this is a nested controller used on the project-details page to load
// the fishermen tab if it is a harvest/creel project. 

var tab_fishermen = ['$scope', '$timeout', '$routeParams', 'SubprojectService', 'ProjectService', 'DatasetService', 'CommonService', 'PreferencesService',
    '$rootScope', '$modal', '$sce', '$window', '$http',
    'ServiceUtilities', 'ConvertStatus', '$location', '$anchorScroll',
    function (scope, $timeout, routeParams, SubprojectService, ProjectService, DatasetService, CommonService, PreferencesService, $rootScope, $modal, $sce, $window, $http,
        ServiceUtilities, ConvertStatus, $location, $anchorScroll) {

        //console.log("Inside tab fishermen controller...");
        
        scope.fishermanList = null;
        scope.theFishermen = null;

        //fisherman-tab-grid

        var FirstNameRenderer = function (param)
        {
            return (param.data.Aka) ? param.data.FirstName + ' (' + param.data.Aka + ')' : param.data.FirstName;
        }

        var DateAddedRenderer = function (param) {
            return moment(param.data.DateAdded).format('L');
        };

        var StatusIdRenderer = function (param) {
            var str_status = ConvertStatus.convertStatus(param.data.StatusId);
            //return (param.data.StatusId === 1) ? str_status + '(' + param.data.DateInactive + ')' : str_status; //include the dateinactive if inactive
            // well, it looks like the dateinactive isn't being set so it is null... guess we can use that later; now we'll just return the status
            return str_status;
        };

        var OkToCallRenderer = function (param) {
            return ConvertStatus.convertOkToCall(param.data.OkToCallId);
        };

        var EditLinksTemplate = function (param) {

            var div = document.createElement('div');

            var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
            editBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.editFisherman(param.data);
            });
            div.appendChild(editBtn);
            div.appendChild(document.createTextNode("|"));

            var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
            delBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.removeFisherman(param.data);
            });
            div.appendChild(delBtn);

            return div;
        };

        ///////////////fishermen grid
        scope.fishGridOptions = {

            enableSorting: true,
            enableFilter: true,
            enableColResize: true,
            rowSelection: 'single',
            onSelectionChanged: function (params) {
                console.log("selection changed!");
                scope.fishGridOptions.selectedItems = scope.fishGridOptions.api.getSelectedRows();
                //scope.$apply(); //trigger angular to update our view since it doesn't monitor ag-grid
            },
            onFilterModified: function () {
                scope.fishGridOptions.api.deselectAll();
            },
            selectedItems: [],
            columnDefs:
            [
                { cellRenderer: EditLinksTemplate, width: 80, menuTabs: [], },
                { field: 'FirstName', cellRenderer: FirstNameRenderer, headerName: 'First Name', width: 100, sort: 'asc', menuTabs: ['filterMenuTab'], filter: 'text' },
                //{ field: 'Aka', headerName: 'Aka', width: 120, menuTabs: ['filterMenuTab'], filter: 'text' },
                { field: 'LastName', headerName: 'Last Name', width: 120, menuTabs: ['filterMenuTab'], filter: 'text' },
                { field: 'FullName', headerName: 'Full Name', width: 150, menuTabs: ['filterMenuTab'], filter: 'text' },
                { field: 'PhoneNumber', headerName: 'Phone', width: 100, menuTabs: ['filterMenuTab'], filter: 'text' },
                { field: 'OkToCallId', headerName: 'Ok To Call', width: 80, menuTabs: ['filterMenuTab'], cellRenderer: OkToCallRenderer },
                { field: 'FishermanComments', headerName: 'Comments', width: 250, menuTabs: ['filterMenuTab'], filter: 'text' },
                { field: 'DateAdded', headerName: 'Date Added', width: 100, cellRenderer: DateAddedRenderer, menuTabs: [], },
                { field: 'StatusId', headerName: 'Status', width: 100, menuTabs: ['filterMenuTab'], cellRenderer: StatusIdRenderer},
                //{ field: 'DateInactive', headerName: 'Date Inactive', menuTabs: [], },
                //{ field: 'OwningDepartment.Name', headerName: 'Owner', width: 250, menuTabs: ['filterMenuTab'], },


            ]
        };


        //watch the datasets on the parent-detail page to load... once they do, check to see if we should show our tab
        var f_ds_watcher = scope.$parent.$watch('project', function () {

            if (typeof scope.project === 'undefined' || typeof scope.project.Id === 'undefined')
                return;

            f_ds_watcher(); //turn off the watcher.

            if (scope.isHarvestProject(scope.project)) {
                console.log("Adding Fishermen to tab bar because we are a Harvest project...");
                scope.ShowFishermen = true;
                //scope.fishermenList = ProjectService.getFishermen(); // All fishermen, but only CreelSurvey has fishermen.//
                //scope.theFishermen = ProjectService.getProjectFishermen(scope.project.Id);
                

                $timeout(function () {

                    var ag_grid_div = document.querySelector('#fisherman-tab-grid');    //get the container id...
                    scope.ag_grid = new agGrid.Grid(ag_grid_div, scope.fishGridOptions); //bind the grid to it.
                    scope.fishGridOptions.api.showLoadingOverlay(); //show loading...

                    //build the grid based on our subprojects
                    scope.fishGridOptions.api.setRowData(scope.project.Fishermen);

                }, 0);

            }
        }, true);


        scope.removeFisherman = function (a_fisherman) {
            console.log("alrighty, remove this fisherman!");
            console.dir(a_fisherman);
            if (!a_fisherman)
                return;

            if (!confirm("Are you sure you want to remove this fisherman from this project?"))
                return;

            var promise = ProjectService.removeProjectFisherman(scope.project.Id, a_fisherman.Id);

            promise.$promise.then(function () {
                scope.project.Fishermen.forEach(function (item, index) {
                    if (item.Id === a_fisherman.Id) {
                        scope.project.Fishermen.splice(index, 1);
                        scope.fishGridOptions.api.setRowData(scope.project.Fishermen);
                    }
                });
            });
        };

        scope.createFisherman = function () {
            scope.viewFisherman = null;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-fisherman.html',
                controller: 'ModalCreateFishermanCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        scope.editFisherman = function (a_fisherman) {
            scope.viewFisherman = a_fisherman;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-fisherman.html',
                controller: 'ModalCreateFishermanCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        scope.postSaveFishermanUpdateGrid = function (the_promise) {
            var updated = false;
            scope.project.Fishermen.forEach(function (item, index) {
                if (item.Id === the_promise.Id) {
                    updated = true;

                    //console.log("ok we found a match! -- updating! before:");
                    //console.dir(scope.subprojectList[index]);

                    angular.extend(scope.project.Fishermen[index], the_promise); //replace the data for that item
                    //console.log("ok we found a match! -- updating! after:");
                    scope.fishGridOptions.api.redrawRows();
                    console.log("done reloading grid after editing a fisherman.");
                }
            });
            if (updated === false) //if we get all done and we never found it, lets add it to the end.
            {
                //console.log("ok we found never a match! -- adding!");
                scope.project.Fishermen.push(the_promise); //add that item
                scope.fishGridOptions.api.setRowData([]);
                scope.fishGridOptions.api.setRowData(scope.project.Fishermen);

                console.log("done reloading grid after adding a fisherman.");
            }

            console.log("updated the list and the grid... now refreshing ");

        };

        //looks at the metadata setting to see if it is a harvest project
        scope.isHarvestProject = function (a_project) {
            return (a_project.MetadataValue[METADATA_PROPERTY_SUBPROGRAM]) === "Harvest";
        }


}];


define("core/projects/components/project-detail/project-detail-tab-fishermen", function(){});

//Data tab on the Project Details page.

var tab_data = ['$scope', function (scope) {

    var linkTemplate = function (param) {

        var div = document.createElement('div');

        var linkBtn = document.createElement('a');
        linkBtn.href = '#/' + param.data.activitiesRoute + '/' + param.data.Id;
        linkBtn.innerHTML = param.data.Name;

        div.appendChild(linkBtn);

        return div;
    };

    //datasets tab grid
    scope.dataGridOptions = {
        //data: 'datasets',
        enableSorting: true,
        enableFilter: true,
        enableColResize: true,
        columnDefs:
        [
            { field: 'Name', headerName: 'Dataset Name', cellRenderer: linkTemplate, width: 200 },
            { field: 'Description', headerName: 'Description', width: 400 },
        ]
    };

    var data_ds_watcher = scope.$parent.$watch('datasets', function () {

        if (typeof scope.datasets === 'undefined' || scope.datasets.length === 0)
            return;

        //console.log(" ----------- we have datasets! loading grid for data! -------------");
        //console.dir(scope.datasets);

        data_ds_watcher(); //turn off watcher

        var ag_grid_div = document.querySelector('#data-tab-grid');    //get the container id...
        //console.dir(ag_grid_div);
        scope.datatab_ag_grid = new agGrid.Grid(ag_grid_div, scope.dataGridOptions); //bind the grid to it.
        scope.dataGridOptions.api.showLoadingOverlay(); //show loading...

        scope.dataGridOptions.api.setRowData(scope.$parent.datasets);
        scope.dataGridOptions.api.sizeColumnsToFit(); //

    }, true);

}];
define("core/projects/components/project-detail/project-detail-tab-data", function(){});

//This controller handles the Documents tab on the Project Details page. 

var tab_docs = ['$scope', '$document', '$timeout', function (scope, $document, $timeout) {


    var UploadedByTemplate = function (param) {
        return moment(param.node.data.UploadDate).format('L') + " by " + param.node.data.User.Fullname;
    };

    var EditLinksTemplate = function (param) {

        var div = document.createElement('div');

        var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
        editBtn.addEventListener('click', function (event) {
            event.preventDefault();
            scope.openEditFileModal(param.data, scope.afterEditDocsFile);
        });
        div.appendChild(editBtn);
        div.appendChild(document.createTextNode("|"));

        var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
        delBtn.addEventListener('click', function (event) {
            event.preventDefault();
            scope.openDeleteFileModal(param.data, scope.afterDeleteDocsFile);
        });
        div.appendChild(delBtn);

        return div;
    };
    
    var LinkTemplate = function (param) {

        var div = document.createElement('div');

        var linkBtn = document.createElement('a');
        linkBtn.href = param.data.Link;
        linkBtn.innerHTML = param.data.Title;
        linkBtn.target = "_blank";
        div.appendChild(linkBtn);
        return div;
    };

    ///////////////documents grid
    scope.docsGridOptions = {
        enableSorting: true,
        enableFilter: true,
        enableColResize: true,
        rowSelection: 'single',
        onSelectionChanged: function (params) {
            console.log("selection changed!");
            scope.docsGridOptions.selectedItems = scope.docsGridOptions.api.getSelectedRows();
            //scope.$apply(); //trigger angular to update our view since it doesn't monitor ag-grid
         },
        onFilterModified: function () {
            scope.docsGridOptions.api.deselectAll();
        },
        selectedItems: [],
        columnDefs:
        [
            { cellRenderer: EditLinksTemplate, width: 80, menuTabs: [] },
            //{ field: 'Name', headerName: 'File', width: 250, sort: 'asc', cellRenderer: LinkTemplate },
            { field: 'Title', headerName: 'Title', sort: 'asc', cellRenderer: LinkTemplate, width: 250, menuTabs: ['filterMenuTab'], filter: 'text' },
            { field: 'Description', headerName: 'Description', menuTabs: ['filterMenuTab'], filter: 'text' },
            { field: 'Uploaded', headerName: "Uploaded", width: 200, cellRenderer: UploadedByTemplate, menuTabs: [] },
        ]
    };


    $document.ready(function () {

        //after the project files are loaded by our parent, they are split into two arrays. project.Docs is ours.
        var docs_ds_watcher = scope.$parent.$watch('project.Docs', function () {

            if (typeof scope.project.Docs === 'undefined' || scope.project.Docs.length === 0)
                return;

            docs_ds_watcher(); //turn off watcher

            ///////// Load the docs grid
            $timeout(function () {

                var ag_grid_div = document.querySelector('#docs-tab-grid');    //get the container id...

                scope.docstab_ag_grid = new agGrid.Grid(ag_grid_div, scope.docsGridOptions); //bind the grid to it.
                scope.docsGridOptions.api.showLoadingOverlay(); //show loading...
                scope.docsGridOptions.api.setRowData(scope.project.Docs);
                scope.docsGridOptions.api.sizeColumnsToFit();
            }, 0);

        }, true);

    });
    
    ///////// file handling for Documents tab

    //open the new file modal
    scope.newFile = function () {
        scope.openNewFileModal(scope.afterNewDocsFile);
    };

    //after create a new file
    scope.afterNewDocsFile = function (new_item) {
        //console.log("After saved a doc");
        //console.dir(new_item[0]);
        scope.project.Docs.push(new_item[0]);
        scope.project.Files.push(new_item[0]);
        scope.docsGridOptions.api.setRowData(scope.project.Docs);
        console.log("done reloading grid after editing docs item.");
    };


    //remove an item from our project docs list and then reload the grid.
    scope.afterDeleteDocsFile = function (removed_item) {        
        scope.project.Docs.forEach(function (item, index) {
            console.log("item id is " + item.Id + " looking for " + removed_item.File.Id);
            if (item.Id === removed_item.File.Id) {
                console.log("FOund an ID that matches for delete");
                scope.project.Docs.splice(index, 1);
            }
        });

        scope.removeFromFiles(removed_item);

        scope.docsGridOptions.api.setRowData(scope.project.Docs);
        console.log("done reloading grid after removing doc item.");
    };

    //edit our project docs list and then reload the grid.
    scope.afterEditDocsFile = function (edited_item) {
        scope.project.Docs.forEach(function (item, index) {
            if (item.Id === edited_item.Id) {
                angular.extend(hab_item, edited_item); //replace the data for that item
            }
        });

        scope.docsGridOptions.api.setRowData(scope.project.Docs);
        console.log("done reloading grid after editing doc item.");
    };

}];







define("core/projects/components/project-detail/project-detail-tab-documents", function(){});

//This controller handles the Gallery tab on the Project Details page. 

var tab_gallery = ['$scope','$document', '$timeout', function (scope, $document, $timeout) {

    var UploadedByTemplate = function (param) {
        console.dir(param);
        console.log("uploaded by template!");
        return moment(param.node.data.UploadDate).format('L') + " by " + param.node.data.User.Fullname;
    };

    var EditLinksTemplate = function (param) {

        var div = document.createElement('div');

        var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
        editBtn.addEventListener('click', function (event) {
            event.preventDefault();
            scope.openEditFileModal(param.data, scope.afterEditGalleryFile);
        });
        div.appendChild(editBtn);
        div.appendChild(document.createTextNode("|"));

        var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
        delBtn.addEventListener('click', function (event) {
            event.preventDefault();
            scope.openDeleteFileModal(param.data, scope.afterDeleteGalleryFile);
        });
        div.appendChild(delBtn);

        return div;
    };


    var ImageTemplate = function (param) {

        var div = document.createElement('div');

        var linkBtn = document.createElement('a');
        linkBtn.href = param.data.Link;
        linkBtn.target = "_blank";

        var img = document.createElement('img');
        img.src = param.data.Link;
        img.width = 150;

        linkBtn.appendChild(img);
        div.appendChild(linkBtn);

        return div;
    };

    //scope.fileSelection = [];
    //scope.FileFilterOptions = {};
    //scope.GalleryFilterOptions = {};

    /////////// gallery grid
    scope.galleryGridOptions = {
        enableSorting: true,
        enableFilter: true,
        enableColResize: true,
        rowSelection: 'single',
        onSelectionChanged: function (params) {
            console.log("selection changed!");
            //scope.galleryGridOptions.selectedItems = scope.galleryGridOptions.api.getSelectedRows();
            //console.dir(scope.galleryGridOptions.selectedItems);
            //scope.$apply(); //trigger angular to update our view since it doesn't monitor ag-grid
        },
        getRowHeight: function () { return 120; },
        onFilterModified: function () {
            scope.galleryGridOptions.api.deselectAll();
        },
        //selectedItems: [],
        columnDefs:
        [
            { cellRenderer: EditLinksTemplate, width: 120, menuTabs: [] },
            { headerName: 'File', cellRenderer: ImageTemplate, width: 190, menuTabs: [] },
            { field: 'Title', headerName: 'Title', width: 250, sort: 'asc', menuTabs: ['filterMenuTab'], filter: 'text' },
            { field: 'Description', headerName: 'Description', cellStyle: { 'white-space': 'normal' }, width: 300, menuTabs: ['filterMenuTab'], filter: 'text' },
            { field: 'Uploaded', headerName: "Uploaded", width: 200, cellRenderer: UploadedByTemplate },
        ]
    };

    $document.ready(function () {
        //after the project files are loaded by our parent, they are split into two arrays. project.Images is ours.
        var gallery_ds_watcher = scope.$parent.$watch('project', function () {

            if (typeof scope.project === 'undefined' || typeof scope.project.Images === 'undefined')
                return;

            gallery_ds_watcher(); //turn off watcher

            //////// Load the gallery grid
            var ag_grid_div = document.querySelector('#gallery-tab-grid');    //get the container id...
            console.dir(ag_grid_div);


            $timeout(function () {
                ag_grid_div = angular.element(document.getElementById('gallery-tab-grid'));
                console.dir(ag_grid_div);
                ag_grid_div = ag_grid_div.context;
                scope.gallerytab_ag_grid = new agGrid.Grid(ag_grid_div, scope.galleryGridOptions); //bind the grid to it.
                scope.galleryGridOptions.api.showLoadingOverlay(); //show loading...
                scope.galleryGridOptions.api.setRowData(scope.project.Images);
                scope.galleryGridOptions.api.sizeColumnsToFit();
            },0);
            

        }, true);

    });

    ///////// file handling for Gallery tab

    //open the new file modal
    scope.newGalleryFile = function () {
        scope.openNewFileModal(scope.afterNewGalleryFile);
    };

    //after create a new file
    scope.afterNewGalleryFile = function (new_item) {
        scope.project.Images.push(new_item[0]);
        scope.project.Files.push(new_item[0]);
        scope.galleryGridOptions.api.setRowData(scope.project.Images);
        console.log("done reloading grid after editing gallery item.");
    };

    //edit our project images list and then reload the grid.
    scope.afterEditGalleryFile = function (edited_item) {
        scope.project.Images.forEach(function (item, index) {
            if (item.Id === edited_item.Id) {
                angular.extend(hab_item, edited_item); //replace the data for that item
            }
        });

        scope.galleryGridOptions.api.setRowData(scope.project.Images);
        console.log("done reloading grid after editing gallery item.");
    };

    //remove an image from our project docs list and then reload the grid.
    scope.afterDeleteGalleryFile = function (removed_item) {
        scope.project.Images.forEach(function (item, index) {
            if (item.Id === removed_item.File.Id) {
                scope.project.Images.splice(index, 1);
            }
        });

        scope.removeFromFiles(removed_item);

        scope.galleryGridOptions.api.setRowData(scope.project.Images);
        console.log("done reloading grid after removing image item.");
    };
}];







define("core/projects/components/project-detail/project-detail-tab-gallery", function(){});

//controller for the main project list page.



var project_list = ['$scope', 'DatasetService', 'ProjectService','CommonService','$modal',
    function (scope, DatasetService, ProjectService, CommonService, $modal){
    scope.projects = ProjectService.getProjects();

    scope.CellOptions = {}; //for metadata dropdown options
    scope.metadataList = {};
    scope.metadataPropertiesPromise = CommonService.getMetadataProperties(METADATA_ENTITY_PROJECTTYPEID);
    scope.habitatPropertiesPromise = CommonService.getMetadataProperties(METADATA_ENTITY_HABITATTYPEID);

    scope.metadataPropertiesPromise.promise.then(function(list){
        addMetadataProperties(list, scope.metadataList, scope, CommonService);
    });

    scope.habitatPropertiesPromise.promise.then(function(list){
        addMetadataProperties(list, scope.metadataList, scope, CommonService);
    });

      
        scope.locationObjectArray = [];
        scope.locationObjectIdArray = [];
        scope.locationObjectIds = "";

        scope.reloadProject = function()
        {
            scope.projects = ProjectService.getProjects();
        };
		
		//scope.reloadSubprojects = function()
		//{
		//	scope.subprojects = SubprojectService.getSubprojects();
		//};

        scope.openAddProject = function(){
            var modalInstance = $modal.open({
              templateUrl: 'app/core/projects/components/project-detail/templates/modal-edit-project.html',
              controller: 'ModalProjectEditorCtrl',
              scope: scope, //very important to pass the scope along...

            });
        };


        scope.click = function(e){
			console.log("Inside controllers.js, scope.click...");
			// If the user has already clicked on another point, the projects list has been filtered.
			// We need to set the projects list back to the full list.
			scope.projects = scope.allProjects;
			try{

				if(!scope.map.graphics.infoTemplate)
				{
					scope.map.graphics.infoTemplate = scope.template;
					console.log("graphics layer infotemplate defined.");
				}

				scope.map.infoWindow.resize(250, 300);

				//show the infowindow
				if(e.graphic)
				{
					// These run in the watch 'infoContent'
					//scope.map.infoWindow.setContent(scope.getInfoContent(e.graphic));
					//scope.map.infoWindow.show(e.mapPoint);
					
					console.log("e.graphic is next...");
					console.dir(e.graphic);
					scope.getInfoContent(e.graphic); // We need to wait for this to complete...
					scope.mapEvent = 'undefined';
					scope.mapEvent = e;	
				}

			}catch(e)
			{
				console.dir(e);
			}
        };
		
		scope.$watch('infoContent', function()
		{
			console.log("Inside controllers.js, watch infoContent...");
			var matchingProjects = [];
			var html = "";
			
			if (!scope.infoContent)
				return;
			else if(scope.infoContent.length === 0)
				return;
			
			console.log("Inside controllers.js, watch infoContent...");
			console.log("scope.infoContent is next...");
			console.dir(scope.infoContent);
			console.log("scope.mapEvent.mapPoint is next...");
			console.dir(scope.mapEvent.mapPoint);
			
			scope.map.infoWindow.setContent(scope.infoContent);
			scope.map.infoWindow.show(scope.mapEvent.mapPoint);
		});

        scope.getInfoContent = function(graphic)
        {
			console.log("Inside controllers.js, getInfoContent...");
			console.log("graphic is next...");
			console.dir(graphic);
			var matchingProjects = [];
			var html = "";

			//console.log("scope is next...");
			//console.dir(scope);
			console.log("scope.projects is next...");
			console.dir(scope.projects);

			// Filter the projects, based upon the location that the user clicked.
			var filterProjects = [];
			
			//spin through projects and find the ones with this objectid (at this location)
			angular.forEach(scope.projects, function(project){
				var proj_loc = getByField(project.Locations,PRIMARY_PROJECT_LOCATION_TYPEID,"LocationTypeId");
				//console.log("proj_loc is next...");
				//console.dir(proj_loc);
				
				if(proj_loc && proj_loc.SdeObjectId === graphic.attributes.OBJECTID){
					matchingProjects.push(project);
					
					filterProjects.push(project);
				}
			});
			scope.projects = angular.copy(filterProjects);
			scope.selectedLocation = graphic.attributes.OBJECTID;
			
			console.log("matchingProjects is next...");
			console.dir(matchingProjects);

			if(matchingProjects.length === 1)
			{
				scope.map.infoWindow.setTitle("Project at location");
				html += matchingProjects[0].Name;
				html += "<br/><div class='right'><a href='#/projects/"+matchingProjects[0].Id+"'>View</a></div>"
			}
			else if (matchingProjects.length > 1)
			{
				scope.map.infoWindow.setTitle("Projects at location");
				html += "<ul>";
				angular.forEach(matchingProjects, function(p){
					html += "<li><a href='#/projects/"+p.Id+"'>"+ p.Name + "</a></li>";
				});
				html += "</ul>";
			}
			else
			{
				scope.map.infoWindow.setTitle("No project found");
				html += "Not found: " + graphic.attributes.OBJECTID;
			}
			console.log("html = " + html);
			scope.infoContent = html;
			//return html;
        };

		// Note:  This watch is for the main Projects page.
        scope.$watch('projects',function(){
            if(scope.projects)
            {
				//console.log("Inside controllers.js, watch projects...");
				////console.log("scope is next...");
				////console.dir(scope);
				
				//console.log("scope.projects is next...");
				//console.dir(scope.projects);
				
				if (!scope.allProjects)
					scope.allProjects = scope.projects;

                //spin through and add a "Program" field to our project that we can display easily in the grid.
                //angular.forEach(scope.projects, function(project, key){
                angular.forEach(scope.allProjects, function(project, key){	
                    var program = getByField(project.Metadata,'23','MetadataPropertyId');
                    var subprogram = getByField(project.Metadata,'24','MetadataPropertyId');

                    if(program) project.Program = program.Values;

                    if(subprogram && subprogram.Values != "(None)")
                      project.Program += " > " + subprogram.Values;

                    var primary_location = getByField(project.Locations,3,"LocationTypeId");
                    if(primary_location)
                      scope.locationObjectArray.push(primary_location);
                });

                angular.forEach(scope.locationObjectArray, function(item, key){
                    scope.locationObjectIdArray.push(item.SdeObjectId);
                });
				//console.log("scope.locationObjectIdArray is next...");
				//console.dir(scope.locationObjectIdArray);

                scope.locationObjectIds = scope.locationObjectIdArray.join();
				console.log("typeof scope.locationObjectId = " + typeof scope.locationObjectId);
                console.log("In controllers, projects watcher, found project locations: " + scope.locationObjectIds);

				//console.log("scope.map is next...");
				//console.dir(scope.map);
				//console.log("scope.map.locationLayer is next...");
				//console.dir(scope.map.locationLayer);

				if(scope.map && scope.map.locationLayer && scope.map.locationLayer.hasOwnProperty('showLocationsById'))
                    scope.map.locationLayer.showLocationsById(scope.locationObjectIds); //bump and reload the locations.

                if (scope.agGridOptions === undefined) {
                    console.log(" ----------- ok we are defining our grid...");

                    //define the cell renderer (template) for our "Project Name" column.
                    var agCellRendererProjectName = function (params) {
                        //console.dir(params.node.data);
                        return '<div>' +
                            '<a title="' + params.node.data.Description
                            + '" href="#/projects/' + params.node.data.Id + '">'
                            + params.node.data.Name + '</a>' +
                            '</div>';
                    };

                    var agColumnDefs = [
                        { field: 'Program', headerName: 'Program', suppressSizeToFit: true, minWidth: 240, width: 250, sort: 'asc' },
                        { field: 'ProjectType.Name', headerName: 'Type', width: 100, maxWidth: 150, minWidth: 80 },
                        { field: 'Name', headerName: 'Project Name', cellRenderer: agCellRendererProjectName, minWidth: 500 },
                    ];

                    scope.agGridOptions = {
                        animateRows: true,
                        enableSorting: true,
                        enableFilter: true,
                        enableColResize: true,
                        showToolPanel: false,
                        columnDefs: agColumnDefs,
                        rowData: scope.projects,
                        debug: true,
                        onGridReady: function (params) {
                            params.api.sizeColumnsToFit();
                        }
                    };

                    console.log("number of projects: " + scope.projects.length);

                    console.log("starting ag-grid");
                    var ag_grid_div = document.querySelector('#project-list-grid');    //get the container id...
                    scope.ag_grid = new agGrid.Grid(ag_grid_div, scope.agGridOptions); //bind the grid to it.

                    scope.agGridOptions.api.showLoadingOverlay(); //show loading...


                } else { 
                    //we didn't need to redefine but do need to redraw
                    console.log("----- ok we have projects and are defined -- setting new rowdata  ----");

                    console.log("setting number of projects: " + scope.projects.length);
                    scope.agGridOptions.api.setRowData(scope.projects);
                    //scope.agGridOptions.api.autoSizeColumns()
                    
                    console.log('done');
                    
                }
                
            }
        },true);
  }
];



define("core/projects/components/project-list/project-list", function(){});

//project factories and service

//includes fishermen and instrument services, too, since they are part of projects.


projects_module.factory('ProjectFunders', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/getprojectfunders', {}, {
        query: { method: 'GET', params: { id: 'projectId' }, isArray: true }
    });
}]);

projects_module.factory('ProjectCollaborators', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/getprojectcollaborators', {}, {
        query: { method: 'GET', params: { id: 'projectId' }, isArray: true }
    });
}]);

projects_module.factory('ProjectFiles', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/file/getprojectfiles', {}, {
        query: { method: 'GET', params: { id: 'projectId' }, isArray: true }
    });
}]);

projects_module.factory('Projects', ['$resource', function (resource) {
    return resource(serviceUrl + '/api/v1/project/getprojects', {}, {
        query: { method: 'GET', params: {}, isArray: true }
    });
}]);

projects_module.factory('Project', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/project/getproject', {}, {
        query: { method: 'GET', params: { id: 'id' }, isArray: false }
    });
}]);

projects_module.factory('ProjectDatasets', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/project/getprojectdatasets', {}, {
        query: { method: 'GET', params: { id: 'projectId' }, isArray: true }
    });
}]);

projects_module.factory('SetProjectEditors', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/project/setprojecteditors');
}]);

projects_module.factory('SaveProject', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/project/saveproject');
}]);

projects_module.factory('GetAllInstruments', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/instrument/getinstruments');
}]);

projects_module.factory('SaveProjectInstrument', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/instrument/saveprojectinstrument');
}]);

projects_module.factory('SaveProjectFisherman', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/fishermen/saveprojectfisherman');
}]);

projects_module.factory('SaveInstrument', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/instrument/saveinstrument');
}]);

projects_module.factory('SaveInstrumentAccuracyCheck', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/instrument/saveinstrumentaccuracycheck');
}]);

projects_module.factory('RemoveInstrumentAccuracyCheck', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/instrument/removeinstrumentaccuracycheck');
}]);

projects_module.factory('SaveFisherman', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/fishermen/savefisherman');
}]);

projects_module.factory('UpdateFile', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/file/updatefile');
}]);

projects_module.factory('DeleteFile', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/file/deletefile');
}]);

projects_module.factory('GetDatastoreProjects', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/getdatastoreprojects');
}]);

projects_module.factory('GetInstruments', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/instrument/getinstruments');
}]);

projects_module.factory('GetInstrumentTypes', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/instrument/getinstrumenttypes');
}]);

projects_module.factory('RemoveProjectInstrument', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/instrument/removeprojectinstrument');
}]);

projects_module.factory('GetFishermen', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/fishermen/getfishermen');
}]);

projects_module.factory('GetProjectFishermen', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/fishermen/getprojectfishermen');
}]);

projects_module.factory('RemoveProjectFisherman', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/fishermen/removeprojectfisherman');
}]);


/*
* define the service that can be used by any module in our application to work with projects.
*/
projects_module.service('ProjectService', ['$q', 
    'ProjectFunders',
    'ProjectCollaborators',
    'Projects',
    'Project',
    'ProjectFiles',
    'ProjectDatasets',
    'SetProjectEditors',
    'SaveProject',
    'GetAllInstruments',
    'SaveProjectInstrument',
    'SaveProjectFisherman',
    'SaveInstrument',
    'SaveInstrumentAccuracyCheck',
    'SaveFisherman',
    'UpdateFile',
    'DeleteFile',
    'GetDatastoreProjects',
    'GetInstruments',
    'GetInstrumentTypes',
    'RemoveProjectInstrument',
    'GetFishermen',
    'GetProjectFishermen',
    'RemoveProjectFisherman',
    'RemoveInstrumentAccuracyCheck',
    function ($q,
        ProjectFunders,
        ProjectCollaborators,
        Projects,
        Project,
        ProjectFiles,
        ProjectDatasets,
        SetProjectEditors,
        SaveProject,
        GetAllInstruments,
        SaveProjectInstrument,
        SaveProjectFisherman,
        SaveInstrument,
        SaveInstrumentAccuracyCheck,
        SaveFisherman,
        UpdateFile,
        DeleteFile,
        GetDatastoreProjects,
        GetInstruments,
        GetInstrumentTypes,
        RemoveProjectInstrument,
        GetFishermen,
        GetProjectFishermen,
        RemoveProjectFisherman,
        RemoveInstrumentAccuracyCheck) {

        var service = {
            project: null,

            clearProject: function () {
                service.project = null;
            },

            //NB: Not used anywhere
            getDatastoreProjects: function (id) {
                return GetDatastoreProjects.query({ id: id });
            },

            getProjects: function () {
                return Projects.query();
            },

            getProjectDatasets: function (projectId) {
                this.getProject(projectId); //set our local project to the one selected
                return ProjectDatasets.query({ id: projectId });
            },

            getProjectFunders: function (projectId) {
                console.log("Inside getProjectFunders, projectId = " + projectId);
                this.getProject(projectId); //set our local project to the one selected
                return ProjectFunders.query({ id: projectId });
            },

            getProjectCollaborators: function (projectId) {
                console.log("Inside getProjectCollaborators...");
                this.getProject(projectId); //set our local project to the one selected
                return ProjectCollaborators.query({ id: projectId });
            },

            saveProject: function (project) {
                return SaveProject.save({ Project: project });
            },

            getProjectFiles: function (projectId) {
                console.log("Inside getProjectFiles...");
                console.log("projectId = " + projectId);
                return ProjectFiles.query({ id: projectId });
            },

            getInstruments: function () {
                return GetInstruments.query();
            },

            getInstrumentTypes: function () {
                return GetInstrumentTypes.query();
            },

            getFishermen: function () {
                return GetFishermen.query();
            },

            getProject: function (id) {
                console.log("Inside getProject; id = " + id);
                //console.log("service is next...");
                //console.dir(service);
                //if(service.project && service.project.Id == id)
                if (service.project && service.project.Id == id && service.subprojectType !== "Habitat") // Not Habitat
                {
                    console.log("service.project.Id = " + service.project.Id);
                    return service.project;
                }

                service.project = Project.query({ id: id });

                /*service.project.$promise.then(function () {
                    console.log("after-project-load!");
                    //do some sorting after we load for instruments
                    if (service.project.Instruments && service.project.Instruments.length > 0)
                        service.project.Instruments = service.project.Instruments.sort(orderByAlphaName);

                    //and also for locations
                    //service.project.Locations = service.project.Locations.sort(orderByAlpha);
                });
                */

                return service.project;
            },

            // We don't really like to set things this way...  Is there a better way?
            // TODO: look at the Project's "program" metadata (propertyid = 23)
            //       and the "subprogram" metadata (propertyid = 24)
            getProjectType: function (aProjectId) {
                var theType = null;

                if (aProjectId === 2247) 			// CRPP
                {
                    theType = "CRPP";
                }
                else if ((aProjectId === 1202) || // Walla Walla
                    (aProjectId === 1223) || 		// First HabSubproject, Umatilla
                    (aProjectId === 2223) || 		// NF John Day
                    (aProjectId === 2226) ||		// Rainwater
                    (aProjectId === 2228) ||		// Grande Ronde
                    (aProjectId === 2229) ||		// Tucannon
                    (aProjectId === 10029) ||		// Touchet
                    (aProjectId === 2249)			// Biomonitoring of Fish Enhancement
                ) {
                    theType = "Habitat";
                }
                else if (aProjectId === 1217)
                    theType = "Harvest";
                else if (aProjectId === 2246)
                    theType = "DECD";

                return theType;
            },

            saveEditors: function (userId, projectId, editors, saveResults) {
                saveResults.saving = true;
                var payload = {
                    ProjectId: projectId,
                    Editors: editors,
                };

                SetProjectEditors.save(payload, function (data) {
                    saveResults.saving = false;
                    saveResults.success = true;
                }, function (data) {
                    saveResults.saving = false;
                    saveResults.failure = true;
                });

            },

            getAllInstruments: function () {
                return GetAllInstruments.query();
            },

            saveInstrument: function (projectId, instrument) {
                return SaveInstrument.save({ ProjectId: projectId, Instrument: instrument }); //will connect to this project if creating instrument
            },

            saveFisherman: function (projectId, fisherman, saveResults) {
                console.log("Inside saveFisherman...");
                saveResults.saving = true;
                console.log("saveResults.saving = " + saveResults.saving);

                return SaveFisherman.save({ ProjectId: projectId, Fisherman: fisherman });
            },

            saveProjectInstrument: function (projectId, instrument) {
                return SaveProjectInstrument.save({ ProjectId: projectId, Instrument: instrument });
            },

            saveProjectFisherman: function (projectId, fisherman) {
                return SaveProjectFisherman.save({ ProjectId: projectId, Fisherman: fisherman });
            },

            removeProjectFisherman: function (projectId, fishermanId) {
                return RemoveProjectFisherman.save({ ProjectId: projectId, FishermanId: fishermanId });
            },

            removeProjectInstrument: function (projectId, instrumentId) {
                return RemoveProjectInstrument.save({ ProjectId: projectId, InstrumentId: instrumentId });
            },

            getProjectFishermen: function (projectId) {
                console.log("Inside getProjectFishermen, projectId = " + projectId);
                return GetProjectFishermen.query({ id: projectId });
            },

            saveInstrumentAccuracyCheck: function (instrumentId, ac) {
                return SaveInstrumentAccuracyCheck.save({ InstrumentId: instrumentId, AccuracyCheck: ac });
            },

            removeInstrumentAccuracyCheck: function (instrumentId, ac) {
                return RemoveInstrumentAccuracyCheck.save({ InstrumentId: instrumentId, AccuracyCheck: ac });
            },

            updateFile: function (projectId, file) {
                return UpdateFile.save({ ProjectId: projectId, File: file });
            },

            deleteFile: function (projectId, file) {
                console.log("ProjectId = " + projectId + ", attempting to delete file...");
                console.dir(file);
                return DeleteFile.save({ ProjectId: projectId, File: file });
            },

        };

        return service;
    }
]);
define("core/projects/services/project-service", function(){});

//subproject (crpp + habitat) factories and service

//NB: this is not the final form - we want to create an actual
//    subproject feature in the system and refactor this

projects_module.factory('MigrationYears', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/list/getmigrationyears', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

projects_module.factory('RunYears', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/list/getrunyears', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

projects_module.factory('ReportYears', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/list/getreportyears', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

projects_module.factory('SpawningYears', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/getspawningyears', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

projects_module.factory('BroodYears', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/list/getbroodyears', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

projects_module.factory('OutmigrationYears', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/getoutmigrationyears', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

projects_module.factory('ProjectSubprojects', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/gethabsubprojects', {}, {
        save: { method: 'POST', isArray: true }
    });
}]);

projects_module.factory('SubprojectFiles', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/crppsubproject/getcrppsubprojectfiles', {}, {
        query: { method: 'GET', params: { id: 'projectId' }, isArray: true }
    });
}]);

projects_module.factory('SaveCorrespondenceEvent', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/crppsubproject/savecorrespondenceevent');
}]);

projects_module.factory('SaveHabitatItem', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/savehabitatitem');
}]);

projects_module.factory('DeleteCorresEventFile', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/crppsubproject/deletecorreseventfile');
}]);

projects_module.factory('DeleteHabitatItemFile', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/deletehabitatitemfile');
}]);

projects_module.factory('DeleteHabSubprojectFile', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/deletehabsubprojectfile');
}]);

projects_module.factory('SaveSubproject', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/crppsubproject/savecrppsubproject');
}]);

projects_module.factory('SaveHabSubproject', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/savehabsubproject');
}]);

projects_module.factory('GetSubprojects', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/crppsubproject/getcrppsubprojects');
}]);

//NB: does this need an ID parameter? -- actually it isn't used anywhere...
projects_module.factory('GetHabSubproject', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/gethabsubproject');
}]);

projects_module.factory('GetHabSubprojects', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/gethabsubprojects');
}]);

projects_module.factory('RemoveSubproject', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/crppsubproject/removecrppsubproject', {}, {
        save: { method: 'POST', isArray: false }
    });
}]);

projects_module.factory('RemoveHabSubproject', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/removehabsubproject');
}]);

projects_module.factory('RemoveCorrespondenceEvent', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/crppsubproject/removecorrespondenceevent');
}]);

projects_module.factory('RemoveHabitatItem', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/habsubproject/removehabitatitem');
}]);

/*
* subprojects service (includes Project factory which is defined in projects-service.js)
*/
projects_module.service('SubprojectService', ['$q', 
    'MigrationYears',
    'RunYears',
    'ReportYears',
    'SpawningYears',
    'BroodYears',
    'OutmigrationYears',
    'ProjectSubprojects',
    'SubprojectFiles',
    'SaveCorrespondenceEvent',
    'SaveHabitatItem',
    'DeleteCorresEventFile',
    'DeleteHabitatItemFile',
    'DeleteHabSubprojectFile',
    'SaveSubproject',
    'SaveHabSubproject',
    'GetSubprojects',
    'GetHabSubproject',
    'GetHabSubprojects',
    'RemoveSubproject',
    'RemoveHabSubproject',
    'RemoveCorrespondenceEvent',
    'RemoveHabitatItem',

    function ($q,
        MigrationYears,
        RunYears,
        ReportYears,
        SpawningYears,
        BroodYears,
        OutmigrationYears,
        ProjectSubprojects,
        SubprojectFiles,
        SaveCorrespondenceEvent,
        SaveHabitatItem,
        DeleteCorresEventFile,
        DeleteHabitatItemFile,
        DeleteHabSubprojectFile,
        SaveSubproject,
        SaveHabSubproject,
        GetSubprojects,
        GetHabSubproject,
        GetHabSubprojects,
        RemoveSubproject,
        RemoveHabSubproject,
        RemoveCorrespondenceEvent,
        RemoveHabitatItem) {

        var service = {

            //we'd like to move this subproject stuff all out soon
            subproject: null,
            subprojects: null,
            subprojectType: null,

            clearSubproject: function () {
                service.subproject = null;
            },

            clearSubprojects: function () {
                service.subprojects = null;
            },

            getSubproject: function (id) {
                console.log("Inside services.js, getSubproject...");
                if (service.subproject && service.subproject.Id == id)
                    return service.subproject;
            },

            setServiceSubprojectType: function (spType) {
                console.log("Inside setServiceSubprojectType, spType = " + spType);
                service.subprojectType = spType;
                console.log("service.subprojectType = " + service.subprojectType);
            },

            getSubprojects: function () {
                return GetSubprojects.query();
            },
            getHabSubproject: function (id) {
                console.log("Inside getHabSubproject...");
                return GetHabSubproject.query({ id: id });
            },
            getHabSubprojects: function ()
            //getHabSubprojects: function(id)
            {
                console.log("Inside services, getHabSubprojects");
                //console.log("id = " + id);
                return GetHabSubprojects.query();
                //return GetHabSubprojects.query({id: id});
            },

            saveSubproject: function (projectId, subproject, saveResults) {
                console.log("Inside saveSubproject...");
                saveResults.saving = true;
                console.log("saveResults.saving = " + saveResults.saving);

                return SaveSubproject.save({ ProjectId: projectId, Subproject: subproject });
            },
            saveHabSubproject: function (projectId, subproject, saveResults) {
                console.log("Inside services.js, saveHabSubproject...");
                saveResults.saving = true;
                console.log("saveResults.saving = " + saveResults.saving);

                return SaveHabSubproject.save({ ProjectId: projectId, Subproject: subproject });
            },
            removeSubproject: function (projectId, subprojectId) {
                return RemoveSubproject.save({ ProjectId: projectId, SubprojectId: subprojectId });
            },
            //removeHabSubproject: function(projectId, subprojectId){
            removeHabSubproject: function (projectId, subprojectId, locationId) {
                //return RemoveHabSubproject.save({ProjectId: projectId, SubprojectId: subprojectId});
                return RemoveHabSubproject.save({ ProjectId: projectId, SubprojectId: subprojectId, LocationId: locationId });
            },
            //removeCorrespondenceEvent: function(projectId, subprojectId, correspondenceEventId){
            removeCorrespondenceEvent: function (projectId, subprojectId, correspondenceEventId, datastoreTablePrefix) {
                console.log("Inside removeCorrespondenceEvent...");
                console.log("projectId = " + projectId + ", subprojectId = " + subprojectId + ", correspondenceEventId = " + correspondenceEventId + ", datastoreTablePrefix = " + datastoreTablePrefix);
                //return RemoveCorrespondenceEvent.save({ProjectId: projectId, SubprojectId: subprojectId, CorrespondenceEventId: correspondenceEventId});
                return RemoveCorrespondenceEvent.save({ ProjectId: projectId, SubprojectId: subprojectId, CorrespondenceEventId: correspondenceEventId, DatastoreTablePrefix: datastoreTablePrefix });
            },
            removeHabitatItem: function (projectId, subprojectId, habitatItemId, datastoreTablePrefix) {
                console.log("Inside removeHabitatItem...");
                console.log("projectId = " + projectId + ", subprojectId = " + subprojectId + ", habitatItemId = " + habitatItemId + ", datastoreTablePrefix = " + datastoreTablePrefix);
                return RemoveHabitatItem.save({ ProjectId: projectId, SubprojectId: subprojectId, HabitatItemId: habitatItemId, DatastoreTablePrefix: datastoreTablePrefix });
            },
            saveCorrespondenceEvent: function (projectId, subprojectId, ce) {
                console.log("Inside saveCorrespondenceEvent...")
                console.log("projectId = " + projectId);
                console.log("subprojectId = " + subprojectId);
                console.log("ce is next...");
                console.dir(ce);
                return SaveCorrespondenceEvent.save({ ProjectId: projectId, SubprojectId: subprojectId, CorrespondenceEvent: ce });
            },
            saveHabitatItem: function (projectId, subprojectId, hi) {
                console.log("Inside saveHabitatItem...")
                console.log("projectId = " + projectId);
                console.log("subprojectId = " + subprojectId);
                console.log("hi is next...");
                console.dir(hi);
                return SaveHabitatItem.save({ ProjectId: projectId, SubprojectId: subprojectId, HabitatItem: hi });
            },
            deleteCorresEventFile: function (projectId, subprojectId, ceId, file) {
                console.log("Inside deleteCorresEventFile");
                console.log("SubprojectId = " + subprojectId + ", ceId = " + ceId + " attempting to delete file...");
                console.dir(file);
                //return DeleteFile.save({ProjectId: projectId, File: file});
                return DeleteCorresEventFile.save({ ProjectId: projectId, SubprojectId: subprojectId, CeId: ceId, File: file });
            },
            deleteHabitatItemFile: function (projectId, subprojectId, hiId, file) {
                console.log("Inside deleteHabitatItemFile");
                console.log("ProjectId = " + projectId + ", SubprojectId = " + subprojectId + ", hiId = " + hiId + " attempting to delete file...");
                console.dir(file);
                //return DeleteFile.save({ProjectId: projectId, File: file});
                return DeleteHabitatItemFile.save({ ProjectId: projectId, SubprojectId: subprojectId, HiId: hiId, File: file });
            },
            deleteHabSubprojectFile: function (projectId, subprojectId, file) {
                console.log("Inside deleteHabSubprojectFile");
                console.log("SubprojectId = " + subprojectId + ", attempting to delete file...");
                console.dir(file);
                return DeleteHabSubprojectFile.save({ ProjectId: projectId, SubprojectId: subprojectId, File: file });
            },
            getMigrationYears: function (datasetId) {
                console.log("Inside services, getMigrationYears");
                return MigrationYears.query({ id: datasetId });
            },

            getRunYears: function (datasetId) {
                console.log("Inside services, getRunYears");
                return RunYears.query({ id: datasetId });
            },

            getReportYears: function (datasetId) {
                console.log("Inside services, getReportYears");
                return ReportYears.query({ id: datasetId });
            },

            getSpawningYears: function (datasetId) {
                console.log("Inside services, getSpawningYears");
                return SpawningYears.query({ id: datasetId });
            },

            getBroodYears: function (datasetId) {
                console.log("Inside services, getBroodYears");
                return BroodYears.query({ id: datasetId });
            },

            getOutmigrationYears: function (datasetId) {
                console.log("Inside services, getOutmigrationYears");
                return OutmigrationYears.query({ id: datasetId });
            },


            getSubprojectFiles: function (projectId) {
                console.log("Inside getSubprojectFiles...");
                console.log("projectId = " + projectId);
                return SubprojectFiles.query({ id: projectId });
            },


            //NB: why is this .save()? -- to get a POST instead of a GET?
            getProjectSubprojects: function (projectId) {
                console.log("Inside getProjectSubprojects, projectId = " + projectId);
                //this.getProject(projectId); //set our local project to the one selected
                return ProjectSubprojects.save({ ProjectId: projectId });
            },


        };

        return service;
    }
]);



define("core/projects/services/subproject-service", function(){});

// defines the project module and all project controllers.

//project module and its dependencies
var projects_module = angular.module('ProjectModule', ['ui.bootstrap', 'angularFileUpload', 'ui.select2', 'ngResource']);

//load the components for this module
require([
    'core/projects/components/project-detail/project-detail',
    'core/projects/components/project-detail/modal-new-file',
    'core/projects/components/project-detail/modal-edit-file',
    'core/projects/components/project-detail/modal-edit-project',
    'core/projects/components/project-detail/modal-delete-file',
    'core/projects/components/project-detail/modal-choose-summary-images',
    'core/projects/components/project-detail/modal-choose-map',
    'core/projects/components/project-detail/modal-add-accuracy-check',
    //tabs for the project detail page
    'core/projects/components/project-detail/project-detail-tab-instruments',
    'core/projects/components/project-detail/project-detail-tab-fishermen',
    'core/projects/components/project-detail/project-detail-tab-data',
    'core/projects/components/project-detail/project-detail-tab-documents',
    'core/projects/components/project-detail/project-detail-tab-gallery',

    'core/projects/components/project-list/project-list',

    //load project service
    'core/projects/services/project-service',
    'core/projects/services/subproject-service',

    

], function () {
    //add the controllers and services to the module once the files are loaded!
    
    projects_module.controller('project-detail-ctrl', project_detail);
    projects_module.controller('TabInstrumentsCtrl', tab_instruments);
    projects_module.controller('TabFishermenCtrl', tab_fishermen);
    projects_module.controller('TabGalleryCtrl', tab_gallery);

    projects_module.controller('TabDataCtrl', tab_data);
    projects_module.controller('TabDocumentsCtrl', tab_docs);
    
    projects_module.controller('ModalEditFileCtrl', modal_edit_file);
    projects_module.controller('ModalNewFileCtrl', modal_new_file);
    projects_module.controller('ModalProjectEditorCtrl', modal_edit_project);
    projects_module.controller('ModalDeleteFileCtrl', modal_delete_file);
    projects_module.controller('ModalChooseSummaryImagesCtrl', modal_choose_summary_images);
    projects_module.controller('ModalChooseMapCtrl', modal_choose_map);

    projects_module.controller('project-list-ctrl', project_list);
    projects_module.controller('ModalAddAccuracyCheckCtrl', module_add_accuracy_check);

    
});






define("core/projects/projects-module", function(){});

/*
*   These are functions used in services or controllers in the datasets module.
*/


// makes a field column definition
function makeField(colName, placeholder) {
    return '<input type="text" placeholder="' + placeholder + '" ng-blur="updateCell(row,\'' + colName + '\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />';
}


function makeFieldColDef(field, scope) {
    //console.log("Inside makeFieldColDef...");
    //console.log("field is next...");
    //console.dir(field);

    var coldef =
        {
            field: field.DbColumnName,
            displayName: field.Label,
            minWidth: 70,
            defaultValue: field.DefaultValue
        };

    //if (scope.dataset.Id === 1206) // Creel Survey
    if (scope.DatastoreTablePrefix == "CreelSurvey") {
        scope.disableFields = true;
    }
    else {
        scope.datasheetColDefs.cellEditableCondition = true;
    }

    //only setup edit templates for fields in grids with cell editing enabled.
    if (scope.gridDatasheetOptions.enableCellEdit) {
        //first of all!
        coldef.enableCellEdit = true;
        //if (scope.dataset.Id === 1206)
        if (scope.DatastoreTablePrefix == "CreelSurvey") {
            scope.datasheetColDefs.cellEditableCondition = false;
        }
        else {
            scope.datasheetColDefs.cellEditableCondition = true;
        }

        //setup column according to what type it is
        //  the "coldef" options available here are "ColumnDefs Options" http://angular-ui.github.io/ng-grid/

        switch (field.ControlType) {
            case 'select':
            case 'lookup':
                // Check for common misconfiguration error
                if (field.Field.PossibleValues == null)
                    console.log("Missing list of possible values from select/lookup field " + field.Field.Name);

                coldef.editableCellTemplate = '<select ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-blur="updateCell(row,\'' + field.DbColumnName + '\')" ng-options="id as name for (id, name) in CellOptions.' + field.DbColumnName + 'Options"><option value="" selected="selected"></option></select>';
                scope.CellOptions[field.DbColumnName + 'Options'] = makeObjectsFromValues(scope.dataset.DatastoreId + field.DbColumnName, field.Field.PossibleValues);
                //                console.log("and we used: " + scope.dataset.DatastoreId+field.DbColumnName + " as the key");
                break;
            case 'multiselect':
            case 'multilookup':
                //coldef.editableCellTemplate = '<select class="field-multiselect" multiple="true" ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in CellOptions.'+ field.DbColumnName +'Options"/>';
                //coldef.cellTemplate = '<div class="ngCellText cell-multiselect" ng-class="col.colIndex()"><span ng-cell-text>{{row.getProperty(col.field)}}</span></div>';
                coldef.editableCellTemplate = '<select class="field-multiselect" multiple="true" ng-blur="updateCell(row,\'' + field.DbColumnName + '\')" ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in CellOptions.' + field.DbColumnName + 'Options"/>';
                scope.CellOptions[field.DbColumnName + 'Options'] = makeObjectsFromValues(scope.dataset.DatastoreId + field.DbColumnName, field.Field.PossibleValues);
                //                console.log("and we used: " + scope.dataset.DatastoreId+field.DbColumnName + " as the key");
                break;

            case 'easting':
                coldef.editableCellTemplate = makeField(field.DbColumnName, 'ex. 541324');
                break;
            case 'northing':
                coldef.editableCellTemplate = makeField(field.DbColumnName, 'ex. 7896254');
                break;

            case 'date':
                //coldef.editableCellTemplate = '<input type="text" ng-blur="updateCell(row,\''+field.DbColumnName+'\')" ng-pattern="'+date_pattern+'" ng-model="COL_FIELD" ng-input="COL_FIELD" />';
                coldef.editableCellTemplate = makeField(field.DbColumnName, 'ex. 07/23/2014');
                break;
            case 'time':
                coldef.editableCellTemplate = makeField(field.DbColumnName, 'ex. 16:20');
                break;
            case 'datetime':
                coldef.editableCellTemplate = makeField(field.DbColumnName, 'ex. 07/23/2014 16:20');
                break;

            case 'textarea':
            case 'text':
                coldef.editableCellTemplate = '<input type="text" ng-blur="updateCell(row,\'' + field.DbColumnName + '\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />';
                break;
            case 'number':
                //var maxmin = field.Field.Validation ? 'max="'+field.Field.Validation[1]+'" min="'+field.Field.Validation[0]+'"' : ''; //either returns our min/max setup for a numeric field or empty string.
                coldef.editableCellTemplate = '<input type="text" ng-model="COL_FIELD" ng-blur="updateCell(row,\'' + field.DbColumnName + '\')" ng-input="COL_FIELD" />';
                //coldef.cellTemplate = '<div class="ngCellText colt{{$index}}">{{row.getProperty(col.field)}}</div>';
                break;
            case 'checkbox':
                coldef.showSelectionCheckbox = true;
                coldef.editableCellTemplate = '<input type="checkbox" ng-checked="row.entity.' + field.DbColumnName + '==true" ng-model="COL_FIELD" ng-input="COL_FIELD" />';
                coldef.cellTemplate = coldef.editableCellTemplate; //checkbox for display and edit.
                break;
            case 'file':
                coldef.cellTemplate = '<button class="right btn btn-xs" ng-click="addFiles(row, col.field)">Add</button> <span ng-cell-text ng-bind-html="row.getProperty(col.field) | fileNamesFromString"></span>';
                //<span ng-bind-html="fileNamesFromRow(row,\''+ field.DbColumnName + '\')"></span>';
                break;
            //case 'grid':
            //    coldef.cellTemplate = '<button class="rigt btn btn-xs" ng-click="viewRelation(row, col.field)">View</button> <span ng-cell-text ng-bind-html="row.getProperty(col.field)"></span>';
            //    break;
            default:
                console.log("Unknown control type: " + field.ControlType);
        }
    }

    //setup cellfilters
    switch (field.ControlType) {
        case 'multiselect':
        case 'multilookup':
            coldef.cellFilter = 'arrayValues';
            break;

        case 'date':
            coldef.cellFilter = 'date: \'MM/dd/yyyy\'';
            break;

        case 'currency':
            coldef.cellFilter = 'currency';
            break;

        case 'datetime':
            coldef.cellFilter = 'date: \'MM/dd/yyyy HH:mm:ss\'';
            break;

        case 'link':
        case 'file':
            //override the defaul width for files...
            coldef.minWidth = '200';
            coldef.maxWidth = '400';
            coldef.width = '200';
            if (!coldef.enableCellEdit)
                coldef.cellTemplate = '<div class="ngCellText" ng-class="col.colIndex()"><span ng-cell-text ng-bind-html="row.getProperty(col.field) | fileNamesFromString"></span></div>';//<span ng-bind-html="fileNamesFromRow(row,\''+ field.DbColumnName + '\')"></span>';
            break;
        case 'grid':
            coldef.minWidth = '150';
            coldef.maxWidth = '150';
            coldef.width = '150';
            coldef.cellTemplate = '<button class="right btn btn-xs" ng-click="viewRelation(row, col.field)">View</button> <div class="ngCellText" ng-bind-html="row.getProperty(col.field) | countItems"></div>';
            //coldef.cellTemplate = '<span ng-cell-text ng-bind-html="row.getProperty(col.field) | countItems"></span>';
            break;
    }

    return coldef;
}

/*
* Handles preparing a field to be used by the system...
*/
function parseField(field, scope) {
    //console.log("Inside services, parseField...");
    //console.log("field is next...");
    //console.dir(field);

    //do this no matter what.
    scope.FieldLookup[field.DbColumnName] = field; //setup our little convenience lookup associative array - used for validation

    //are we already parsed?
    if (field.parsed === true)
        return;

    var displayName = "";

    //if we are a DatasetField
    if (field.Label)
        displayName = field.Label;

    //if we are a Field
    if (field.Name)
        displayName = field.Name;

    //include units in the label if we are a DatasetField
    if (field.Field && field.Field.Units)
        if (field.Field.Units !== "NULL") // DO NOT include units, if it = "NULL"
            displayName += " (" + field.Field.Units + ")";

    //or if we are a Field
    if (field.Units)
        displayName += " (" + field.Units + ")";

    field.Label = displayName;

    //configure field validation for DatasetFields (will be skipped for global Fields (in the case of global query))
    if (field.Field && field.Field.Validation) {
        try {
            console.log("configuring validation for " + field.DbColumnName);
            field.Field.Validation = angular.fromJson(field.Field.Validation);
        }
        catch (e) {
            // Original code
            //console.log("*** There is an error parsing the validation for: "+ field.Field.Name + " ***");
            //console.dir(e);
            //console.log("Validation == " + field.Field.Validation);

            //TODO: we need to talk about this whole validation approach... no reason to "angular.fromJson" above
            //      when we are going to fail a bunch of times on purpose because we're doing something different
            //      with the whole switch thing below...

            console.log("e string = " + e.message.toString());
            var errorDescription = e.message.valueOf();
            if ((field.Field.Validation === "t") ||
                (field.Field.Validation === "i") ||
                (field.Field.Validation === "y") ||
                (field.Field.Validation === "NULL")) {
                // This could probably be handled a better way...
                // Do nothing.  The "t" means we are checking a time.
                // Ken previously used the field validation for checking upper/lower limits on numbers.
                // GC added these letters...
                // t :  to indicate a time value
                // i :  to indicate an integer
                // y :  to indicate a 4-digit year
                if (field.Field.Validation === "y") {
                    // We are looking for a year.
                    check4Digits()
                }
            }
            else if (errorDescription == "Invalid character") {
                // Do nothing.  We handle checking the value in the ValidateField function.
            }
            else {
                console.log("** There is an error parsing the validation for: " + field.Field.Name + " **");
                console.dir(e);
                console.log("Validation == " + field.Field.Validation);
            }
        }
    }

    //setup and parse the rule if there is one.
    try {
        field.Rule = (field.Rule) ? angular.fromJson(field.Rule) : {};

        if (field.Field)
            field.Field.Rule = (field.Field.Rule) ? angular.fromJson(field.Field.Rule) : {};
    }
    catch (e) {
        // Original code
        //console.log("*** there is a rule parsing error for " + field.Field.Name + " *** ");
        //console.dir(e);

        //console.log("e string = " + e.description.toString());
        var errorDescription = e.description.valueOf();
        if ((field.Field.Validation === "t") ||
            (field.Field.Validation === "i") ||
            (field.Field.Validation === "NULL")) {
            // This could probably be handled a better way...
            // Do nothing.  The "t" means we are checking a time.
            // Ken previously used the field validation for checking upper/lower limits on numbers.
            // GC added these letters...
            // t :  to indicate a time value
            // i :  to indicate an integer
        }
        else if (errorDescription == "Invalid character") {
            // Do nothing.  We handle checking the value in the ValidateField function.
        }
        else {
            console.log("** There is an error parsing the validation for: " + field.Field.Name + " **");
            console.dir(e);
            console.log("Validation == " + field.Field.Validation);
        }
    }

    fireRules("DefaultValue", null, field, null, null, null, null);
    fireRules("Default", null, field, null, null, null, null);

    field.parsed = true;

}

//creates an empty row for arbitrary datasets
function makeNewRow(coldefs) {
    var obj = {};

    //sets to default value of this field if one is specified as a "DefaultValue" rule; otherwise null
    angular.forEach(coldefs, function (col) {
        obj[col.field] = (col.defaultValue) ? col.defaultValue : null;
    });

    obj.isValid = true;

    return obj;
}


function isInvalidOption(scope, field, value) {
    return Object.keys(scope.CellOptions[field.DbColumnName + 'Options']).indexOf(value.toString()) == -1;
}


function checkNumber(row, field, value, range, row_errors) {
    //console.log("Inside checkNumber...");
    //console.dir(row);
    //console.dir(field);
    //console.log("value = " + value);
    //console.dir(range);
    //console.dir(row_errors);

    if (is_empty(value))
        return true;

    // Check if input is a number even if we haven't specified a numeric range
    if (!stringIsNumber(value)) {
        row_errors.push("[" + field.DbColumnName + "] Value is not a number.");
        return false;
    }
    // The range (Validation field) could be an alphanumeric string (4d for 4 decimal places), not just [min, max], and we must allow for the possibility.
    //else if(range && range.length == 2)     // Expecting a 2-element array [min,max]; yes, but if the value is a string, this will be a false positive for a range.
    else if (range && (typeof range === 'object') && range.length === 2)     // Expecting a 2-element array [min,max], an array is an object...
    {
        var min = range[0];
        var max = range[1];

        if (min && value < min) {
            row_errors.push("[" + field.DbColumnName + "] Value is too low.");
            return false;
        }

        if (max && value > max) {
            row_errors.push("[" + field.DbColumnName + "] Value is too high.");
            return false;
        }
    }

    return true;
}


//function validateField(field, row, key, scope, row_errors)
function validateField(field, row, key, scope, row_errors) {
    //console.log("Inside services, validateField...");
    //console.log("field is next...");
    //console.dir(field);
    //console.log("scope.callingPage = " + scope.callingPage);

    var value = row[key];

    //if (typeof field.DbColumnName !== 'undefined')
    //	console.log("Validating: (" + value + ") on field: " + field.DbColumnName);
    //console.dir(field);

    switch (field.ControlType) {
        case 'select':
            //is the value in our list of options?
            //console.log("scope.CellOptions for " + field.DbColumnName + " are next...");
            //console.log(scope.CellOptions[field.DbColumnName+'Options']);
            if (scope.CellOptions[field.DbColumnName + 'Options']) {
                if (isInvalidOption(scope, field, value)) // Is value in the option list?
                    row_errors.push("[" + field.DbColumnName + "] Invalid selection, value = " + value);
            }
            else {
                console.log("Error: no cellOptions for " + field.DbColumnName + 'Options');
                console.dir(scope.CellOptions);
                console.log("This might be because you're calling a rule wrong?");
            }
            break;

        case 'multiselect':
            //is each value in our list of options?
            var values = angular.fromJson(value);
            row[key] = values;
            //console.log("doing a comparison: " + values + " for value: "+ value);
            for (var a = 0; a < values.length; a++) {
                var a_value = values[a];
                if (isInvalidOption(scope, field, a_value)) // Is value in the option list?
                    row_errors.push("[" + field.DbColumnName + "] Invalid selection (" + a_value + ")");
            }
            break;
        case 'date':
            if (isNaN(Date.parse(value)))
                row_errors.push("[" + field.DbColumnName + "] Value is not a date (mm/dd/yyyy).");
            break;
        case 'datetime':
            console.log("Inside datetime...");
            console.log("value = " + value);
            if (isNaN(Date.parse(value)))
                row_errors.push("[" + field.DbColumnName + "] Value is not a date-time (mm/dd/yyyy hh:mm).");
            else // Valid date value.
            {
                var theDate = new Date(value);
                var theYear = theDate.getFullYear();
                console.log("theYear = " + theYear);
                if (theYear < 1901)
                    row_errors.push("[" + field.DbColumnName + "] Value has a default year (from Excel?); user must set year.");
            }

            break;

        case 'time':
            var theTime = value;
            var strTime = theTime.toString();
            console.log("strTime = " + strTime);

            var timeContentValid = true;
            if (!stringIsTime(value) && !is_empty(value))
                timeContentValid = false;
            else if (value.indexOf(".") > -1)
                timeContentValid = false;
            else if (value.indexOf(":") === -1)
                timeContentValid = false;

            if (!timeContentValid)
                row_errors.push("[" + field.DbColumnName + "] Value is not a time (hh:mm).");

            break;

        case 'text':
            if (field.Field.Validation && (field.Field.Validation !== 'null')) {
                if (field.Field.Validation === "t")  // For a time
                {
                    //console.log("Text time field name = " + field.DbColumnName);
                    //if ((field.DbColumnName === "InterviewTime") || (field.DbColumnName === "TimeStart") || (field.DbColumnName === "TimeEnd")) // This looks for specific field names.
                    if ((field.Field.Units === "00:00") || (field.Field.Units === "HH:MM")) // This looks for time fields (better).
                    {
                        //console.log("In services, validateField, found time field...");
                        //console.log("scope.callingPage = " + scope.callingPage);
                        //if(!stringIsNumber(value) && !is_empty(value))

                        // 


                        if ((field.DbColumnName === "InterviewTime") ||
                            (field.DbColumnName === "TimeStart") ||
                            (field.DbColumnName === "TimeEnd")) {
                            if ((typeof scope.callingPage !== 'undefined') && (scope.callingPage === "Import")) {
                                if (!checkDateTimeFormat1(value))
                                    row_errors.push("[" + field.DbColumnName + "] Value is not a date-time format (YYYY-MM-DD hh:mm)");

                                var theYear = extractYearFromString(value);
                                if (parseInt(theYear) < 1901) {
                                    strErrorMessage = "[" + field.DbColumnName + "] has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";
                                    console.log(strErrorMessage);
                                    row_errors.push(strErrorMessage);
                                }
                            }
                            else {
                                // value may contain a time (HH:MM) or the time may be in a datetime string (YYYY-MM-DDTHH:mm:SS format).
                                //console.log("value (before extracting time)= " + value);
                                if (value !== null) {
                                    var colonLocation = value.indexOf(":");
                                    value = value.substr(colonLocation - 2);
                                    if (value.length > 5)
                                        value = value.substr(0, 6);

                                    //console.log("value (after extracting time)= " + value);
                                    var validTime = checkTime(value);
                                    //console.log("validTime (time is valid)= " + validTime)
                                    if ((typeof validTime === 'undefined') || (value.length < 5)) {
                                        console.log("Error: Invalid time entry in " + field.DbColumnName + ".");
                                        row_errors.push("[" + field.DbColumnName + "] Invalid entry.  The entry must use the 24-hr military time format.  Example:  8:00 a.m. = 08:00 and 5:15 p.m. = 17:15");
                                    }
                                }
                            }
                        }
                        else {
                            // value may contain a time (HH:MM) or the time may be in a datetime string (YYYY-MM-DDTHH:mm:SS format).
                            console.log("value (before extracting time)= " + value);
                            var colonLocation = value.indexOf(":");
                            value = value.substr(colonLocation - 2);
                            if (value.length > 5)
                                value = value.substr(0, 6);

                            //console.log("value (after extracting time)= " + value);
                            var validTime = checkTime(value);
                            //console.log("validTime (time is valid)= " + validTime)

                            if ((typeof validTime === 'undefined') || (value.length < 5)) {
                                console.log("Error: Invalid time entry in " + field.DbColumnName + ".");
                                row_errors.push("[" + field.DbColumnName + "] Invalid entry.  The entry must use the 24-hr military time format.  Example:  8:00 a.m. = 08:00 and 5:15 p.m. = 17:15");
                            }
                        }
						/* Before import change
						console.log("Found time field...");
						//if(!stringIsNumber(value) && !is_empty(value))
						console.log("Value = " + value);
						var validTime = checkTime(value);
						console.log("validTime = " + validTime)
						if ((typeof validTime === 'undefined') || (value.length < 5))
						{
							console.log("Error: Invalid time entry in " + field.DbColumnName + "." );
							row_errors.push("["+field.DbColumnName+"] Invalid entry.  The entry must use the 24-hr military time format.  Example:  8:00 a.m. = 08:00 and 5:15 p.m. = 17:15");
						}
						*/
                    }
                }
                else if (field.Field.Validation === "nb")  // For a name, nb = not blank
                {
                    console.log("Field name = " + field.DbColumnName);
                    if (field.DbColumnName === "Surveyor") {
                        console.log("Found surveyor field...");
                        //if(!stringIsNumber(value) && !is_empty(value))
                        console.log("Value = " + value);
                        if (value.length > 0)
                            var validName = value;
                        else
                            console.log("validName = " + validName);

                        if (typeof validName === 'undefined') {
                            console.log("Error: Invalid time entry in " + field.DbColumnName + ".");
                            row_errors.push("[" + field.DbColumnName + "] Invalid entry.  [Surveyor] cannot be blank.");
                        }
                    }
                }
            }
            break;
        case 'easting':
            return checkNumber(row, field, value, [100000, 999999], row_errors);
        case 'northing':
            return checkNumber(row, field, value, [1000000, 9999999], row_errors);

        case 'number':
            //return checkNumber(row, field, value, field.Field.Validation, row_errors); // Chris' code.

            //console.log("Inside validateField, case number...");
            //console.log("field.Field.DbColumnName = " + field.Field.DbColumnName);
            //console.log("field.Field.Validation = " + field.Field.Validation);
            //console.log("field.Field.DataType = " + field.Field.DataType);
            //console.log("value = " + value);
            //if (field.Field.DataType === 'float')
            //{
            //	return checkNumber(row, field, value, field.Field.Validation, row_errors);
            //}
            //console.log("typeof field.Field.Validation = " + typeof field.Field.Validation);

            if (typeof field.Field.Validation === "number") {
                field.Field.Validation = "" + field.Field.Validation;
                //console.log("typeof field.Field.Validation = " + typeof field.Field.Validation);
            }

            if ((field.Field.Validation !== null) && (field.Field.Validation.indexOf("null") < 0)) {
                //console.log("Validation exists and is not null...");
                if (field.Field.Validation === "i")  // For an Integer
                //if (field.Field.Validation.indexOf("i") > -1)  // For an Integer
                {
                    //console.log("Must be an integer...");
                    //console.log("Field name = " + field.DbColumnName);
                    //console.log("value = " + value);
                    if ((typeof value !== 'undefined') && (value !== null)) {
                        //console.log("field.DbColumnName = " + field.DbColumnName + ", value = " + value);
                        // First verify the number is an integer.
                        var validNumber = checkInteger(value);
                        //console.log("validNumber = " + validNumber)
                        if (typeof validNumber === 'undefined') {
                            console.log("Error: Invalid entry in " + field.DbColumnName + ".");
                            if ((field.DbColumnName === "NumberAnglersObserved") || (field.DbColumnName === "NumberAnglersInterviewed")) {
                                row_errors.push("[" + field.DbColumnName + "] Invalid entry in header.  The entry must be a whole number.  Example:  3");
                            }
                            else {
                                row_errors.push("[" + field.DbColumnName + "] Invalid entry.  The entry must be a whole number.  Example:  3");
                            }
                        }

                        //console.log("NumberAnglersInterviewed = " + value);
                        if (field.DbColumnName === "NumberAnglersInterviewed") {
                            //console.log("Found NumberAnglersInterviewed...");
                            ////console.log("scope is next...");
                            //console.dir(scope);
                            if (row.NumberAnglersInterviewed > row.NumberAnglersObserved) {
                                row_errors.push("[" + field.DbColumnName + "] cannot be more than [NumberAnglersObserved]");
                            }

                        }

                    }
                }
                else if (field.Field.Validation === "i4") // 4-digit integer
                {
                    //console.log("Must be a 4-digit integer...");
                    //console.log("Field name = " + field.DbColumnName);
                    //console.log("value = " + value);
                    if (is_empty(value)) {
                        // Empty is OK.  Do nothing.
                    }
                    else if ((typeof value !== 'undefined') && (value !== null)) {
                        var strErrorMessage = "[" + field.DbColumnName + "] Invalid entry.  The entry must be a 4-digit whole number.  Example:  1234";

                        var strValue = value.toString();
                        var validNumber = checkInteger(value);
                        //console.log("validNumber = " + validNumber)
                        if (typeof validNumber === 'undefined') {
                            row_errors.push(strErrorMessage);
                        }
                        else if ((strValue.length < 4) || (strValue.length > 4)) {
                            row_errors.push(strErrorMessage);
                        }
                    }
                }
                else if (field.Field.Validation === "y") // We are looking for a year (4-digit number)
                {
                    //console.log("Field name = " + field.DbColumnName);
                    //console.log("value = " + value);
                    //console.log("typeof value = " + typeof value);

                    // The value can be blank.  If present, value must be a 4-digit year.
                    if ((typeof value !== 'undefined') && (value !== null) && (value.length > 0)) {
                        validNumber = check4Digits(value);
                        if (typeof validNumber === 'undefined') {
                            console.log("Error: Invalid entry in " + field.DbColumnName + ".");
                            if (field.DbColumnName === "YearReported") {
                                row_errors.push("[" + field.DbColumnName + "] Invalid value for year.  The entry must be a 4-digit year.  Example:  2017");
                            }
                            else {
                                row_errors.push("[" + field.DbColumnName + "] Invalid entry.  The entry must be a whole number.  Example:  3");
                            }
                        }
                    }
                }
                else if (field.Field.Validation.indexOf("4d") > -1) // No more than 4 decimal places
                {
                    //console.log("Inside check for 4d...");
                    if ((typeof value !== 'undefined') && (value !== null)) {
                        var strValue = value.toString();
                        var strDecimalPart = "";
                        var intDecimalLoc = strValue.indexOf(".");

                        if (intDecimalLoc > -1) {
                            strDecimalPart = strValue.substring(intDecimalLoc + 1);
                            if (strDecimalPart.length > 4)
                                row_errors.push("[" + field.DbColumnName + "] Invalid entry.  The entry can only have 4 decimal places.")
                        }
                    }
                }
                //else if (field.Field.DataType === 'float')
                else if (field.Field.DataType.indexOf("float") > -1) {
                    //console.log("We have a float type...");
                    return checkNumber(row, field, value, field.Field.Validation, row_errors);
                }
                else {
                    return checkNumber(row, field, value, field.Field.Validation, row_errors);
                }
            }
            //else if (field.Field.DataType === 'float')
            //{
            //	return checkNumber(row, field, value, field.Field.Validation, row_errors);
            //}
            break;
        case 'checkbox':
            //anything here?
            break;

    }


    // You can test validation rules here
    //------------------------------------
    /*
    if(field.DbColumnName == "Disposition")
    {
        console.log("Disposition value: " + value);
        var testRule =
        {
            "OnValidate":
            "if((value == 'O' || value == 'T') && (scope.FieldLookup['ReleaseSite'] && !row['ReleaseSite'])) row_errors.push('[ReleaseSite] Disposition choice requires ReleaseSite');"
        };
    
        field.Field.Rule = angular.fromJson(testRule);
    }
    */
    /*
    console.log(field.DbColumnName);
    if(field.DbColumnName == "FinClip")
    {
        console.log("Origin value: " + value);
        var testRule =
        {
            "OnValidate":
            "row['Origin'] = 'NAT';if(!(!row['FinClip'] || (row['FinClip'] == 'NONE' || row['FinClip'] == 'NA')) || ( row['Tag'] == 'WIRE')) row['Origin'] = 'HAT';"
        };
    
        field.Field.Rule = angular.fromJson(testRule);
    }
    */

    fireRules("OnValidate", row, field, value, scope.row, row_errors, scope);

}



//convert a F to C
function convertFtoC(fahr) {
    if (fahr != null)
        return ((parseFloat(fahr) - 32) * (5 / 9)).toFixed(NUM_FLOAT_DIGITS);

    return fahr;
}

function convertCtoF(cels) {
    if (cels != null)
        return (parseFloat(cels) * 9 / 5 + 32).toFixed(NUM_FLOAT_DIGITS);

    return cels;
}




function previousActivity(activities, routeId, $location) {
    var previousId;

    //spin through the activities - when we get to the one we're on, send the one before
    //  (unless we are on the first one, then do nothing)

    for (var i = 0; i < activities.length; i++) {
        var activity = activities[i];

        if (activity.Id == routeId) {
            if (previousId)
                break; // meaning the previousId is set already; we are good to go.
            else {
                previousId = activity.Id; //meaning we are on the first one.
                break;
            }
        }
        previousId = activity.Id;
    };

    $location.path("/dataview/" + previousId);
};

function nextActivity(activities, routeId, $location) {
    var nextId;
    var found = false;

    for (var i = 0; i < activities.length; i++) {
        var activity = activities[i];

        if (found) {
            nextId = activity.Id;
            break;
        }

        if (activity.Id == routeId) {
            found = true;
            nextId = activity.Id; // in case we don't get another one.
        }

    };

    $location.path("/dataview/" + nextId);
}




function fireRules(type, row, field, value, headers, errors, scope) {
    var row_errors = errors; //older rules use "row_errors"
    try {
        //fire Field rule if it exists -- OnChange
        if (field.Field && field.Field.Rule && field.Field.Rule[type]) {
            console.log("Dataset field rule: " + field.Field.Rule[type]);
            if (type == "DefaultValue")
                field.DefaultValue = field.Field.Rule[type];
            else
                eval(field.Field.Rule[type]);
        }

        //fire Datafield rule if it exists -- OnChange
        if (field.Rule && field.Rule[type]) {
            console.log("Master field rule: " + field.Rule[type]);
            if (type == "DefaultValue")
                field.DefaultValue = field.Rule[type];
            else
                eval(field.Rule[type]);
        }
    } catch (e) {
        //so we don't die if the rule fails....
        console.dir(e);
    }

};
define("core/datasets/datasets-functions", function(){});



/* Defines filters used by the dataset module */

datasets_module
    .filter('checkmark', function () {
        return function (input) {
            return (input == null) ? '\u2713' : '\u2718';
        };
    })
    .filter('units', function () {
        return function (input) {
            return (input == null) ? '' : ' ('+input+')';
        };
    })
    .filter('locationNameFilter', function($rootScope){
        return function(input) {
            if($rootScope.locationOptions[input])
                return $rootScope.locationOptions[input];

            return input;
        };
    })
    .filter('instrumentFilter', function($rootScope){ 
        return function(input) {
            if($rootScope.instrumentOptions[input])
			{
                return $rootScope.instrumentOptions[input];
			}
            return input;
        };
    })
	.filter('timezoneFilter', function($rootScope){
        return function(input) {
            if($rootScope.timezoneOptions[input])
			{
                return $rootScope.timezoneOptions[input];
			}
            return input;
        };
	})	
    .filter('QAStatusFilter', function($rootScope){
        return function(input) {
            if($rootScope.QAStatusOptions[input])
                return $rootScope.QAStatusOptions[input];

            return input;
        };
    })
    .filter('fishermanFilter', function($rootScope){
        return function(input) {
			//console.log("input = " + input);
			if ((typeof input !== 'undefined') && (input !== null))
			{
				return $rootScope.fishermenOptions[input];
			}
			else
			{
				return null;
			}
			
            //if($rootScope.FishermanOptions[input])
            if($rootScope.fishermenOptions[input])
			{
                //return $rootScope.FishermanOptions[input];
                return $rootScope.fishermenOptions[input];
			}
            //return input;
        };
    })
    .filter('DataGradeMethod', function($rootScope){
        return function(input) {
            return $rootScope.DataGradeMethods[input];
        };
    })
    .filter('arrayValues', function(){
        return function(input) {
            var result = '';
            if(input)
            {

                try{
                    result = angular.fromJson(input).toString();
                }
                catch(e){
                    result = input;
                }
                /*
                var vals = angular.fromJson(input);
                angular.forEach(vals, function(item){
                    if(result != '')
                        result += ',';
                    result += item;
                });
                */
            }

            return result;
        };
    })
	.filter('RowQAStatusFilter', function( $rootScope ) {
		return function(input) {
            if ($rootScope.RowQAStatuses[input]) {
				return $rootScope.RowQAStatuses[input];
            }
			else {
				return 'unknown';
            }
          };
    })
	.filter('urlsFromString', function($sce, $rootScope){
		return function(input)
		{
			//console.log("Inside urlsFromString...");
			//console.log("input is next...");
			//console.dir(input);
			var retval = [];
			if(input)
			{
				var urls = angular.fromJson(input);
				angular.forEach(urls, function(aUrl){
					//console.log("aUrl is next...");
					//console.dir(aUrl);
					var theTarget = "_blank";
					retval.push("<a href='" + aUrl.Link + "' target=\"_blank\">" + aUrl.Name + "</a>");	
				});
			}
            if(retval.length==0)
                retval = "&nbsp;";
            else
                retval = retval.join(",");

            return $sce.trustAsHtml(retval);
		};
	})
    .filter('fileNamesFromString', function($sce, $rootScope){
        return function(input)
        {
			//console.log("Inside fileNamesFromString...");
			//console.log("input is next...");
			//console.dir(input);
            var retval = [];
			var fileIsString = false;
            if(input)
            {
                //var files = angular.fromJson(input); // Original line
				var files = null;
				try 
				{
					files = angular.fromJson(input);
				}
				catch (err)
				{
					files = [];
					files.push(input);
					fileIsString = true;
				}
				
                //angular.forEach(files, function(file){
                angular.forEach(files, function(file, value){
                    //retval.push("<a href='" + file.Link + "'>" + file.Name + "</a>"); // Original line
					
					var theTarget = "_blank";
					//console.log("$rootScope.DatastoreTablePrefix = " + $rootScope.DatastoreTablePrefix);
					//console.log("$rootScope.viewSubproject is next...");
					//console.dir($rootScope.viewSubproject);
					/*if (($rootScope.DatastoreTablePrefix === "CrppContracts") && ($rootScope.viewSubproject))
					{
						//retval.push("<a href='" + serviceUrl + "/uploads/subprojects/" + $rootScope.subprojectId + "/" + file.Name + "' target=\"_blank\">" + file.Name + "</a>");
						//retval.push("<a href='" + crppUrl + "uploads/subprojects/" + $rootScope.subprojectId + "/" + file.Name + "' target=\"_blank\">" + file.Name + "</a>");
						//retval.push("<a href='" + crppUrl + "\\uploads\\subprojects\\" + $rootScope.subprojectId + "\\" + file.Name + "' target=\\\"_blank\\\">" + file.Name + "</a>");
						retval.push("<a href='" + crppUrl + $rootScope.subprojectId + "\\" + file.Name + "' target=\\\"_blank\\\">" + file.Name + "</a>");
					}
					//else if ($rootScope.projectId === 1223) //&& ($rootScope.viewSubproject)) // Habitat
					else if ($rootScope.subprojectType === "Habitat") //&& ($rootScope.viewSubproject)) // Habitat
					{
						//console.log("file is next...");
						//console.dir(file);
						//console.log("value is next...");
						//console.dir(value);
						//retval.push("<a href='" + habUrl + "uploads\\subprojects\\" + $rootScope.subprojectId + "\\" + file.Name + "' target=\\\"_blank\\\">" + file.Name + "</a>");
						if (value === "Name")
							retval.push("<a href='" + habUrl + $rootScope.subprojectId + "\\" + file + "' target=\\\"_blank\\\">" + file + "</a>");
						else if (!isNaN(value))
							retval.push("<a href='" + habUrl + $rootScope.subprojectId + "\\" + file.Name + "' target=\\\"_blank\\\">" + file.Name + "</a>");
					}
					else if (fileIsString)
					{
						retval.push("<a href='" + serviceUrl + "/uploads/" + $rootScope.projectId + "/" + file + "' target=\"_blank\">" + file + "</a>");
					}
					else
						retval.push("<a href='" + serviceUrl + "/uploads/" + $rootScope.projectId + "/" + file.Name + "' target=\"_blank\">" + file.Name + "</a>");
					*/
					
					if (!$rootScope.viewSubproject) // We are working with a project, dataset, or new subproject file.
					{
						if ($rootScope.datasetId) // It's a dataset
						{
							//console.log("This is a dataset file.");
							if (fileIsString)
							{
								retval.push("<a href='" + cdmsShareUrl + "P/" + $rootScope.projectId + "/D/" + $rootScope.datasetId + "/" + file + "' target=\"_blank\">" + file.Name + "</a>");
							}
							else
								retval.push("<a href='" + cdmsShareUrl + "P/" + $rootScope.projectId + "/D/" + $rootScope.datasetId + "/" + file.Name + "' target=\"_blank\">" + file.Name + "</a>");	
						}
						else if ($rootScope.newSubproject) // New subproject, with no viewSubproject yet.
						{
							//console.log("This is a subproject file.");
							if (fileIsString)
							{
								retval.push("<a href='" + cdmsShareUrl + "P/" + $rootScope.projectId + "/S/[TBD]" + "/" + file + "' target=\"_blank\">" + file.Name + "</a>");
							}
							else
								retval.push("<a href='" + cdmsShareUrl + "P/" + $rootScope.projectId + "/S/[TBD]" + "/" + file.Name + "' target=\"_blank\">" + file.Name + "</a>");
						}
						else // It's a project
						{
							//console.log("This is a project file.");
							if (fileIsString)
							{
								retval.push("<a href='" + cdmsShareUrl + "P/" + $rootScope.projectId + "/" + file + "' target=\"_blank\">" + file.Name + "</a>");
							}
							else
								retval.push("<a href='" + cdmsShareUrl + "P/" + $rootScope.projectId + "/" + file.Name + "' target=\"_blank\">" + file.Name + "</a>");
						}
					}
					else if ($rootScope.viewSubproject) // We are working with a subproject file.
					{
						//console.log("This is a subproject file.");
						//console.log("$rootScope.projectId = " + $rootScope.projectId);
						if (fileIsString)
						{
							retval.push("<a href='" + cdmsShareUrl + "P/" + $rootScope.projectId + "/S/" + $rootScope.subprojectId + "/" + file + "' target=\"_blank\">" + file.Name + "</a>");
						}
						else
							retval.push("<a href='" + cdmsShareUrl + "P/" + $rootScope.projectId + "/S/" + $rootScope.subprojectId + "/" + file.Name + "' target=\"_blank\">" + file.Name + "</a>");

					}
                });
            }

            if(retval.length==0)
                retval = "&nbsp;";
            else
                retval = retval.join(",");

            return $sce.trustAsHtml(retval);
            
        };
    }).filter('countItems', function($sce){
        return function(input)
        {
            var retval = '-';
            if(input)
            {
                retval = array_count(input) + "";
            }
            return $sce.trustAsHtml(retval);
        }
    })
    

;

define("core/datasets/datasets-filters", function(){});


var dataset_activities_list = ['$scope', '$routeParams',
    'DatasetService', 'SubprojectService', 'ProjectService', 'CommonService', 'PreferencesService',
    '$modal', '$location', '$window', '$rootScope',
    function ($scope, $routeParams, 
        DatasetService, SubprojectService, ProjectService, CommonService, PreferencesService,
        $modal, $location, $window, $rootScope) {

        $scope.dataset = DatasetService.getDataset($routeParams.Id);

        //if ((typeof $scope.activities !== 'undefined') && ($scope.activities !== null)) {
            $scope.activities = null;
        //    console.log("Set $scope.activities to null for project page...");
        //}

        $scope.activities = DatasetService.getActivitiesForView($routeParams.Id);
        $scope.loading = true;
        $scope.project = null;
        $scope.saveResults = null;
        $scope.isFavorite = $rootScope.Profile.isDatasetFavorite($routeParams.Id);
        $scope.allActivities = null;
        $scope.headerdata = DatasetService.getHeadersDataForDataset($routeParams.Id);
        $scope.thisDatasetLocationObjects = [];
        $scope.showDataEntrySheetButton = true; //by default - can change in config

        //this is the default columns (fields) to show in the activities grid, 
        //  but it will be overridden if there is one configured in the dataset.
        var ShowFields = [
            "ActivityDate",                 // ActivityDate
            "Location.Label",               // Location
        ];                

        //console.log("Profile = ");
        //console.dir($rootScope.Profile);

        var activityDateTemplate = function (params) {
            return '<a href="#/dataview/' + params.node.data.Id + '">' + moment(params.node.data.ActivityDate).format('L') + '</a>';
        };

        var yearReportedTemplate = function (params) {
            if (params.node.data.headerdata.YearReported === undefined)
                return;
            else
                return '<a href="#/dataview/' + params.node.data.Id
                + '">' + params.node.data.headerdata.YearReported + '</a>';
        };

        var runYearTemplate = function (params) {
            if (params.node.data.headerdata.RunYear === undefined)
                return;
            else
                return '<a href="#/dataview/' + params.node.data.Id
                    + '">' + params.node.data.headerdata.RunYear + '</a>';
        };

        var desclinkTemplate = function (params) {
            return '<a href="#/dataview/' + params.node.data.Id
                + '">' + params.node.data.Description + '</a>';
        };

        var allotmentTemplate = function (params) {
            return '<a href="#/dataview/' + params.node.data.Id
                + '">' + params.node.data.headerdata.Allotment + '</a>';
        };

        var locationLabelTemplate = function (params) {
            return '<span>' + params.node.data.Location.Label + '</span>'
                + ((params.node.data.Location.OtherAgencyId) ? ('<span> (' + params.node.data.Location.OtherAgencyId + ')</span>' ) : ''); //ternery: if otheragencyid then show it
        };

        var QATemplate = function (params) {
            return $scope.QAStatusList[params.node.data.ActivityQAStatus.QAStatusId];
        };

        var editButtonTemplate = function (params) {
            return '<div project-role="editor">' +
                '<a href="#/edit/' + params.node.data.Id + '">Edit</a>' +
                '</div>';
        };

        $scope.columnDefs = []; // the one we'll bind to the grid; starts out empty...

        //the way we want this to be:

        //create list of candidate columndefs (possibleColumnDefs below).
        // have a list of default ShowFields - the fields we will show if the dataset doesn't have a different set configured.
        // but if there is a config, spin through the list and add all the dataset config's SHOWFIELDS and display those.

        $scope.possibleColumnDefs = [  //in order the columns will display, by the way...

            { field: 'ActivityDate', headerName: 'Activity Date', filter: 'date', cellRenderer: activityDateTemplate, width: 150, menuTabs: ['filterMenuTab']},
            { field: 'headerdata.YearReported', headerName: 'Year Reported', cellRenderer: yearReportedTemplate, width: 120, menuTabs: [] },
            { field: 'headerdata.RunYear', headerName: 'Run Year', cellRenderer: runYearTemplate, width: 120, menuTabs: [] },
            {
                field: 'headerdata.TimeStart',
                headerName: 'Time Start',
                width: 80,
                valueFormatter: function (params) {
                    if (params.node.data.headerdata.TimeStart !== undefined)
                        return moment(params.node.data.headerdata.TimeStart).format('HH:mm');
                }, 
                menuTabs: []
            },
            { field: 'headerdata.Allotment', headerName: 'Allotment', cellRenderer: allotmentTemplate, minWidth: 100, menuTabs: ['filterMenuTab'] }, //appraisal
            { field: 'headerdata.AllotmentStatus', headerName: 'Status', minWidth: 120, menuTabs: ['filterMenuTab'] },
            { field: 'Description', headerName: 'Date Range', cellRenderer: desclinkTemplate, minWidth: 200, width: 250, menuTabs: ['filterMenuTab'], filter:'text' },
            { field: 'Location.Label', headerName: 'Location', cellRenderer: locationLabelTemplate, minWidth: 360, menuTabs: ['filterMenuTab'] },
            { field: 'Location.WaterBody.Name', headerName: 'Waterbody', menuTabs: ['filterMenuTab'] },
            { field: 'headerdata.FieldActivityType', headerName: 'Field Activity Type', minWidth: 120, menuTabs: ['filterMenuTab'] },
            { field: 'headerdata.DataType', headerName: 'Data Type', minWidth: 120, menuTabs: ['filterMenuTab'] },

            //all datasets get these
            { field: 'User.Fullname', headerName: 'By User', minWidth: 120, alwaysShowField: true, menuTabs: ['filterMenuTab'] },  //note: alwaysShowField is true.
            {
                field: 'QAStatus', headerName: 'QA Status', cellRenderer: QATemplate, minWidth: 100,
                alwaysShowField: true,
                menuTabs: ['filterMenuTab'],
                valueGetter: function (params) { return $scope.QAStatusList[params.node.data.ActivityQAStatus.QAStatusId]; }
            },
            { field: 'Actions', headerName: '', cellRenderer: editButtonTemplate, minWidth: 50, alwaysShowField: true, menuTabs: [] },

        ];


        $scope.selectedLocation = null;
        $scope.newPoint = null;
        $scope.newGraphic = null;

        $scope.agGridOptions = {
            animateRows: true,
            enableSorting: true,
            enableFilter: true,
            enableColResize: true,
            showToolPanel: false,
            columnDefs: [],
            rowData: [],
            filterParams: { apply: true }, //enable option: doesn't do the filter unless you click apply
            debug: true,
            rowSelection: 'multiple',
            onSelectionChanged: function (params) {
                $scope.agGridOptions.selectedItems = $scope.agGridOptions.api.getSelectedRows();
                $scope.$apply(); //trigger angular to update our view since it doesn't monitor ag-grid
            },
            onFilterModified: function () {
                $scope.agGridOptions.api.deselectAll();
            },
            selectedItems: []
        };

        //setup the grid
        var ag_grid_div = document.querySelector('#activity-list-grid');    //get the container id...
        $scope.ag_grid = new agGrid.Grid(ag_grid_div, $scope.agGridOptions); //bind the grid to it.
        $scope.agGridOptions.api.showLoadingOverlay(); //show loading...


        //Maybe there is a better way?! 
        $scope.activities.$promise.then( function () {

            console.log("Inside activities-controller.js, $scope.activities.$promise, loading header data...");

            $scope.loading = true;

            $scope.headerdata.$promise.then(function () {
                angular.forEach($scope.activities, function (activity, key) {
                    activity.headerdata = getByField($scope.headerdata, activity.Id, "ActivityId");
                });

                //now that the activities are loaded, tell the grid so that it can refresh.
                $scope.agGridOptions.api.setRowData($scope.activities);

                console.log("autosizing columns");
                var allColumnIds = [];
                $scope.agGridOptions.columnApi.getAllColumns().forEach(function (column) {
                    allColumnIds.push(column.colId);
                });
                $scope.agGridOptions.columnApi.autoSizeColumns(allColumnIds);
                
            });
            console.log("$scope at end of $scope.activities.$promise is next...");
            //console.dir($scope);

            $scope.allActivities = $scope.activities; //set allActivities so we can reset our filters
            $scope.loading = false;
            
        });

        $scope.$watch('dataset.Fields', function () {
            if (!$scope.dataset.Fields) return;

            //run config on the dataset.
            //DatasetService.configureDataset($scope.dataset);

            console.log("Inside dataset.Fields watcher...");
            //console.log("$scope is next...");
            //console.dir($scope);

            $rootScope.datasetId = $scope.dataset.Id;
            //load our project based on the projectid we get back from the dataset
            $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
            $scope.QAStatusList = makeObjects($scope.dataset.QAStatuses, 'Id', 'Name');

            $scope.DatastoreTablePrefix = $scope.dataset.Datastore.TablePrefix;
            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            //console.log("$scope.columnDefs is next...");
            //console.dir($scope.columnDefs);


            //OK this is going away...

            //hide irrelevant fields TODO -- code smell pretty ripe here...  genericize
            // $scope.columnDefs[0] = ActivityDate
            // $scope.columnDefs[1] = YearReported
            // $scope.columnDefs[2] = TimeStart
            // $scope.columnDefs[3] = Allotment
            // $scope.columnDefs[4] = AllotmentStatus
            // $scope.columnDefs[5] = Location
            // $scope.columnDefs[6] = Waterbody
            // $scope.columnDefs[7] = FieldActivityType
            // $scope.columnDefs[8] = DataType
            // $scope.columnDefs[9] = Date Range
            // $scope.columnDefs[10] = By User
            // $scope.columnDefs[11] = QAStatus

            console.log("config!");
            console.dir($scope.dataset.Config);

            //if the dataset has a config and the ActivityPage.ShowFields is set, use it
            if ($scope.dataset.Config != undefined
                && $scope.dataset.Config.ActivitiesPage != undefined
                && $scope.dataset.Config.ActivitiesPage.ShowFields != undefined) {
                console.log("Hey config has a showfields configured!");
                ShowFields = $scope.dataset.Config.ActivitiesPage.ShowFields; //set
            } else
                console.log("aww no showfields in config... we'll just use the ShowFields defaults...");

            var showColDefs = [];

            angular.forEach($scope.possibleColumnDefs, function (coldef) {
                //console.log("coldef is next...");
                //console.dir(coldef);
                if (coldef.alwaysShowField || ShowFields.contains(coldef.field)) {
                    showColDefs.push(coldef);
                }
            });

            //set the first column to be the sort column:
            showColDefs[0].sort = "desc";

            $scope.columnDefs = showColDefs; 
            $scope.agGridOptions.api.setColumnDefs(showColDefs); //tell the grid we've changed the coldefs

            //some specific dataset things... TODO: i'll bet we can move this out to config, too...
            if ($scope.DatastoreTablePrefix === "WaterTemp") {
                $scope.reloadDatasetLocations("WaterTemp", LOCATION_TYPE_WaterTemp);
            } else if ($scope.DatastoreTablePrefix === "Metrics") {
                $scope.showDataEntrySheetButton = false;
                $scope.reloadDatasetLocations("Metrics", LOCATION_TYPE_Hab);
            }


            /*

            //
            if ($scope.DatastoreTablePrefix === "WaterTemp") {
                console.log("showing fields for " + $scope.DatastoreTablePrefix);
                $scope.columnDefs[0].visible = false; // ActivityDate
                $scope.columnDefs[1].visible = false; // YearReported
                $scope.columnDefs[5].visible = true;  // Location
                $scope.columnDefs[7].visible = true;  // FieldActivityType
                $scope.columnDefs[9].visible = true;  // Date Range
                $scope.columnDefs[10].visible = true; // By User

                $scope.reloadDatasetLocations("WaterTemp", LOCATION_TYPE_WaterTemp);
            }
            else if ($scope.DatastoreTablePrefix === "WaterQuality") {
                console.log("showing fields for " + $scope.DatastoreTablePrefix);
                $scope.columnDefs[0].visible = false; // ActivityDate
                $scope.columnDefs[1].visible = false; // YearReported
                $scope.columnDefs[5].visible = true;  // Location
                $scope.columnDefs[8].visible = true;  // DataType
                $scope.columnDefs[9].visible = true;  // Date Range
                $scope.columnDefs[10].visible = true; // By User
            }
            else if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                console.log("showing fields for " + $scope.DatastoreTablePrefix);
                $scope.columnDefs[0].visible = true; // ActivityDate
                $scope.columnDefs[1].visible = false; // YearReported
                $scope.columnDefs[2].visible = true;  // TimeStart
                $scope.columnDefs[3].visible = false; // Allotment
                $scope.columnDefs[5].visible = true;  // Location
                $scope.columnDefs[8].visible = false; // DataType
                $scope.columnDefs[9].visible = false; // Date Range
                $scope.columnDefs[10].visible = true; // By User
                $scope.columnDefs[11].visible = true; // QAStatus
            }
            else if ($scope.DatastoreTablePrefix === "Appraisal") {
                console.log("showing fields for " + $scope.DatastoreTablePrefix);
                $scope.columnDefs[0].visible = false; // ActivityDate
                $scope.columnDefs[1].visible = false; // YearReported
                $scope.columnDefs[3].visible = true;  // Allotment
                $scope.columnDefs[4].visible = true;  // AllotmentStatus
            }
            else if ($scope.DatastoreTablePrefix === "CrppContracts") {
                console.log("showing fields for " + $scope.DatastoreTablePrefix);
                $scope.columnDefs[0].visible = false; // ActivityDate
                $scope.columnDefs[1].visible = false; // YearReported
                $scope.columnDefs[3].visible = true;  // Allotment
                $scope.columnDefs[4].visible = true;  // AllotmentStatus
            }
            else if ($scope.DatastoreTablePrefix === "FishScales") {
                console.log("showing fields for " + $scope.DatastoreTablePrefix);
                $scope.columnDefs[0].visible = true;  // ActivityDate
                $scope.columnDefs[1].visible = false; // YearReported
                $scope.columnDefs[5].visible = false; // Location
                $scope.columnDefs[10].visible = true; // By User
                $scope.columnDefs[11].visible = true; // QAStatus
            }
            else if ($scope.DatastoreTablePrefix === "Metrics") {
                console.log("showing fields for " + $scope.DatastoreTablePrefix);
                $scope.columnDefs[0].visible = false; // ActivityDate
                $scope.columnDefs[1].visible = true;  // YearReported
                $scope.columnDefs[5].visible = true;  // Location
                $scope.columnDefs[10].visible = true; // By User
                $scope.columnDefs[11].visible = true; // QAStatus

                $scope.showDataEntrySheetButton = false;

                $scope.gridOptions = {};
                $scope.gridOptions = {
                    data: 'activities',
                    selectedItems: [],
                    showColumnMenu: true,
                    //sortInfo: {fields:['ActivityDate'], directions: ['desc']},
                    sortInfo: { fields: ['headerdata.YearReported'], directions: ['desc'] },
                    columnDefs: 'columnDefs',
                    filterOptions: $scope.gridOptionsFilter,
                };

                $scope.reloadDatasetLocations("Metrics", LOCATION_TYPE_Hab);
            }
            else {
                $scope.columnDefs[0].visible = true;  // ActivityDate
                $scope.columnDefs[1].visible = false; // YearReported
                $scope.columnDefs[5].visible = true;  // Location
                $scope.columnDefs[7].visible = false; // FieldActivityType
                $scope.columnDefs[9].visible = false; // Date Range
                $scope.columnDefs[10].visible = true; // By User
                $scope.columnDefs[11].visible = true; // QAStatus
            }

            console.log("$scope at end of watch, dataset.Fields is next...");
            //console.dir($scope);
            */
        });

        $scope.$watch('project.Name', function () {
            if ($scope.project && $scope.project.$resolved) {
                console.log("Inside watch project.Name...");

                console.log("$scope.project.Id = " + $scope.project.Id);
                console.log("$scope.subprojectType = " + $scope.subprojectType);
                SubprojectService.setServiceSubprojectType($scope.subprojectType);

                //if ($scope.subprojectType === "Habitat")
                if ($scope.DatastoreTablePrefix === "Metrics") {
                    console.log("x")
                    $scope.subprojectList = SubprojectService.getProjectSubprojects($scope.project.Id);
                    var watcher = $scope.$watch('subprojectList.length', function () {
                        // We wait until subprojects gets loaded and then turn this watch off.
                        if ($scope.subprojectList === null) {
                            console.log("$scope.subprojectList is null");
                            return;
                        }
                        else if (typeof $scope.subprojectList.length === 'undefined') {
                            console.log("$scope.subprojectList.length is undefined.");
                            return;
                        }
                        else if ($scope.subprojectList.length === 0) {
                            console.log("$scope.subprojectList.length is 0");
                            return;
                        }

                        console.log("$scope.subprojectList.length = " + $scope.subprojectList.length);
                        console.log("subprojects is loaded...");
                        console.dir($scope.subprojectList);

                        $scope.reloadProjectLocations();

                        if ($scope.map && $scope.map.locationLayer && $scope.map.locationLayer.hasOwnProperty('showLocationsById')) {
                            //$scope.map.locationLayer.showLocationsById($scope.thisProjectsLocationObjects); //bump and reload the locations.
                            // Note:  If we sent an empty list, it pulls all the locations.
                            // If we supply an Id that we know does not exist (0), we get no locations, which is what we expect.
                            $scope.map.locationLayer.showLocationsById(0); //bump and reload the locations.
                        }

                        watcher();
                    });
                }
                else {
                    $scope.reloadProjectLocations();
                }
            }
        });

        /*
        $scope.$watch('activities.$resolved', function () {
            $scope.loading = true;
            if ($scope.activities && $scope.activities.$resolved) {
                console.log("Inside watch activities.$resolved...");
                //console.log("$scope is next...");
                console.log($scope);

                if (!$scope.allActivities)
                    $scope.allActivities = $scope.activities;

                $scope.loading = false;

                if ($scope.activities.length > 0) {
                    $scope.gridOptions.ngGrid.data.$promise.then(function () {
                        if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                            var intLocT = -1;
                            var strTheTime = "";
                            console.log("Starting to extract TimeStart...");
                            angular.forEach($scope.gridOptions.ngGrid.data, function (row) {
                                // Verify that we have a StartTime, before we try to extract the time from it.
                                if ((typeof row.headerdata.TimeStart !== 'undefined') && (row.headerdata.TimeStart !== null)) {
                                    intLocT = row.headerdata.TimeStart.indexOf("T");
                                    strTheTime = row.headerdata.TimeStart.substr(intLocT + 1, 5);
                                    row.headerdata.TimeStart = strTheTime;

                                    intLocT = -1;
                                    strTheTime = "";
                                }
                                else
                                    console.log("$scope.row.headerdata.TimeStart exists and has data...");
                            });
                            console.log("Done extracting TimeStart...");

                            // This makes a copy of ALL the activities.  When the dataset has lots of activities, it causes problems.
                            //$rootScope.GridActivities = $scope.gridOptions.ngGrid.data;
                        }
                    });
                }

            }

            //turn off the wheel of fishies
            if (($scope.activities) && (typeof $scope.activities.$resolved == "undefined"))
                $scope.loading = false;

        });
        */

        $scope.reloadDatasetLocations = function (datasetName, locationType) {
            console.log("Inside activities-controllers.js, scope.reloadDatasetLocations...");

            //console.log("$scope is next...");
            //console.dir($scope);
            //console.log("$scope.project.Locations is next...");
            //console.dir($scope.project.Locations);

            $scope.thisDatasetLocationObjects = []; // Dump this list, before refilling it.

            if (datasetName === "WaterTemp") {
                console.log("We have a WaterTemp dataset...");

                angular.forEach($scope.project.Locations, function (location, key) {
                    if (location.LocationType.Id === LOCATION_TYPE_WaterTemp)
                        $scope.thisDatasetLocationObjects.push(location.SdeObjectId);
                });
            }
            else if (datasetName === "Metrics") {
                console.log("We have a Metrics dataset...");
                console.log("$scope.subprojectList is next...");
                console.dir($scope.subprojectList);

                angular.forEach($scope.subprojectList, function (subproject) {

                    angular.forEach($scope.project.Locations, function (location, key) {
                        //console.log("location key = " + key);
                        //console.log("location is next...");
                        //console.dir(location);

                        // We will show the locations of the subprojects.
                        //console.log("location.LocationTypeId = " +  location.LocationTypeId + ", subproject.LocationId = " + subproject.LocationId + ", location.Id = " + location.Id);
                        if ((locationType === LOCATION_TYPE_Hab) && (subproject.LocationId === location.Id)) {
                            console.log("Found a subproject location")
                            console.dir(location);
                            $scope.thisDatasetLocationObjects.push(location.SdeObjectId);
                            subproject.GPSEasting = location.GPSEasting;
                            subproject.GPSNorthing = location.GPSNorthing;
                            subproject.UTMZone = location.UTMZone;
                            subproject.Projection = location.Projection;
                            subproject.WaterBodyId = location.WaterBodyId;
                        }
                    });
                });
            }
            $scope.map.locationLayer.showLocationsById($scope.thisDatasetLocationObjects); //bump and reload the locations.
        };

        $scope.ShowMap = {
            Display: false,
            Message: "Show Map",
            MessageToOpen: "Show Map",
            MessageToClose: "Hide Map",
        };

        $scope.addLocation = function () {
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-addlocation.html',
                controller: 'ModalAddLocationCtrl',
                scope: $scope, //very important to pass the scope along...
            });
        };

        $scope.removeFilter = function () {
            $scope.activities = $scope.allActivities;
            $scope.agGridOptions.api.setRowData($scope.activities);
            $scope.clearLocation();
        }

        $scope.clearLocation = function () {
            $scope.agGridOptions.api.deselectAll();
            $scope.map.infoWindow.hide();
            $scope.selectedLocation = null;

            if ($scope.newGraphic) {
                $scope.map.graphics.remove($scope.newGraphic);
                $scope.newGraphic = null;
            }

        };

        $scope.removeLocation = function () {
            if (confirm("Are you sure you want to delete this location?")) {
                var deleting = CommonService.deleteLocation($scope.selectedLocation.Id);
                $scope.removeFilter();

                deleting.$promise.then(function () {
                    $scope.refreshProjectLocations();
                    $scope.reloadProjectLocations();
                });
            }

        };

        $scope.editLocation = function () {
            $scope.row = $scope.selectedLocation;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-addlocation.html',
                controller: 'ModalAddLocationCtrl',
                scope: $scope, //very important to pass the scope along...
            });
        };

        $scope.getFormContent = function () {
            return "Click button above to create a new location here.";
        };


        // expose a method for handling clicks ON THE MAP - this is linked to from the Map.js directive
        $scope.click = function (e) {

            //clear the delete selection if they click on the map somewhere...
            $scope.agGridOptions.api.deselectAll();

            try {

                if (!$scope.map.graphics.infoTemplate) {
                    $scope.map.graphics.infoTemplate = $scope.template;
                    console.log("graphics layer infotemplate defined.");
                }


                $scope.map.infoWindow.resize(250, 300);

                //show the infowindow
                if (e.graphic) {
                    console.log("e.graphic is next...");
                    console.dir(e.graphic);
                    $scope.map.infoWindow.setContent($scope.getInfoContent(e.graphic));
                }
                else {
                    $scope.map.infoWindow.setTitle("New Location");
                    $scope.map.infoWindow.setContent($scope.getFormContent());
                }

                $scope.map.infoWindow.show(e.mapPoint);



                //now... did they click an existing map point?
                if (e.graphic) {
                    //filter activities based on the location they clicked.
                    var filterActivities = [];
                    var location = getByField($scope.locationsArray, e.graphic.attributes.OBJECTID, "SdeObjectId");

                    //console.log("Filtering --- looking for location: "+location.Id); 
                    //console.dir(location);

                    angular.forEach($scope.allActivities, function (item, key) {
                        if (item.LocationId == location.Id) {
                            //console.log("Found: item with location id");
                            filterActivities.push(item);
                        }
                    });

                    console.log("number of filteractivities: " + filterActivities.length);
                    //set the filtered activities
                    $scope.activities = filterActivities;
                    $scope.agGridOptions.api.setRowData($scope.activities);


                    
                    //console.log("$scope.activities is next...");
                    //console.dir($scope.activities);

                    $scope.selectedLocation = location;
                    if ($scope.newGraphic) {
                        $scope.map.graphics.remove($scope.newGraphic);
                        $scope.newGraphic = null; // just to clear the buttons on the UI.
                    }

                    //$scope.center = [e.mapPoint.x,e.mapPoint.y];
                }
                else // no -- maybe they are making a new point?
                {
                    $scope.selectedLocation = null; //since we didn't select an existing one.

                    $scope.map.reposition(); //this is important or else we end up with our map points off somehow.

                    $scope.newPoint = e.mapPoint;

                    //if they had already clicked somewhere, remove that point.
                    if ($scope.newGraphic)
                        $scope.map.graphics.remove($scope.newGraphic);

                    $scope.newGraphic = new esri.Graphic(
                        e.mapPoint,
                        new esri.symbol.SimpleMarkerSymbol()
                    );

                    $scope.map.graphics.add($scope.newGraphic);

                }

            } catch (e) {
                console.dir(e);
            }

        };

        // listen for click broadcasts
        /* $scope.$on("map.click", function(event, e){
          console.log("broadcast", event, e);
          console.log("Map -- ");
          console.dir($scope.map.locationLayer);
        });
        */


        $scope.toggleMap = function () {
            if ($scope.ShowMap.Display) {
                $scope.removeFilter(); //also clears location
                $scope.ShowMap.Display = false;
                $scope.ShowMap.Message = $scope.ShowMap.MessageToOpen;
            }
            else {
                $scope.ShowMap.Display = true;
                $scope.ShowMap.Message = $scope.ShowMap.MessageToClose;

                setTimeout(function () {
                    $scope.map.reposition();
                    console.log("repositioned");
                }, 400);

            }
        };

        $scope.toggleFavorite = function () {
            $scope.isFavorite = !$scope.isFavorite; //make the visible change instantly.

            $scope.results = {};

            $rootScope.Profile.toggleDatasetFavorite($scope.dataset);

            PreferencesService.saveUserPreference("Datasets", $rootScope.Profile.favoriteDatasets.join(), $scope.results);

            var watcher = $scope.$watch('results', function () {
                if ($scope.results.done) {
                    //if something goes wrong, roll it back.
                    if ($scope.results.failure) {
                        $scope.isFavorite = !$scope.isFavorite;
                        $rootScope.Profile.toggleDatasetFavorite($scope.dataset);
                    }
                    watcher();
                }
            }, true);


        }

        $scope.refreshProjectLocations = function () {
            ProjectService.clearProject();
            $scope.project = null;
            $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
        };

        $scope.reloadProjectLocations = function () {
            console.log("Inside $scope.reloadProjectLocations...");
            //console.log("$scope is next...")
            ////console.dir($scope);
            //console.log("$scope.project.Locations is next...");
            //console.dir($scope.project.Locations);
            $scope.subprojectList = angular.copy($scope.subprojectList);
            //console.log("$scope.subprojectList is next...");
            //console.dir($scope.subprojectList);

            $scope.datasetLocationType = CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);
            console.log("LocationType = " + $scope.datasetLocationType);

            //$scope.locationsArray = getUnMatchingByField($scope.project.Locations,PRIMARY_PROJECT_LOCATION_TYPEID,"LocationTypeId");
            $scope.locationsArray = getMatchingByField($scope.project.Locations, $scope.datasetLocationType, "LocationTypeId");
            //console.log("$scope.locationsArray (after adding Locations based upon location type) is next...");
            //console.dir($scope.locationsArray);

            if ($scope.subprojectType === "Habitat") {
                console.log("Checking for subproject locations now...");
                angular.forEach($scope.project.Locations, function (location) {
                    ;
                    angular.forEach($scope.subprojectList, function (subproject) {
                        //console.log("subproject.ProjectId = " + subproject.ProjectId + ", $scope.project.Id = " + $scope.project.Id + ", location.ProjectId = " + location.ProjectId);
                        if ((subproject.ProjectId === $scope.project.Id) && (subproject.ProjectId === location.ProjectId) && (subproject.Id === location.SubprojectId)) {
                            console.log("Found subproject location...");
                            $scope.locationsArray.push(location);
                        }
                    });
                });

                console.log("$scope.locationsArray (after adding subproject locs) is next...");
                console.dir($scope.locationsArray);

                $scope.locationObjectIds = getLocationObjectIdsFromLocationsWithSubprojects($scope.locationsArray);
            }
            else {
                //$scope.locationObjectIds = getLocationObjectIdsByInverseType(PRIMARY_PROJECT_LOCATION_TYPEID,$scope.project.Locations);
                $scope.locationObjectIds = getLocationObjectIdsByInverseType($scope.datasetLocationType, $scope.project.Locations);
            }
            //console.log("$scope.locationObjectIds is next...");
            //console.dir($scope.locationObjectIds);

            if ($scope.map && $scope.map.locationLayer && $scope.map.locationLayer.hasOwnProperty('showLocationsById'))
                $scope.map.locationLayer.showLocationsById($scope.locationObjectIds); //bump and reload the locations.

            //console.log("Project locations loaded!");
            //console.dir($scope.locationsArray);

        };

        $scope.reloadActivities = function () {
            $scope.loading = true;
            $scope.activities = DatasetService.getActivitiesForView($routeParams.Id);
        }

        $scope.openQueryWindow = function (p) {
            $location.path("/datasetquery/" + $scope.dataset.Id);
        };

        $scope.openDetailsWindow = function (p) {
            $location.path("/dataset-details/" + $scope.dataset.Id);
        };

        $scope.openImportWindow = function () {
            $scope.activities = null; // Dump the activities to free up memory.
            $location.path("/datasetimport/" + $scope.dataset.Id);
        };

        $scope.deleteActivities = function () {
            $scope.saveResults = {};
            if (!confirm("Are you sure you want to delete " + $scope.agGridOptions.selectedItems.length + " activities?  There is no undo for this operation."))
                return;

            DatasetService.deleteActivities($rootScope.Profile.Id, $scope.dataset.Id, $scope.agGridOptions, $scope.saveResults);
            var deleteWatcher = $scope.$watch('saveResults', function () {
                if ($scope.saveResults.success) {
                    //great! so remove those from the grid; no sense reloading

                    //console.log("Ok - let's delete from the activities array. Starting with: " + $scope.activities.length);

                    //make an array of the ActivityIds to remove from our grid...
                    var SelectedActivityIds = [];
                    var activitiesProcessed = 0;
                    var activitiesToProcess = $scope.activities.length;

                    $scope.agGridOptions.selectedItems.forEach(function (item) {
                        SelectedActivityIds.push(item.Id);
                    });

                    //console.log("Ok these are the ones we'll remove from the grid");
                    console.dir(SelectedActivityIds);

                    $scope.allActivities = []; //this will be our activities to keep (skipping the ones to delete) 

                    //spin through allActivities and remove the selected activities from our activities
                    // remember: we can't splice items out of arrays we are foreaching or else unexpected results occur.
                    $scope.activities.forEach(function (activity, index) {

                        //////console.log(" -- checking == " + activity.Id + " at index: " + index);

                        if (!SelectedActivityIds.containsInt(activity.Id)) {
                            $scope.allActivities.push(activity);

                        } else {

                            //console.log("Ok we are deleting this one...");
                            console.dir(activity);
                            //$scope.activities.splice(index, 1); //note: we remove this from activities not allActivities
                        } 

                        activitiesProcessed++;
                        if (activitiesProcessed === activitiesToProcess) //wait for all the foreaches to come back...
                        {
                            //all done, so now refresh the view.
                            //console.log("done! refreshing view");
                            $scope.agGridOptions.api.deselectAll();  //clear selection
                            //console.log("after selection");
                            $scope.activities = $scope.allActivities; //update our activities with the new set of activities
                            //console.log("ready for grid update");
                            $scope.agGridOptions.api.setRowData($scope.activities); //update the grid.
                            //console.log("all done.");
                            deleteWatcher();
                        }
                    });
                }
                else if ($scope.saveResults.failure) {
                    deleteWatcher();
                    //console.log("delete failure!");
                }
            }, true);
        };

        $scope.openDataEntry = function (p) { $location.path("/dataentry/" + $scope.dataset.Id); };

        //Ok -- this is pretty ugly and non-angular-ish.  This is because in the context of a dijit I'm not sure
        //  how to get angular to process any content here... so we'll have to compose the content " by hand "
        $scope.getInfoContent = function (graphic) {
            var location = getByField($scope.locationsArray, graphic.attributes.OBJECTID, "SdeObjectId");
            $scope.map.infoWindow.setTitle(location.Label);

            var html = "";

            if (location.Description)
                html += "<i>" + location.Description + "</i><br/><br/>";

            html += "<b>Type: </b>" + location.LocationType.Name;

            if (location.Elevation)
                html += "<br/><b>Elevation: </b>" + location.Elevation;
            if (location.GPSEasting)
                html += "<br/><b>Easting: </b>" + location.GPSEasting;
            if (location.GPSNorthing)
                html += "<br/><b>Northing: </b>" + location.GPSNorthing;
            if (location.Latitude)
                html += "<br/><b>Latitude: </b>" + location.Latitude;
            if (location.Longitude)
                html += "<br/><b>Longitude: </b>" + location.Longitude;
            if (location.OtherAgencyId)
                html += "<br/><b>Other Agency Id: </b>" + location.OtherAgencyId;
            if (location.WettedWidth)
                html += "<br/><b>Wetted Width: </b>" + location.WettedWidth;
            if (location.WettedDepth)
                html += "<br/><b>Wetted Depth: </b>" + location.WettedDepth;
            if (location.RiverMile)
                html += "<br/><b>River Mile: </b>" + location.RiverMile;
            if (location.ImageLink)
                html += "<br/><br/><a href='" + location.ImageLink + "' target='_blank'><img width='200px' src='" + location.ImageLink + "'/></a>"

            if ($scope.Profile.isProjectOwner($scope.project) || $scope.Profile.isProjectEditor($scope.project))
                html += "<br/><div class='right'><a href='#/datasetimport/" + $scope.dataset.Id + "?LocationId=" + location.Id + "'>Import data</a></div>";

            return html;

        };

    }

   
];
define("core/datasets/components/dataset-activities-list/dataset-activities-list", function(){});

/*
* Dataset Details is the page you get when you click the "Metadata" button on the dataset activities view page.
*  It displays all of the fields for the dataset. You can also edit those details in this view.
*    e.g.:  http://localhost/cdms/index.html#/dataset-details/1004
*/

var dataset_detail = ['$scope', '$routeParams', 'DatasetService', 'ProjectService', 'CommonService', '$location', '$filter',
    function (scope, routeParams, DatasetService,  ProjectService, CommonService, $location, $filter){
        scope.dataset = DatasetService.getDataset(routeParams.Id);

        //common fields we show for all datasets
        scope.metadataList = {};

        //select lists
        scope.CellOptions = {};
        
        //if we only want to show in edit mode, use some if statement here...
        scope.metadataProperties = CommonService.getMetadataProperties(METADATA_ENTITY_DATASETTYPEID); //sets scope.metadataProperties

        scope.$watch('project.OwnerId', function() {
            if(scope.project && scope.project.OwnerId)
            {
                scope.metadataList.Owner = {
                            field: 'Owner',
                            value: scope.project.Owner.Organization.Name + " / "+ scope.project.Owner.Department.Name + " / " +  scope.project.Owner.Fullname ,
                            locked: true
                    };

            }
        });

        scope.$watch('dataset.ProjectId', function(){
            if(scope.dataset && scope.dataset.ProjectId)
            {
                scope.project = ProjectService.getProject(scope.dataset.ProjectId);

                //prepopulate the dataset fields that are included in the dataset's details (not strictly "metadata" -- but interfaced the same way)
                scope.metadataList = angular.extend(scope.metadataList, {
                    Name: {
                            field: 'Name',
                            value: scope.dataset.Name,
                            controlType: 'text',
                   	},
                    Description: {
                            field: 'Description',
                            value: scope.dataset.Description,
                            controlType: 'text',
                    },
                    Dataset: {
                            field: 'Dataset',
                            value: scope.dataset.Datastore.Name,
                            locked: true
                    },
                    Created: {
                            field: 'Created',
                            value: $filter('date')(scope.dataset.CreateDateTime, "MM/dd/yyyy") ,
                            locked: true
                    }
	            });

				//add in the metadata that came with this dataset
                angular.forEach(scope.dataset.Metadata, function(value, key){
                    try{
                    		var property = CommonService.getMetadataProperty(value.MetadataPropertyId);

							populateMetadataDropdowns(scope,property); //setup any dropdown

                        	scope.metadataList[property.Name] =
                        	{
	                            field: property.Name,
	                            propertyId: property.Id,
	                            controlType: property.ControlType,
	                            value: value.Values,
	                            options: scope.CellOptions[property.Id+"_Options"]
                        	};

                        	


                    }catch(e)
                    {
                        console.dir(e);
                    }
                });

            }
        });

		//these are all the metadata properties configured for all datasets
		// -- add in the ones that aren't already being used in this particular dataset.
		scope.metadataProperties.promise.then(function(list){
            scope.metadataProperties = list;
    	    angular.forEach(scope.metadataProperties, function(property, key){
		    	//if it isn't already there, add it as an available option
		   		if(!(property.Name in scope.metadataList))
		   		{
		   			populateMetadataDropdowns(scope,property); //setup the dropdown

					scope.metadataList[property.Name] =
                	{
                        field: property.Name,
                        propertyId: property.Id,
                        controlType: property.ControlType,
                        value: "",
                        options: scope.CellOptions[property.Id+"_Options"]
                	};
                	
		   		}
		    });
		});

		
        scope.saveResults = {};

        scope.save = function(){
            var metadata = [];
            angular.forEach(scope.metadataList, function(item, key){
                metadata.push({ MetadataPropertyId: item.propertyId, Values: item.value});
            });

            console.log("metadatalist - ");
            console.dir(scope.metadataList);
            console.log("what we're sending - ");
            console.dir(metadata);

            var promise = CommonService.saveDatasetMetadata(scope.dataset.Id, metadata, scope.saveResults);

            promise.$promise.then(function(){
                DatasetService.clearDataset();
                setTimeout(function(){
                    console.log("boom ready to move on.");
                    scope.dataset = DatasetService.getDataset(routeParams.Id);
                    $location.path("/dataset-details/"+routeParams.Id);    
                    console.log("moving on.");
                },250);
                //$location.path("/dataset-details/"+routeParams.Id);    
            });
                
        };

        scope.cancel = function(){
            $location.path("/dataset-details/"+scope.dataset.Id);
        };

        scope.close = function(){
            $location.path("/activities/"+scope.dataset.Id);   
        };

        scope.edit = function(){
  			$location.path("/dataset-edit/"+scope.dataset.Id);   
        };

		
	}
];
define("core/datasets/components/dataset-detail/dataset-detail", function(){});

/**
*  This component provides the data edit page (form + grid).
*  http://localhost/cdms/index.html#/edit/1004
*/


//Fieldsheet / form version of the dataentry page
//was "DataEditCtrl" from DataEditControllers
var dataset_edit_form = ['$scope', '$q', '$sce', '$routeParams', 'DatasetService', 'SubprojectService', 'ProjectService', 'CommonService', '$modal', '$location', '$rootScope',
    'ActivityParser', 'DataSheet', 'FileUploadService', '$upload',
    function ($scope, $q, $sce, $routeParams, DatasetService, SubprojectService, ProjectService, CommonService, $modal, $location, $rootScope,
        ActivityParser, DataSheet, UploadService, $upload) {

        initEdit(); // stop backspace from ditching in the wrong place.

        $scope.userId = $rootScope.Profile.Id;
        $scope.fields = { header: [], detail: [], relation: [] };

        //fields to support uploads
        $scope.filesToUpload = {};
        $scope.file_row = {};
        $scope.file_field = {};

        $scope.errors = { heading: [] };

        $scope.cellInputEditableTemplate = '<input ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" />';
        $scope.cellSelectEditableTemplate = '<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'QAStatusId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in RowQAStatuses"/>';

        $scope.datasheetColDefs = [];

        $scope.datasetId = null;

        $scope.option = { enableMultiselect: false };

        $scope.dataset_activities = DatasetService.getActivityData($routeParams.Id);

        $scope.dataSheetDataset = [];
        $scope.row = { ActivityQAStatus: {} }; //header field values get attached here by dbcolumnname

        $scope.fishermenList = null;
        //$scope.fishermenList = ProjectService.getFishermen();

        $scope.subprojectList = null;

        $scope.sortedLocations = [];
        $scope.datasetLocationType = 0;
        $scope.datasetLocations = [[]];
        $scope.primaryDatasetLocation = 0;
        $scope.selectedItems = [];

        $scope.gridOptionsFilter = {};

        $scope.dataEntryPage = false;
        $scope.showDetails = true;

        $scope.foundDuplicate = false;

        //datasheet grid
        $scope.gridDatasheetOptions = {
            data: 'dataSheetDataset',
            enableCellSelection: true,
            enableRowSelection: true,
            multiSelect: true,
            enableCellEdit: true,
            columnDefs: 'datasheetColDefs',
            enableColumnResize: true,
            selectedItems: $scope.selectedItems,
            filterOptions: $scope.gridOptionsFilter,

        };

        console.log("In dataedit-controllers...");

        //config the fields for the datasheet - include mandatory location and activityDate fields
        DataSheet.initScope($scope);
        console.log("Completed scope init...");

        var fishermenWatcher =
            $scope.$watch('fishermenList.length', function () {
                if ((typeof $scope.fishermenList !== 'undefined') && ($scope.fishermenList !== null)) {
                    console.log("Inside fishermenList watch...");
                    console.log("$scope.fishermenList.length = " + $scope.fishermenList.length)

                    if ($scope.fishermenList.length > 0) {
                        $scope.fishermenOptions = $rootScope.fishermenOptions = makeObjects($scope.fishermenList, 'Id', 'FullName');
                        console.log("$scope.fishermenOptions is next...");
                        console.dir($scope.fishermenOptions);
                    }
                }

            });

        $scope.$watch('subprojectList.length', function () {
            if ($scope.subprojectList === null)
                return;
            else if ($scope.subprojectList.length === 0)
                return;

            console.log("Inside watch subprojectList.length...");

            if ($scope.subprojectType === "Habitat") {
                console.log("$scope.subprojectList is next...");
                console.dir($scope.subprojectList);
                console.log("$scope.project.Locations is next...");
                console.dir($scope.project.Locations);

                angular.forEach($scope.subprojectList, function (subproject) {
                    angular.forEach($scope.project.Locations, function (location) {
                        //console.log("location.LocationTypeId = " +  location.LocationTypeId + ", subproject.LocationId = " + subproject.LocationId + ", location.Id = " + location.Id);
                        if (subproject.LocationId === location.Id) {
                            console.log("Found a subproject location")
                            console.dir(location);
                            $scope.datasetLocations.push([location.Id, location.Label]);
                        }
                    });
                });
            }

            console.log("datasetLocations (with subprojects) is next...");
            console.dir($scope.datasetLocations);

            $scope.finishLocationProcessing();
        });

        $scope.$watch('dataset_activities.Dataset.Id', function () {
            if (!$scope.dataset_activities.Dataset)
                return;

            console.log("Inside watcher dataset_activities.Dataset.Id...");
            console.log("$scope.dataset_activities is next...");
            console.dir($scope.dataset_activities);

            $scope.dataset = $scope.dataset_activities.Dataset;
            console.log("$scope.dataset is next...");
            console.dir($scope.dataset);

            $rootScope.datasetId = $scope.datasetId = $scope.dataset.Id;
            console.log("$rootScope.datasetId = " + $rootScope.datasetId);
            $scope.dataset.Files = DatasetService.getDatasetFiles($scope.dataset.Id);

            $scope.DatastoreTablePrefix = $rootScope.DatastoreTablePrefix = $scope.dataset.Datastore.TablePrefix;
            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            $scope.datasheetColDefs = DataSheet.getColDefs($scope.DatastoreTablePrefix, "form");  // Pass the TablePrefix (name of the dataset), because it will never change.

            DatasetService.configureDataset($scope.dataset); //bump to load config since we are pulling it directly out of the activities

            $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
            $scope.QAStatusOptions = $rootScope.QAStatusOptions = makeObjects($scope.dataset.QAStatuses, 'Id', 'Name');

            //set the header field values
            console.log("Setting header fields...");
            $scope.row['ActivityId'] = $scope.dataset_activities.Header.ActivityId;
            $scope.row['activityDate'] = $scope.dataset_activities.Header.Activity.ActivityDate;
            $scope.row['locationId'] = "" + $scope.dataset_activities.Header.Activity.LocationId; //note the conversion of this to a string!
            $scope.row['InstrumentId'] = $scope.dataset_activities.Header.Activity.InstrumentId;
            $scope.row['AccuracyCheckId'] = $scope.dataset_activities.Header.Activity.AccuracyCheckId;
            $scope.row['PostAccuracyCheckId'] = $scope.dataset_activities.Header.Activity.PostAccuracyCheckId;

            if (($scope.DatastoreTablePrefix === "CreelSurvey") && ($scope.dataset_activities.Header.FieldSheetFile))
                $scope.row['FieldSheetFile'] = $scope.dataset_activities.Header.FieldSheetFile;
            else if (($scope.DatastoreTablePrefix === "ScrewTrap") && ($scope.dataset_activities.Header.FileTitle))
                $scope.row['FieldSheetFile'] = $scope.dataset_activities.Header.FileTitle;
            else if ($scope.dataset_activities.Header.FieldSheetFile)
                $scope.row['FieldSheetFile'] = $scope.dataset_activities.Header.FieldSheetFile;

            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                console.log("Extracting times from strings...");
                var strTimeStart = $scope.dataset_activities.Header.TimeStart;
                var strTimeEnd = $scope.dataset_activities.Header.TimeEnd;
                var intTLoc = strTimeStart.indexOf("T");
                // Start just past the "T" in the string, and get the time portion (the next 5 characters).
                strTimeStart = strTimeStart.substr(intTLoc + 1, 5);
                $scope.dataset_activities.Header.TimeStart = strTimeStart;

                strTimeEnd = strTimeEnd.substr(intTLoc + 1, 5);
                $scope.dataset_activities.Header.TimeEnd = strTimeEnd;

				/*for (var i = 0; i < $scope.dataset_activities.Details.length; i++)
				{
					console.log("$scope.dataset_activities.Details[i] is next...");
					console.dir($scope.dataset_activities.Details[i]);
					var strInterviewTime = $scope.dataset_activities.Details[i].InterviewTime;
					console.log("strInterviewTime = " + strInterviewTime);
					intTLoc = strInterviewTime.indexOf("T");
					console.log("intLoc = " + intTLoc);
					strInterviewTime = strInterviewTime.substr(intTLoc + 1, 5);
					console.log("strInterviewTime = " + strInterviewTime);
					$scope.dataset_activities.Details[i].InterviewTime = strInterviewTime
				}
				*/
            }
            console.log("$scope.row is next...");
            console.dir($scope.row);

            if ($scope.dataset_activities.Header.Activity.ActivityQAStatus) {
                $scope.row.ActivityQAStatus = {
                    QAStatusId: "" + $scope.dataset_activities.Header.Activity.ActivityQAStatus.QAStatusId,
                    Comments: $scope.dataset_activities.Header.Activity.ActivityQAStatus.Comments,
                }
            }

            if ($scope.dataset_activities.Header.Activity.Timezone)
                $scope.row.Timezone = getByField($scope.SystemTimezones, angular.fromJson($scope.dataset_activities.Header.Activity.Timezone).Name, "Name"); //set default timezone

            $scope.RowQAStatuses = $rootScope.RowQAStatuses = makeObjects($scope.dataset.RowQAStatuses, 'Id', 'Name');  //Row qa status ids

            //if($scope.dataset.RowQAStatuses.length > 1)
            if (($scope.dataset.Datastore.TablePrefix === "WaterTemp") && ($scope.dataset.RowQAStatuses.length > 1)) {
                $scope.datasheetColDefs.push(
                    {
                        field: "QAStatusId", //QARowStatus
                        displayName: "QA",
                        minWidth: 50, maxWidth: 180,
                        enableCellEditOnFocus: true,
                        editableCellTemplate: $scope.cellSelectEditableTemplate,
                        cellFilter: 'RowQAStatusFilter'
                    });
            }

            if ($scope.dataset.Config) {
                var filteredColDefs = [];

                angular.forEach($scope.datasheetColDefs, function (coldef) {
                    console.log("coldef is next...");
                    console.dir(coldef);
                    if ($scope.dataset.Config.DataEntryPage &&
                        !$scope.dataset.Config.DataEntryPage.HiddenFields.contains(coldef.field)) {
                        filteredColDefs.push(coldef);
                    }
                });

                $scope.datasheetColDefs = $scope.colDefs = filteredColDefs;
            }

            //set the detail (grid) values.
            $scope.dataSheetDataset = $scope.dataset_activities.Details;
            $scope.gridFields = [];

            // If we are on the Creel Survey dataset, we need to take the total number of minutes,
            // and put it into HH:MM format, before putting the entry on the form.
            if ($scope.DatastoreTablePrefix === "CreelSurvey") // Creel Survey dataset				
            {
                var detailsLength = $scope.dataSheetDataset.length;
                for (var i = 0; i < detailsLength; i++) {
                    var NumMinutes = parseInt($scope.dataSheetDataset[i].TotalTimeFished);
                    var theHours = parseInt(NumMinutes / 60, 10);
                    var theMinutes = NumMinutes - (theHours * 60);

                    if (theHours < 10)
                        var strHours = "0" + theHours;
                    else
                        var strHours = "" + theHours;

                    if (theMinutes < 10)
                        var strMinutes = "0" + theMinutes;
                    else
                        var strMinutes = "" + theMinutes;

                    $scope.dataSheetDataset[i].TotalTimeFished = strHours + ":" + strMinutes;
                    //console.log("TotalTimeFished is now = " + $scope.dataSheetDataset[i].TotalTimeFished);

                    //console.log("$scope.dataSheetDataset[i] is next...");
                    //console.dir($scope.dataSheetDataset[i]);
                    var strInterviewTime = $scope.dataSheetDataset[i].InterviewTime;
                    //console.log("strInterviewTime (before extraction) = " + strInterviewTime);
                    intTLoc = strInterviewTime.indexOf("T");
                    //console.log("intLoc = " + intTLoc);
                    strInterviewTime = strInterviewTime.substr(intTLoc + 1, 5);
                    //console.log("strInterviewTime (after extraction) = " + strInterviewTime);
                    $scope.dataSheetDataset[i].InterviewTime = strInterviewTime
                }
            }

            //setup our header/detail field structure
            angular.forEach($scope.dataset.Fields.sort(orderByIndex), function (field) {
                parseField(field, $scope);
                if (field.FieldRoleId == FIELD_ROLE_HEADER) {
                    $scope.fields.header.push(field);
                    //also copy the value to row
                    if (field.ControlType == "multiselect") {
                        //console.dir($scope.dataset_activities.Header[field.DbColumnName]);
                        $scope.row[field.DbColumnName] = angular.fromJson($scope.dataset_activities.Header[field.DbColumnName]);
                    }
                    else
                        $scope.row[field.DbColumnName] = $scope.dataset_activities.Header[field.DbColumnName];
                }
                else if (field.FieldRoleId == FIELD_ROLE_DETAIL) {
                    $scope.fields.detail.push(field);
                    $scope.datasheetColDefs.push(makeFieldColDef(field, $scope));
                }

                //keep a list of grid fields (relations) for later loading
                if (field.ControlType == "grid")
                    $scope.gridFields.push(field);
            });

            $scope.recalculateGridWidth($scope.fields.detail.length);
            $scope.validateGrid($scope);

            console.log("$scope at end of watch dataset_activities is next...");
            console.dir($scope.dataset_activities);
        });

        //update our location options as soon as our project is loaded.
        $scope.$watch('project.Name', function () {
            //if (!$scope.project.Name) return;
			if ((typeof $scope.project === 'undefined') || ($scope.project === null))  
				return;
			else if ((typeof $scope.project.Name === 'undefined') || ($scope.project.Name === null))  
				return;  
			else if ((typeof $scope.project.Id === 'undefined') || ($scope.project.Id === null))  
				return; 

            console.log("Inside watcher, project.Name...");
            //console.log("$scope is next...");
            //console.dir($scope);
            console.log("$scope.project is next...");
            console.dir($scope.project);

            $rootScope.projectId = $scope.projectId = $scope.project.Id;
            $scope.project.Files = null;
            $scope.project.Files = ProjectService.getProjectFiles($scope.project.Id);

            //$scope.subprojectType = ProjectService.getProjectType($scope.project.Id);
            console.log("$scope.subprojectType = " + $scope.subprojectType);
            SubprojectService.setServiceSubprojectType($scope.subprojectType);

            //if ($scope.subprojectType === "Harvest")
            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                console.log("Loading Harvest...");
                $scope.ShowFishermen = true;
                $scope.theFishermen = ProjectService.getProjectFishermen($scope.project.Id);
                $scope.fishermenList = ProjectService.getFishermen();
            }
            //else if ($scope.subprojectType === "CRPP")
            else if ($scope.DatastoreTablePrefix === "CrppContracts") {
                console.log("Loading CRPP subprojects...");
                $scope.ShowSubproject = true;
                $scope.subprojectList = SubprojectService.getSubprojects();
            }
            //else if ($scope.subprojectType === "Habitat")
            //else if ($scope.DatastoreTablePrefix === "Metrics")
            else if (($scope.DatastoreTablePrefix === "Metrics") ||
                ($scope.DatastoreTablePrefix === "Benthic") ||
                ($scope.DatastoreTablePrefix === "Drift")
            ) {
                console.log("Loading Habitat subprojects...");

                $scope.subprojectList = SubprojectService.getProjectSubprojects($scope.project.Id);
                var watcher = $scope.$watch('subprojectList.length', function () {
                    console.log("Inside watcher for subprojectList.length...");
                    // We wait until subprojects gets loaded and then turn this watch off.
                    if ($scope.subprojectList === null) {
                        console.log("$scope.subprojectList is null");
                        return;
                    }
                    else if (typeof $scope.subprojectList.length === 'undefined') {
                        console.log("$scope.subprojectList.length is undefined.");
                        return;
                    }
                    else if ($scope.subprojectList.length === 0) {
                        console.log("$scope.subprojectList.length is 0");
                        return;
                    }
                    console.log("$scope.subprojectList.length = " + $scope.subprojectList.length);
                    console.log("subprojects is loaded...");
                    console.dir($scope.subprojectList);

                    watcher();
                });

            }

            //check authorization -- need to have project loaded before we can check project-level auth
            if (!$rootScope.Profile.isProjectOwner($scope.project) && !$rootScope.Profile.isProjectEditor($scope.project)) {
                $location.path("/unauthorized");
            }

            $scope.datasetLocationType = CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);
            console.log("LocationType = " + $scope.datasetLocationType);

            //for (var i = 0; i < $scope.project.Locations.length; i++ )
            //{
            //console.log($scope.project.Locations[i].Id + "  " + $scope.project.Locations[i].Label);
            //if ($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType)
            //	if (($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) || ($scope.project.Locations[i].LocationTypeId === LOCATION_TYPE_Hab))
            //	{
            //console.log("Found one");
            //		$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
            //console.log("datasetLocations length = " + $scope.datasetLocations.length);
            //locInd++;

            //		if ($scope.DatastoreTablePrefix === "FishScales")
            //		{
            //			console.log("Setting $scope.primaryDatasetLocation...");
            //			$scope.primaryDatasetLocation = $scope.project.Locations[i].Id;
            //		}
            //	}
            //}
            if ($scope.project.Locations) {
                for (var i = 0; i < $scope.project.Locations.length; i++) {
                    //console.log("projectLocations Index = " + $scope.project.Locations[i].Label);
                    //console.log($scope.project.Locations[i].LocationTypeId + "  " + $scope.datasetLocationType); //$scope.project.Locations[i]);
                    if (($scope.DatastoreTablePrefix === "Metrics") ||
                        ($scope.DatastoreTablePrefix === "Benthic") ||
                        ($scope.DatastoreTablePrefix === "Drift")
                    ) {
                        if (($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) || ($scope.project.Locations[i].LocationTypeId === LOCATION_TYPE_Hab)) {
                            //console.log("Found Habitat-related location");
                            $scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
                        }
                    }
                    else {
                        if ($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) {
                            //console.log("Found non-Habitat-related location");
                            $scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
                        }

                        if ($scope.DatastoreTablePrefix === "FishScales") {
                            console.log("Setting $scope.primaryDatasetLocation...");
                            $scope.primaryDatasetLocation = $scope.project.Locations[i].Id;
                        }
                    }

                    //{
                    //	//console.log("Found one");
                    //	$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
                    //	//console.log("datasetLocations length = " + $scope.datasetLocations.length);
                    //	//locInd++;
                    //}
                }
                console.log("datasetLocations is next...");
                console.dir($scope.datasetLocations);
                $scope.finishLocationProcessing();
            }

			/*
			// When we built the array, it started adding at location 1 for some reason, skipping 0.
			// Therefore, row 0 is blank.  The simple solution is to just delete row 0.
			//$scope.datasetLocations.shift();
			
			// During the original development, the blank row was always at row 0.  Months later, I noticed that 
			// the blank row was not at row 0.  Therefore, it needed a different solution.
			var index = 0;
			angular.forEach($scope.datasetLocations, function(dsLoc)
			{
				if (dsLoc.length === 0)
				{
					$scope.datasetLocations.splice(index, 1);
				}
				
				index++;
			});

			console.log("datasetLocations after splice is next...");
			console.dir($scope.datasetLocations);

			$scope.datasetLocations.sort(order2dArrayByAlpha);
			console.log("datasetLocations sorted...");
			console.dir($scope.datasetLocations);

			// Convert our 2D array into an array of objects.
			for (var i = 0; i < $scope.datasetLocations.length; i++)
			{
				$scope.sortedLocations.push({Id: $scope.datasetLocations[i][0], Label: $scope.datasetLocations[i][1]});
			}
			$scope.datasetLocations = [[]]; // Clean up
			
			
			// Convert our array of objects into a list of objects, and put it in the select box.
			$scope.locationOptions = $rootScope.locationOptions = makeObjects($scope.sortedLocations, 'Id','Label') ;

			console.log("locationOptions is next...");
			console.dir($scope.locationOptions);			
			
			// Original code.
			//$scope.locationOptions = $rootScope.locationOptions = makeObjects(getUnMatchingByField($scope.project.Locations,PRIMARY_PROJECT_LOCATION_TYPEID,"LocationTypeId"), 'Id','Label') ;  // Original code
			$scope.selectInstrument();
			*/
            console.log("$scope at end of watch project.Name is next...");
            //console.dir($scope);
        });

        $scope.$watch('dataSheetDataset', function () {
            if (!$scope.dataSheetDataset)
                return;

            //kick off the loading of relation data (we do this for UI performance rather than returning with the data...)
            angular.forEach($scope.dataSheetDataset, function (datarow) {
                angular.forEach($scope.gridFields, function (gridfield) {
                    datarow[gridfield.DbColumnName] = DatasetService.getRelationData(gridfield.FieldId, datarow.ActivityId, datarow.RowId);
                    console.log("kicking off loading of " + datarow.ActivityId + ' ' + datarow.RowId);
                })
            })

        });

        $scope.finishLocationProcessing = function () {
            console.log("Inside $scope.finishLocationProcessing...");
            // When we built the array, it started adding at location 1 for some reason, skipping 0.
            // Therefore, row 0 is blank.  The simple solution is to just delete row 0.
            //$scope.datasetLocations.shift();

            // During the original development, the blank row was always at row 0.  Months later, I noticed that 
            // the blank row was not at row 0.  Therefore, it needed a different solution.
            var index = 0;
            angular.forEach($scope.datasetLocations, function (dsLoc) {
                if (dsLoc.length === 0) {
                    $scope.datasetLocations.splice(index, 1);
                }

                index++;
            });

            console.log("datasetLocations after splice is next...");
            console.dir($scope.datasetLocations);

            //$scope.datasetLocations.sort(order2dArrayByAlpha);
            //console.log("datasetLocations sorted...");
            //console.dir($scope.datasetLocations);

            // Convert our 2D array into an array of objects.
            for (var i = 0; i < $scope.datasetLocations.length; i++) {
                $scope.sortedLocations.push({ Id: $scope.datasetLocations[i][0], Label: $scope.datasetLocations[i][1] });
            }
            $scope.datasetLocations = [[]]; // Clean up


            // Convert our array of objects into a list of objects, and put it in the select box.
            $scope.locationOptions = $rootScope.locationOptions = makeObjects($scope.sortedLocations, 'Id', 'Label');

            console.log("locationOptions is next...");
            console.dir($scope.locationOptions);

            //if there is only one location, just set it to that location
            if (array_count($scope.locationOptions) == 1) {
                //there will only be one.
                angular.forEach(Object.keys($scope.locationOptions), function (key) {
                    console.log(key);
                    $scope.row['locationId'] = key;
                });

            }
        };

        $scope.clearSelections = function () {
            $scope.gridDatasheetOptions.selectAll(false);
        };

        $scope.setSelectedBulkQAStatus = function (rowQAId) {
            angular.forEach($scope.gridDatasheetOptions.selectedItems, function (item, key) {
                //console.dir(item);
                item.QAStatusId = rowQAId;

                //mark the row as updated so it will get saved.
                if ($scope.updatedRows.indexOf(item.Id) == -1) {
                    $scope.updatedRows.push(item.Id);
                }
            });

            $scope.clearSelections();
        };

        $scope.openBulkQAChange = function () {

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-rowqaupdate.html',
                controller: 'ModalBulkRowQAChangeCtrl',
                scope: $scope, //very important to pass the scope along...

            });

        };

        $scope.createInstrument = function () {
            $scope.viewInstrument = null;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-instrument.html',
                controller: 'ModalCreateInstrumentCtrl',
                scope: $scope, //very important to pass the scope along...
            });
        };

        $scope.reloadProject = function () {
            //reload project instruments -- this will reload the instruments, too
            ProjectService.clearProject();
            $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
            var watcher = $scope.$watch('project.Id', function () {
                $scope.selectInstrument();
                watcher();
            });

        };

        $scope.openAccuracyCheckModal = function () {
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-new-accuracycheck.html',
                controller: 'ModalQuickAddAccuracyCheckCtrl',
                scope: $scope, //very important to pass the scope along...
            });
        };

        $scope.getDataGrade = function (check) { return getDataGrade(check) }; //alias from service

        $scope.selectInstrument = function () {
            $scope.viewInstrument = getByField($scope.project.Instruments, $scope.row.InstrumentId, "Id");
            $scope.selectAccuracyCheck();
        };

        $scope.selectAccuracyCheck = function () {
            if ($scope.row.AccuracyCheckId)
                $scope.row.AccuracyCheck = getByField($scope.viewInstrument.AccuracyChecks, $scope.row.AccuracyCheckId, "Id");
        };

        $scope.cancel = function () {
            if ($scope.dataChanged) {
                if (!confirm("Looks like you've made changes.  Are you sure you want to leave this page?"))
                    return;
            }

            $location.path("/" + $scope.dataset.activitiesRoute + "/" + $scope.dataset.Id);
        };

        //adds row to datasheet grid
        $scope.addNewRow = function () {
            var row = makeNewRow($scope.datasheetColDefs);
            row.QAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
        };

        // For Creel Survey only. 
        $scope.addSection = function () {
            $scope.invalidOperationTitle = "Add Section is an Invalid Operation";
            $scope.invalidOperationMessage = "The Add Section button can only be used on a Data Entry page.";
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-invalid-operation.html',
                controller: 'ModalInvalidOperation',
                scope: $scope, //very important to pass the scope along...
            });
        }

        // For Creel Survey only. 
        $scope.addNewInterview = function () {
            var row = makeNewRow($scope.datasheetColDefs);
            row.QAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
            $scope.onRow = row;

            for (var i = 0; i < $scope.datasheetColDefs.length; i++) {
                if (($scope.datasheetColDefs[i].field === "InterviewTime") ||
                    ($scope.datasheetColDefs[i].field === "GPSEasting") ||
                    ($scope.datasheetColDefs[i].field === "GPSNorthing") ||
                    ($scope.datasheetColDefs[i].field === "CarcassComments") ||
                    ($scope.datasheetColDefs[i].field === "TotalTimeFished")
                ) {
                    $scope.datasheetColDefs[i].enableCellEdit = true;
                    //$scope.datasheetColDefs[i].cellEditableCondition = true;
                    //$scope.disabledFont();
                }

            }
        };

        // For Creel Survey only. 
        //Open form to add a fisherman to the database
        $scope.addFisherman = function () {
            $scope.viewFisherman = null;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-fisherman.html',
                controller: 'ModalCreateFishermanCtrl',
                scope: $scope, //very important to pass the scope along...
            });
        };

        // For Creel Survey only.
        // Adds another row to datasheet grid and copies common items (surveyor, date, etc.)
        $scope.addAnotherFish = function () {
            console.log("Inside addAnotherFish...");
            console.log("$scope before copy is next...");
            //console.dir($scope);

            var listLength = $scope.dataSheetDataset.length;
            var theFisherman = $scope.dataSheetDataset[listLength - 1].FishermanId
            var interviewTime = $scope.dataSheetDataset[listLength - 1].InterviewTime;
            var gpsEasting = $scope.dataSheetDataset[listLength - 1].GPSEasting;
            var gpsNorthing = $scope.dataSheetDataset[listLength - 1].GPSNorthing;
            var carcassComments = $scope.dataSheetDataset[listLength - 1].CarcassComments;
            var totalTimeFished = $scope.dataSheetDataset[listLength - 1].TotalTimeFished;
            var numberFishCaught = $scope.dataSheetDataset[listLength - 1].NumberFishCaught;
            var qaStatusId = $scope.dataSheetDataset[listLength - 1].QAStatusId;

            //var x = 0;
            //if (x !== 0)
            //{
            var row = makeNewRow($scope.datasheetColDefs);
            //row.QAStatusId = $scope.dataset.DefaultActivityQAStatusId;
            //row.RowQAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
            $scope.onRow = row;

            listLength = $scope.dataSheetDataset.length;
            $scope.dataSheetDataset[listLength - 1].FishermanId = theFisherman;
            $scope.dataSheetDataset[listLength - 1].InterviewTime = interviewTime;
            $scope.dataSheetDataset[listLength - 1].GPSEasting = gpsEasting;
            $scope.dataSheetDataset[listLength - 1].GPSNorthing = gpsNorthing;
            $scope.dataSheetDataset[listLength - 1].CarcassComments = carcassComments;
            $scope.dataSheetDataset[listLength - 1].TotalTimeFished = totalTimeFished;
            $scope.dataSheetDataset[listLength - 1].NumberFishCaught = numberFishCaught;
            $scope.dataSheetDataset[listLength - 1].QAStatusId = qaStatusId;

            for (var i = 0; i < $scope.datasheetColDefs.length; i++) {
                if (($scope.datasheetColDefs[i].field === "InterviewTime") ||
                    ($scope.datasheetColDefs[i].field === "GPSEasting") ||
                    ($scope.datasheetColDefs[i].field === "GPSNorthing") ||
                    ($scope.datasheetColDefs[i].field === "CarcassComments") ||
                    ($scope.datasheetColDefs[i].field === "TotalTimeFished")
                ) {
                    $scope.datasheetColDefs[i].enableCellEdit = false;
                    //$scope.datasheetColDefs[i].cellEditableCondition = false;
                    //$scope.disabledFont();
                }

            }

            console.log("$scope after copy is next...");
            //console.dir($scope);

            //$scope.reloadProject();

			/*
			$scope.onRow.entity.InterviewTime = interviewTime;
			$scope.onRow.entity.GPSEasting = gpsEasting;
			$scope.onRow.entity.GPSNorthing = gpsNorthing;
			$scope.onRow.entity.CarcassComments = carcassComments;
			$scope.onRow.entity.TotalTimeFished = totalTimeFished;
			$scope.onRow.entity.NumberFishCaught = numberFishCaught;
			*/
            //}
        };

        $scope.viewRelation = function (row, field_name) {
            //console.dir(row.entity);
            var field = $scope.FieldLookup[field_name];
            //console.dir(field);

            $scope.openRelationEditGridModal(row.entity, field);
        }


        $scope.openRelationEditGridModal = function (row, field) {
            $scope.relationgrid_row = row;
            $scope.relationgrid_field = field;
            $scope.isEditable = true;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/datasets/components/dataset-relationgrid/templates/relationgrid-edit-modal.html',
                controller: 'RelationGridModalCtrl',
                scope: $scope,
            });
        };


        /* -- these functions are for uploading - */
        $scope.openFileModal = function (row, field) {
            console.log("Inside DataEditCtrl, openFileModal...");
            //console.log("row is next...");
            //console.dir(row);
            //console.dir(field);
            $scope.file_row = row;
            $scope.file_field = field;
            $rootScope.FieldSheetFile = "";

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/file/templates/modal-file.html',
                controller: 'FileModalCtrl',
                scope: $scope, //scope to make a child of
            });
        };

        $scope.openFileAddModal = function (row, field) {
            console.log("Inside DataEditCtrl, openFileAddModal...");
            //console.log("row is next...");
            //console.dir(row);
            //console.log("field is next...");
            //console.dir(field);
            $scope.file_row = row;
            $scope.file_field = field;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/file/templates/modal-file-add.html',
                controller: 'FileAddModalCtrl',
                scope: $scope, //scope to make a child of
            });
        };

        $scope.openFileDeleteModal = function (row, field) {
            console.log("Inside DataEditCtrl, openFileDeleteModal...");
            console.log("row is next...");
            console.dir(row);
            console.log("field is next...");
            console.dir(field);
            $scope.file_row = row;
            $scope.file_field = field;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/file/templates/modal-file-delete.html',
                controller: 'FileDeleteModalCtrl',
                scope: $scope, //scope to make a child of
            });
        };

        $scope.openWaypointFileModal = function (row, field) {
            $scope.file_row = row;
            $scope.file_field = field;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/file/templates/modal-waypoint-file.html',
                controller: 'FileModalCtrl',
                scope: $scope, //scope to make a child of
            });
        };

        //field = DbColumnName
        $scope.onFileSelect = function (field, files) {
            //console.log("file selected! " + field)
            $scope.filesToUpload[field] = files;
        };

        //this function gets called when a user clicks the "Add" button in a GRID file cell
        $scope.addFiles = function (row, field_name) {
            var field = $scope.FieldLookup[field_name];

            //console.dir(row);
            //console.dir(field);
            $scope.openFileModal(row.entity, field);

            //go ahead and mark this row as being updated.
            if ($scope.updatedRows)
                $scope.updatedRows.push(row.entity.Id);

        }
        /*  -- */

        $scope.saveData = function () {
            console.log("Saving edited data!");

            $scope.errors.heading = []; //reset errors if there are any.

            if ($scope.gridHasErrors) {
                if (!confirm("There are validation errors.  Are you sure you want to save anyway?"))
                    return;
            }

            var promise = UploadService.uploadFiles($scope.filesToUpload, $scope);
            if ($scope.foundDuplicate) {
                alert("One or more of the files to upload is a duplicate!");
                return;
            }
            if ($scope.filesToUpload.FieldSheetFile) {
                for (var i = 0; i < $scope.filesToUpload.FieldSheetFile.length; i++) {
                    var file = $scope.filesToUpload.FieldSheetFile[i];
                    console.log("file is next...");
                    console.dir(file);

                    var newFileNameLength = file.name.length;
                    console.log("file name length = " + newFileNameLength);

                    console.log("file.type = " + file.type);
                    if ($scope.uploadFileType === "image") {
                        console.log("We have an image...");
                        for (var n = 0; n < $scope.project.Images.length; n++) {
                            var existingFileName = $scope.project.Images[n].Name;
                            console.log("existingFileName = " + existingFileName);
                            var existingFileNameLength = existingFileName.length;
                            if ((newFileNameLength >= existingFileNameLength) && (file.name.indexOf(existingFileName) > -1)) {
                                $scope.foundDuplicate = true;
                                console.log(file.name + " already exists in the project file list.");
                                errors.push(file.name + " already exists in the list of project images.");
                            }
                        }
                    }
                    else {
                        console.log("We have something other than an image...");
                        for (var n = 0; n < $scope.project.Files.length; n++) {
                            var existingFileName = $scope.project.Files[n].Name;
                            console.log("existingFileName = " + existingFileName);
                            var existingFileNameLength = existingFileName.length;
                            if ((newFileNameLength >= existingFileNameLength) && (file.name.indexOf(existingFileName) > -1)) {
                                $scope.foundDuplicate = true;
                                console.log(file.name + " already exists in the project file list.");
                                errors.push(file.name + " already exists in the list of project Files.");
                            }
                        }
                    }

                    console.log("$scope.foundDuplicate = " + $scope.foundDuplicate);

                    if ($scope.foundDuplicate)
                        alert(errors);

                    // We are uploading a second time?
					/*
					else
					{
						console.log("Not a duplicate.  Uploading the file...");
						if(file.success != "Success")
						{
							$scope.upload = $upload.upload({
								url: serviceUrl + '/data/UploadProjectFile',
								method: "POST",
								// headers: {'headerKey': 'headerValue'},
								// withCredential: true,
								//data: {ProjectId: $scope.project.Id, Description: "Uploaded file " + file.Name, Title: file.Name},
								data: {ProjectId: $scope.project.Id, Description: "Uploaded file " + file.Name, Title: file.Name, DatastoreTablePrefix: $scope.DatastoreTablePrefix},
								file: file,

								}).progress(function(evt) {
									console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
								}).success(function(data, status, headers, config) {
									config.file.success = "Success";
								}).error(function(data, status, headers, config) {
									$scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
									//console.log(file.name + " was error.");
									config.file.success = "Failed";
								});		
						}
					}
					*/
                }

                // The app works without this section.
				/*
				//spin through the files that we uploaded
				angular.forEach($scope.filesToUpload, function(files, field){

					console.log("field is next...");
					console.dir(field);
					if(field == "null" || field == "")
						return;

					var local_files = [];

					//if we have files in this field, copy them in
					if($scope.file_row[field])
					{
						console.log("We already have some files.  Copying those in first.")
						var current_files = angular.fromJson($scope.file_row[field]); // This line gets stuck, or stops, or something.
						console.log("current_files is next...");
						console.dir(current_files);
						angular.forEach(current_files, function(file){
							if(file.Id) //our incoming files don't have an id, just actual files.
								local_files.push(file);		
						});
					}

					console.log("local_files is next...");
					console.dir(local_files);
					if (local_files.length > 0)
					{
						$scope.file_row[field] = angular.toJson(local_files);
						console.log("$scope.file_row[field] (new list) is next...");
						console.dir($scope.file_row[field]);
						//console.log("Ok our new list of files: "+$scope.row[field]);
					}
				});
				*/

                $scope.saveDatasheetData();
            }
            else {
                $scope.saveDatasheetData();
            }
        };

        $scope.saveDatasheetData = function () {
            console.log("Inside saveDatasheetData, $scope is next...");
            //console.dir($scope);

            var strYear = null;
            var strMonth = null;
            var intMonth = -1;
            var strDay = null;

            /**** CreeSurvey Detail Time Time calculations Start ****/
            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                // Headers = row
                // Details = onRow

                // Notes relating to date/time, on the DataEdit...

                // Regarding the ActivityDate:
                // When the data comes in from the database, and the user updates something other than the ActivityDate,
                // ActivityDate is a string.  However, if the user were to change the ActivityDate, it is then a DateTime object.

                // Regarding the month:
                // The getmonth() function is zero-based, so Jan = 0, Feb = 1, etc.
                // When we pull the month below, we are expecting Jan = 1, Feb = 2, etc.
                // To get the date format we need, we must add 1 to the month.

                // Regarding the time:
                // When we enter the date in m/d/yyyy (or mm/dd/yyyy) format, the datepicker will leave the time at 00:00.
                // However, when we enter the date in yyyy-mm-dd format, the datepicker applies our timezone offset.
                // PST = -8, PDT = -7
                // Also, the conversion is based upon the ActivityDate you enter, NOT the current time of year.
                // For example, if the user is entering information in June (Daylight time), and the actual date is Feb (Standard time),
                // JavaScript will apply the Standard-time offset.
                // For our purposes, users should be able to enter the date in either m/d/yyyy or yyyy-mm-dd format, and experience
                // the same system behavior.  Therefore, we must allow for those formats in the code.
                console.log("$scope.row.activityDate = " + $scope.row.activityDate);

                //console.log("typeof $scope.row.activityDate = " + typeof $scope.row.activityDate);
                if (typeof $scope.row.activityDate === "string") {
                    console.log("$scope.row.activityDate is a string...");
                    //strYear = $scope.row.activityDate.getFullYear().toString();
                    strYear = $scope.row.activityDate.substr(0, 4);
                    console.log("strYear = " + strYear);

                    strMonth = $scope.row.activityDate.substr(5, 2);
                    console.log("strMonth = " + strMonth);
                    if (strMonth.length < 2)
                        strMonth = "0" + strMonth;

                    strDay = $scope.row.activityDate.substr(8, 2);
                    console.log("strDay = " + strDay);
                    if (strDay.length < 2)
                        strDay = "0" + strDay;

                    tmpTime = $scope.row.TimeStart;
                    console.log("tmpTime (TimeStart) = " + tmpTime);
                    $scope.row.TimeStart = "";
                    $scope.row.TimeStart = strYear + "-" + strMonth + "-" + strDay + "T" + tmpTime + ":00.000";
                    console.log("$scope.row.TimeStart = " + $scope.row.TimeStart);

                    tmpTime = $scope.row.TimeEnd;
                    console.log("tmpTime (TimeEnd) = " + tmpTime);
                    $scope.row.TimeEnd = "";
                    $scope.row.TimeEnd = strYear + "-" + strMonth + "-" + strDay + "T" + tmpTime + ":00.000";
                    console.log("$scope.row.TimeEnd = " + $scope.row.TimeEnd);
                }
                else // $scope.row.activityDate is a DateTime Object
                {
                    console.log("$scope.row.activityDate is a DateTime...");
                    var intHours = $scope.row.activityDate.getHours();
                    console.log("Hours = " + intHours)

                    if (intHours > 0) {
                        console.log("The user entered the date in a format that caused the time zone offset to be applied.");
                        var newDate = $scope.row.activityDate;

                        // The returned offset for the time zone is in minutes, so convert to hours.
                        var intOffsetHours = $scope.row.activityDate.getTimezoneOffset() / 60;

                        newDate.setHours(newDate.getHours() + intOffsetHours);
                        $scope.row.activityDate = newDate;
                    }
                    console.log("$scope.row.activityDate after adjustment = " + $scope.row.activityDate);

                    strYear = $scope.row.activityDate.getFullYear().toString();
                    console.log("strYear = " + strYear);

                    intMonth = $scope.row.activityDate.getMonth() + 1;
                    console.log("intMonth = " + intMonth);
                    strMonth = "" + intMonth;
                    console.log("strMonth = " + strMonth);
                    if (strMonth.length < 2)
                        strMonth = "0" + strMonth;

                    strDay = $scope.row.activityDate.getDate().toString();
                    console.log("strDay = " + strDay);
                    if (strDay.length < 2)
                        strDay = "0" + strDay;

                    tmpTime = $scope.row.TimeStart;
                    console.log("tmpTime (TimeStart) = " + tmpTime);
                    $scope.row.TimeStart = "";
                    $scope.row.TimeStart = strYear + "-" + strMonth + "-" + strDay + "T" + tmpTime;
                    console.log("$scope.row.TimeStart = " + $scope.row.TimeStart);

                    tmpTime = $scope.row.TimeEnd;
                    console.log("tmpTime (TimeEnd) = " + tmpTime);
                    $scope.row.TimeEnd = "";
                    $scope.row.TimeEnd = strYear + "-" + strMonth + "-" + strDay + "T" + tmpTime;
                    console.log("$scope.row.TimeEnd = " + $scope.row.TimeEnd);
                }
            }
            /**** CreeSurvey Detail Time Time calculations End ****/

            if ((typeof $scope.dataSheetDataset !== 'undefined') && ($scope.dataSheetDataset !== null)) {
                for (var i = 0; i < $scope.dataSheetDataset.length; i++) {
                    if ((typeof $scope.dataSheetDataset[i].TotalTimeFished !== 'undefined') && ($scope.dataSheetDataset[i].TotalTimeFished != null)) {
                        console.log("TotalTimeFished for row " + i + " = " + $scope.dataSheetDataset[i].TotalTimeFished);
                        var theHours = parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(0, 2));
                        console.log("theHours = " + theHours);
                        var theMinutes = parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(3, 5));
                        console.log("theMinutes = " + theMinutes);
                        var TotalTimeFished = theHours * 60 + theMinutes;
                        console.log("TotalTimeFished (in min) = " + TotalTimeFished);
                        $scope.dataSheetDataset[i].TotalTimeFished = TotalTimeFished;
                    }

                    if ((typeof $scope.dataSheetDataset[i].InterviewTime !== 'undefined') && ($scope.dataSheetDataset[i].InterviewTime != null)) {
                        var tmpTime = $scope.dataSheetDataset[i].InterviewTime;
                        //console.log("tmpTime (TimeEnd) = " + tmpTime);
                        $scope.dataSheetDataset[i].InterviewTime = "";
                        $scope.dataSheetDataset[i].InterviewTime = strYear + "-" + strMonth + "-" + strDay + "T" + tmpTime + ":00.000";
                    }
                }
            }

            var sheetCopy = angular.copy($scope.dataSheetDataset);
            console.log("The following items are next: $scope.row, sheetCopy, $scope.fields");
            console.dir($scope.row);
            console.dir(sheetCopy);
            console.dir($scope.fields);
            //throw "Stopping right here...";

            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            if ($scope.DatastoreTablePrefix == "FishScales") {
                console.log("$scope.primaryDatasetLocation = " + $scope.primaryDatasetLocation);
                $scope.row.locationId = $scope.primaryDatasetLocation;
            }
            else
                console.log("Not working with FishScales...");

            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                console.log("$scope.row.Dry = " + $scope.row.Dry);
                if ((typeof $scope.row.Dry === 'undefined') || ($scope.row.Dry === null))
                    $scope.row.Dry = "NO";


            }
            console.log("$scope.row.Dry = " + $scope.row.Dry);

            //$scope.activities = ActivityParser.parseSingleActivity($scope.row, angular.extend($scope.dataSheetDataset, $scope.deletedRows), $scope.fields);
            $scope.activities = ActivityParser.parseSingleActivity($scope.row, angular.extend($scope.dataSheetDataset, $scope.deletedRows), $scope.fields, $scope.dataset.QAStatuses);

            if (!$scope.activities.errors) {
                if ($scope.addNewSection) {
                    console.log("$scope.addNewSection is true, so setting $scope.activities.addNewSection to true also.");
                    $scope.activities.addNewSection = true;
                }

                $scope.activities.deletedRowIds = $scope.getDeletedRowIds($scope.deletedRows);
                $scope.activities.updatedRowIds = $scope.updatedRows;

                console.log("$scope.activities in saveData, just before calling DatasetService.saveActivities is next...");
                console.dir($scope.activities);
                DatasetService.updateActivities($scope.userId, $scope.dataset.Id, $scope.activities, $scope.DatastoreTablePrefix);
            }
            else {
                console.log("We have errors...");
                console.dir($scope.activities.errors);
            }
        };

        $scope.doneButton = function () {
            $scope.activities = undefined;
            $location.path("/" + $scope.dataset.activitiesRoute + "/" + $scope.dataset.Id);
        };

        $scope.getDeletedRowIds = function (rows) {
            var results = [];
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                if (row.Id) // true of deleted existing records; new rows added won't have an id.
                {
                    results.push(row.Id);
                }
            };

            return results;
        }
    }
];

define("core/datasets/components/dataset-editor/dataset-edit-form", function(){});

// was DataEntryFormCtrl from DataEntryControllers
//Fieldsheet / form version of the dataentry page
var dataset_entry_form = ['$scope', '$routeParams',
    'DatasetService', 'SubprojectService', 'ProjectService', 'CommonService', '$modal', '$location', '$rootScope',
    'ActivityParser', 'DataSheet', '$route', 'FileUploadService', '$upload',
    function ($scope, $routeParams,
        DatasetService, SubprojectService, ProjectService, CommonService, $modal, $location, $rootScope,
        ActivityParser, DataSheet, $route, UploadService, $upload) {

        initEdit(); // stop backspace from ditching in the wrong place.

        $scope.userId = $rootScope.Profile.Id;
        $scope.fields = { header: [], detail: [], relation: [] };
        $scope.datasheetColDefs = [];

        $scope.filesToUpload = {};

        $scope.dataSheetDataset = [];
        // $scope.row = {ActivityQAStatus: {}, activityDate: new Date()}; //header field values get attached here by dbcolumnname

        $scope.datastoreLocations = CommonService.getLocations($routeParams.Id);
        //$scope.fishermenList = ProjectService.getFishermen();
        $scope.fishermenList = null;  // Set this to null first, so that we can monitor it later.
        $scope.subprojectList = null;  // Set this to null first, so that we can monitor it later.
        $scope.datasetLocations = [[]];
        $scope.datasetLocationType = 0;
        $scope.primaryDatasetLocation = 0;
        $scope.sortedLocations = [];
        $scope.errors = { heading: [] };

        $scope.addNewSection = false; // This is a flag.  On Creel Survey, a user may add a new section, which saves the section, but the page remains on the activity.
        $scope.dataEntryPage = true;  // This is s flag, telling the app that we are on the Data Entry Page, to make the Add Section button show only on the Data Entry page.	

        $scope.foundDuplicate = false;
        $scope.showDetails = true;
        $scope.ShowFishermen = false;
        $scope.showDoneButton = true;

        //datasheet grid
        $scope.gridDatasheetOptions = {
            data: 'dataSheetDataset',
            enableCellSelection: true,
            enableRowSelection: false,
            enableCellEdit: true,
            columnDefs: 'datasheetColDefs',
            enableColumnResize: true,

        };

        //config the fields for the datasheet - include mandatory location and activityDate fields
        //$scope.datasheetColDefs = DataSheet.getColDefs();
        DataSheet.initScope($scope);

        //fire up our dataset
        console.log("routeParams.Id = " + $routeParams.Id);
        $scope.dataset = DatasetService.getDataset($routeParams.Id);

        // Note:  Need to watch for the length below, because fishermanList itself does not change, even if it is updated.
        $scope.$watch('fishermenList.length', function () {

            //if (typeof $scope.fishermenList.$resolved === 'undefined')
            if (!$scope.fishermenList) {
                console.log("$scope.fishermenList has not loaded.");
                return;
            }
            else if ($scope.fishermenList.length === 0) {
                console.log("No fishermen found yet...");
                return;
            }
            console.log("Inside watch, fishermenList");

            console.log("$scope.fishermenList is next..");
            console.dir($scope.fishermenList);

            // If we switch the parameters for the makeObjects, like this makeObjects(scope.fishermenList, 'FullName', 'Id'), it will put them in alpha order by name.
            // However, we must test this first, to verify that it does not mess anything up.
            $scope.fishermenOptions = $rootScope.fishermenOptions = makeObjects($scope.fishermenList, 'Id', 'FullName');

            // Debug output ... wanted to verify the contents of scope.fishermenOptions
            //angular.forEach($scope.fishermenOptions, function(fisherman){
            //	console.dir(fisherman);
            //});

            console.log("$scope.fishermenOptions is next...");
            console.dir($scope.fishermenOptions);
        });

        //setup a listener to populate column headers on the grid
        $scope.$watch('dataset.Fields', function () {

            if (!$scope.dataset.Fields) return;

            console.log("Inside watcher for dataset.Fields.");

            //$rootScope.datasetId = $scope.dataset.Id;
            $rootScope.datasetId = $scope.datasetId = $scope.dataset.Id;
            console.log("$rootScope.datasetId = " + $rootScope.datasetId);
            $scope.dataset.Files = DatasetService.getDatasetFiles($scope.dataset.Id);

            $scope.DatastoreTablePrefix = $scope.dataset.Datastore.TablePrefix;
            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            $scope.datasheetColDefs = DataSheet.getColDefs($scope.DatastoreTablePrefix, "form");  // Pass the TablePrefix (name of the dataset), because it will never change.

            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                console.log("Loading Harvest...");
                $scope.ShowFishermen = true;
                $scope.fishermenList = ProjectService.getFishermen(); // Get all fishermen.
                $scope.theFishermen = ProjectService.getProjectFishermen($scope.dataset.ProjectId); // Get just the fishermen for this project.
            }
            else if ($scope.DatastoreTablePrefix === "CrppContracts") {
                console.log("Loading CRPP subprojects...");
                $scope.ShowSubproject = true;
                $scope.subprojectList = SubprojectService.getSubprojects();
            }
            else if ($scope.DatastoreTablePrefix === "Appraisal") {
                console.log("Loading DECD ...");
                $scope.showDoneButton = false;
            }

            //load our project based on the projectid we get back from the dataset
            $scope.project = ProjectService.getProject($scope.dataset.ProjectId); // We will wait until this loads, before doing anything more with it.  See $scope.$watch('project.Name...

            if ($scope.DatastoreTablePrefix === "CreelSurvey" ||
                $scope.DatastoreTablePrefix === "SpawningGroundSurvey"
            )
                $scope.row = { ActivityQAStatus: {} }; //header field values get attached here by dbcolumnname; leave activityDate blank for CreelSurvey.								
            else
                $scope.row = { ActivityQAStatus: {}, activityDate: new Date() }; //header field values get attached here by dbcolumnname

            console.log("($scope.dataset.QAStatuses is next...");
            console.dir($scope.dataset.QAStatuses);
            $scope.QAStatusOptions = $rootScope.QAStatusOptions = makeObjects($scope.dataset.QAStatuses, 'Id', 'Name');

            //iterate the fields of our dataset and populate our grid columns
            // Note:  If the OrderBy column of EITHER records that are being compared DOES NOT have a "real" value (not NULL or blank, etc.),
            // the sort process in services.js will use the FieldRoleId column instead.
            // This may be an all or none situation (all must have an OrderBy value), because if only some have the value set,
            // then the order is jumbled on the web page.  When the OrderBy is set for all, they all show in the proper order on the page.
            angular.forEach($scope.dataset.Fields.sort(orderByIndex), function (field) {

                parseField(field, $scope);

                if (field.FieldRoleId == FIELD_ROLE_HEADER) {
                    $scope.fields.header.push(field);
                }
                else if (field.FieldRoleId == FIELD_ROLE_DETAIL) {
                    //console.log("Adding to details:  " + field.DbColumnName + ", " + field.Label);
                    $scope.fields.detail.push(field);
                    $scope.datasheetColDefs.push(makeFieldColDef(field, $scope));

                    //a convention:  if your dataset has a ReadingDateTime field then we enable timezones for an activity.
                    if (field.DbColumnName == "ReadingDateTime") {
						/* Note:  The first line below allows the system to automatically determine what timezone we are in, based upon the current date.
							Initially this seemed like a good idea.  However, while the WaterTemp folks collect their data during the Daylight Savings
							timezone, they upload their data during the Standard timezone.  When the system requires them to remember to change the timezone,
							for all their imports from Standard to Daylight Savings, it can cause a headache, if they forget to make the change.
							Therefore, we decided instead to default the timezone to Daylight Savings, and have them change it to Standard if they must.
							Changing to Standard is a less occurring event than changing from Standard to Daylight Savings.
						*/
                        //$scope.row.Timezone = getByField($scope.SystemTimezones, new Date().getTimezoneOffset() * -60000, "TimezoneOffset"); //set default timezone
                        $scope.row.Timezone = getByField($scope.SystemTimezones, 420 * -60000, "TimezoneOffset"); //set default timezone to Daylight Savings
                    }
                }
            });

            //now everything is populated and we can do any post-processing.
            if ($scope.datasheetColDefs.length > 2) {
                $scope.addNewRow();
            }

            //set defaults for header fields
            angular.forEach($scope.fields.header, function (field) {
                $scope.row[field.DbColumnName] = (field.DefaultValue) ? field.DefaultValue : null;

                //FEATURE: any incoming parameter value that matches a header will get copied into that header value.
                if ($routeParams[field.DbColumnName]) {
                    $scope.row[field.DbColumnName] = $routeParams[field.DbColumnName];
                }

            });

            $scope.row.ActivityQAStatus.QAStatusId = "" + $scope.dataset.DefaultActivityQAStatusId;

            $scope.recalculateGridWidth($scope.fields.detail.length);

            $scope.validateGrid($scope);

            console.log("headerFieldErrors is next...");
            console.dir($scope.headerFieldErrors);
            console.log("headerFieldErrors.length = " + $scope.headerFieldErrors.length);

            console.log("$scope at end of dataset.Fields watcher...");
            //console.dir($scope);
        });

        //update our location options as soon as our project is loaded.
        // The project gets called/loaded in $scope.$watch('dataset.Fields' (above), so $scope.DatastoreTablePrefix was set there.
        $scope.$watch('project.Name', function () {
            if (!$scope.project.Name) return;

            console.log("Inside watch project.Name...");
            //console.log("$scope.project is next...");
            //console.dir($scope.project);

            $rootScope.projectId = $scope.project.Id;
            $scope.project.Files = null;
            $scope.project.Files = ProjectService.getProjectFiles($scope.project.Id);

            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            $scope.datasetLocationType = CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);
            console.log("LocationType = " + $scope.datasetLocationType);

            $scope.subprojectType = ProjectService.getProjectType($scope.project.Id);
            console.log("$scope.subprojectType = " + $scope.subprojectType);
            SubprojectService.setServiceSubprojectType($scope.subprojectType);

            //if ($scope.subprojectType === "Harvest")
            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                console.log("Loading Harvest...");
                $scope.ShowFishermen = true;
            }
            //else if ($scope.subprojectType === "CRPP")
            else if ($scope.DatastoreTablePrefix === "CrppContracts") {
                console.log("Loading CRPP subprojects...");
                $scope.ShowSubproject = true;
                $scope.subprojectList = SubprojectService.getSubprojects();
            }
            //else if ($scope.subprojectType === "Habitat")
            //else if ($scope.DatastoreTablePrefix === "Metrics")
            else if (($scope.DatastoreTablePrefix === "Metrics") ||
                ($scope.DatastoreTablePrefix === "Benthic") ||
                ($scope.DatastoreTablePrefix === "Drift")
            ) {
                console.log("Loading Habitat subprojects...");

                $scope.subprojectList = SubprojectService.getProjectSubprojects($scope.project.Id);
                var watcher = $scope.$watch('subprojectList.length', function () {
                    console.log("Inside watcher for subprojectList.length...");
                    // We wait until subprojects gets loaded and then turn this watch off.
                    if ($scope.subprojectList === null) {
                        console.log("$scope.subprojectList is null");
                        return;
                    }
                    else if (typeof $scope.subprojectList.length === 'undefined') {
                        console.log("$scope.subprojectList.length is undefined.");
                        return;
                    }
                    else if ($scope.subprojectList.length === 0) {
                        console.log("$scope.subprojectList.length is 0");
                        return;
                    }

                    //if ($scope.DatastoreTablePrefix === "Metrics")
                    if (($scope.DatastoreTablePrefix === "Metrics") ||
                        ($scope.DatastoreTablePrefix === "Benthic") ||
                        ($scope.DatastoreTablePrefix === "Drift")
                    ) {
                        console.log("$scope.subprojectList is next...");
                        console.dir($scope.subprojectList);
                        console.log("$scope.project.Locations is next...");
                        console.dir($scope.project.Locations);

                        $scope.datasetLocations = [[]]; // Dump the locations, before refilling them.
                        angular.forEach($scope.subprojectList, function (subproject) {
                            angular.forEach($scope.project.Locations, function (location) {
                                //console.log("location.LocationTypeId = " +  location.LocationTypeId + ", subproject.LocationId = " + subproject.LocationId + ", location.Id = " + location.Id);
                                if (subproject.LocationId === location.Id) {
                                    console.log("Found a subproject location")
                                    console.dir(location);
                                    $scope.datasetLocations.push([location.Id, location.Label]);
                                }
                            });
                        });
                    }

                    console.log("datasetLocations (with subprojects) is next...");
                    console.dir($scope.datasetLocations);

                    console.log("$scope.subprojectList.length = " + $scope.subprojectList.length);
                    console.dir($scope.subprojectList);

                    $scope.selectProjectLocationsByLocationType();

                    watcher();
                });
            }
            //else if ($scope.subprojectType === "DECD")
            else if ($scope.DatastoreTablePrefix === "Appraisal") {
                $scope.showDoneButton = false;
            }

            if (($scope.DatastoreTablePrefix !== "Metrics") &&
                ($scope.DatastoreTablePrefix !== "Benthic") &&
                ($scope.DatastoreTablePrefix !== "Drift")
            ) {
                $scope.selectProjectLocationsByLocationType();
            }

            //check authorization -- need to have project loaded before we can check project-level auth
            if (!$rootScope.Profile.isProjectOwner($scope.project) && !$rootScope.Profile.isProjectEditor($scope.project)) {
                $location.path("/unauthorized");
            }

            //if ?LocationId=123 is passed in then lets set it to the given LocationId
            if ($routeParams.LocationId) {
                $scope.row['locationId'] = "" + $routeParams.LocationId;
            }

            console.log("$scope at end of watch project.Name is next...");
            //console.dir($scope);
        });

        $scope.selectProjectLocationsByLocationType = function () {
            console.log("Inside selectProjectLocationsByLocationType...");

            if ($scope.project.Locations) {
                console.log("ProjectLocations is next...");
                console.dir($scope.project.Locations);

                for (var i = 0; i < $scope.project.Locations.length; i++) {
                    //console.log("i = " + i);
                    //console.log($scope.project.Locations[i].Id + "  " + $scope.project.Locations[i].Label);
                    //console.log("$scope.project.Locations[i].LocationTypeId = " + $scope.project.Locations[i].LocationTypeId + ", $scope.datasetLocationType = " + $scope.datasetLocationType);
                    //if ($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType)
                    //if (parseInt($scope.project.Locations[i].LocationTypeId) === parseInt($scope.datasetLocationType))
                    //{
                    //console.log("Found one");
                    // If the label is blank, this item is the Primary Project Location, and the label is null.
                    //	if ((typeof $scope.project.Locations[i].Label !== 'undefined') && ($scope.project.Locations[i].Label != null))
                    //	{
                    //		console.log("$scope.project.Locations[i].Id = " + $scope.project.Locations[i].Id + ", $scope.project.Locations[i].Label = " + $scope.project.Locations[i].Label);

                    // Note:  We are pushing an ARRAY into $scope.datasetLocations, NOT separate items.
                    //		$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]); 									

                    //		console.log("$scope.datasetLocations (inside the loop) is next");
                    //		console.dir($scope.datasetLocations);

                    //		if ($scope.DatastoreTablePrefix === "FishScales")
                    //		{
                    //			console.log("Setting $scope.primaryDatasetLocation...");
                    //			$scope.primaryDatasetLocation = $scope.project.Locations[i].Id;
                    //		}
                    //	}
                    //}

                    console.log("$scope.project.Locations[i].LocationTypeId = " + $scope.project.Locations[i].LocationTypeId + ", $scope.datasetLocationType = " + $scope.datasetLocationType);
                    if (($scope.DatastoreTablePrefix === "Metrics") ||
                        ($scope.DatastoreTablePrefix === "Benthic") ||
                        ($scope.DatastoreTablePrefix === "Drift")
                    ) {
                        if (($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) || ($scope.project.Locations[i].LocationTypeId === LOCATION_TYPE_Hab)) {
                            //console.log("Found Habitat-related location");
                            $scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
                        }
                    }
                    else {
                        if ($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) {
                            //console.log("Found non-Habitat-related location");
                            $scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
                        }

                        if ($scope.DatastoreTablePrefix === "FishScales") {
                            console.log("Setting $scope.primaryDatasetLocation...");
                            $scope.primaryDatasetLocation = $scope.project.Locations[i].Id;
                        }
                    }
                }
                console.log("datasetLocations (only project/dataset) is next...");
                console.dir($scope.datasetLocations);

                $scope.finishLocationProcessing();
            }
        };

        $scope.finishLocationProcessing = function () {
            console.log("Inside $scope.finishLocationProcessing...");
            // When we built the array, it started adding at location 1 for some reason, skipping 0.
            // Therefore, row 0 is blank.  The simple solution is to just delete row 0.
            //$scope.datasetLocations.shift();

            // During the original development, the blank row was always at row 0.  Months later, I noticed that 
            // the blank row was not at row 0.  Therefore, it needed a different solution.
            var index = 0;
            //console.log("$scope.datasetLocations (before splice) is next...");
            //console.dir($scope.datasetLocations);
            angular.forEach($scope.datasetLocations, function (dsLoc) {
                //if (dsLoc.length === 0)
                //{
                //	$scope.datasetLocations.splice(index, 1);
                //}
                if (typeof dsLoc[0] === 'undefined')
                    $scope.datasetLocations.splice(index, 1);

                index++;
            });

            console.log("datasetLocations after splice is next...");
            console.dir($scope.datasetLocations);

            // When we feed these locations to makeObjects, Angular sorts them in Id order.  Therefore, this is currently wasted activity.
            //$scope.datasetLocations.sort(order2dArrayByAlpha);
            //console.log("datasetLocations sorted...");
            //console.dir($scope.datasetLocations);

            // Convert our 2D array into an array of objects.
            for (var i = 0; i < $scope.datasetLocations.length; i++) {
                $scope.sortedLocations.push({ Id: $scope.datasetLocations[i][0], Label: $scope.datasetLocations[i][1] });
            }
            $scope.datasetLocations = [[]]; // Clean up


            // Convert our array of objects into a list of objects, and put it in the select box.
            $scope.locationOptions = $rootScope.locationOptions = makeObjects($scope.sortedLocations, 'Id', 'Label');

            console.log("locationOptions is next...");
            console.dir($scope.locationOptions);

            //if there is only one location, just set it to that location
            if (array_count($scope.locationOptions) == 1) {
                //there will only be one.
                angular.forEach(Object.keys($scope.locationOptions), function (key) {
                    console.log(key);
                    $scope.row['locationId'] = key;
                });

            }
        };

        $scope.reloadProject = function () {
            //reload project instruments -- this will reload the instruments, too
            ProjectService.clearProject();
            $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
            var watcher = $scope.$watch('project.Id', function () {
                $scope.selectInstrument();
                watcher();
            });

        };

        $scope.openAccuracyCheckModal = function () {

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-new-accuracycheck.html',
                controller: 'ModalQuickAddAccuracyCheckCtrl',
                scope: $scope, //very important to pass the scope along... 

            });
        };

        $scope.createInstrument = function () {
            $scope.viewInstrument = null;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-instrument.html',
                controller: 'ModalCreateInstrumentCtrl',
                scope: $scope, //very important to pass the scope along...
            });
        };

        $scope.getDataGrade = function (check) { return getDataGrade(check) }; //alias from service

        $scope.selectInstrument = function () {
            if (!$scope.row.InstrumentId)
                return;

            //get latest accuracy check
            $scope.viewInstrument = getByField($scope.project.Instruments, $scope.row.InstrumentId, "Id");
            $scope.row.LastAccuracyCheck = $scope.viewInstrument.AccuracyChecks[$scope.viewInstrument.AccuracyChecks.length - 1];
            $scope.row.DataGradeText = getDataGrade($scope.row.LastAccuracyCheck);

            if ($scope.row.LastAccuracyCheck)
                $scope.row.AccuracyCheckId = $scope.row.LastAccuracyCheck.Id;
        };

        $scope.cancel = function () {
            if ($scope.dataChanged) {
                if (!confirm("Looks like you've made changes.  Are you sure you want to leave this page?"))
                    return;
            }

            $location.path("/" + $scope.dataset.activitiesRoute + "/" + $scope.dataset.Id);
        };


        //adds row to datasheet grid
        $scope.addNewRow = function () {
            var row = makeNewRow($scope.datasheetColDefs);
            row.QAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
            $scope.onRow = row;
        };

        // For Creel Survey only. 
        $scope.addSection = function () {
            console.log("Inside addSection...");
            console.log("$scope in addSection is next...");
            //console.dir($scope);

            $scope.addNewSection = true;
            console.log("$scope.addNewSection = " + $scope.addNewSection);
            $scope.saveData();  // Save what we have, before blanking fields.

            $scope.addNewSectionWatcherCount = 0;
            var addNewSectionWatcher = $scope.$watch('activities.addNewSection', function () {
                console.log("Inside watcher addNewSection...");
                console.log("$scope.activities.addNewSection = " + $scope.activities.addNewSection);
                if ((typeof $scope.activities.addNewSection !== 'undefined') && ($scope.activities.addNewSection === false)) {
                    if ($scope.addNewSectionWatcherCount === 0) {
                        console.log("Resetting the page.")
                        // Reset the content of specific fields, to blank, null, or 0.
                        $scope.row.locationId = 59; // Blank
                        $scope.row.TimeStart = null;
                        $scope.row.TimeEnd = null;
                        $scope.row.NumberAnglersObserved = 0;
                        $scope.row.NumberAnglersInterviewed = 0;
                        $scope.row.SurveyComments = null;
                        $scope.row.FieldSheetFile = null;

                        // Dump the contents of the datasheet and add the new row.
                        $scope.dataSheetDataset = [];
                        $scope.addNewRow();
                        $scope.addNewSection = false;

                        // This pops the Save Success modal after Add Section.
                        var modalInstance = $modal.open({
                            templateUrl: 'app/core/common/components/modals/templates/modal-save-success.html',
                            controller: 'ModalSaveSuccess',
                            scope: $scope, //very important to pass the scope along...
                        });
                        $scope.addNewSectionWatcherCount++;
                    }
                }
            });

            console.log("At end of addNewSection; $scope is next...");
            //console.dir($scope);
        };

        // For Creel Survey only. 
        $scope.addNewInterview = function () {
            var row = makeNewRow($scope.datasheetColDefs);
            row.QAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
            $scope.onRow = row;

            for (var i = 0; i < $scope.datasheetColDefs.length; i++) {
                if (($scope.datasheetColDefs[i].field === "InterviewTime") ||
                    ($scope.datasheetColDefs[i].field === "GPSEasting") ||
                    ($scope.datasheetColDefs[i].field === "GPSNorthing") ||
                    ($scope.datasheetColDefs[i].field === "CarcassComments") ||
                    ($scope.datasheetColDefs[i].field === "TotalTimeFished")
                ) {
                    $scope.datasheetColDefs[i].enableCellEdit = true;
                    //$scope.datasheetColDefs[i].cellEditableCondition = true;
                    //$scope.disabledFont();
                }

            }
        };

        // For Creel Survey only. 
        //Open form to add a fisherman to the database
        $scope.addFisherman = function () {
            $scope.viewFisherman = null;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-fisherman.html',
                controller: 'ModalCreateFishermanCtrl',
                scope: $scope, //very important to pass the scope along...
            });
        };

        // For Creel Survey only.
        // Adds another row to datasheet grid and copies common items (surveyor, date, etc.)
        $scope.addAnotherFish = function () {
            console.log("Inside addAnotherFish...");
            console.log("$scope before copy is next...");
            //console.dir($scope);

            var listLength = $scope.dataSheetDataset.length;
            var theFisherman = $scope.dataSheetDataset[listLength - 1].FishermanId
            var interviewTime = $scope.dataSheetDataset[listLength - 1].InterviewTime;
            var gpsEasting = $scope.dataSheetDataset[listLength - 1].GPSEasting;
            var gpsNorthing = $scope.dataSheetDataset[listLength - 1].GPSNorthing;
            var interviewComments = $scope.dataSheetDataset[listLength - 1].InterviewComments;
            var totalTimeFished = $scope.dataSheetDataset[listLength - 1].TotalTimeFished;
            var numberFishCaught = $scope.dataSheetDataset[listLength - 1].NumberFishCaught;
            //var qaStatusId = $scope.dataSheetDataset[listLength-1].QAStatusId;

            //var x = 0;
            //if (x !== 0)
            //{
            var row = makeNewRow($scope.datasheetColDefs);
            row.QAStatusId = $scope.dataset.DefaultActivityQAStatusId;
            //row.RowQAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
            $scope.onRow = row;

            listLength = $scope.dataSheetDataset.length;
            $scope.dataSheetDataset[listLength - 1].FishermanId = theFisherman;
            $scope.dataSheetDataset[listLength - 1].InterviewTime = interviewTime;
            $scope.dataSheetDataset[listLength - 1].GPSEasting = gpsEasting;
            $scope.dataSheetDataset[listLength - 1].GPSNorthing = gpsNorthing;
            $scope.dataSheetDataset[listLength - 1].InterviewComments = interviewComments;
            $scope.dataSheetDataset[listLength - 1].TotalTimeFished = totalTimeFished;
            $scope.dataSheetDataset[listLength - 1].NumberFishCaught = numberFishCaught;
            //$scope.dataSheetDataset[listLength-1].QAStatusId = qaStatusId;

            for (var i = 0; i < $scope.datasheetColDefs.length; i++) {
                if (($scope.datasheetColDefs[i].field === "InterviewTime") ||
                    ($scope.datasheetColDefs[i].field === "GPSEasting") ||
                    ($scope.datasheetColDefs[i].field === "GPSNorthing") ||
                    ($scope.datasheetColDefs[i].field === "InterviewComments") ||
                    ($scope.datasheetColDefs[i].field === "TotalTimeFished")
                ) {
                    $scope.datasheetColDefs[i].enableCellEdit = false;
                    //$scope.datasheetColDefs[i].cellEditableCondition = false;
                    //$scope.disabledFont();
                }

            }

            console.log("$scope after copy is next...");
            //console.dir($scope);

            //$scope.reloadProject();

			/*
			$scope.onRow.entity.InterviewTime = interviewTime;
			$scope.onRow.entity.GPSEasting = gpsEasting;
			$scope.onRow.entity.GPSNorthing = gpsNorthing;
			$scope.onRow.entity.CarcassComments = carcassComments;
			$scope.onRow.entity.TotalTimeFished = totalTimeFished;
			$scope.onRow.entity.NumberFishCaught = numberFishCaught;
			*/
            //}
        };

        //overriding the one in our service because we don't want to allow removing of a blank row.
        $scope.removeRow = function () {
            if ($scope.dataSheetDataset.length > 1)
                DataSheet.removeOnRow($scope);
        };


        $scope.doneButton = function () {
            $scope.activities = undefined;
            $route.reload();
            $scope.reloadProject();
            //DataSheet.initScope($scope);  // Is this needed at all?
        }

        $scope.viewButton = function () {
            $location.path("/" + $scope.dataset.activitiesRoute + "/" + $scope.dataset.Id);
        }

        $scope.viewRelation = function (row, field_name) {
            console.dir(row.entity);
            var field = $scope.FieldLookup[field_name];
            console.dir(field);

            $scope.openRelationEditGridModal(row.entity, field);
        }


        $scope.openRelationEditGridModal = function (row, field) {
            $scope.relationgrid_row = row;
            $scope.relationgrid_field = field;
            $scope.isEditable = true;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/datasets/components/dataset-relationgrid/templates/relationgrid-edit-modal.html',
                controller: 'RelationGridModalCtrl',
                scope: $scope,
            });
        };

        /* -- these functions are for uploading - */
        $scope.openFileModal = function (row, field) {
            console.log("Inside DataEntryFormCtrl, openFileModal");
            //console.dir(row);
            //console.dir(field);
            $scope.file_row = row;
            $scope.file_field = field;
            $rootScope.FieldSheetFile = "";

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/file/templates/modal-file.html',
                controller: 'FileModalCtrl',
                scope: $scope, //scope to make a child of
            });
        };

        $scope.openFileAddModal = function (row, field) {
            console.log("Inside DataEditCtrl, openFileAddModal...");
            console.log("row is next...");
            console.dir(row);
            console.log("field is next...");
            console.dir(field);
            $scope.file_row = row;
            $scope.file_field = field;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/file/templates/modal-file-add.html',
                controller: 'FileAddModalCtrl',
                scope: $scope, //scope to make a child of
            });
        };

        $scope.openFileDeleteModal = function (row, field) {
            console.log("Inside DataEditCtrl, openFileDeleteModal...");
            console.log("row is next...");
            console.dir(row);
            console.log("field is next...");
            console.dir(field);
            $scope.file_row = row;
            $scope.file_field = field;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/file/templates/modal-file-delete.html',
                controller: 'FileDeleteModalCtrl',
                scope: $scope, //scope to make a child of
            });
        };

        $scope.openWaypointFileModal = function (row, field) {
            $scope.file_row = row;
            $scope.file_field = field;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/file/templates/modal-waypoint-file.html',
                controller: 'FileModalCtrl',
                scope: $scope, //scope to make a child of
            });
        };

        //field = DbColumnName
        $scope.onFileSelect = function (field, files) {
            console.log("Inside DataEntryFormCtrl, onFileSelect");
            console.log("file selected! " + field);
            $scope.filesToUpload[field] = files;
        };

        //this function gets called when a user clicks the "Add" button in a GRID file cell
        $scope.addFiles = function (row, field_name) {
            var field = $scope.FieldLookup[field_name];

            //console.dir(row);
            //console.dir(field);
            $scope.openFileModal(row.entity, field);

            //go ahead and mark this row as being updated.
            if ($scope.updatedRows)
                $scope.updatedRows.push(row.entity.Id);

        };

        $scope.saveData = function () {
            console.log("Inside saveData, $scope is next...");
            //console.dir($scope);
            console.log("$rootScope is next...");
            console.dir($rootScope);

            /**** CreeSurvey Header Time Time calculations Start ****/
            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                // Headers = row
                // Details = onRow

                // Notes relating to date/time...
                // Regarding the month:
                // The getmonth() function is zero-based, so Jan = 0, Feb = 1, etc.
                // When we pull the month below, we are expecting Jan = 1, Feb = 2, etc.
                // To get the date format we need, we must add 1 to the month.

                // Regarding the time:
                // When we enter the date in m/d/yyyy (or mm/dd/yyyy) format, the datepicker will leave the time at 00:00.
                // However, when we enter the date in yyyy-mm-dd format, the datepicker applies our timezone offset.
                // PST = -8, PDT = -7
                // Also, the conversion is based upon the ActivityDate you enter, NOT the current time of year.
                // For example, if the user is entering information in June (Daylight time), and the actual date is Feb (Standard time),
                // JavaScript will apply the Standard-time offset.
                // For our purposes, users should be able to enter the date in either m/d/yyyy or yyyy-mm-dd format, and experience
                // the same system behavior.  Therefore, we must allow for those formats in the code.
                console.log("$scope.row.activityDate before adjustment = " + $scope.row.activityDate);
                console.log("Offset = " + $scope.row.activityDate.getTimezoneOffset());

                var intHours = $scope.row.activityDate.getHours();
                console.log("Hours = " + intHours)

                if (intHours > 0) {
                    console.log("The user entered the date in a format that caused the time zone offset to be applied.");
                    var newDate = $scope.row.activityDate;

                    // The returned offset for the time zone is in minutes, so convert to hours.
                    var intOffsetHours = $scope.row.activityDate.getTimezoneOffset() / 60;

                    newDate.setHours(newDate.getHours() + intOffsetHours);
                    $scope.row.activityDate = newDate;
                }
                console.log("$scope.row.activityDate after adjustment = " + $scope.row.activityDate);

                var strYear = $scope.row.activityDate.getFullYear().toString();
                console.log("strYear = " + strYear);

                var intMonth = $scope.row.activityDate.getMonth() + 1;
                console.log("intMonth = " + intMonth);
                var strMonth = "" + intMonth;
                console.log("strMonth = " + strMonth);
                if (strMonth.length < 2)
                    strMonth = "0" + strMonth;

                var strDay = $scope.row.activityDate.getDate().toString();
                console.log("strDay = " + strDay);
                if (strDay.length < 2)
                    strDay = "0" + strDay;

                var tmpTime = $scope.row.TimeStart;
                console.log("tmpTime (TimeStart) = " + tmpTime);
                if (tmpTime !== null) {
                    $scope.row.TimeStart = "";
                    $scope.row.TimeStart = strYear + "-" + strMonth + "-" + strDay + "T" + tmpTime + ":00.000";
                    console.log("$scope.row.TimeStart = " + $scope.row.TimeStart);
                }

                tmpTime = $scope.row.TimeEnd;
                console.log("tmpTime (TimeEnd) = " + tmpTime);
                if (tmpTime !== null) {
                    $scope.row.TimeEnd = "";
                    $scope.row.TimeEnd = strYear + "-" + strMonth + "-" + strDay + "T" + tmpTime + ":00.000";
                    console.log("$scope.row.TimeEnd = " + $scope.row.TimeEnd);
                }
            }
            /**** CreeSurvey Header Time Time calculations End ****/

            // Orignal line.  
            //var promise = UploadService.uploadFiles($scope.filesToUpload, $scope);
			/* Notes:  In the line above, the returned promise is an array.  IE does not handle a promise like that.
			*  According to online documentation, IE does not handle promise at all.  However, my experience has shown the following.
			*  IE cannot handle a promise array (as noted).
			*  IE cannot handle nested promises either.
			*  IE CAN handle a single promise.
			*  So, we have to check for duplicate file names in a different way.
			*  In this method (not necessarily the best way), we do the checking here, rather than calling FileUploadService.uploadFiles in services.js.
			*/

            // Firstly, if the user does not attach a file (such was with WaterTemp), we can skip checking for a duplicate file name.
            // WaterTemp is more concerned about imputting duplicate data.  The user may often use the same file, but a different tab.
            // For other datasets (Creel), they do have the concern about uploading a duplicate file.


            // We need to check for duplicate file names first.
            if ($scope.foundDuplicate) {
                alert("One or more of the files to upload is a duplicate!");
                return;
            }

            // In modals-controller, FileModalCtrl, the file gets stored in $rootScope.FieldSheetFile.
            // The bucket for the file can change names, depending upon the dataset.
            console.log("$rootScope.FieldSheetFile is next...");
            console.dir($rootScope.FieldSheetFile);
            $scope.filesToUpload.FieldSheetFile = $rootScope.FieldSheetFile;

            if ($scope.filesToUpload.FieldSheetFile) {
                //for(var i = 0; i < $scope.filesToUpload.FieldSheetFile.length; i++)
                //for(var i = 0; i < $scope.filesToUpload.length; i++)
                for (var i = 0; i < $rootScope.currentFiles.length; i++) {
                    //var file = $scope.filesToUpload.FieldSheetFile[i];
                    var file = $scope.currentFiles[i];
                    console.log("file is next...");
                    console.dir(file);

                    var newFileNameLength = file.name.length;
                    console.log("file name length = " + newFileNameLength);

                    console.log("file.type = " + file.type);
                    if ($scope.uploadFileType === "image") {
                        console.log("We have an image...");
                        for (var n = 0; n < $scope.project.Images.length; n++) {
                            var existingFileName = $scope.project.Images[n].Name;
                            console.log("existingFileName = " + existingFileName);
                            var existingFileNameLength = existingFileName.length;
                            if ((newFileNameLength >= existingFileNameLength) && (file.name.indexOf(existingFileName) > -1)) {
                                $scope.foundDuplicate = true;
                                console.log(file.name + " already exists in the project file list.");
                                errors.push(file.name + " already exists in the list of project images.");
                            }
                        }
                    }
                    else {
                        console.log("We have something other than an image...");
                        for (var n = 0; n < $scope.project.Files.length; n++) {
                            var existingFileName = $scope.project.Files[n].Name;
                            console.log("existingFileName = " + existingFileName);
                            var existingFileNameLength = existingFileName.length;
                            if ((newFileNameLength >= existingFileNameLength) && (file.name.indexOf(existingFileName) > -1)) {
                                $scope.foundDuplicate = true;
                                console.log(file.name + " already exists in the project file list.");
                                errors.push(file.name + " already exists in the list of project Files.");
                            }
                        }
                    }

                    console.log("$scope.foundDuplicate = " + $scope.foundDuplicate);

                    if ($scope.foundDuplicate)
                        alert(errors);
                    else {
                        console.log("Not a duplicate.  Uploading the file...");
                        if (file.success != "Success") {
                            $scope.upload = $upload.upload({
                                //url: serviceUrl + '/data/UploadProjectFile',
                                url: serviceUrl + '/api/v1/file/uploaddatasetfile',
                                method: "POST",
                                // headers: {'headerKey': 'headerValue'},
                                // withCredential: true,
                                //data: {ProjectId: $scope.project.Id, Description: "Uploaded file " + file.Name, Title: file.Name},
                                data: { ProjectId: $scope.project.Id, DatasetId: $scope.dataset.Id, Description: "Uploaded file " + file.Name, Title: file.Name },
                                file: file,

                            }).progress(function (evt) {
                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
                            }).success(function (data, status, headers, config) {
                                config.file.success = "Success";
                            }).error(function (data, status, headers, config) {
                                $scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
                                //console.log(file.name + " was error.");
                                config.file.success = "Failed";
                            });
                        }
                    }
                }

                //spin through the files that we uploaded
                //angular.forEach($scope.filesToUpload, function(files, field){
                angular.forEach($scope.currentFiles, function (files, field) {

                    if (field == "null" || field == "")
                        return;

                    var local_files = [];

                    //if we already had actual files in this field, copy them in
                    if ($scope.file_row[field]) {
                        var current_files = angular.fromJson($scope.file_row[field]);
                        angular.forEach(current_files, function (file) {
                            if (file.Id) //our incoming files don't have an id, just actual files.
                                local_files.push(file);
                        });
                    }

                    $scope.file_row[field] = angular.toJson(local_files);
                    //console.log("Ok our new list of files: "+$scope.row[field]);
                });

                $scope.saveDatasheetData();
            }
            else {
                $scope.saveDatasheetData();
            }
        };

        $scope.saveDatasheetData = function () {
            console.log("Inside saveDatasheetData, $scope is next...");
            //console.dir($scope);

            var strYear = null;
            var strMonth = null;
            var strDay = null;
            var tmpTime = null;

            /**** CreeSurvey Detail Time Time calculations Start ****/
            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                strYear = $scope.row.activityDate.getFullYear().toString();
                console.log("strYear = " + strYear);

                strMonth = $scope.row.activityDate.getMonth().toString();
                console.log("strMonth = " + strMonth);
                if (strMonth.length < 2)
                    strMonth = "0" + strMonth;

                strDay = $scope.row.activityDate.getDate().toString();
                console.log("strDay = " + strDay);
                if (strDay.length < 2)
                    strDay = "0" + strDay;


                for (var i = 0; i < $scope.dataSheetDataset.length; i++) {
                    if ((typeof $scope.dataSheetDataset[i].TotalTimeFished !== 'undefined') && ($scope.dataSheetDataset[i].TotalTimeFished != null)) {
                        console.log("TotalTimeFished for row " + i + " = " + $scope.dataSheetDataset[i].TotalTimeFished);
                        var theHours = parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(0, 2));
                        console.log("theHours = " + theHours);
                        var theMinutes = parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(3, 5));
                        console.log("theMinutes = " + theMinutes);
                        var TotalTimeFished = theHours * 60 + theMinutes;
                        console.log("TotalTimeFished (in min) = " + TotalTimeFished);
                        $scope.dataSheetDataset[i].TotalTimeFished = TotalTimeFished;
                    }

                    if ((typeof $scope.dataSheetDataset[i].InterviewTime !== 'undefined') && ($scope.dataSheetDataset[i].InterviewTime !== null)) {
                        tmpTime = $scope.dataSheetDataset[i].InterviewTime;
                        //console.log("tmpTime (TimeEnd) = " + tmpTime);
                        $scope.dataSheetDataset[i].InterviewTime = "";
                        $scope.dataSheetDataset[i].InterviewTime = strYear + "-" + strMonth + "-" + strDay + "T" + tmpTime + ":00.000";
                    }
                }
            }
            /**** CreeSurvey Detail Time Time calculations End ****/



            var sheetCopy = angular.copy($scope.dataSheetDataset);
            console.log("The following items are next: $scope.row, sheetCopy, $scope.fields");
            console.dir($scope.row);
            console.dir(sheetCopy);
            console.dir($scope.fields);
            //throw "Stopping right here...";

            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            if ($scope.DatastoreTablePrefix == "FishScales") {
                console.log("$scope.primaryDatasetLocation = " + $scope.primaryDatasetLocation);
                $scope.row.locationId = $scope.primaryDatasetLocation;
            }
            else
                console.log("Not working with FishScales...");

            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                console.log("$scope.row.Dry = " + $scope.row.Dry);
                if ((typeof $scope.row.Dry === 'undefined') || ($scope.row.Dry === null))
                    $scope.row.Dry = "NO";
            }
            console.log("$scope.row.Dry = " + $scope.row.Dry);

            //$scope.activities = ActivityParser.parseSingleActivity($scope.row, sheetCopy, $scope.fields);
            $scope.activities = ActivityParser.parseSingleActivity($scope.row, sheetCopy, $scope.fields, $scope.dataset.QAStatuses);
            if (!$scope.activities.errors) {
                if ($scope.addNewSection) {
                    console.log("$scope.addNewSection is true, so setting $scope.activities.addNewSection to true also.");
                    $scope.activities.addNewSection = true;
                }
                console.log("$scope.activities in saveData, just before calling DatasetService.saveActivities is next...");
                console.dir($scope.activities);
                DatasetService.saveActivities($scope.userId, $scope.dataset.Id, $scope.activities);
            }
            else {
                console.log("We have errors...");
                console.dir($scope.activities.errors);
            }
        };
    }
];
define("core/datasets/components/dataset-entry-form/dataset-entry-form", function(){});




// was DataEntryDatasheetCtrl from DataEntryControllers
//datasheet version of the data entrypage
var dataset_entry_sheet = ['$scope', '$routeParams', 'DatasetService', '$modal', '$location', '$rootScope', 'ActivityParser', 'DataSheet', '$route', 'ProjectService', 'CommonService',
    function ($scope, $routeParams, DatasetService, $modal, $location, $rootScope, ActivityParser, DataSheet, $route, ProjectService, CommonService) {

        initEdit(); // stop backspace from ditching in the wrong place.

        $scope.userId = $rootScope.Profile.Id;
        $scope.fields = { header: [], detail: [], relation: {} };
        $scope.colDefs = [];

        //setup the data array that will be bound to the grid and filled with the json data objects
        $scope.dataSheetDataset = [];

        $scope.datasetLocationType = 0;
        $scope.datasetLocations = [[]];
        $scope.primaryDatasetLocation = 0;
        $scope.sortedLocations = [];
        $scope.errors = { heading: [] };

        $scope.fishermenList = ProjectService.getFishermen();
        $scope.dataEntryPage = true;  // This is s flag, telling the app that we are on the Data Entry Page, to make the Add Section button show only on the Data Entry page.

        //datasheet grid definition
        $scope.gridDatasheetOptions = {
            data: 'dataSheetDataset',
            enableCellSelection: true,
            enableRowSelection: false,
            enableCellEdit: true,
            columnDefs: 'datasheetColDefs',
            enableColumnResize: true,

        };

        //config the fields for the datasheet - include mandatory location and activityDate fields
        //$scope.datasheetColDefs = DataSheet.getColDefs();  // This runs in the dataset.Fields watcher now.
        DataSheet.initScope($scope);

        //fire up our dataset
        $scope.dataset = DatasetService.getDataset($routeParams.Id);

        // Note:  Need to watch for the length below, because fishermanList itself does not change, even if it is updated.
        $scope.$watch('fishermenList.length', function () {

            //if (typeof $scope.fishermenList.$resolved === 'undefined')
            if (!$scope.fishermenList) {
                console.log("$scope.fishermenList has not loaded.");
                return;
            }
            else if ($scope.fishermenList.length === 0) {
                console.log("No fishermen found yet...");
                return;
            }
            console.log("Inside watch, fishermenList");

            console.log("$scope.fishermenList is next..");
            console.dir($scope.fishermenList);

            // If we switch the parameters for the makeObjects, like this makeObjects(scope.fishermenList, 'FullName', 'Id'), it will put them in alpha order by name.
            // However, we must test this first, to verify that it does not mess anything up.
            $scope.fishermenOptions = $rootScope.fishermenOptions = makeObjects($scope.fishermenList, 'Id', 'FullName');

            // Debug output ... wanted to verify the contents of scope.fishermenOptions
            //angular.forEach($scope.fishermenOptions, function(fisherman){
            //	console.dir(fisherman);
            //});

            console.log("$scope.fishermenOptions is next...");
            console.dir($scope.fishermenOptions);
        });

        //update our location options as soon as our project is loaded.
        $scope.$watch('project.Name', function () {
            if (!$scope.project.Name) return;

            console.log("Inside watch project.Name...");
            //console.log("$scope.project is next...");
            //console.dir($scope.project);

            $rootScope.projectId = $scope.project.Id;
            $scope.project.Files = null;
            $scope.project.Files = ProjectService.getProjectFiles($scope.project.Id);

            if ($scope.subprojectType === "Harvest") {
                console.log("Loading Harvest...");
                $scope.ShowFishermen = true;
                //$scope.theFishermen = ProjectService.getProjectFishermen($scope.project.Id);
                $scope.fishermenList = ProjectService.getFishermen();
            }

            //$scope.locationOptions = $rootScope.locationOptions = makeObjects(getUnMatchingByField($scope.project.Locations,PRIMARY_PROJECT_LOCATION_TYPEID,"LocationTypeId"), 'Id','Label') ; // Original line

            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            $scope.datasetLocationType = CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);
            console.log("LocationType = " + $scope.datasetLocationType);

            console.log("ProjectLocations is next...");
            console.dir($scope.project.Locations);
            //var locInd = 0;
            for (var i = 0; i < $scope.project.Locations.length; i++) {
                //console.log("projectLocations Index = " + $scope.project.Locations[i].Label);
                //console.log($scope.project.Locations[i].Id + "  " + $scope.project.Locations[i].Id);
                if ($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) {
                    //console.log("Found one");
                    $scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
                    //console.log("datasetLocations length = " + $scope.datasetLocations.length);
                    //locInd++;

                    if ($scope.DatastoreTablePrefix === "FishScales") {
                        console.log("Setting $scope.primaryDatasetLocation...");
                        $scope.primaryDatasetLocation = $scope.project.Locations[i].Id;
                    }
                }
				/*else if ($scope.project.Locations[i].LocationTypeId === 3)
				{
					//$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);  // The label is NULL, so do not add it.
					$scope.primaryProjectLocation = $scope.project.Locations[i].Id;
					console.log("Found a primary location.  LocId = " + $scope.primaryProjectLocation);
				}*/
            }
            console.log("datasetLocations is next...");
            console.dir($scope.datasetLocations);

            // When we built the array, it started adding at location 1 for some reason, skipping 0.
            // Therefore, row 0 is blank.  The simple solution is to just delete row 0.
            //$scope.datasetLocations.shift();

            // During the original development, the blank row was always at row 0.  Months later, I noticed that 
            // the blank row was not at row 0.  Therefore, it needed a different solution.
            var index = 0;
            angular.forEach($scope.datasetLocations, function (dsLoc) {
                if (dsLoc.length === 0) {
                    $scope.datasetLocations.splice(index, 1);
                }

                index++;
            });

            console.log("datasetLocations after splice is next...");
            console.dir($scope.datasetLocations);

            $scope.datasetLocations.sort(order2dArrayByAlpha);
            console.log("datasetLocations sorted...");
            console.dir($scope.datasetLocations);

            // Convert our 2D array into an array of objects.
            for (var i = 0; i < $scope.datasetLocations.length; i++) {
                $scope.sortedLocations.push({ Id: $scope.datasetLocations[i][0], Label: $scope.datasetLocations[i][1] });
            }
            $scope.datasetLocations = [[]]; // Clean up


            // Convert our array of objects into a list of objects, and put it in the select box.
            $scope.locationOptions = $rootScope.locationOptions = makeObjects($scope.sortedLocations, 'Id', 'Label');

            console.log("locationOptions is next...");
            console.dir($scope.locationOptions);

            console.log("$scope.project.Instruments is next...");
            console.dir($scope.project.Instruments);
            if ($scope.project.Instruments.length > 0) {
                $scope.instrumentOptions = $rootScope.instrumentOptions = makeInstrumentObjects($scope.project.Instruments);
                //getByField($scope.datasheetColDefs, 'Instrument','Label').visible=true;
            }

            //check authorization -- need to have project loaded before we can check project-level auth
            if (!$rootScope.Profile.isProjectOwner($scope.project) && !$rootScope.Profile.isProjectEditor($scope.project)) {
                $location.path("/unauthorized");
            }

            console.log("$scope at end of Project watch is next...");
            //console.dir($scope);
        });

        //setup a listener to populate column headers on the grid
        $scope.$watch('dataset.Fields', function () {
            if (!$scope.dataset.Fields) return;

            console.log("Inside watch dataset.Fields...");

            $rootScope.datasetId = $scope.datasetId = $scope.dataset.Id;
            console.log("$rootScope.datasetId = " + $rootScope.datasetId);
            $scope.dataset.Files = DatasetService.getDatasetFiles($scope.dataset.Id);

            $scope.DatastoreTablePrefix = $rootScope.DatastoreTablePrefix = $scope.dataset.Datastore.TablePrefix;
            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            $scope.datasheetColDefs = DataSheet.getColDefs($scope.DatastoreTablePrefix);  // Pass the TablePrefix (name of the dataset), because it will never change.			

            //load our project based on the projectid we get back from the dataset
            $scope.project = ProjectService.getProject($scope.dataset.ProjectId);

            $scope.QAStatusOptions = $rootScope.QAStatusOptions = makeObjects($scope.dataset.QAStatuses, 'Id', 'Name');

            $scope.timezoneOptions = $rootScope.timezoneOptions = makeObjects($scope.SystemTimezones, 'Name', 'Name');  // Items sorted by Id
            //$scope.timezoneOptions = $rootScope.timezoneOptions = makeObjects($scope.SystemTimezones,'Name','Description');  // Items sorted by Name

            //iterate the fields of our dataset and populate our grid columns
            // Note:  If the OrderBy column of EITHER records that are being compared DOES NOT have a "real" value (not NULL or blank, etc.),
            // the sort process in services.js will use the FieldRoleId column instead.
            // This may be an all or none situation (all must have an OrderBy value), because if only some have the value set,
            // then the order is jumbled on the web page.  When the OrderBy is set for all, they all show in the proper order on the page.
            angular.forEach($scope.dataset.Fields.sort(orderByIndex), function (field) {

                parseField(field, $scope);

                if (field.FieldRoleId == FIELD_ROLE_HEADER) {
                    $scope.fields.header.push(field);
                    $scope.datasheetColDefs.push(makeFieldColDef(field, $scope));
                }
                else if (field.FieldRoleId == FIELD_ROLE_DETAIL) {
                    $scope.fields.detail.push(field);
                    $scope.datasheetColDefs.push(makeFieldColDef(field, $scope));
                }
            });

            //now everything is populated and we can do any post-processing.
            if ($scope.datasheetColDefs.length > 2) {
                $scope.addNewRow();
            }

            if ($scope.dataset.Config) {
                var filteredColDefs = [];

                angular.forEach($scope.datasheetColDefs, function (coldef) {
					//console.log("coldef is next...");
					//console.dir(coldef);
                    if ($scope.dataset.Config.DataEntryPage &&
                        !$scope.dataset.Config.DataEntryPage.HiddenFields.contains(coldef.field)) {
                        filteredColDefs.push(coldef);
                    }
                });

                $scope.datasheetColDefs = $scope.colDefs = filteredColDefs;
            }

            $scope.recalculateGridWidth($scope.datasheetColDefs.length);
            $scope.validateGrid($scope);

        });

        $scope.doneButton = function () {
            $scope.activities = undefined;
            $scope.dataset = undefined;
            $scope.foundDuplicate = false;
            $route.reload();
            $scope.reloadProject();
            //DataSheet.initScope($scope); //needed?
        }

        $scope.viewButton = function () {
            $location.path("/" + $scope.dataset.activitiesRoute + "/" + $scope.dataset.Id);
        }

        $scope.cancel = function () {
            if ($scope.dataChanged) {
                if (!confirm("Looks like you've made changes.  Are you sure you want to leave this page?"))
                    return;
            }

            $location.path("/" + $scope.dataset.activitiesRoute + "/" + $scope.dataset.Id);
        };

        //adds row to datasheet grid
        $scope.addNewRow = function () {
            var row = makeNewRow($scope.datasheetColDefs);
            row.QAStatusId = $scope.dataset.DefaultActivityQAStatusId;
            row.RowQAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
            $scope.onRow = row;

        };

        $scope.saveData = function () {

            angular.forEach($scope.dataSheetDataset, function (dataRow) {
                angular.forEach(dataRow, function (key, value) {
                    console.log("key = " + key);
                    if ($scope.DatastoreTablePrefix === "JvRearing") {
                        if (key === "Result") {
                            value = parsefloat(value);
                        }
                    }
                });
            });

            var sheetCopy = angular.copy($scope.dataSheetDataset);

            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            if ($scope.DatastoreTablePrefix == "FishScales") {
                console.log("$scope.primaryDatasetLocation = " + $scope.primaryDatasetLocation);
                $scope.row.locationId = $scope.primaryDatasetLocation;
            }
            else
                console.log("Not working with FishScales...");

            //$scope.activities = ActivityParser.parseActivitySheet(sheetCopy, $scope.fields);
            //$scope.activities = ActivityParser.parseActivitySheet(sheetCopy, $scope.fields, $scope.dataset.QAStatuses);
            $scope.activities = ActivityParser.parseActivitySheet(sheetCopy, $scope.fields, $scope.DatastoreTablePrefix, "DataEntrySheet", $scope.dataset.QAStatuses);

            if (!$scope.activities.errors) {
                var promise = DatasetService.saveActivities($scope.userId, $scope.dataset.Id, $scope.activities);
                promise.$promise.then(function () {
                    $scope.new_activity = $scope.activities.new_records;
                });
            }

        };

        // For Creel Survey only. 
        // Open form to add a fisherman to the database
        $scope.addFisherman = function () {
            $scope.viewFisherman = null;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-create-fisherman.html',
                controller: 'ModalCreateFishermanCtrl',
                scope: $scope, //very important to pass the scope along...
            });
        };

        // For Creel Survey only. 
        $scope.addNewInterview = function () {
            var row = makeNewRow($scope.datasheetColDefs);
            row.QAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
            $scope.onRow = row;

            for (var i = 0; i < $scope.datasheetColDefs.length; i++) {
                if ( // Headers
                    ($scope.datasheetColDefs[i].field === "activityDate") ||
                    ($scope.datasheetColDefs[i].field === "locationId") ||
                    ($scope.datasheetColDefs[i].field === "QAStatusId") ||
                    ($scope.datasheetColDefs[i].field === "Direction") ||
                    ($scope.datasheetColDefs[i].field === "Shift") ||
                    ($scope.datasheetColDefs[i].field === "SurveySpecies") ||
                    ($scope.datasheetColDefs[i].field === "Comments") ||
                    ($scope.datasheetColDefs[i].field === "FieldSheetFile") ||
                    // Details
                    ($scope.datasheetColDefs[i].field === "InterviewTime") ||
                    ($scope.datasheetColDefs[i].field === "GPSEasting") ||
                    ($scope.datasheetColDefs[i].field === "GPSNorthing") ||
                    ($scope.datasheetColDefs[i].field === "CarcassComments") ||
                    ($scope.datasheetColDefs[i].field === "TotalTimeFished")
                ) {
                    $scope.datasheetColDefs[i].enableCellEdit = true;
                    //$scope.datasheetColDefs[i].cellEditableCondition = true;
                    //$scope.disabledFont();
                }

            }
        };

        // For Creel Survey only.
        // Adds another row to datasheet grid and copies common items (surveyor, date, etc.)
        $scope.addAnotherFish = function () {
            console.log("Inside addAnotherFish...");
            console.log("$scope before copy is next...");
            //console.dir($scope);

            var listLength = $scope.dataSheetDataset.length;
            // Header items:  Needed in datasheet form
            var theActivityDate = $scope.dataSheetDataset[listLength - 1].activityDate;
            var theLocationId = $scope.dataSheetDataset[listLength - 1].locationId;
            var theDirection = $scope.dataSheetDataset[listLength - 1].Direction;
            var theShift = $scope.dataSheetDataset[listLength - 1].Shift;
            var theSurveySpecies = $scope.dataSheetDataset[listLength - 1].SurveySpecies;
            var surveyComments = $scope.dataSheetDataset[listLength - 1].SurveyComments;
            var theFieldSheetLink = $scope.dataSheetDataset[listLength - 1].FieldSheetFile;
            // Detail items
            var interviewTime = $scope.dataSheetDataset[listLength - 1].InterviewTime;
            var gpsEasting = $scope.dataSheetDataset[listLength - 1].GPSEasting;
            var gpsNorthing = $scope.dataSheetDataset[listLength - 1].GPSNorthing;
            var interviewComments = $scope.dataSheetDataset[listLength - 1].InterviewComments;
            var totalTimeFished = $scope.dataSheetDataset[listLength - 1].TotalTimeFished;
            var numberFishCaught = $scope.dataSheetDataset[listLength - 1].NumberFishCaught;
            var qaStatusId = $scope.dataSheetDataset[listLength - 1].QAStatusId;

            var row = makeNewRow($scope.datasheetColDefs);
            row.QAStatusId = $scope.dataset.DefaultActivityQAStatusId;
            //row.RowQAStatusId = $scope.dataset.DefaultRowQAStatusId;
            $scope.dataSheetDataset.push(row);
            $scope.onRow = row;

            listLength = $scope.dataSheetDataset.length;
            // Headers:  Needed for datasheet form
            $scope.dataSheetDataset[listLength - 1].activityDate = theActivityDate;
            $scope.dataSheetDataset[listLength - 1].locationId = theLocationId;
            $scope.dataSheetDataset[listLength - 1].Direction = theDirection;
            $scope.dataSheetDataset[listLength - 1].Shift = theShift;
            $scope.dataSheetDataset[listLength - 1].SurveySpecies = theSurveySpecies;
            $scope.dataSheetDataset[listLength - 1].SurveyComments = surveyComments;
            $scope.dataSheetDataset[listLength - 1].FieldSheetFile = theFieldSheetLink;
            // Details
            $scope.dataSheetDataset[listLength - 1].InterviewTime = interviewTime;
            $scope.dataSheetDataset[listLength - 1].GPSEasting = gpsEasting;
            $scope.dataSheetDataset[listLength - 1].GPSNorthing = gpsNorthing;
            $scope.dataSheetDataset[listLength - 1].InterviewComments = interviewComments;
            $scope.dataSheetDataset[listLength - 1].TotalTimeFished = totalTimeFished;
            $scope.dataSheetDataset[listLength - 1].NumberFishCaught = numberFishCaught;
            $scope.dataSheetDataset[listLength - 1].QAStatusId = qaStatusId;

            for (var i = 0; i < $scope.datasheetColDefs.length; i++) {
                if (($scope.datasheetColDefs[i].field === "InterviewTime") ||
                    ($scope.datasheetColDefs[i].field === "GPSEasting") ||
                    ($scope.datasheetColDefs[i].field === "GPSNorthing") ||
                    ($scope.datasheetColDefs[i].field === "InterviewComments") ||
                    ($scope.datasheetColDefs[i].field === "TotalTimeFished") ||
                    // Header fields
                    ($scope.datasheetColDefs[i].field === "activityDate") ||
                    ($scope.datasheetColDefs[i].field === "locationId") ||
                    ($scope.datasheetColDefs[i].field === "QAStatusId") ||
                    ($scope.datasheetColDefs[i].field === "Direction") ||
                    ($scope.datasheetColDefs[i].field === "Shift") ||
                    ($scope.datasheetColDefs[i].field === "SurveySpecies") ||
                    ($scope.datasheetColDefs[i].field === "SurveyComments") ||
                    ($scope.datasheetColDefs[i].field === "FieldSheetFile")
                ) {
                    $scope.datasheetColDefs[i].enableCellEdit = false;
                    //$scope.datasheetColDefs[i].cellEditableCondition = false;
                    //$scope.disabledFont();
                }

            }

            console.log("$scope after copy is next...");
            //console.dir($scope);

            //$scope.reloadProject();

			/*
			$scope.onRow.entity.InterviewTime = interviewTime;
			$scope.onRow.entity.GPSEasting = gpsEasting;
			$scope.onRow.entity.GPSNorthing = gpsNorthing;
			$scope.onRow.entity.CarcassComments = carcassComments;
			$scope.onRow.entity.TotalTimeFished = totalTimeFished;
			$scope.onRow.entity.NumberFishCaught = numberFishCaught;
			*/
        };

    }
];
define("core/datasets/components/dataset-entry-sheet/dataset-entry-sheet", function(){});

/**
*  This is the main "view the activity" page with header and detail grid.
*  e.g.: http://localhost/cdms/index.html#/dataview/89433
*/

var dataset_view = ['$scope', '$routeParams', 'DatasetService', '$modal', '$location', 'DataSheet', '$route', '$rootScope', 'ChartService', 'ProjectService',
    function ($scope, $routeParams, DatasetService, $modal, $location, DataSheet, $route, $rootScope, ChartService, ProjectService) {
        console.log("Inside dataview-controller.js, controller DatasetViewCtrl...");
        console.log("$routeParams.Id = " + $routeParams.Id);
        $scope.grid = DatasetService.getActivityData($routeParams.Id); //activity data for a particular activityId

        $scope.fields = { header: [], detail: [], relation: [] };
        $scope.datasheetColDefs = [];
        $scope.dataSheetDataset = [];
        $scope.gridFields = [];

        //$scope.datasetId = null;

        console.log("Setting $scope.fieldsloaded to false...");
        $scope.fieldsloaded = false;

        $scope.fishermenList = null;

        $scope.$watch('QaSaveResults', function () {
            if ($scope.QaSaveResults && $scope.QaSaveResults.success) {
                $scope.grid = DatasetService.getActivityData($routeParams.Id); //activity data for a particular activityId
            }
        }, true);

        $scope.query = { loading: true };
        $scope.activities = $rootScope.GridActivities; //pull this in from the previous page, if they were set.  Used for navigating between activities.

        $scope.gridDatasheetOptions = {
            data: 'dataSheetDataset',
            columnDefs: 'datasheetColDefs',
            enableColumnResize: true,
            enableSorting: true,
            enableCellSelection: true,
            showFilter: true,
            showColumnMenu: true,
            enableRowSelection: true,
            multiSelect: false,
            //showFooter: true,
            //footerTemplate: '<div class="grid-footer-totals"><div class="colt0 sumField"></div><div class="colt1 sumField"></div><div class="colt2 sumField"></div><div class="colt3 sumField"></div><div class="colt4 sumField"></div><div class="colt5 sumField">s: 1433<br/>a: 477.67</div><div class="colt6 sumField"></div></div>',

        };

        DataSheet.initScope($scope);

        var fishermenWatcher =
            $scope.$watch('fishermenList.length', function () {
                //console.log("Inside fishermenList watch...");
                if ((typeof $scope.fishermenList !== 'undefined') && ($scope.fishermenList !== null)) {
                    console.log("Inside fishermenList watch...");
                    console.log("$scope.fishermenList.length = " + $scope.fishermenList.length)

                    if ($scope.fishermenList.length > 0) {
                        $scope.fishermenOptions = $rootScope.fishermenOptions = makeObjects($scope.fishermenList, 'Id', 'FullName');
                        console.log("$scope.fishermenOptions is next...");
                        console.dir($scope.fishermenOptions);
                    }
                }

            });

        $scope.$watch('dataset.ProjectId', function () {
            if ($scope.dataset && $scope.dataset.ProjectId) {
                console.log("Inside watch dataset.ProjectId...");
                console.log("ProjectId = " + $scope.dataset.ProjectId);
                $rootScope.projectId = $scope.dataset.ProjectId;

                $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
                $scope.QAStatusOptions = $rootScope.QAStatusOptions = makeObjects($scope.dataset.QAStatuses, 'Id', 'Name');

                ChartService.buildChart($scope, $scope.grid.Details, $scope.dataset.Datastore.TablePrefix);

                // If the dataset WaterTemp or WaterQuality, show the RowQAStatus field.
                if (($scope.DatastoreTablePrefix === "WaterTemp") || ($scope.DatastoreTablePrefix === "WaterQuality")) {
                    if ($scope.dataset.RowQAStatuses.length > 1) {
                        $scope.datasheetColDefs.unshift( // Add the item to the beginning of the array.
                            {
                                field: "QAStatusId", //QARowStatus
                                displayName: "QA",
                                cellFilter: 'RowQAStatusFilter'
                            });
                    }
                }

                // If we are on the Creel Survey dataset, we need to take the total number of minutes,
                // and put it into HH:MM format, before putting the entry on the form.
                if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                    var detailsLength = $scope.dataSheetDataset.length;
                    var NumMinutes = -1;
                    var theHours = -1;
                    var theMinutes = -1;

                    var strHours = "";
                    var strMinutes = "";
                    for (var i = 0; i < detailsLength; i++) {
                        NumMinutes = parseInt($scope.dataSheetDataset[i].TotalTimeFished);
                        //console.log("NumMinutes = " + NumMinutes);
                        theHours = parseInt(NumMinutes / 60, 10);
                        //console.log("theHours = " + theHours);
                        theMinutes = NumMinutes - (theHours * 60);
                        //console.log("theMinutes = " + theMinutes);

                        if (theHours < 10)
                            strHours = "0" + theHours;
                        else
                            strHours = "" + theHours;

                        if (theMinutes < 10)
                            strMinutes = "0" + theMinutes;
                        else
                            strMinutes = "" + theMinutes;

                        $scope.dataSheetDataset[i].TotalTimeFished = strHours + ":" + strMinutes;
                        //console.log("TotalTimeFished is now = " + $scope.dataSheetDataset[i].TotalTimeFished);

                        NumMinutes = -1;
                        theHours = -1;
                        theMinutes = -1;
                        strHours = "";
                        strMinutes = "";
                    }
                }
            }
            console.log("$scope at end of watch dataset.ProjectId is next...");
            //console.dir($scope);
        });

        //setup a listener to populate column headers on the grid
        $scope.$watch('grid.Dataset', function () {
            if (!$scope.grid.Dataset) return; //not done cooking yet.

            console.log("Inside watch grid.Dataset...");
            console.log("$scope.grid is next...");
            console.dir($scope.grid);

            $scope.dataset = $scope.grid.Dataset;//DatasetService.getDataset($scope.grid.Dataset.Id);
            console.log("Dataset ID = " + $scope.grid.Dataset.Id);
            $rootScope.datasetId = $scope.datasetId = $scope.grid.Dataset.Id
            console.log("$rootScope.datasetId = " + $rootScope.datasetId);

            $rootScope.DatastoreTablePrefix = $scope.DatastoreTablePrefix = $scope.grid.Dataset.Datastore.TablePrefix;
            console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            $scope.datasheetColDefs = DataSheet.getColDefs($scope.DatastoreTablePrefix, "form");  // Pass the TablePrefix (name of the dataset), because it will never change.									

            DatasetService.configureDataset($scope.dataset);

            if ($scope.DatastoreTablePrefix === "CreelSurvey") {
                $scope.fishermenList = ProjectService.getFishermen();

                console.log("Extracting times from strings...");
                var strTimeStart = $scope.grid.Header.TimeStart;
                var strTimeEnd = $scope.grid.Header.TimeEnd;
                var intTLoc = strTimeStart.indexOf("T");
                // Start just past the "T" in the string, and get the time portion (the next 5 characters).
                strTimeStart = strTimeStart.substr(intTLoc + 1, 5);
                $scope.grid.Header.TimeStart = strTimeStart;

                strTimeEnd = strTimeEnd.substr(intTLoc + 1, 5);
                $scope.grid.Header.TimeEnd = strTimeEnd;

                for (var i = 0; i < $scope.grid.Details.length; i++) {
                    console.log("$scope.grid.Details[i] is next...");
                    console.dir($scope.grid.Details[i]);
                    var strInterviewTime = $scope.grid.Details[i].InterviewTime;
                    console.log("strInterviewTime = " + strInterviewTime);
                    intTLoc = strInterviewTime.indexOf("T");
                    console.log("intLoc = " + intTLoc);
                    strInterviewTime = strInterviewTime.substr(intTLoc + 1, 5);
                    console.log("strInterviewTime = " + strInterviewTime);
                    $scope.grid.Details[i].InterviewTime = strInterviewTime
                }
            }

            console.log("$scope.fieldsloaded = " + $scope.fieldsloaded);
            $scope.fields.header = [];
            if (!$scope.fieldsloaded) {
                angular.forEach($scope.grid.Dataset.Fields.sort(orderByIndex), function (field) {

                    parseField(field, $scope);

                    if (field.FieldRoleId == FIELD_ROLE_HEADER) {
                        $scope.fields.header.push(field);
                    }
                    else if (field.FieldRoleId == FIELD_ROLE_DETAIL) {
                        $scope.fields.detail.push(field);
                        $scope.datasheetColDefs.push(makeFieldColDef(field, $scope));
                    }

                    //keep a list of grid fields (relations) for later loading
                    if (field.ControlType == "grid")
                        $scope.gridFields.push(field);
                });
                console.log("Setting $scope.fieldsloaded to true...");
                $scope.fieldsloaded = true;

                $scope.dataSheetDataset = $scope.grid.Details;
                $scope.recalculateGridWidth($scope.datasheetColDefs.length);
            }
            $scope.query.loading = false;

            $scope.RowQAStatuses = $rootScope.RowQAStatuses = makeObjects($scope.dataset.RowQAStatuses, 'Id', 'Name');  //Row qa status ids

            $scope.grid.Header.Activity.Timezone = angular.fromJson($scope.grid.Header.Activity.Timezone);


        });


        $scope.$watch('dataSheetDataset', function () {
            if (!$scope.dataSheetDataset)
                return;

            console.log("Inside watch dataSheetDataset...");
            console.log("$scope.dataSheetDataset is next...");
            console.dir($scope.dataSheetDataset);
            console.log("$scope.gridFields is next...");
            console.dir($scope.gridFields);
            console.log("*****")

            //kick off the loading of relation data (we do this for UI performance rather than returning with the data...)
            angular.forEach($scope.dataSheetDataset, function (datarow) {
                angular.forEach($scope.gridFields, function (gridfield) {
                    datarow[gridfield.DbColumnName] = DatasetService.getRelationData(gridfield.FieldId, datarow.ActivityId, datarow.RowId);
                    console.log("kicking off loading of " + datarow.ActivityId + ' ' + datarow.RowId);
                })
            })

        });

        $scope.reloadProject = function () {
            //reload project instruments -- this will reload the instruments, too
            console.log("Inside reloadProject... we will fetch ProjectId: " + $scope.dataset.ProjectId);
            ProjectService.clearProject();
            $scope.fieldsloaded = false; //triggers reload of grid and form after project reloads
            $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
            var watcher = $scope.$watch('project.Id', function () {
                //$scope.selectInstrument();
                console.log("We're back with: " + $scope.project.Id);
                $rootScope.projectId = $scope.project.Id;
                watcher();
            });

        };

        $scope.getDataGrade = function (check) { return getDataGrade(check) }; //alias from service

        $scope.changeQa = function () {
            $scope.QaSaveResults = {};
            $scope.row = { ActivityQAStatus: {} }; //modal selections

            var modalInstance = $modal.open({
                templateUrl: 'app/core/datasets/components/dataset-view/templates/changeqa-modal.html',
                controller: 'ModalQaUpdateCtrl',
                scope: $scope, //very important to pass the scope along... -- TODO: but we don't want to pass in the whole $scope...
                //resolve: { files: function() { return $scope.files; } }
            });
        };

        $scope.openEdit = function () {
            $location.path("/edit/" + $scope.grid.Header.ActivityId);
        }

        $scope.openExportView = function () {
            var modalInstance = $modal.open({
                templateUrl: 'app/core/common/components/modals/templates/modal-exportfile.html',
                controller: 'ModalDataEntryCtrl',
                scope: $scope, //very important to pass the scope along... -- TODO: but we don't want to pass in the whole $scope...
                //resolve: { files: function() { return $scope.files; } }
            });
        }


        //copy and paste alert -- this should be in a common thing!
        $scope.openDataEntryModal = function () {
            var modalInstance = $modal.open({
                templateUrl: 'app/core/datasets/components/dataset-view/templates/dataentry-modal.html',
                controller: 'ModalDataEntryCtrl',
                scope: $scope, //very important to pass the scope along... -- TODO: but we don't want to pass in the whole $scope...
                //resolve: { files: function() { return $scope.files; } }
            });
        };

        $scope.openRelationGridModal = function (row, field) {
            $scope.relationgrid_row = row;
            $scope.relationgrid_field = field;
            $scope.isEditable = false;

            var modalInstance = $modal.open({
                templateUrl: 'app/core/datasets/components/dataset-relationgrid/templates/relationgrid-modal.html',
                controller: 'RelationGridModalCtrl',
                scope: $scope,
            });

        };

        $scope.viewRelation = function (row, field_name) {
            //console.dir(row.entity);
            var field = $scope.FieldLookup[field_name];
            //console.dir(field);

            $scope.openRelationGridModal(row.entity, field);
        }

        //defined in services
        $scope.previousActivity = function () {
            previousActivity($scope.activities, $routeParams.Id, $location);
        }

        $scope.nextActivity = function () {
            nextActivity($scope.activities, $routeParams.Id, $location);
        }

        $scope.fromJson = function (field) {
            return angular.fromJson($scope.grid.Header[field]);
        }


    }];


define("core/datasets/components/dataset-view/dataset-view", function(){});

var modal_qa_update = ['$scope', 'DatasetService', 'ProjectService', '$modalInstance',
    function ($scope, DatasetService, ProjectService, $modalInstance) {
        $scope.save = function () {

            DatasetService.updateQaStatus(
                $scope.grid.Header.ActivityId,
                $scope.row.ActivityQAStatus.QAStatusId,
                $scope.row.ActivityQAStatus.Comments,
                $scope.QaSaveResults);

            ProjectService.clearProject();

            $scope.fields = { header: [], detail: [], relation: [] };
            $scope.datasheetColDefs = [];
            $scope.dataSheetDataset = [];
            $scope.fieldsloaded = false;

            $scope.reloadProject();
            $modalInstance.dismiss();
        };

        $scope.cancel = function () {
            $modalInstance.dismiss();
        };

    }
];
define("core/datasets/components/dataset-view/modal-qa-update", function(){});


var modal_data_entry = ['$scope', '$modalInstance', 
	function($scope, $modalInstance){
		//DRY alert -- this was copy and pasted... how can we fixy?
		$scope.alerts = [];

		$scope.ok = function(){
			try{
				$scope.addGridRow($scope.row);
				$scope.row = {};
				$scope.alerts.push({type: 'success',msg: 'Added.'});
			}catch(e){
				console.dir(e);
			}
		};

		$scope.cancel = function() {
			$modalInstance.dismiss('cancel');
		};

		$scope.closeAlert = function(index) {
		    $scope.alerts.splice(index, 1);
		};

		$scope.row = {}; //modal fields are bound here

		$scope.dateOptions = {
		    'year-format': "'yy'",
		    'starting-day': 1
		};


	}
];

define("core/datasets/components/dataset-view/modal-data-entry", function(){});

var dataset_import = ['$scope', '$routeParams', 'ProjectService', 'CommonService', 'SubprojectService', 'DatasetService',
        '$location', '$upload', 'ActivityParser', 'DataSheet', '$rootScope',
		'Logger','$route','$modal','ChartService','ServiceUtilities',
        function ($scope, $routeParams, ProjectService, CommonService, SubprojectService, DatasetService, $location, $upload, ActivityParser, DataSheet,
            $rootScope, Logger, $route, $modal, ChartService,
			ServiceUtilities) {
        	$scope.dataset = DatasetService.getDataset($routeParams.Id);
		
			$scope.activities = null;
		
			$scope.mappedActivityFields = {};
			$scope.userId = $rootScope.Profile.Id;
			$scope.fields = { header: [], detail: [], relation: []}; 
			$scope.dataSheetDataset = [];
			$scope.showHeaderForm = false;
			$scope.row = {}; //header form values if used...
			$scope.selectedItems = [];

			$scope.HeaderColDefs = []; //inserted into grid if wide-sheet view
			$scope.DetailColDefs = []; //fields always present in the grid
			$scope.RowQAColDef = [];

			// Q:  Why are we loading the activities, on the import page?
			// A:  Is a user entering a set of duplicate records?  We need the dataset activities to answer that question.
			//$scope.existingActivitiesLoad = DatasetService.getActivities($routeParams.Id);
			//$scope.existingActivities = []; // These are for checking for duplicates.
			$scope.sortedLocations = [];
			$scope.datasetLocationType=0;
			$scope.datasetLocations = [[]];
			$scope.primaryProjectLocation = 0;

			$scope.fishermenOptions = $rootScope.fishermenOptions = null;
			
			$scope.ShowInstrument = false;
			
			$scope.subprojectList = null;

			$scope.ActivityFields = { QAComments: DEFAULT_IMPORT_QACOMMENT, ActivityDate: new Date() };

			$scope.UploadResults = {};
			$scope.UploadResults.errors = [];

			$scope.ignoreDuplicates = true;
			$scope.DuplicateRecordsBucket = [];
			
			$scope.mapping = {};
			//to be able to show only the invalid records.
			$scope.ValidRecordsBucket = [];
			$scope.TempRecordsBucket = [];
			
			//datasheet grid
			$scope.gridDatasheetOptions = {
				data: 'dataSheetDataset',
				enableCellSelection: true,
		        enableRowSelection: true,
		        multiSelect: true,
		        enableCellEdit: true,
		        columnDefs: 'datasheetColDefs',
		        enableColumnResize: true,
		        selectedItems: $scope.selectedItems

			};
			
			/*$scope.chartConfig = {
    			  title : 'Fish by Species x',
				  tooltips: true,
				  labels : false,
				  
				  legend: {
				    display: true,
				    position: 'right'
				  }
    		};*/
    		//$scope.chartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default
			
			$scope.importing = false;
			$scope.UploadResults.showPreview = false;
			$scope.Logger = Logger;
			$scope.enablePreview = false;
			$scope.callingPage = "Import";
			

			
            //config the fields for the preview datasheet - include mandatory location and activityDate fields
			//$scope.datasheetColDefs = DataSheet.getColDefs();
			DataSheet.initScope($scope);

			$scope.cellRowQATemplate = '<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'RowQAStatusId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in RowQAStatuses"/>';

			// Original code
			/*$scope.mappableFields = [
				{
					Label: "[-- Do not map --]"
				},
				{
					Label: "[-- Activity Date --]"
				},
				{
					Label: "[-- Index Field --]"
				},
				{
					Label: "[-- QA Row Status Id --]"
				},

				
				//{
				//	Label: "[-- Location Id --]"
				//},
				
			];
			*/
			
			$scope.$watch('subprojectList.length', function(){
				if ($scope.subprojectList === null)
					return;
				else if ($scope.subprojectList.length === 0)
					return;
				
				console.log("Inside watch subprojectList.length...");
				
				//if ($scope.DatastoreTablePrefix === "Metrics")
				if (($scope.datasets[i].DatastoreTablePrefix === "Metrics") || 
					($scope.datasets[i].DatastoreTablePrefix === "Benthic") ||
					($scope.datasets[i].DatastoreTablePrefix === "Drift")
					)
				{
					console.log("$scope.subprojectList is next...");
					console.dir($scope.subprojectList);
					console.log("$scope.project.Locations is next...");
					console.dir($scope.project.Locations);
				
					angular.forEach($scope.subprojectList, function(subproject){
						angular.forEach($scope.project.Locations, function(location){
							//console.log("location.LocationTypeId = " +  location.LocationTypeId + ", subproject.LocationId = " + subproject.LocationId + ", location.Id = " + location.Id);
							if (subproject.LocationId === location.Id)
							{
								console.log("Found a subproject location")
								console.dir(location);
								$scope.datasetLocations.push([location.Id, location.Label]);
							}
						});						
					});
				}
				
				console.log("datasetLocations (with subprojects) is next...");
				console.dir($scope.datasetLocations);

				$scope.finishLocationProcessing();
			});

			/*$scope.$watch('dataset.Id', function(){
				if (!$scope.dataset.Id) return;
				
				console.log("Inside DatasetImportCtrl, dataset.Id watcher...");
				
				console.log("$scope.dataset is next...");
				console.dir($scope.dataset);
				
				$rootScope.datasetId = $scope.datasetId = $scope.dataset.Id;
				console.log("$rootScope.datasetId = " + $rootScope.datasetId);
				
				//if (($scope.dataset.Config !== "NULL") && ($scope.dataset.Config.DataEntryPage.ShowFields.contains('Instrument')))
				if (((typeof $scope.dataset.Config !== 'undefined') && 
					($scope.dataset.Config !== null) && 
					($scope.dataset.Config !== "NULL")) && 
					($scope.dataset.Config.DataEntryPage.HiddenFields) &&
					($scope.dataset.Config.DataEntryPage.HiddenFields.indexOf("Instrument") > -1))
						console.log("Found instrument");
				
				$scope.DatastoreTablePrefix = $rootScope.DatastoreTablePrefix = $scope.dataset.Datastore.TablePrefix;
				$scope.datasetLocationType = CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);				
				console.log("LocationType = " + $scope.datasetLocationType);				
				$scope.datasheetColDefs = DataSheet.getColDefs($scope.DatastoreTablePrefix);  // Pass the TablePrefix (name of the dataset), because it will never change.
				$scope.mappableFields = $scope.setMappableFields($scope.DatastoreTablePrefix);				
			});
			*/
			
			//setup our mappableFields list
    		//$scope.$watch('dataset.Name', function(){
    		$scope.$watch('dataset.Fields', function(){
				if (!$scope.dataset.Fields)
					return;

				console.log("Inside DatasetImportCtrl, dataset.Fields watcher...");
				
				console.log("$scope.dataset is next...");
				console.dir($scope.dataset);
				
				$rootScope.datasetId = $scope.datasetId = $scope.dataset.Id;
				console.log("$rootScope.datasetId = " + $rootScope.datasetId);
				
				//if (($scope.dataset.Config !== "NULL") && ($scope.dataset.Config.DataEntryPage.ShowFields.contains('Instrument')))
				if (((typeof $scope.dataset.Config !== 'undefined') && 
					($scope.dataset.Config !== null) && 
					($scope.dataset.Config !== "NULL")) && 
					($scope.dataset.Config.DataEntryPage.HiddenFields) &&
					($scope.dataset.Config.DataEntryPage.HiddenFields.indexOf("Instrument") > -1))
						console.log("Found instrument");
				
				$scope.DatastoreTablePrefix = $rootScope.DatastoreTablePrefix = $scope.dataset.Datastore.TablePrefix;
				console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
				
				if ($scope.DatastoreTablePrefix === 'WaterTemp')
					$scope.ShowInstrument = true;
				else if ($scope.DatastoreTablePrefix === "CreelSurvey")
				{
					$scope.fishermenList = ProjectService.getFishermen();
					$scope.datasheetColDefs2 = [ 
							{
								field: 'FishermanId',
								displayName: 'Fisherman',
								cellFilter: 'fishermanFilter',
							}
						];
				}
				
				$scope.datasetLocationType = CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);				
				console.log("LocationType = " + $scope.datasetLocationType);	
				
				$scope.datasheetColDefs = DataSheet.getColDefs($scope.DatastoreTablePrefix);  // Pass the TablePrefix (name of the dataset), because it will never change.
				console.log("$scope.datasheetColDefs is next...");
				console.dir($scope.datasheetColDefs);
				
				$scope.mappableFields = $scope.setMappableFields($scope.DatastoreTablePrefix);
									
				//DatasetService.configureDataset($scope.dataset); //bump to load config since we are pulling it directly out of the activities

				$scope.project = ProjectService.getProject($scope.dataset.ProjectId);

				$scope.QAStatusOptions = $rootScope.QAStatusOptions = makeObjects($scope.dataset.QAStatuses, 'Id','Name');
				$scope.RowQAStatuses =  $rootScope.RowQAStatuses = makeObjects($scope.dataset.RowQAStatuses, 'Id', 'Name');  //Row qa status ids

				$scope.ActivityFields.QAStatusId = ""+$scope.dataset.DefaultActivityQAStatusId;

				//setup special columns so they participate in validation
				$scope.FieldLookup['activityDate'] = { DbColumnName: 'activityDate', ControlType: "date" };
				$scope.FieldLookup['QAStatusId'] = 	 { DbColumnName: 'QAStatusId', ControlType: "select" };
				$scope.CellOptions['QAStatusIdOptions'] = 	 $scope.QAStatusOptions;
				//$scope.CellOptions['FishermanIdOptions'] = $scope.fishermenOptions;

				//iterate fields and set 'em up
				angular.forEach($scope.dataset.Fields.sort(orderByAlpha), function(field){
					parseField(field, $scope);

					//mappable fields
					$scope.mappableFields.push(field);

					//setup the headers/details and datasheet fields
					if(field.FieldRoleId == FIELD_ROLE_HEADER)
					{
						$scope.fields.header.push(field);
						$scope.HeaderColDefs.push(makeFieldColDef(field, $scope));
					}
					else if(field.FieldRoleId == FIELD_ROLE_DETAIL)
					{
						$scope.fields.detail.push(field);
						$scope.DetailColDefs.push(makeFieldColDef(field, $scope));
					}

					//convention: if you have a readingdatetime field then we turn on our timezone magic
					if(field.DbColumnName == "ReadingDateTime")
					{
						/* Note:  The first line below allows the system to automatically determine what timezone we are in, based upon the current date.
							Initially this seemed like a good idea.  However, while the WaterTemp folks collect their data during the Daylight Savings
							timezone, they upload their data during the Standard timezone.  When the system requires them to remember to change the timezone,
							for all their imports from Standard to Daylight Savings, it can cause a headache, if they forget to make the change.
							Therefore, we decided instead to default the timezone to Daylight Savings, and have them change it to Standard if they must.
							Changing to Standard is a less occurring event than changing from Standard to Daylight Savings.
						*/
						//$scope.row.Timezone = getByField($scope.SystemTimezones, new Date().getTimezoneOffset() * -60000, "TimezoneOffset"); //set default timezone
						$scope.row.Timezone = getByField($scope.SystemTimezones, 420 * -60000, "TimezoneOffset"); //set default timezone to Daylight Savings
					}

				});

				//set defaults for header fields
				angular.forEach($scope.fields.header, function(headerfield){
					$scope.row[headerfield.DbColumnName] = (headerfield.DefaultValue) ? headerfield.DefaultValue : null;
				});

				//if we have more than 1 row qa status then show them.
				//if($scope.dataset.RowQAStatuses.length > 1)
				if (($scope.dataset.Datastore.TablePrefix === "WaterTemp") && ($scope.dataset.RowQAStatuses.length > 1))
				{
					$scope.RowQAColDef.push(
					{
						field: "RowQAStatusId", //QARowStatus
						displayName: "Row QA",
						cellFilter: 'RowQAStatusFilter',
						enableCellEditOnFocus: true,
						editableCellTemplate: $scope.cellRowQATemplate
					});
				}

    		});
			
			$scope.$watch('project.Name', function(){
	        	if(!$scope.project.Name) return;
				
				console.log("Inside DatasetImportCtrl, project.Name watcher...");
	        	//Logger.debug($scope.project);
				
				//$scope.subprojectType = ProjectService.getProjectType($scope.project.Id);
				console.log("$scope.subprojectType = " + $scope.subprojectType);
				SubprojectService.setServiceSubprojectType($scope.subprojectType);

				//if ($scope.subprojectType === "Habitat")
				if ($scope.DatastoreTablePrefix === "Metrics")
				{
					console.log("Loading Habitat subprojects...");				

					$scope.subprojectList = SubprojectService.getProjectSubprojects($scope.project.Id);
					var watcher = $scope.$watch('subprojectList.length', function(){
						console.log("Inside watcher for subprojectList.length...");
						// We wait until subprojects gets loaded and then turn this watch off.
						if ($scope.subprojectList === null)
						{
							console.log("$scope.subprojectList is null");
							return;
						}
						else if (typeof $scope.subprojectList.length === 'undefined')
						{
							console.log("$scope.subprojectList.length is undefined.");
							return;
						}
						else if ($scope.subprojectList.length === 0)
						{
							console.log("$scope.subprojectList.length is 0");
							return;
						}
						console.log("$scope.subprojectList.length = " + $scope.subprojectList.length);
						console.log("subprojects is loaded...");
						console.dir($scope.subprojectList);
						
						watcher();
					});
				}

	        	//check authorization -- need to have project loaded before we can check project-level auth
				//if(!$rootScope.Profile.isProjectOwner($scope.project) && !$rootScope.Profile.isProjectEditor($scope.project))
				if(!$rootScope.Profile.isProjectOwner($scope.project) && !$rootScope.Profile.isProjectEditor($scope.project))
				{
					$location.path("/unauthorized");
				}
				else if ($rootScope.Profile.isProjectOwner($scope.project) && $rootScope.Profile.isProjectEditor($scope.project))
				{
					console.log("User is authorized.");
				}

				console.log("ProjectLocations is next...");
				console.dir($scope.project.Locations);
				//var locInd = 0;
				if ($scope.project.Locations)
				{
					for (var i = 0; i < $scope.project.Locations.length; i++ )
					{
						//console.log("projectLocations Index = " + $scope.project.Locations[i].Label);
						//console.log($scope.project.Locations[i].LocationTypeId + "  " + $scope.datasetLocationType); //$scope.project.Locations[i]);
						if (($scope.DatastoreTablePrefix === "Metrics") ||
							($scope.DatastoreTablePrefix === "Benthic") ||
							($scope.DatastoreTablePrefix === "Drift")
							)
						{
							if (($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) || ($scope.project.Locations[i].LocationTypeId === LOCATION_TYPE_Hab))
							{
								//console.log("Found Habitat-related location");
								$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
							}
						}
						else
						{
							if ($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType)
							{
								//console.log("Found non-Habitat-related location");
								$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
							}
						}

						//{
						//	//console.log("Found one");
						//	$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
						//	//console.log("datasetLocations length = " + $scope.datasetLocations.length);
						//	//locInd++;
						//}
					}
					console.log("datasetLocations is next...");
					console.dir($scope.datasetLocations);
					
					$scope.finishLocationProcessing();
				}
				/*
				// When we built the array, it started adding at location 1 for some reason, skipping 0.
				// Therefore, row 0 is blank.  The simple solution is to just delete row 0.
				//$scope.datasetLocations.shift();
				
				// During the original development, the blank row was always at row 0.  Months later, I noticed that 
				// the blank row was not at row 0.  Therefore, it needed a different solution.
				var index = 0;
				angular.forEach($scope.datasetLocations, function(dsLoc)
				{
					if (dsLoc.length === 0)
					{
						$scope.datasetLocations.splice(index, 1);
					}
					
					index++;
				});
				
				console.log("datasetLocations after splice is next...");
				console.dir($scope.datasetLocations);

				$scope.datasetLocations.sort(order2dArrayByAlpha);
				console.log("datasetLocations sorted...");
				console.dir($scope.datasetLocations);

				// Convert our 2D array into an array of objects.
				for (var i = 0; i < $scope.datasetLocations.length; i++)
				{
					$scope.sortedLocations.push({Id: $scope.datasetLocations[i][0], Label: $scope.datasetLocations[i][1]});
				}
				$scope.datasetLocations = [[]]; // Clean up
				
				
				// Convert our array of objects into a list of objects, and put it in the select box.
				$scope.locationOptions = $rootScope.locationOptions = makeObjects($scope.sortedLocations, 'Id','Label') ;

				console.log("locationOptions is next...");
				console.dir($scope.locationOptions);					
				
				//Add the OtherAgencyId to the label - requirement from Colette
				angular.forEach($scope.project.Locations, function(loc)
	    		{
	    			if(loc.OtherAgencyId && loc.Label.indexOf(loc.OtherAgencyId)==-1)
	    				loc.Label = loc.Label + ' (' + loc.OtherAgencyId + ')';
	    		});
				*/
	        	//setup locationOptions dropdown
				//$scope.locationOptions = $rootScope.locationOptions = makeObjects(getUnMatchingByField($scope.project.Locations,PRIMARY_PROJECT_LOCATION_TYPEID,"LocationTypeId"), 'Id','Label') ;  // Original code
				$scope.instrumentOptions = $rootScope.instrumentOptions = makeObjects($scope.project.Instruments, 'Id','Name');
				
				//setup location field to participate in validation
				$scope.FieldLookup['locationId'] = { DbColumnName: 'locationId', ControlType: "select" };
				$scope.CellOptions['locationIdOptions'] = $scope.locationOptions;

				//set locationid if it is incoming as a query param (?LocationId=142)
	    		if($routeParams.LocationId)
				{
	    			$scope.ActivityFields.LocationId = $routeParams.LocationId;
	    			$scope.setLocation();
				}
	    		//single location?  go ahead and set it to the default.
	    		else if(array_count($scope.locationOptions) == 1)
				{
	    			angular.forEach(Object.keys($scope.locationOptions), function(key){
	    				$scope.ActivityFields.LocationId = key;
	    				$scope.setLocation();
	    			});
	    		}
				
				$scope.fishermenOptions = $rootScope.fishermenOptions = makeObjects($scope.project.Fishermen, 'Id','FullName');
				
				//setup location field to participate in validation
				$scope.FieldLookup['FishermanId'] = { DbColumnName: 'FishermanId', ControlType: "select" };
				console.log("Just set $scope.fishermenOptions...");
				console.dir($scope.fishermenOptions);
				$scope.CellOptions['FishermanIdOptions'] = $scope.fishermenOptions;
				console.log("$scope (at end of watch project.name) is next...");
				//console.dir($scope);

	        });

			//setup our existingActivities array so we can manage duplicates
	        /*var ealoadwatcher = $scope.$watch('existingActivitiesLoad.length', function(){
	        	if (($scope.existingActivitiesLoad) && ($scope.existingActivitiesLoad.length > 0))
	        	{
	        		$scope.existingActivitiesLoad.$promise.then(function(){
	        			angular.forEach($scope.existingActivitiesLoad, function(activity, key){
	        				$scope.existingActivities.push(activity.LocationId+"_"+activity.ActivityDate.substr(0,10));
	        			});
	        			$scope.existingActivitiesLoad = []; // cleanup
	        			//console.dir($scope.existingActivities);
	        			ealoadwatcher();
	        		});
	        	}

	        });
			*/
			
    		//$scope.$watch('UploadResults.activities', function(){
    		//	$scope.activity_count = array_count($scope.UploadResults.activities.activities);
    		//});

    		//set mapping fields to defaults
			$scope.$watch('fileFields', function(){
				if(Array.isArray($scope.fileFields))
				{
					if($scope.fileFields.length == 0)
					{
						$scope.uploadErrorMessage="No columns headers were found in the file. Please make sure the column headers are in the first row of your file and try again.";
						$scope.fileFields = undefined;
					}
					//TODO: get map candidates from the server. for now, if the field name matches a mappable field, set it, otherwise set to do not map.
					//TODO: refactor this to not have to spin so many times... but not a big deal i guess. ;)
					angular.forEach($scope.fileFields, function(field_in){
						var field_in_compare = field_in.toUpperCase();
						for (var i = $scope.mappableFields.length - 1; i >= 0; i--) {

							//Logger.debug("Comparing: " + $scope.mappableFields[i].Label.toUpperCase() + " and " + field_in_compare);

							if($scope.mappableFields[i].Label.toUpperCase() === field_in_compare)
							{
								$scope.mapping[field_in] = $scope.mappableFields[i];
								return;
							}
						};

						//only reaches here if we didn't find a label match
						$scope.mapping[field_in] = $scope.mappableFields[DO_NOT_MAP];

					});
				}
			});
			
			$scope.finishLocationProcessing = function(){
				console.log("Inside $scope.finishLocationProcessing...");
				// When we built the array, it started adding at location 1 for some reason, skipping 0.
				// Therefore, row 0 is blank.  The simple solution is to just delete row 0.
				//$scope.datasetLocations.shift();
				
				// During the original development, the blank row was always at row 0.  Months later, I noticed that 
				// the blank row was not at row 0.  Therefore, it needed a different solution.
				var index = 0;
				angular.forEach($scope.datasetLocations, function(dsLoc)
				{
					if (dsLoc.length === 0)
					{
						$scope.datasetLocations.splice(index, 1);
					}
					
					index++;
				});
				
				console.log("datasetLocations after splice is next...");
				console.dir($scope.datasetLocations);	

				$scope.datasetLocations.sort(order2dArrayByAlpha);
				console.log("datasetLocations sorted...");
				console.dir($scope.datasetLocations);

				// Convert our 2D array into an array of objects.
				for (var i = 0; i < $scope.datasetLocations.length; i++)
				{
					$scope.sortedLocations.push({Id: $scope.datasetLocations[i][0], Label: $scope.datasetLocations[i][1]});
				}		
				$scope.datasetLocations = [[]]; // Clean up
				
				
				// Convert our array of objects into a list of objects, and put it in the select box.
				$scope.locationOptions = $rootScope.locationOptions = makeObjects($scope.sortedLocations, 'Id','Label') ;

				console.log("locationOptions is next...");
				console.dir($scope.locationOptions);

				//if there is only one location, just set it to that location
				if(array_count($scope.locationOptions)==1)
				{
					//there will only be one.
					angular.forEach(Object.keys($scope.locationOptions), function(key){
						console.log(key);
						$scope.row['locationId'] = key;	
					});
					
				}

				//Add the OtherAgencyId to the label - requirement from Colette
				angular.forEach($scope.project.Locations, function(loc)
	    		{
	    			if(loc.OtherAgencyId && loc.Label.indexOf(loc.OtherAgencyId)==-1)
	    				loc.Label = loc.Label + ' (' + loc.OtherAgencyId + ')';
	    		});

				console.log("$scope (at the end of $scope.finishLocationProcessing) is next...");
				//console.dir($scope);
			};	
			
			$scope.setMappableFields = function()
			{
				console.log("Inside $scope.setMappableFields...");
				var mappableFields = [];
				console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
				if ($scope.DatastoreTablePrefix === "CreelSurvey")
				{
					console.log("Setting for CreelSurvey...");
					mappableFields.push({ Label: "[-- Do not map --]" });
					mappableFields.push({ Label: "[-- Activity Date --]" });					
					mappableFields.push({ Label: "[-- Location Id --]" });
					mappableFields.push({ Label: "[-- Fisherman --]" });
				}
				else if ($scope.DatastoreTablePrefix === "Benthic")
				{
					console.log("Setting for CreelSurvey...");
					mappableFields.push({ Label: "[-- Do not map --]" });
					mappableFields.push({ Label: "[-- Activity Date --]" });					
					mappableFields.push({ Label: "[-- Location Id --]" });
				}
				else
				{
					console.log("Setting for non-CreelSurvey...");
					mappableFields.push({ Label: "[-- Do not map --]" });
					mappableFields.push({ Label: "[-- Activity Date --]" });					
					mappableFields.push({ Label: "[-- Index Field --]" });
					mappableFields.push({ Label: "[-- QA Row Status Id --]" });
				}
				return mappableFields;
			};

			$scope.setLocation = function()
			{
				$scope.ActivityFields.Location = getByField($scope.project.Locations, $scope.ActivityFields.LocationId, "Id");
			};

			$scope.reloadProject = function(){
                //reload project instruments -- this will reload the instruments, too
                ProjectService.clearProject();
                $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
                var watcher = $scope.$watch('project.Id', function(){
                	$scope.selectInstrument();
                	watcher();
                });

	         };

			$scope.clearSelections = function()
			{
				$scope.gridDatasheetOptions.selectAll(false);
			};

			$scope.setSelectedBulkQAStatus = function(rowQAId)
			{
				angular.forEach($scope.gridDatasheetOptions.selectedItems, function(item, key){
					//console.dir(item);
					item.RowQAStatusId = rowQAId;
				});

				$scope.clearSelections();
			};

			$scope.createInstrument = function(){
	            $scope.viewInstrument = null;
	            var modalInstance = $modal.open({
                    templateUrl: 'app/core/common/components/modals/templates/modal-create-instrument.html',
	              controller: 'ModalCreateInstrumentCtrl',
	              scope: $scope, //very important to pass the scope along...
	            });
	         };

			$scope.openBulkQAChange = function(){
	            var modalInstance = $modal.open({
                    templateUrl: 'app/core/common/components/modals/templates/modal-rowqaupdate.html',
	              controller: 'ModalBulkRowQAChangeCtrl',
	              scope: $scope, //very important to pass the scope along...

	            });

			};

			$scope.openAccuracyCheckModal = function(){

	            var modalInstance = $modal.open({
                    templateUrl: 'app/core/common/components/modals/templates/modal-new-accuracycheck.html',
	              controller: 'ModalQuickAddAccuracyCheckCtrl',
	              scope: $scope, //very important to pass the scope along...

	            });

			};

			$scope.getDataGrade = function(check){ return getDataGrade(check)}; //alias from service

			$scope.selectInstrument = function(){
				//get latest accuracy check
				$scope.viewInstrument = getByField($scope.project.Instruments, $scope.ActivityFields.InstrumentId, "Id");
				
				// If the page is refreshed and the cache is flushed, $scope.viewInstrument is null at first.
				if ((typeof $scope.viewInstrument !== 'undefined') && ($scope.viewInstrument !== null))				
				{
					if($scope.viewInstrument && $scope.viewInstrument.AccuracyChecks.length > 0)
						$scope.row.AccuracyCheckId = $scope.viewInstrument.AccuracyChecks[$scope.viewInstrument.AccuracyChecks.length-1].Id; //set to last one
				}
			};

			$scope.toggleDuplicates = function(){

				try{
					if(!$scope.ignoreDuplicates)
					{
						$scope.TempRecordsBucket = [];
						$scope.DuplicateRecordsBucket = [];
						angular.forEach($scope.dataSheetDataset, function(item, key){
							var date_check = item.activityDate;

							if(typeof item.activityDate == "object")
								date_check = item.activityDate.toISOString();

							if($scope.existingActivities.indexOf(item.locationId + "_"+date_check.substr(0,10)) != -1) //found a duplicate
								$scope.DuplicateRecordsBucket.push(item);
							else
								$scope.TempRecordsBucket.push(item);
						});

						$scope.dataSheetDataset = $scope.TempRecordsBucket;
						$scope.TempRecordsBucket = [];
						//our duplicates are in $scope.DuplicateRecordsBucket
					}
					else
					{
						angular.forEach($scope.DuplicateRecordsBucket, function(item, key){
							$scope.dataSheetDataset.push(item);
						});
						$scope.DuplicateRecordsBucket = [];
					}

					//$scope.validateGrid($scope);
					$scope.validateGrid($scope, "Import");
		        	$scope.floatErrorsToTop();
		        }
		        catch(e)
		        {
		        	console.dir(e);
		        }

			};

			$scope.floatErrorsToTop = function(){
				//iterate and split errors from valid records.
				angular.forEach($scope.dataSheetDataset, function(row, key){
					if(row.isValid)
					{
						$scope.ValidRecordsBucket.push(row);
					}
					else
					{
						$scope.TempRecordsBucket.push(row);
					}
				});

				//set the grid to be just the errors.
				$scope.dataSheetDataset = $scope.TempRecordsBucket;
				$scope.TempRecordsBucket = [];

				//bring all the valid records back in below the errors
				angular.forEach($scope.ValidRecordsBucket, function(row, key){
					$scope.dataSheetDataset.push(row);
				});
				$scope.ValidRecordsBucket = [];

			};
			
			//control disabling and re-enabling special fields
			// On the Import form, Step 2, when the user maps Activity Date, or one of the other special fields,
			// it calls this function.
			$scope.updateSpecialFields = function(field_name){
				console.log("Inside $scope.updateSpecialFields...");
				//console.log("$scope is next...");
				//console.dir($scope);
				//console.log("Picked and mapped " + field_name);
				//angular.forEach($scope.mappableFields, function(mappableField){
				//	console.log("mappableField.Label = " + mappableField.Label);
				//});
				//angular.forEach($scope.mappedActivityFields, function(mappedField){
				//	console.log("mappedField.Label = " + mappedField.Label);
				//});

				//this is pretty ripe for refactoring.
				if ($scope.DatastoreTablePrefix === "CreelSurvey")
				{
					if($scope.mapping[field_name])
					{
						// The variables in all caps in this section are set in the config.js file.
						// If you map Activity Date to something besides Activity Date on the list, it will not pass this check.
						if($scope.mapping[field_name].Label === $scope.mappableFields[ACTIVITY_DATE].Label)
						{
							$scope.mappedActivityFields[ACTIVITY_DATE] = field_name;
							console.log("Found and mapped ACTIVITY_DATE");
						}
						
						else if($scope.mapping[field_name].Label === $scope.mappableFields[LOCATION_ID].Label)
						{
							$scope.mappedActivityFields[LOCATION_ID] = field_name;
							console.log("Found and mapped LOCATION_ID");
						}
						
						else if($scope.mapping[field_name].Label === $scope.mappableFields[FISHERMAN].Label)
						{
							$scope.mappedActivityFields[FISHERMAN] = field_name;
							console.log("Found and mapped FISHERMAN");
						}
						
						else
						{
							//undisable corresponding special field if this had been one
							if($scope.mappedActivityFields[ACTIVITY_DATE] === field_name)
								$scope.mappedActivityFields[ACTIVITY_DATE] = false;

							if($scope.mappedActivityFields[INDEX_FIELD] === field_name)
								$scope.mappedActivityFields[INDEX_FIELD] = false;

						/*
							if($scope.mappedActivityFields[LOCATION_ID] === field_name)
								$scope.mappedActivityFields[LOCATION_ID] = false;
							*/
							if($scope.mappedActivityFields[ROW_QA_STATUS_ID] === field_name)
								$scope.mappedActivityFields[ROW_QA_STATUS_ID] = false;
							
						}
					}
				}
				else
				{
					if($scope.mapping[field_name])
					{
						// The variables in all caps in this section are set in the config.js file.
						// If you map Activity Date to something besides Activity Date on the list, it will not pass this check.
						if($scope.mapping[field_name].Label === $scope.mappableFields[ACTIVITY_DATE].Label)
						{
							$scope.mappedActivityFields[ACTIVITY_DATE] = field_name;
							console.log("Found and mapped ACTIVITY_DATE");
						}

						else if($scope.mapping[field_name].Label === $scope.mappableFields[INDEX_FIELD].Label)
						{
							$scope.mappedActivityFields[INDEX_FIELD] = field_name;
							console.log("Found and mapped INDEX_FIELD");
						}
						
						else if($scope.mapping[field_name].Label === $scope.mappableFields[ROW_QA_STATUS_ID].Label)
						{
							$scope.mappedActivityFields[ROW_QA_STATUS_ID] = field_name;
							console.log("Found and mapped ROW_QA_STATUS_ID");
						}
						
						else
						{
							//undisable corresponding special field if this had been one
							if($scope.mappedActivityFields[ACTIVITY_DATE] === field_name)
								$scope.mappedActivityFields[ACTIVITY_DATE] = false;

							if($scope.mappedActivityFields[INDEX_FIELD] === field_name)
								$scope.mappedActivityFields[INDEX_FIELD] = false;

						/*
							if($scope.mappedActivityFields[LOCATION_ID] === field_name)
								$scope.mappedActivityFields[LOCATION_ID] = false;
							*/
							if($scope.mappedActivityFields[ROW_QA_STATUS_ID] === field_name)
								$scope.mappedActivityFields[ROW_QA_STATUS_ID] = false;
							
						}

					}
				}
				console.log("$scope at end of updateSpecialFields is next...");
				//console.dir($scope);
			};

			$scope.previewUpload = function()
			{
				console.log("Inside previewUpload...");
				
				$scope.errors = [];
				$scope.enablePreview = false;
				$scope.importing = true;
				console.log("Set $scope.importing = true...");
				
				//console.log("$scope in previewUpload is next...");
				////console.dir($scope);

				/****************************************************/
				/* 	This section needs a review.
					The Creel Survey dataset file will have multiple locations, possibly one on each row.
					With WaterTemp, the user could upload their audits (Field, Retrieval, Launch) on one sheet,
					and each is a different activity.
					Currently, the import expects something like a logger, where all the data is on one activity.
				*/
				//validate mapping fields -- primarily: make sure there are selections for special fields
				
				// Note:  $scope.ActivityFields.LocationId is the Location is Step 3 on the Import form.
				//if(!$scope.ActivityFields.LocationId)
				if ($scope.DatastoreTablePrefix === "CreelSurvey")
				{
					if ((!$scope.ActivityFields.LocationId) && (!$scope.mappedActivityFields[LOCATION_ID]))
					{
						$scope.errors.push("Please select an activity location.");
					}
				}
				else
				{
					if (!$scope.ActivityFields.LocationId)
					{
						$scope.errors.push("Please select an activity location.");
					}
				}
				/***************************************************/
				
				//console.log("$scope.ActivityFields.ActivityDate (before check) = " + $scope.ActivityFields.ActivityDate);
				console.log("$scope.mappedActivityFields[ACTIVITY_DATE] = " + $scope.mappedActivityFields[ACTIVITY_DATE]);
				if($scope.mappedActivityFields[ACTIVITY_DATE])
					$scope.ActivityFields.ActivityDate = $scope.mappedActivityFields[ACTIVITY_DATE];

				if(!$scope.ActivityFields.ActivityDate)
				{
					$scope.errors.push("Please select an activity date or map a date source field.");
				}

				if(!$scope.ActivityFields.QAStatusId)
				{
					$scope.errors.push("Please select an activity QA Status.");
				}

				console.log("$scope.errors.length = " + $scope.errors.length);
				if($scope.errors.length == 0)
				{
					//execute upload
					console.log("Displaying preview...");
					//console.log("$scope.datasheetColDefs (inside $scope.previewUpload) is next...");
					//console.dir($scope.datasheetColDefs);
					$scope.displayImportPreview();
				}else{
					$scope.uploadErrorMessage = "";
					angular.forEach($scope.errors, function(anError){
						$scope.uploadErrorMessage += anError + "  ";
					});
					
					console.log("Doing nothing since there are errors");
					$scope.enablePreview = true;
				}
				
				//$scope.importing = false;
			}

			//iterates the import data rows according to mappings and copies into the grid datasheet
			$scope.displayImportPreview = function()
			{
				console.log("Inside displayImportPreview");
				////console.log("$scope is next...");
				////console.dir($scope);
				//console.log("$scope.datasheetColDefs is next...");
				//console.dir($scope.datasheetColDefs);
				//console.log("$scope.RowQAColDef is next...");
				//console.dir($scope.RowQAColDef);
				
				//decide if we are going to show the headerForm.  we DO if they entered an activity date, DO NOT if they mapped it.
				if($scope.mappedActivityFields[ACTIVITY_DATE] || $scope.mappedActivityFields[INDEX_FIELD])
				{
					$scope.showHeaderForm = false; //because we have mapped the activity date field to our datafile, meaning multiple activity dates needs the wide sheet.
					$scope.datasheetColDefs = $scope.RowQAColDef.concat($scope.datasheetColDefs,$scope.HeaderColDefs, $scope.DetailColDefs);
				}
				else
				{
					$scope.showHeaderForm = true; //single activity, use the headerform.
					//$scope.datasheetColDefs = $scope.RowQAColDef.concat($scope.DetailColDefs);
					if ($scope.DatastoreTablePrefix === "CreelSurvey")
						$scope.datasheetColDefs = $scope.RowQAColDef.concat($scope.datasheetColDefs2,$scope.DetailColDefs);
					else
						$scope.datasheetColDefs = $scope.RowQAColDef.concat($scope.DetailColDefs);
				}
				console.log("$scope.showHeaderForm = " + $scope.showHeaderForm);

				console.log("$scope.datasheetColDefs (after concatentation) is next...");  // Note:  Column ReleaseLocation is already present here, col 9.
				console.dir($scope.datasheetColDefs);

				$scope.recalculateGridWidth($scope.datasheetColDefs.length);
				
				// We use this flag, to mark our progress through the imported data.
				// If we are using the header form, we get the header info from the first row.  After that, we ignore the header fields.
				//var loadHeader = true;  // Do we still need this?
				var activityDateType = "";
				
				var strErrorMessage = "";
				
				//console.log("About to loop through $scope.UploadResults.Data.rows, data_row");
				angular.forEach($scope.UploadResults.Data.rows, function(data_row){
					//console.log("*data_row (at top of loop) is next...");
					//console.dir(data_row);
					try
					{

						//set default Row QA StatusId
						//if (($scope.dataset.Datastore.TablePrefix === "WaterTemp") && ($scope.dataset.RowQAStatuses.length > 1))
							var new_row = {
								RowQAStatusId: $scope.dataset.DefaultRowQAStatusId
							};
							//new_row.errors = [];
						
						// Start Activities fields********************************************************
						// ActivityFields first.  These come from the import form.
						//console.log($scope.mapping[$scope.ActivityFields.LocationId]);
						if($scope.mapping[$scope.ActivityFields.LocationId])
							new_row.locationId = data_row[$scope.ActivityFields.LocationId];
						else
							new_row.locationId = $scope.ActivityFields.LocationId;
						
						if ($scope.ActivityFields.InstrumentId)
							new_row.InstrumentId = $scope.ActivityFields.InstrumentId;
						
						if($scope.mapping[$scope.ActivityFields.ActivityDate])
							new_row.activityDate = data_row[$scope.ActivityFields.ActivityDate];
						else
							new_row.activityDate = $scope.ActivityFields.ActivityDate;
						
						//console.log("new_row.activityDate = " + new_row.activityDate);
						
						if($scope.mapping[$scope.ActivityFields.QAStatusId])
							new_row.QAStatusId = data_row[$scope.ActivityFields.QAStatusId];
						else
							new_row.QAStatusId = $scope.ActivityFields.QAStatusId;
						
						console.log("$scope.mappedActivityFields is next...");
						console.dir($scope.mappedActivityFields);
						if($scope.mappedActivityFields[INDEX_FIELD])
							new_row.activityIndex = data_row[$scope.mappedActivityFields[INDEX_FIELD]];

						// End Activities fields*********************************************************
						//console.log("new_row (after activity fields) is next...");
						//console.dir(new_row);
						
						// Start data rows***************************************************************
						// Next, we load the fields that come from the imported data.
						// Note:  $scope.row is for the header, $scope.dataSheetDataset is for the details.
						//console.log("data_row is next...");
						//console.dir(data_row);

						// On each row of imported data (data_row), we only want to pull in the fields we have mapped.
						// Therefore, we loop through $scope.mapping, which contains those fields.
						//console.log("About to loop through $scope.mapping, field & col, checking mapped fields...");
						angular.forEach($scope.mapping, function(field, col){
							// If we DID NOT map a field to Activity Date, we need headers.
							// We get the headers from the first row.
							//console.log("field is next...");
							//console.dir(field);
							// field is the column, and col is actually the value.
							console.log("-----");
							console.log("field.DbColumnName = " + field.DbColumnName + ", field.Label = " + field.Label + ", col = " + col);
							console.log("**data_row[col] = " + data_row[col] + ", typeof = " + typeof data_row[col]);
							
							try{
								//console.log("field/col are next...");
								//console.dir(field);
								//console.log(col);
								// Did the user map the field to something in the database?
								// On the form, if the user mapped the Activity date in Step 2, rather than setting it in Step 3,
								// then we get the Activity date from the first row.
								if(field.Label != $scope.mappableFields[DO_NOT_MAP])
								{
									// Also check if the field is a header or detail; header->row, detail->dataSheetDataset
									
									//just ditch if it is an empty value
									if(data_row[col] === null || data_row[col] === "")
									{
										return; // This just pops us out of this iteration early.
									}
									
									if ($scope.DatastoreTablePrefix === "CreelSurvey")
									{
										if (field.Label === "[-- Fisherman --]")
										{
											new_row.FishermanId = parseInt($scope.getFishermanId(data_row[col]));
											console.log("new_row.FishermanId = " + new_row.FishermanId);
											//if (new_row.FishermanId < 0)
											if (new_row.FishermanId < 2)
											{
												//$scope.uploadErrorMessage = "Fisherman [" + data_row[col] + "] does not match any name in the Fishermen table.";
												//$scope.errors.push($scope.uploadErrorMessage); // This leaves the trace for postmortem.
											}
										}
										else if (field.Label === "[-- Location Id --]")
										//if (field.Label === "[-- Location Id --]")
										{
											new_row.locationId = parseInt($scope.getLocationId(data_row[col]));
											console.log("new_row.locationId = " + new_row.locationId);
											if (new_row.locationId < 0)
												$scope.errors.push("Location [" + data_row[col] + "] does not match any name in the Locations table."); // This leaves the trace for postmortem.
										}
									}
									else if ($scope.DatastoreTablePrefix === "Benthic")
									{
										//console.log("Working with Benthic..., field.DbColumnName = " + field.DbColumnName);
										//console.log("data_row[col] = " + data_row[col]);
										if (field.DbColumnName === "TareMass")
										{
											if ((typeof data_row[col] !== 'undefined') && (data_row[col] !== null))
											{
												tmpValue = parseFloat(Math.round(data_row[col] * 10000)/10000);
												//console.log("tmpValue = " + tmpValue);
												new_row.TareMass = tmpValue
											}
										}
									}
									else if (($scope.DatastoreTablePrefix === "WaterTemp") || ($scope.DatastoreTablePrefix === "WaterQuality"))
									{
										if(field.Label == $scope.mappableFields[ROW_QA_STATUS_ID].Label)
											new_row.RowQAStatusId = data_row[col];
									}

									
									// Handle control types*******************************************************
									//check for numeric or ignore as blank if it isn't.
									//console.log("new_row is next...");
									//console.dir(new_row);
									if (field.ControlType == "number")
									{
										if (!isNumber(data_row[col]))
										{
											//console.log("ignoring: " + field.DbColumnName + " is a number field but value is not a number: " + data_row[col]);
											return; //don't set this as a value
										}
										else if ($scope.DatastoreTablePrefix === "CreelSurvey")
										{
											// Guess what?  If the value is 0, on Test CDMS treats it as an empty value.  We have to handle that...
											if ((field.DbColumnName === "FishCount") && (data_row[col] !== null))
											{
												console.log("Found FishCount.  Value = " + data_row[col]);
												var strFishCount = data_row[col].toString();
												if (strFishCount === "0")
													new_row.FishCount = 0;
												
											}
											else if ((field.DbColumnName === "NumberAnglersObserved") && (data_row[col] !== null))
											{
												console.log("Found NumberAnglersObserved.  Value = " + data_row[col]);
												
												var strNumberAnglersObserved = data_row[col].toString();
												if (strNumberAnglersObserved === "0")
													if ($scope.showHeaderForm)
														$scope.row.NumberAnglersObserved = 0;
													else
														new_row.NumberAnglersObserved = 0;
												else
													if ($scope.showHeaderForm)
														$scope.row.NumberAnglersObserved = data_row[col];
													else
														new_row.NumberAnglersObserved = data_row[col];
													
											}
											else if ((field.DbColumnName === "NumberAnglersInterviewed") && (data_row[col] !== null))
											{
												console.log("Found NumberAnglersInterviewed.  Value = " + data_row[col]);
												var strNumberAnglersInterviewed = data_row[col].toString();
												if (strNumberAnglersInterviewed === "0")
													if ($scope.showHeaderForm)
														$scope.row.NumberAnglersInterviewed = 0;
													else
														new_row.NumberAnglersInterviewed = 0;
												else
													if ($scope.showHeaderForm)
														$scope.row.NumberAnglersInterviewed = data_row[col];
													else
														new_row.NumberAnglersInterviewed = data_row[col];
													
												
													
											}
											else
											{
												new_row[field.DbColumnName] = data_row[col];
											}
										}
										else if ($scope.DatastoreTablePrefix === "Benthic")
										{
											//console.log("data_row[col] = " + data_row[col]);
											var tmpValue = -1;
											if (field.Validation === '2d') // 2-decimal places
											{
												//console.log("Found 2d..." + field.DbColumnName);
												tmpValue = parseFloat(Math.round(data_row[col] * 100)/100);
												//console.log("tmpValue = " + tmpValue);
												new_row[field.DbColumnName] = tmpValue
											}
											else if (field.Validation === 'p2d') // % with 2 decimal places
											{
												//console.log("Found p2d..." + field.DbColumnName);
												if (data_row[col] === 0)
													new_row[field.DbColumnName] = "0";
												else
												{
													tmpValue = parseFloat(Math.round(data_row[col] * 10000)/100);
													//console.log("tmpValue = " + tmpValue);
													new_row[field.DbColumnName] = tmpValue
												}
											}
											else
											{
												new_row[field.DbColumnName] = data_row[col];
											}
										}
										else
										{
											new_row[field.DbColumnName] = data_row[col];
										}
									}
									else if(field.ControlType == "multiselect")
									{
										//console.log("is a multiselect");
										//Create an array if we need it.
										if((typeof new_row.activityDate !== 'string') && (!Array.isArray(new_row[field.DbColumnName])) && (field.FieldRoleId === 1)) // && (loadHeader))
											$scope.row[field.DbColumnName] = [];
										else
											new_row[field.DbColumnName] = [];

										//split on commas -- if any
										var row_items = data_row[col].trim().split(",");

										for(var a = 0; a < row_items.length; a++)
										{
											var row_item = row_items[a].trim().toUpperCase();  //KBHERE -- take this off after the upgrade!

											if ((typeof new_row.activityDate !== 'string') &&  (field.FieldRoleId === 1) && (row[field.DbColumnName].indexOf(row_item) == -1))
											{
												//console.log("We have a header, multiSelect...");
												$scope.row[field.DbColumnName].push(row_item);
											}											
											else if(new_row[field.DbColumnName].indexOf(row_item) == -1)
												new_row[field.DbColumnName].push(row_item);
										}

										//new_row[field.DbColumnName] = angular.toJson(new_row[field.DbColumnName]);
										//console.log("  AND our final multiselect value == ");
										//console.log(new_row[field.DbColumnName]);
									}
									else if(field.ControlType === "select" && data_row[col] && typeof data_row[col] === "string")
									{
										//console.log(" -- " + data_row[col].trim().toUpperCase());
										new_row[field.DbColumnName] = data_row[col].trim().toUpperCase(); //uppercase select's too....  KBHERE
										
									}
									else if(field.ControlType == "datetime")
									{
										try
										{
											if(data_row[col])
											{
												//console.log("data_row[col] = " + data_row[col]);
												//console.log("typeof data_row[col] = " + typeof data_row[col]);
												var d = new Date(data_row[col]);
												//console.log("The date is next...");
												//console.log(toExactISOString(d));
												
												if ((typeof new_row.activityDate !== 'string') && (field.FieldRoleId === 1))
													row[field.DbColumnName] = toExactISOString(d); // Header form
												else
													new_row[field.DbColumnName] = toExactISOString(d); // Datasheet form
											}
										}
										catch(e)
										{
											console.log("problem converting datetime: " + data_row[col]);
											console.dir(e);
										}
										
										//if ((typeof new_row.activityDate !== 'string') && (field.FieldRoleId === 1))
										//	$scope.row[field.DbColumnName] = FormUtilities.checkFieldControlType(field.ControlType, data_row[col]);
										//else
										//	new_row[field.DbColumnName] = FormUtilities.checkFieldControlType(field.ControlType, data_row[col]);
										
									}
									else if(field.ControlType == "time")
									{	
										try
										{
											//console.log("We have a time field.  ");
											if(data_row[col])
											{	
												var theTime = getTimeFromDate(data_row[col]);
												//console.log("theTime = " + theTime);

												//var today = new Date();
												//var theOffset = -(today.getTimezoneOffset()/60);
												//console.log("theOffset = " + theOffset);
												
												if ((typeof new_row.activityDate !== 'string') && (field.FieldRoleId === 1))
												{
													$scope.row[field.DbColumnName] = theTime;
													//console.log("$scope.row[field.DbColumnName] = " + $scope.row[field.DbColumnName]);
												}
												else
												{
													new_row[field.DbColumnName] = theTime;
													//console.log("new_row[field.DbColumnName] = " + new_row[field.DbColumnName]);
												}
											}
										}
										catch(e)
										{
											console.log("problem converting time:  DbColumnName = " + field.DbColumnName + ", Value = " + data_row[col]);
											console.dir(e);
										}
									}
									else //just add the value to the cell
									{
										//set the value
										//console.log("$scope.showHeaderForm = " + $scope.showHeaderForm + ", field.FieldRoleId = " + field.FieldRoleId);
										// Using Header form...
										//if ((typeof new_row.activityDate !== 'string') && (field.FieldRoleId === 1))
										if ($scope.showHeaderForm && (field.FieldRoleId === 1))
										{
											//$scope.row[field.DbColumnName] = data_row[col]; Original line.
											if ($scope.DatastoreTablePrefix === "CreelSurvey")
											{
												// Header items
												if ((field.DbColumnName === "TimeStart") ||
													(field.DbColumnName === "TimeEnd")
													)
												{
													$scope.row[field.DbColumnName] = ServiceUtilities.removeTSfromDateTimeString(data_row[col]);
													
													var theYear = ServiceUtilities.extractYearFromString(data_row[col]);
													if (theYear < 1901)
													{
														//$scope.uploadErrorMessage = "Time has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";
													strErrorMessage = "[" + field.DbColumnName + "] has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";
														//new_row.errors.push($scope.uploadErrorMessage);
													}
												}
												//else if (field.DbColumnName === "LocationId")
												else if (field.DbColumnName === "Location")
												//if (field.DbColumnName === "Location")
												{
													//console.log("field.DbColumnName = " + field.DbColumnName + "; data_row[col] = " + data_row[col]);
													$scope.row[field.DbColumnName] = data_row[col];
												}
												else
												{
													$scope.row[field.DbColumnName] = data_row[col];
												}
											}
											else if ($scope.DatastoreTablePrefix === "SpawningGroundSurvey")
											{
												//console.log("SpawningGroundSurvey..., field.DbColumnName = " + field.DbColumnName);
												//if ((field.DbColumnName === "StartTime") ||
												//	(field.DbColumnName === "EndTime"))
												//{
												//	$scope.row[field.DbColumnName] = ServiceUtilities.extractTimeFromString2(data_row[col]);
												//}
												if (field.DbColumnName === "Time")
												{
													var theYear = ServiceUtilities.extractYearFromString(data_row[col]);
													if (theYear < 1901)
													{
														//$scope.uploadErrorMessage = "Time has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";
														strErrorMessage = "[" + field.DbColumnName + "] has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";
														//new_row.errors.push($scope.uploadErrorMessage);
													}
												}
												else
													new_row[field.DbColumnName] = data_row[col];												
											}
											else
												$scope.row[field.DbColumnName] = data_row[col];

											
										}
										// Using spreadsheet form, or it's a detail.
										else
										{
											// Original line
											//new_row[field.DbColumnName] = data_row[col]; //but don't uppercase anything that isn't a multiselect or select.
											
											if ($scope.DatastoreTablePrefix === "CreelSurvey")
											{
												if ((field.DbColumnName === "TimeStart") ||
													(field.DbColumnName === "TimeEnd") ||
													(field.DbColumnName === "InterviewTime")
													)
													{
														console.log(field.DbColumnName + " = " + data_row[col]);
														new_row[field.DbColumnName] = ServiceUtilities.removeTSfromDateTimeString(data_row[col]);
													
														if (field.DbColumnName === "InterviewTime")
														{
															var strNumberAnglersInterviewed = null;
															
															// Get the value for NumberAnglersInterviewed, because we cannot have an interview,
															// if NumberAnglersInterviewed = 0.
															if ($scope.showHeaderForm)
																strNumberAnglersInterviewed = $scope.row.NumberAnglersInterviewed.toString();
															else
																strNumberAnglersInterviewed = new_row.NumberAnglersInterviewed.toString();
															
															//console.log("strNumberAnglersInterviewed = " + strNumberAnglersInterviewed);
															if (strNumberAnglersInterviewed === "0")
															{
																$scope.uploadErrorMessage = "NumberAnglersInterviewed cannot be 0, if InterviewTime has a time.";
																new_row.errors.push($scope.uploadErrorMessage);
															}
														}
													}
												else if (field.DbColumnName === "TotalTimeFished")
												{
													new_row[field.DbColumnName] = ServiceUtilities.convertMinutesToHhMm(parseInt(data_row[col]));
												}
												else
													new_row[field.DbColumnName] = data_row[col];
											}
											//else if ($scope.DatastoreTablePrefix === "SpawningGroundSurvey")
											//{
												//console.log("SpawningGroundSurvey..., field.DbColumnName = " + field.DbColumnName);
												//if (//(field.DbColumnName === "StartTime") ||
													//(field.DbColumnName === "EndTime"))
												//	(field.DbColumnName === "Time"))
												//{
												//	new_row[field.DbColumnName] = ServiceUtilities.extractTimeFromString2(data_row[col]);
													
												//	var theYear = ServiceUtilities.extractYearFromString(data_row[col]);
												//	if (parseint(theYear) < 1901)
												//	{
												//		$scope.uploadErrorMessage = "Time has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";
												//		$scope.errors.push($scope.uploadErrorMessage);
												//	}
												//}
												//else
												//	new_row[field.DbColumnName] = data_row[col];												
											//}
											else if (field.DbColumnName === "FishReleased")
											{
												new_row[field.DbColumnName] = data_row[col];
											}
											else if (field.DbColumnName === "Time")
											{
												new_row[field.DbColumnName] = ServiceUtilities.extractTimeFromString2(data_row[col]);
												var theYear = ServiceUtilities.extractYearFromString(data_row[col]);
												console.log("theYear = " + theYear);
												if (theYear < 0)
												{
													//$scope.uploadErrorMessage = "Time does not have a year; it must have a valid year (YYYY-MM-DD HH:MM:SS format)";
													strErrorMessage = "Time does not have a year; it must have a valid year (YYYY-MM-DD HH:MM:SS format)";
													//new_row.errors.push($scope.uploadErrorMessage);
													//new_row.errors.push(strErrorMessage);
												}
												else if (theYear < 1901)
												{
													//$scope.uploadErrorMessage = "Time has a year less than 1901 (Excel default year); user must enter a valid year (YYYY-MM-DD HH:MM:SS format)";
													strErrorMessage = "Time has a year less than 1901 (Excel default year); user must enter a valid year (YYYY-MM-DD HH:MM:SS format)";
													//new_row.errors.push($scope.uploadErrorMessage);
													//new_row.errors.push(strErrorMessage);
												}
											}
											else
												new_row[field.DbColumnName] = data_row[col];
										}
										
									}//else  just plain text...
									
									//if ((field.FieldRoleId === 1) && ($scope.showHeaderForm)) // Header field
									//{
									//	$scope.row[field.DbColumnName] = data_row[col];
									//}
								}//if mappable
							}catch(e){
								console.dir(e);
							}
							
						});
						// End data rows***************************************************************
						
						//console.log("row (head) after checking mappable fields is next...");
						//console.dir($scope.row);
						//console.log("new_row (det) after checking mappable fields is next...");
						//console.dir(new_row);
						
						//Appraisal special importer case - remove this once we're done the appraisal import!
						//if($scope.dataset.Id == 1193)
						if ($scope.DatastoreTablePrefix === "Appraisal")
						{
							$scope.importAppraisalLine(new_row);
						}
						
						//now that the row is populated with import values, lets spin through each field again and fire any rules
						//* ---- Run the rules for each field on this row ---- *//
						var row = new_row;  // Note:  This variable gets used later, not immediately.
						//console.log("Ok, now we'll run the rules for each column in this row");
						
						//console.error("About to loop through $scope.mapping AGAIN, checking rules...");
						angular.forEach($scope.mapping, function(field, col){
							//console.log("field = " + field + ", col = " + col);
							//var value = row[field.DbColumnName];
							var value = null;
							if (typeof field.DbColumnName !== 'undefined')
							{
								//var value = row[field.DbColumnName];
								value = row[field.DbColumnName];								
								//console.log("field.DbColumnName = " + field.DbColumnName + "; value = " + value); // Debug step
							}

							if (($scope.DatastoreTablePrefix === "ScrewTrap") && (field.DbColumnName === "TextualComments"))
							{
								//console.log("We are in ScrewTrap, col TextualComments");
								//console.log("new_row before add is next...");
								//console.dir(new_row);
								
								// Verify new_row.TextualComments exists before checking it.
								if (typeof new_row.TextualComments !== 'undefined')
								{
									// Bracket the letter with X, so we can easily see if there is a leading or trailing space.
									//console.log("new_row.TextualComments = X" + new_row.TextualComments + "X");  
									//if ((new_row.TextualComments.indexOf(" U ") > -1) ||		// Embedded
										//(new_row.TextualComments.indexOf("U ") > -1)  ||		// At the beginning
										//(new_row.TextualComments.indexOf(" U") > -1)  ||		// At the end
										//(new_row.TextualComments === "U" )					// All by itself
									if (
										(new_row.TextualComments.length > 3 && new_row.TextualComments.indexOf(" U ") > -1) ||		// Embedded
										(new_row.TextualComments.length > 2 && new_row.TextualComments.indexOf("U ") > -1)  ||		// At the beginning
										(new_row.TextualComments.length > 2 && new_row.TextualComments.indexOf(" U") > -1)  ||		// At the end
										(new_row.TextualComments.length === 1 && new_row.TextualComments.indexOf("U") > -1)			// All by itself
										)
										{
											//console.log("Found a U...");
											new_row.ReleaseLocation = "UPSTREAM";
										}
									//else if ((new_row.TextualComments.indexOf(" D ") > -1) ||		// Embedded
										//(new_row.TextualComments.indexOf("D ") > -1)  ||		// At the beginning
										//(new_row.TextualComments.indexOf(" D") > -1)  ||		// At the end
										//(new_row.TextualComments === "D" ))			// All by itself
										//(new_row.TextualComments.indexOf("D") > -1))			// All by itself
									else if ((new_row.TextualComments.length > 3 && new_row.TextualComments.indexOf(" D ") > -1) ||		// Embedded
										(new_row.TextualComments.length > 2 && new_row.TextualComments.indexOf("D ") > -1)  ||		// At the beginning
										(new_row.TextualComments.length > 2 && new_row.TextualComments.indexOf(" D") > -1)  ||		// At the end
										(new_row.TextualComments.length === 1 && new_row.TextualComments.indexOf("D") > -1))			// All by itself
										{
											//console.log("Found a D...");
											new_row.ReleaseLocation = "DOWNSTREAM";
										}
									else
									{
										//console.log("Not a U or D");
									}

										
									//console.log("new_row after adding TextualComments is next...");
									//console.dir(new_row);
								}
								else
								{
									//console.log("new_row.TextualComments is undefined; skipping...");
								}
							}

							try{
								//fire Field rule if it exists -- OnChange
								//console.log("field is next...");
								//console.dir(field);
								if(field.Field && field.Field.Rule && field.Field.Rule.OnChange){
									//console.log("Firing master rule: " + field.Field.Rule.OnChange);
									eval(field.Field.Rule.OnChange);
								}

								//fire Datafield rule if it exists -- OnChange
								if(field.Rule && field.Rule.OnChange){
									//console.log("Firing dataset rule: " + field.Rule.OnChange);
									eval(field.Rule.OnChange);
								}
							}catch(e){
								//so we don't die if the rule fails....
								console.dir(e);
							}

						});
						//console.log("new_row after checking field rules is next...");
						//console.dir(new_row);


						//last validation before we add row:
						// -- nothing so far.
						
						console.log("new_row is next...");
						console.dir(new_row);
						//add imported row to datasheet.
						if(new_row.activityDate)
							$scope.dataSheetDataset.push(new_row);
							
					}
					catch(e)
					{
						$scope.Logger.debug(e);
					}
					//loadHeader = false;
					
					//console.log("$scope.dataSheetDataset is next...");
					//console.dir($scope.dataSheetDataset);
		 		});
				
				//console.log("$scope is next");
				////console.dir($scope);

				$scope.UploadResults.showPreview = true;

				$scope.toggleDuplicates();

            	//$scope.validateGrid($scope);
				console.log("$scope.callingPage = " + $scope.callingPage);
            	$scope.validateGrid($scope);
        		$scope.floatErrorsToTop();

				//console.log("$scope is next...");
				//console.dir($scope);
				console.log("The following are...$scope.dataSheetDataset, $scope.dataset.Datastore.TablePrefix");
				console.dir($scope.dataSheetDataset);
				console.log($scope.dataset.Datastore.TablePrefix);
        		ChartService.buildChart($scope, $scope.dataSheetDataset, $scope.dataset.Datastore.TablePrefix, {width: 800, height: 360});
					//ChartService.buildChart($scope, $scope.dataSheetDataset, $scope.dataset.Datastore.TablePrefix, {height: 360, width: 800});

				$scope.importing = false;
				console.log("Set $scope.importing = false...");
				////console.dir($scope);
			};

			$scope.getFishermanId = function(fishermanName)
			{
				//console.log("Inside getFishermanId...");
				//console.log("fishermanName = " + fishermanName);
				
				var theFishermanId = 0;
				var keepGoing = true;
				var foundFisherman = false;
				angular.forEach($scope.fishermenOptions, function(fisherman, key){
					if (keepGoing)
					{
						//console.log("key = " + key + ", fisherman = " + fisherman);
						if (fishermanName === fisherman)
						{
							//console.log("Fount the fisherman:  " + fisherman);
							theFishermanId = key;
							foundFisherman = true;
							keepGoing = false;
						}
					}
				});
				
				//return theFishermanId;
				if (foundFisherman)
					return theFishermanId;
				else
				{
					//return 1; //-1;
					return -1;
				}
			};
			
			$scope.getLocationId = function(locationName)
			{
				//console.log("Inside getLocationId...");
				//console.log("locationName = " + locationName);
				
				var theLocationId = 0;
				var keepGoing = true;
				var foundLocation = false;
				angular.forEach($scope.locationOptions, function(location, key){
					if (keepGoing)
					{
						//console.log("key = " + key + ", location = " + location);
						if (locationName === location)
						{
							console.log("Found the location:  " + location);
							theLocationId = key;
							foundLocation = true;
							keepGoing = false;
						}
					}
				});
				
				if (foundLocation)
					return theLocationId;
				else
					return -1;
			};

			$scope.uploadFile = function()
			{
				$scope.loading=true;
					console.log("serviceUrl = " + serviceUrl);
					if (typeof $scope.project.Id !== 'undefined')
						console.log("project.Id = " + $scope.project.Id);
					else
						console.log("project.Id is not set.  User should go to dataset activities page first.");

					console.log("startOnLine = " + $scope.startOnLine);
					console.log("file...");
					console.dir($scope.file);
			      $scope.upload = $upload.upload({
			        url: serviceUrl + '/api/v1/import/uploadimportfile', //upload.php script, node.js route, or servlet url
			        method: "POST",
			        // headers: {'headerKey': 'headerValue'},
			        // withCredential: true,
			        //data: {ProjectId: $scope.project.Id, StartOnLine: $scope.startOnLine},
			        data: {ProjectId: $scope.project.Id, DatasetId: $scope.dataset.Id, Title: $scope.file.name, Description: "Uploaded file " + $scope.file.name, StartOnLine: $scope.startOnLine},
			        file: $scope.file,
			        // file: $files, //upload multiple files, this feature only works in HTML5 FromData browsers
			        /* set file formData name for 'Content-Desposition' header. Default: 'file' */
			        //fileFormDataName: myFile, //OR for HTML5 multiple upload only a list: ['name1', 'name2', ...]
			        /* customize how data is added to formData. See #40#issuecomment-28612000 for example */
			        //formDataAppender: function(formData, key, val){}
			      }).progress(function(evt) {
					console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
			      }).success(function(data) {
			        // file is uploaded successfully

			        $scope.UploadResults.Data = angular.fromJson(data);
					console.log("$scope.UploadResults.Data is next...");
					console.dir($scope.UploadResults.Data);
					
			        $scope.fileFields = $scope.UploadResults.Data.columns;
					
					// Note:  When we click preview, the fish do not show.
					// It might be because JavaScript runs asynchronous and zips through things,
					// Running the next two lines, before the one above ($scope.upload) has finished.
					// We must refactor this, and how to keep from turning the spinning fish off,
					// before the upload job is done.
			        $scope.loading=false;
			        $scope.enablePreview = true;
			      })
			      .error(function(data)
			      	{
			      		//$scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
						var errorStem = "There was a problem uploading your file.\n";
						var errorSpecificPart1 = "The form says the column headers start on line " + $scope.startOnLine + ".  ";
						var errorSpecificPart2 = "Is this correct?  Also verify that the data/time entries are in 24-hour format.";
			      		$scope.uploadErrorMessage = errorStem + errorSpecificPart1 + errorSpecificPart2;
			      		console.log("$scope.upload next...");
						console.dir($scope.upload);
						$scope.loading=false;
			      	});
			      //.then(success, error, progress);
			};


			$scope.onFileSelect = function($files) {
			    //$files: an array of files selected, each file has name, size, and type.

			    $scope.files = $files;
			    $scope.file = $files[0];

			 };

			 $scope.cancel = function(){
			 	if($scope.UploadResults.showPreview)
			 	{
				 	if(!confirm("Looks like you've made changes.  Are you sure you want to leave this page?"))
				 		return;
				 }

				$location.path("/activities/"+$scope.dataset.Id);
			 };

			 $scope.doneButton = function(){
			 	$scope.activities = undefined;
			 	$route.reload();
			 };

			 $scope.viewButton = function(){
			 	$location.path("/activities/"+$scope.dataset.Id);
			 }

			$scope.saveDataSheet = function() {
				console.log("Inside import-controllers.js, $scope.saveDataSheet...");
				console.log("$scope.dataSheetDataset is next...");
				console.dir($scope.dataSheetDataset);
				
				var strYear = null;
				var strMonth = null;
				var strDay = null;
				
				if($scope.gridHasErrors)
				{
					if(!confirm("There are validation errors.  Are you sure you want to save anyway?"))
						return;
				}
				
				if($scope.showHeaderForm)
				{
					if ($scope.DatastoreTablePrefix === "CreelSurvey")
					{
						if ((typeof $scope.row.TimeStart !== 'undefined') && ($scope.row.TimeStart !== null))
						{
							$scope.row.TimeStart = $scope.row.TimeStart.replace(" ", "T");
							$scope.row.TimeStart += ":00.000";
						}
						
						if ((typeof $scope.row.TimeEnd !== 'undefined') && ($scope.row.TimeEnd !== null))
						{
							$scope.row.TimeEnd = $scope.row.TimeEnd.replace(" ", "T");
							$scope.row.TimeEnd += ":00.000";
						}
					}
				}
				
				//var theHours = -1;
				//var theMinutes = -1;
				//var TotalTimeFished = -1;
				
				for (var i = 0; i < $scope.dataSheetDataset.length; i++)
				{
					if ($scope.DatastoreTablePrefix === "CreelSurvey")
					{
						if ((typeof $scope.dataSheetDataset[i].TotalTimeFished !== 'undefined') && ($scope.dataSheetDataset[i].TotalTimeFished != null))
						{
							/*//console.log("TotalTimeFished for row " + i + " = " + $scope.dataSheetDataset[i].TotalTimeFished);
							theHours = parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(0,2));
							//console.log("theHours = " + theHours);
							theMinutes = parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(3,5));
							//console.log("theMinutes = " + theMinutes);
							TotalTimeFished = theHours * 60 + theMinutes;
							//console.log("TotalTimeFished (in min) = " + TotalTimeFished);
							$scope.dataSheetDataset[i].TotalTimeFished = TotalTimeFished;
							*/
							$scope.dataSheetDataset[i].TotalTimeFished = ServiceUtilities.convertHhMmToMinutes($scope.dataSheetDataset[i].TotalTimeFished);
							
							//theHours = -1;
							//theMinutes = -1;
							//TotalTimeFished = -1;
						}
						
						console.log("typeof $scope.dataSheetDataset[i].activityDate = " + typeof $scope.dataSheetDataset[i].activityDate);
						if (typeof $scope.dataSheetDataset[i].activityDate === 'object')
						{
							strYear = "" + $scope.dataSheetDataset[i].activityDate.getFullYear();
							strMonth = "" + $scope.dataSheetDataset[i].activityDate.getMonth();
							strDay = "" + $scope.dataSheetDataset[i].activityDate.getDate();
						}
						else if (typeof $scope.dataSheetDataset[i].activityDate === 'string')
						{
							//console.log("$scope.dataSheetDataset[i].activityDate = " + $scope.dataSheetDataset[i].activityDate);
							strYear = $scope.dataSheetDataset[i].activityDate.substr(0, 4);
							//console.log("strYear = " + strYear);
							
							strMonth = $scope.dataSheetDataset[i].activityDate.substr(5, 2);
							//console.log("strMonth = " + strMonth);
							if (strMonth.length < 2)
								strMonth = "0" + strMonth;
							
							strDay = $scope.dataSheetDataset[i].activityDate.substr(8, 2);
							//console.log("strDay = " + strDay);
							if (strDay.length < 2)
								strDay = "0" + strDay;
						
						}
						
						if ((typeof $scope.dataSheetDataset[i].TimeStart !== 'undefined') && ($scope.dataSheetDataset[i].TimeStart !== null))
						{
							//$scope.dataSheetDataset[i].TimeStart = strYear + "-" + strMonth + "-" + strDay + "T" + $scope.dataSheetDataset[i].TimeStart + ":00.000";
							$scope.dataSheetDataset[i].TimeStart = $scope.dataSheetDataset[i].TimeStart.replace(" ", "T");
							$scope.dataSheetDataset[i].TimeStart = $scope.dataSheetDataset[i].TimeStart + ":00.000";
						}
						
						if ((typeof $scope.dataSheetDataset[i].TimeEnd !== 'undefined') && ($scope.dataSheetDataset[i].TimeEnd !== null))
						{
							//$scope.dataSheetDataset[i].TimeEnd = strYear + "-" + strMonth + "-" + strDay + "T" + $scope.dataSheetDataset[i].TimeEnd + ":00.000";
							$scope.dataSheetDataset[i].TimeEnd = $scope.dataSheetDataset[i].TimeEnd.replace(" ", "T");
							$scope.dataSheetDataset[i].TimeEnd = $scope.dataSheetDataset[i].TimeEnd + ":00.000";
						}
						
						if ((typeof $scope.dataSheetDataset[i].InterviewTime !== 'undefined') && ($scope.dataSheetDataset[i].InterviewTime != null))
						{
							//$scope.dataSheetDataset[i].InterviewTime = strYear + "-" + strMonth + "-" + strDay + "T" + $scope.dataSheetDataset[i].InterviewTime + ":00.000";
							$scope.dataSheetDataset[i].InterviewTime = $scope.dataSheetDataset[i].InterviewTime.replace(" ", "T");
							$scope.dataSheetDataset[i].InterviewTime = $scope.dataSheetDataset[i].InterviewTime + ":00.000";
						}
					}
					
					if (typeof $scope.dataSheetDataset[i].Dry === 'undefined') // If Dry is missing, added and default it to NO?
						$scope.dataSheetDataset[i].Dry = "NO";
				}
				
				//console.log("ActivityFields...");
				//console.dir($scope.ActivityFields);
				
				//prepare dataset for saving -- add defaultrowqastatusid, move activityqastatusid
				for (var i = 0; i < $scope.dataSheetDataset.length; i++) {
					var row = $scope.dataSheetDataset[i];

					if($scope.showHeaderForm)
						row = angular.extend(row, $scope.row, $scope.ActivityFields); // copy in the header fields...  //TODO: might be nicer to pass into parseActivitySheet below...

					//copy in the selected qastatus (default was set above)
					row.ActivityQAStatus = {
	        			QAStatusId: ""+row.QAStatusId,
	        			Comments: row.QAComments
	        		};

	        		row.QAStatusId = row.RowQAStatusId;

					//console.log("row is next...");
					//console.dir(row);
				}

				//var sheetCopy = angular.copy($scope.dataSheetDataset); //causes memory problems on IE for large files.
	            //$scope.activities = ActivityParser.parseActivitySheet($scope.dataSheetDataset, $scope.fields);
	            $scope.activities = ActivityParser.parseActivitySheet($scope.dataSheetDataset, $scope.fields, $scope.DatastoreTablePrefix, "Import", $scope.dataset.QAStatuses);
				console.log("$scope.activities is next...");
				console.dir($scope.activities);
	            
	            if(!$scope.activities.errors)
	            {				
	                DatasetService.saveActivities($scope.userId, $scope.dataset.Id, $scope.activities);
	            }

			};
			
			$scope.eventTimer = function(){
				var d = new Date();
				console.log(d.toLocaleTimeString(),1000);
			};

	    	$scope.openDuplicatesModal = function(){
				var modalInstance = $modal.open({
					templateUrl: 'app/core/datasets/components/dataset-import/templates/modal-dataset-duplicates.html',
					controller: 'ModalDuplicatesViewCtrl',
					scope: $scope, //very important to pass the scope along... -- TODO: but we don't want to pass in the whole $scope...
					//resolve: { files: function() { return $scope.files; } }
				});
	    	};

	    	//this is for custom import of appraisals
	    	$scope.importAppraisalLine = function(row){
	    		//console.dir(row);
	    		//console.log('starting: '+row['Allotment']);
				//1) create location query and lookup TSR and SDEOBJECTID by parcelid
				$scope.map.queryMatchParcel(row['Allotment'], function(features){
					//console.log("back from query!");
					if(features.length == 0)
                    {
                        console.log("didn't find parcelid: "+row['Allotment']);
                    }
                    else
                    {
                    	//console.dir(features[0].attributes['OBJECTID']);
                    	//console.dir(features[0].attributes['TSR']);
                    	var tsr = features[0].attributes['TSR'];
                    	if(tsr)
                    		tsr = tsr.replace("adminstration","admin");
                    	row.TSRFiles = '[{"Name":"View TSR","Link":"'+tsr+'"}]';

                    	//set some specific defaults -- this is a one-time thing (famous last words)
                    	row.AppraisalYear = '2014';
						row.AppraisalType = 'Land Buy Back';
						row.Appraiser = 'David Nicholson';

                    	// Wave 1
                    	//row.CobellAppraisalWave = 'Wave 1';
                    	//row.AppraisalStatus = 'Complete';
                    	//row.AllotmentStatus = 'Submitted to Regional Office';

                    	//other waves
                    	row.CobellAppraisalWave = 'Wave 3';
                    	row.AppraisalStatus = 'Not Started';
                    	row.AllotmentStatus = 'Requested';
                    	
                    	var map_loc = '//gis.ctuir.org/DECD/Appraisals/maps/Round_Basemaps_DECD_';
                    	row.MapFiles = '[{"Name":"Imagery","Link":"'+map_loc+'Imagery_'+row['Allotment']+'.pdf"},{"Name":"Plat","Link":"'+map_loc+'Plat_'+row['Allotment']+'.pdf"},{"Name":"Soils","Link":"'+map_loc+'Soils_'+row['Allotment']+'.pdf"},{"Name":"Topo","Link":"'+map_loc+'Topo_'+row['Allotment']+'.pdf"},{"Name":"Zoning","Link":"'+map_loc+'Zoning_'+row['Allotment']+'.pdf"}]';
                    	
                    	row.LastAppraisalRequestDate = new Date();

                    	row.Acres = features[0].attributes['ACRES_GIS'];

                    	//create a new location from the map feature selected
		                var new_location = {
		                    LocationTypeId: LOCATION_TYPE_APPRAISAL,
		                    SdeFeatureClassId: SDE_FEATURECLASS_TAXLOTQUERY,
		                    SdeObjectId: features[0].attributes['OBJECTID'],
		                    Label: features[0].attributes['PARCELID'],
		                };

		                var promise = CommonService.saveNewProjectLocation($scope.project.Id, new_location);
		                promise.$promise.then(function(location_data){
		                   //console.log("done and success!");
		                   //console.dir(location_data);
		                   row.locationId = location_data.Id;
		               });
                    }
				});
				//2) create new location (with sdeobjectid)


				//3) set new location in row
				//4) set tsr in row
				//5) create map links in row

			}

	    }
];
define("core/datasets/components/dataset-import/dataset-import", function(){});


var modal_dataset_duplicates = ['$scope', '$modalInstance',
    function ($scope, $modalInstance) {

        $scope.gridDuplicates = {
            data: 'DuplicateRecordsBucket',
            columnDefs: [{
                field: 'locationId',
                displayName: 'Location',
                cellFilter: 'locationNameFilter'
            },
            {
                field: 'activityDate',
                displayName: 'Activity Date',
                cellFilter: 'date: \'MM/dd/yyyy\'',
            }],
        };

        $scope.ok = function () {
            $modalInstance.dismiss();
        };

    }
];
define("core/datasets/components/dataset-import/modal-dataset-duplicates", function(){});


var dataset_query = ['$scope', '$routeParams', 'DatasetService', '$location', '$modal', 'DataSheet', '$rootScope', 'ChartService',
    'ProjectService', 'CommonService', 'SubprojectService', 
    	function($scope, $routeParams, DatasetService, $location, $modal, DataSheet, $rootScope, ChartService, ProjectService, CommonService, SubprojectService) {

			$scope.dataset = DatasetService.getDataset($routeParams.Id);
			
    		$scope.headerFields = [];
    		$scope.detailFields = [];
    		$scope.datasheetColDefs = [];
    		$scope.query = {results: []};
    		$scope.dataSheetDataset = [];
    		$scope.dataFields = [];
			$scope.criteriaList = [];
	    	$scope.queryToolVisible = true;
			$scope.Criteria = {};
				$scope.Criteria.paramActivityDateType = "all"; //default
				var migrationYearDate = new Date();
				var migrationYear = migrationYearDate.getFullYear();
				var migrationMonth = migrationYearDate.getMonth();
				if (migrationMonth > 9)
				{
					migrationYear++;
				}
				$scope.Criteria.paramActivityWhereMigrationYear = migrationYear;

    		$scope.AutoExecuteQuery = true;

			$scope.row = {ActivityQAStatus: {}}; //header field values get attached here by dbcolumnname

			$scope.sortedLocations = [];
			$scope.datasetLocationType=0;
			$scope.datasetLocations = [[]];		
			$scope.primaryProjectLocation = 0;
			$scope.showActivitiesWhereAll = true;
			$scope.showActivitiesWhereMigrationYear = false;
			$scope.showActivitiesWhereRunYear = false;
			$scope.showActivitiesWhereReportYear = false;
			$scope.showActivitiesWhereSpawningYear = false;
			$scope.showActivitiesWhereBroodYear = false;
			$scope.showActivitiesWhereOutmigrationYear = false;

			$scope.fishermenList = null;
			//$scope.fishermenOptions = $rootScope.fishermenOptions = null;		
			$scope.migrationYearsList = [];
			$scope.runYearsList = [];	
			$scope.reportYearsList = [];
			$scope.spawningYearsList = [];
			$scope.broodYearsList = [];
			$scope.outmigrationYearsList = [];			

    		$scope.gridDatasheetOptions = { 
    			data: 'dataSheetDataset', 
		        columnDefs: 'datasheetColDefs',
    			enableColumnResize: true, 
	        	enableRowSelection: true,
	        	enableCellEdit: false,
	        	enableSorting: true, 
    			enableCellSelection: true,
    			showFilter: false,
    			showColumnMenu: true,
    			multiSelect: false,
    		};

			$scope.chartConfig = {
    			  title : 'Fish by Species',
				  tooltips: true,
				  labels : false,
				  
				  legend: {
				    display: true,
				    position: 'right'
				  }
    		};

    		$scope.chartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default

			DataSheet.initScope($scope);

			$scope.datasheetColDefs = [{   
										field: 'LocationId', 
                                        displayName: 'Location', 
                                        cellFilter: 'locationNameFilter'
                                    },
                                    {
                                        field: 'ActivityDate', 
                                        displayName: 'Activity Date',
                                        cellFilter: 'date: \'MM/dd/yyyy\'',
                                    },
                                    {
                                        field: 'ActivityQAStatusId',
                                        displayName: 'QA Status',
                                        cellFilter: 'QAStatusFilter'
                                    },
                                    {
					    				field: "QAStatusId", //QARowStatus
					    				displayName: "QA",
					    				minWidth: 50, maxWidth: 200,
					 					cellFilter: 'RowQAStatusFilter',
					 					visible: false,  //start off hidden -- show only if relevant
					    			}

                                ];
									
			$scope.datasheetColDefs2 = [ 
									{
										field: 'FishermanId',
										displayName: 'Fisherman',
										cellFilter: 'fishermanFilter',
									}
								];

			var fishermenWatcher = 
			$scope.$watch('theFishermen.length', function(){
				if ((typeof $scope.theFishermen !== 'undefined') && ($scope.theFishermen !== null))
				{
					console.log("Inside theFishermen watch...");
					console.log("$scope.theFishermen.length = " + $scope.theFishermen.length)
					
					if ($scope.theFishermen.length > 0)
					{
						//$scope.fishermenOptions = $rootScope.fishermenOptions = makeObjects($scope.fishermenList, 'Id','FullName');
						$scope.fishermenOptions = $rootScope.fishermenOptions = makeObjects($scope.project.Fishermen, 'Id','FullName');
						console.log("$scope.fishermenOptions is next...");
						console.dir($scope.fishermenOptions);						
					}
				}
					
			});
			
    		//setup a listener to populate column headers on the grid
			$scope.$watch('dataset.Id', function() { 
				if(!$scope.dataset.Fields)
					return;
				
				console.log("Inside dataset.Id watcher...");

				$scope.DatastoreTablePrefix = $rootScope.DatastoreTablePrefix = $scope.dataset.Datastore.TablePrefix;
				console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
				$scope.datasetLocationType = CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);					
				console.log("LocationType = " + $scope.datasetLocationType);				

				$scope.project = ProjectService.getProject($scope.dataset.ProjectId);
	        	$scope.QAStatusOptions = $rootScope.QAStatusOptions = makeObjects($scope.dataset.QAStatuses, 'Id','Name');
	        	$scope.QAStatusOptions["all"] = "- All -";
	        	$scope.Criteria.ParamQAStatusId = "all";

				var fieldIndex = 0;

				// Original code
				/*angular.forEach($scope.dataset.Fields.sort(orderByIndex), function(field){
					parseField(field, $scope);
					if(field.FieldRoleId == FIELD_ROLE_HEADER)
					{
						$scope.headerFields.push(field);
					}
					else if(field.FieldRoleId == FIELD_ROLE_DETAIL)
					{
						$scope.detailFields.push(field);
					}

					//create a javascript list from our possible values (if any)
					if(field.Field.PossibleValues)
					{
						
		                field.PossibleValuesList = makeObjectsFromValues(field.DbColumnName, field.Field.PossibleValues); //set this into our object
	
						fieldIndex ++;

					}

					$scope.datasheetColDefs.push(makeFieldColDef(field, $scope));

					$scope.dataFields.push(field);

	    		});*/
				
				// New code
				angular.forEach($scope.dataset.Fields.sort(orderByIndex), function(field){
					//console.log("field.DbColumnName = " + field.DbColumnName);
					//console.log("field.FieldRoleId = " + field.FieldRoleId);
					if(field.FieldRoleId === FIELD_ROLE_HEADER)
					{
						//console.log("Found a header...field.DbColumnName = " + field.DbColumnName);
						parseField(field, $scope);
						$scope.headerFields.push(field);
						
						//create a javascript list from our possible values (if any)
						if(field.Field.PossibleValues)
						{
							
							field.PossibleValuesList = makeObjectsFromValues(field.DbColumnName, field.Field.PossibleValues); //set this into our object
		
							fieldIndex ++;

						}

						$scope.datasheetColDefs.push(makeFieldColDef(field, $scope));

						$scope.dataFields.push(field);
						//console.log("Just added " + field.DbColumnName + " to dataFields");
					}
	    		});

				// For CreelSurvey, we must add the Fisherman field.
				if ($scope.DatastoreTablePrefix === "CreelSurvey")
				{
					console.log("Dataset is Creelsurvey, adding Fisherman field...");
					$scope.detailFields.push($scope.datasheetColDefs2);
					//console.log("$scope.detailFields is next...");
					//console.dir($scope.detailFields);

					$scope.datasheetColDefs.push($scope.datasheetColDefs2[0]);
					//console.log("$scope.datasheetColDefs is next...");
					//console.dir($scope.datasheetColDefs);
				}
				else if ($scope.DatastoreTablePrefix === "AdultWeir") 
				{
					//$scope.showActivitiesWhereAll = false;
					$scope.showActivitiesWhereAll = true;
					$scope.showActivitiesWhereRunYear = true;
					//$scope.Criteria.paramActivityDateType = "singleYear"; // We set this in BuildQuery instead.
					$scope.runYearsList = SubprojectService.getRunYears($scope.dataset.Id);
				}
				else if ($scope.DatastoreTablePrefix === "ScrewTrap") 
				{
					$scope.showActivitiesWhereAll = false;
					$scope.showActivitiesWhereMigrationYear = true;
					$scope.Criteria.paramActivityDateType = "singleYear";
					$scope.migrationYearsList = SubprojectService.getMigrationYears($scope.dataset.Id);
				}
				//else if ($scope.DatastoreTablePrefix === "Metrics")
				else if (($scope.DatastoreTablePrefix === "Metrics") || 
					($scope.DatastoreTablePrefix === "Benthic") ||
					($scope.DatastoreTablePrefix === "Drift")
					)
				{
					$scope.showActivitiesWhereAll = false;
					$scope.showActivitiesWhereReportYear = true;
					$scope.Criteria.paramActivityDateType = "singleYear";
					$scope.reportYearsList = SubprojectService.getReportYears($scope.dataset.Id);
					
					$scope.datasheetColDefs = [];
					$scope.datasheetColDefs = [{   
												field: 'LocationId', 
												displayName: 'Location', 
												cellFilter: 'locationNameFilter'
											},
											{
												field: 'ActivityDate', 
												displayName: 'Activity Date',
												cellFilter: 'date: \'MM/dd/yyyy\'',
											},
										];
				}
				else if ($scope.DatastoreTablePrefix === "StreamNet_NOSA") 
				{
					$scope.showActivitiesWhereAll = false;
					$scope.showActivitiesWhereSpawningYear = true;
					$scope.Criteria.paramActivityDateType = "singleYear";
					$scope.spawningYearsList = SubprojectService.getSpawningYears($scope.dataset.Id);
					
					$scope.datasheetColDefs = [];
					$scope.datasheetColDefs = [
											{
												field: 'ActivityDate', 
												displayName: 'Activity Date',
												cellFilter: 'date: \'MM/dd/yyyy\'',
											}
										];
				}
				else if ($scope.DatastoreTablePrefix === "StreamNet_RperS") 
				{
					$scope.showActivitiesWhereAll = false;
					$scope.showActivitiesWhereBroodYear = true;
					$scope.Criteria.paramActivityDateType = "singleYear";
					$scope.broodYearsList = SubprojectService.getBroodYears($scope.dataset.Id);
					
					$scope.datasheetColDefs = [];
					$scope.datasheetColDefs = [
											{
												field: 'ActivityDate', 
												displayName: 'Activity Date',
												cellFilter: 'date: \'MM/dd/yyyy\'',
											}
										];
				}
				else if ($scope.DatastoreTablePrefix === "StreamNet_SAR") 
				{
					$scope.showActivitiesWhereAll = false;
					$scope.showActivitiesWhereOutmigrationYear = true;
					$scope.Criteria.paramActivityDateType = "singleYear";
					$scope.outmigrationYearsList = SubprojectService.getOutmigrationYears($scope.dataset.Id);
					
					$scope.datasheetColDefs = [];
					$scope.datasheetColDefs = [
											{
												field: 'ActivityDate', 
												displayName: 'Activity Date',
												cellFilter: 'date: \'MM/dd/yyyy\'',
											}
										];
				}
				else if ($scope.DatastoreTablePrefix === "WaterTemp") 
				{
					$scope.showActivitiesWhereAll = true;
				}

				angular.forEach($scope.dataset.Fields.sort(orderByIndex), function(field){
						
					if(field.FieldRoleId == FIELD_ROLE_DETAIL)
					{
						parseField(field, $scope);
						//console.log("The field = " + field.DbColumnName);
						$scope.detailFields.push(field);
						
						//create a javascript list from our possible values (if any)
						if(field.Field.PossibleValues)
						{
							field.PossibleValuesList = makeObjectsFromValues(field.DbColumnName, field.Field.PossibleValues); //set this into our object
		
							fieldIndex ++;
						}

						$scope.datasheetColDefs.push(makeFieldColDef(field, $scope));

						$scope.dataFields.push(field);
					}
	    		});				
				
	    		$scope.dataFields = $scope.dataFields.sort(orderByAlpha);

				$scope.recalculateGridWidth($scope.datasheetColDefs.length);

				$scope.RowQAStatuses =  $rootScope.RowQAStatuses = undefined;

				// RowQAStatus should only show for the WaterTemp dataset.
				//if($scope.dataset.RowQAStatuses.length > 1)
				if (($scope.DatastoreTablePrefix === "WaterTemp") && ($scope.dataset.RowQAStatuses.length > 1))
				{
					$scope.RowQAStatuses =  $rootScope.RowQAStatuses = makeObjects($scope.dataset.RowQAStatuses, 'Id', 'Name');  //Row qa status ids

					//$scope.RowQAStatuses["all"] = "- All -";
					//$scope.Criteria.ParamRowQAStatusId = ["all"];
					$scope.datasheetColDefs[3].visible = true; //QAStatusId
				}
				
				console.log("$scope at end of watch dataset.Id is next...");
				//console.dir($scope);
	    	});
								
    		$scope.$watch('project.Name', function(){
    			if($scope.project.Name){	
					console.log("Inside DataQueryCtrl, project.Name watcher...");
					
					// Original code
    				//$scope.locationOptions = $rootScope.locationOptions = makeObjects(getUnMatchingByField($scope.project.Locations,PRIMARY_PROJECT_LOCATION_TYPEID,"LocationTypeId"), 'Id','Label') ;
    				//$scope.locationOptions["all"] = "- All -";
    				//$scope.Criteria.LocationIds = ["all"]; //set the default				

					console.log("scope in watch project.Name is next...");
					//console.dir($scope);
					
					//$scope.subprojectType = ProjectService.getProjectType($scope.project.Id);
					console.log("$scope.subprojectType = " + $scope.subprojectType);
					SubprojectService.setServiceSubprojectType($scope.subprojectType);

					//if ($scope.subprojectType === "Harvest")
					if ($scope.DatastoreTablePrefix === "CreelSurvey")
					{
						console.log("Loading Harvest...");
						$scope.ShowFishermen = true;
						$scope.theFishermen = ProjectService.getProjectFishermen($scope.project.Id);
					}
					
					console.log("ProjectLocations is next...");
					console.dir($scope.project.Locations);
					//var locInd = 0;
					//for (var i = 0; i < $scope.project.Locations.length; i++ )
					//{
						//console.log($scope.project.Locations[i].Id + "  " + $scope.project.Locations[i].Label);
					//	if ($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType)
						//if (($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) || ($scope.project.Locations[i].LocationTypeId === LOCATION_TYPE_Hab))
					//	{
							//console.log("Found one");
					//		$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
							//console.log("datasetLocations length = " + $scope.datasetLocations.length);
							//locInd++;
					//	}
					//}
					
					if ($scope.project.Locations)
					{
						for (var i = 0; i < $scope.project.Locations.length; i++ )
						{
							//console.log("projectLocations Index = " + $scope.project.Locations[i].Label);
							//console.log($scope.project.Locations[i].LocationTypeId + "  " + $scope.datasetLocationType); //$scope.project.Locations[i]);
							if (($scope.DatastoreTablePrefix === "Metrics") ||
								($scope.DatastoreTablePrefix === "Benthic") ||
								($scope.DatastoreTablePrefix === "Drift")
								)
							{
								if (($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType) || ($scope.project.Locations[i].LocationTypeId === LOCATION_TYPE_Hab))
								{
									//console.log("Found Habitat-related location");
									$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
								}
							}
							else
							{
								if ($scope.project.Locations[i].LocationTypeId === $scope.datasetLocationType)
								{
									//console.log("Found non-Habitat-related location");
									$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
								}
							}

							//{
							//	//console.log("Found one");
							//	$scope.datasetLocations.push([$scope.project.Locations[i].Id, $scope.project.Locations[i].Label]);
							//	//console.log("datasetLocations length = " + $scope.datasetLocations.length);
							//	//locInd++;
							//}
						}
						console.log("datasetLocations is next...");
						console.dir($scope.datasetLocations);
					}
					
					// When we built the array, it started adding at location 1 for some reason, skipping 0.
					// Therefore, row 0 is blank.  The simple solution is to just delete row 0.
					//$scope.datasetLocations.shift();
					
					// During the original development, the blank row was always at row 0.  Months later, I noticed that 
					// the blank row was not at row 0.  Therefore, it needed a different solution.
					var index = 0;
					angular.forEach($scope.datasetLocations, function(dsLoc)
					{
						if (dsLoc.length === 0)
						{
							$scope.datasetLocations.splice(index, 1);
						}
						
						index++;
					});
					
					console.log("datasetLocations after splice is next...");
					console.dir($scope.datasetLocations);

					$scope.datasetLocations.sort(order2dArrayByAlpha);
					console.log("datasetLocations sorted...");
					console.dir($scope.datasetLocations);
			
					// Convert our 2D array into an array of objects.
					for (var i = 0; i < $scope.datasetLocations.length; i++)
					{
						$scope.sortedLocations.push({Id: $scope.datasetLocations[i][0], Label: $scope.datasetLocations[i][1]});
					}
					$scope.datasetLocations = [[]]; // Clean up		
					
					// Convert our array of objects into a list of objects, and put it in the select box.
					$scope.locationOptions = $rootScope.locationOptions = makeObjects($scope.sortedLocations, 'Id','Label') ;
    				$scope.locationOptions["all"] = "- All -";
    				$scope.Criteria.LocationIds = ["all"]; //set the default
					
					console.log("locationOptions is next...");
					console.dir($scope.locationOptions);

					// Keeping this code in, because we want to get it working properly.
					// Why it does not work correctly?
					// Even if $scope.locationOptions has only one, the array still has 2 (the one location, and a blank).
					// Therefore, we must check for a size of 2, in order to auto-select the one location.
					// We must turn this on, test it, and shake out the bugs.
					if(array_count($scope.locationOptions) === 2)
					{
						var count = 0;
						//there will only be one.
						angular.forEach(Object.keys($scope.locationOptions), function(key){
							console.log("key = " + key);
							//if (key !== "undefined")
							if ((count = 1) && (key !== "undefined"))
							{
								$scope.row['locationId'] = key;	
								console.log("row is next...");
								console.dir($scope.row['locationId']);
							}
							count++;
						});
						
					}			
				}
    		});

			$scope.$watch('migrationYearsList.length', function() { 
				if ($scope.migrationYearsList.length === 0)
				{
					console.log("$scope.migrationYearsList.length is 0");
					return;
				}
				
				console.log("Inside watch migrationYearsList.length...");
				
				$scope.MigrationYearOptions = [];
				$scope.RowMigrationYears = [];
				
				angular.forEach($scope.migrationYearsList, function(yearRec){
					$scope.RowMigrationYears.push({
						Id:		yearRec["MigrationYear"],
						Year:	yearRec["MigrationYear"]
					});
				});
				console.log("$scope.RowMigrationYears is next...");
				console.dir($scope.RowMigrationYears);
				$scope.MigrationYearOptions = makeObjects($scope.RowMigrationYears, 'Id', 'Year');
				
				console.log("$scope.MigrationYearOptions is next...");
				console.dir($scope.MigrationYearOptions);
			});
			
			$scope.$watch('runYearsList.length', function() { 
				if ($scope.runYearsList.length === 0)
				{
					console.log("$scope.runYearsList.length is 0");
					return;
				}
				
				console.log("Inside watch runYearsList.length...");
				
				$scope.RunYearOptions = [];
				$scope.RowRunYears = [];
				
				angular.forEach($scope.runYearsList, function(yearRec){
					$scope.RowRunYears.push({
						Id:		yearRec["RunYear"],
						Year:	yearRec["RunYear"]
					});
				});
				if ($scope.RowRunYears.length > 0)
				{
					$scope.RowRunYears.push({
						Id:		["0"],
						Year:	[null]
					});
				}
				console.log("$scope.RowRunYears is next...");
				console.dir($scope.RowRunYears);
				$scope.RunYearOptions = makeObjects($scope.RowRunYears, 'Id', 'Year');
				
				console.log("$scope.RunYearOptions is next...");
				console.dir($scope.RunYearOptions);
			});
			
			$scope.$watch('reportYearsList.length', function() { 
				if ($scope.reportYearsList.length === 0)
				{
					console.log("$scope.reportYearsList.length is 0");
					return;
				}
				
				console.log("Inside watch reportYearsList.length...");
				console.log("$scope.reportYearsList is next...");
				console.dir($scope.reportYearsList);
				
				$scope.ReportYearOptions = [];
				$scope.RowReportYears = [];
				
				angular.forEach($scope.reportYearsList, function(yearRec){
					$scope.RowReportYears.push({
						Id:		yearRec["YearReported"],
						Year:	yearRec["YearReported"]
					});
				});
				console.log("$scope.RowReportYears is next...");
				console.dir($scope.RowReportYears);
				$scope.ReportYearOptions = makeObjects($scope.RowReportYears, 'Id', 'Year');
				
				console.log("$scope.ReportYearOptions is next...");
				console.dir($scope.ReportYearOptions);
			});
			
			$scope.$watch('spawningYearsList.length', function() { 
				if ($scope.spawningYearsList.length === 0)
				{
					console.log("$scope.spawningYearsList.length is 0");
					return;
				}
				
				console.log("Inside watch spawningYearsList.length...");
				console.log("$scope.spawningYearsList is next...");
				console.dir($scope.spawningYearsList);
				
				$scope.SpawningYearOptions = [];
				$scope.RowSpawningYears = [];
				
				angular.forEach($scope.spawningYearsList, function(yearRec){
					$scope.RowSpawningYears.push({
						Id:		yearRec["SpawningYear"],
						Year:	yearRec["SpawningYear"]
					});
				});
				console.log("$scope.RowSpawningYears is next...");
				console.dir($scope.RowSpawningYears);
				$scope.SpawningYearOptions = makeObjects($scope.RowSpawningYears, 'Id', 'Year');
				
				console.log("$scope.SpawningYearOptions is next...");
				console.dir($scope.SpawningYearOptions);
			});
			
			$scope.$watch('broodYearsList.length', function() { 
				if ($scope.broodYearsList.length === 0)
				{
					console.log("$scope.broodYearsList.length is 0");
					return;
				}
				
				console.log("Inside watch broodYearsList.length...");
				console.log("$scope.broodYearsList is next...");
				console.dir($scope.broodYearsList);
				
				$scope.BroodYearOptions = [];
				$scope.RowBroodYears = [];
				
				angular.forEach($scope.broodYearsList, function(yearRec){
					$scope.RowBroodYears.push({
						Id:		yearRec["BroodYear"],
						Year:	yearRec["BroodYear"]
					});
				});
				console.log("$scope.RowBroodYears is next...");
				console.dir($scope.RowBroodYears);
				$scope.BroodYearOptions = makeObjects($scope.RowBroodYears, 'Id', 'Year');
				
				console.log("$scope.BroodYearOptions is next...");
				console.dir($scope.BroodYearOptions);
			});
			
			$scope.$watch('outmigrationYearsList.length', function() { 
				if ($scope.outmigrationYearsList.length === 0)
				{
					console.log("$scope.outmigrationYearsList.length is 0");
					return;
				}
				
				console.log("Inside watch outmigrationYearsList.length...");
				console.log("$scope.outmigrationYearsList is next...");
				console.dir($scope.outmigrationYearsList);
				
				$scope.OutmigrationYearOptions = [];
				$scope.RowOutmigrationYears = [];
				
				angular.forEach($scope.outmigrationYearsList, function(yearRec){
					$scope.RowOutmigrationYears.push({
						Id:		yearRec["OutmigrationYear"],
						Year:	yearRec["OutmigrationYear"]
					});
				});
				console.log("$scope.RowOutmigrationYears is next...");
				console.dir($scope.RowOutmigrationYears);
				$scope.OutmigrationYearOptions = makeObjects($scope.RowOutmigrationYears, 'Id', 'Year');
				
				console.log("$scope.OutmigrationYearOptions is next...");
				console.dir($scope.OutmigrationYearOptions);
			});

    		$scope.removeCriteria = function(idx) {
    			$scope.criteriaList.splice(idx,1);
    			if($scope.AutoExecuteQuery)
					$scope.executeQuery();
    		};

    		$scope.clearValue = function()
    		{
    			$scope.Criteria.Value = null;
    		};

    		$scope.addCriteria = function(){
				$scope.criteriaList.push({
					//commenting these out because they will be read at EXECUTE time, not saved per query.
					//qastatus:   $scope.Criteria.ParamQAStatusId,
					//locations:  $scope.Criteria.LocationIds,
					//activities: $scope.Criteria.paramActivityDateType, 
					DbColumnName: 		$scope.Criteria.ParamFieldSelect[0].DbColumnName,
					Id: 				$scope.Criteria.ParamFieldSelect[0].Id,
					Value: 				$scope.Criteria.Value,
				});

				$scope.Criteria.Value = null;

				if($scope.AutoExecuteQuery)
					$scope.executeQuery();
    		};

    		$scope.buildQuery = function(){
				console.log("Inside DataQueryCtrl.buildQuery...");
				
				console.log("$scope.Criteria.LocationsIds is next...");
				console.dir($scope.Criteria.LocationsIds);
				console.log("x " + angular.toJson($scope.Criteria.LocationIds).toString());
				
				// Declare and define the basic query criteria.  We will add onto the criteria, depending upon $scope.DatastoreTablePrefix.
				var query = null;
				query = 
				{
					criteria: {
						DatasetId: 	  $scope.dataset.Id,
						QAStatusId:   $scope.Criteria.ParamQAStatusId,
						RowQAStatusId: $scope.Criteria.ParamRowQAStatusId,
						Locations:    angular.toJson($scope.Criteria.LocationIds).toString(),
						FromDate:     $scope.Criteria.BetweenFromActivityDate,
						ToDate:       $scope.Criteria.BetweenToActivityDate,
						DateSearchType: $scope.Criteria.paramActivityDateType, 
						Fields: 	  $scope.criteriaList,
						TablePrefix:  $scope.DatastoreTablePrefix,
					},
					loading: true,
				};
				
				//if ($scope.DatastoreTablePrefix === "AdultWeir")
				if ($scope.DatastoreTablePrefix === "AdultWeir")
				{
					if (($scope.Criteria.paramActivityWhereRunYear) && ($scope.Criteria.paramActivityWhereRunYear > 0))
					{
						query.criteria.DateSearchType = $scope.Criteria.paramActivityDateType = "singleYear";
						query.criteria.RunYear = $scope.Criteria.paramActivityWhereRunYear;
					}
					else
						query.criteria.DateSearchType = $scope.Criteria.paramActivityDateType;
				}
				else if ($scope.DatastoreTablePrefix === "ScrewTrap")
				{
					query.criteria.MigrationYear = $scope.Criteria.paramActivityWhereMigrationYear;
				}
				else if ($scope.DatastoreTablePrefix === "Metrics")
				{
					query.criteria.ReportYear = $scope.Criteria.paramActivityWhereReportYear;
				}
				else if (($scope.DatastoreTablePrefix === "Benthic") ||
					($scope.DatastoreTablePrefix === "Drift")
					)
				{
					query.criteria.SampleYear = $scope.Criteria.paramActivityWhereSampleYear;
				}
				else if ($scope.DatastoreTablePrefix === "StreamNet_NOSA")
				{
					query.criteria.SpawningYear = $scope.Criteria.paramActivityWhereSpawningYear;
				}
				else if ($scope.DatastoreTablePrefix === "StreamNet_RperS")
				{
					query.criteria.BroodYear = $scope.Criteria.paramActivityWhereBroodYear;
				}
				else if ($scope.DatastoreTablePrefix === "StreamNet_SAR")
				{
					query.criteria.OutmigrationYear = $scope.Criteria.paramActivityWhereOutmigrationYear;
				}
				
				console.log("query in buildQuery is next...");
				console.dir(query);

    			if(query.criteria.RowQAStatusId)
    				query.criteria.RowQAStatusId = angular.toJson(query.criteria.RowQAStatusId).toString();

				console.log("query criteria before sending...");
				console.dir(query.criteria);
    			return query;
    		};

    		$scope.executeQuery = function(){
 				console.log("Inside DataQueryCtrl.executeQuery...");
   			
    			$scope.query = $scope.buildQuery();

    			DatasetService.queryActivities($scope.query);
    			//service will run query and then update:
	    			//query.results
	    			//query.errors
	    	};

	    	$scope.$watch('query.loading', function(){
	    		if(!$scope.dataset.Id)
	    			return;
				
				console.log("Inside DataQueryCtrl.query.loading watch -- gathering graph data");
				// Only for debug; causes front end to run out of memory.
				//console.log("query.results is next...");
				//console.dir($scope.query.results);
				
				$scope.dataSheetDataset = null; // Reset this, just so that it does not take up a bunch of memory.
	    		$scope.dataSheetDataset = $scope.query.results;
				//console.log("$scope.dataSheetDataset is next...");
				//console.dir($scope.dataSheetDataset);
				$scope.query.results = null; // Dump this too, because we have the results in $scope.dataSheetDataset.
				
				// Only for debug; causes front end to run out of memory.
				//console.log("$scope.dataSheetDataset is next...");
				//console.dir($scope.dataSheetDataset);
				//if ((typeof $scope.query.results !== 'undefined') && ($scope.query.results !== null))
				if ((typeof $scope.dataSheetDataset !== 'undefined') && ($scope.dataSheetDataset !== null))
				{
					console.log("$scope.dataSheetDataset !== 'undefined' and $scope.dataSheetDataset !== null");
					
					if ($scope.DatastoreTablePrefix === "CreelSurvey")
					{
						for (var i = 0; i < $scope.dataSheetDataset.length; i++)
						{
							//console.log("Extracting times from strings...");
							var strTimeStart = $scope.dataSheetDataset[i].TimeStart;
							var strTimeEnd = $scope.dataSheetDataset[i].TimeEnd;
							var intTLoc = -1;
							if ((typeof strTimeStart !== 'undefined') && (strTimeStart !== null))
							{
								intTLoc = strTimeStart.indexOf("T");
								// Start just past the "T" in the string, and get the time portion (the next 5 characters).
								strTimeStart = strTimeStart.substr(intTLoc + 1, 5);
								$scope.dataSheetDataset[i].TimeStart = strTimeStart;
								
								if ((typeof strTimeEnd !== 'undefined') && (strTimeEnd !== null))
								{
									strTimeEnd = strTimeEnd.substr(intTLoc + 1, 5);
									$scope.dataSheetDataset[i].TimeEnd = strTimeEnd;
								}							
							}
							
							var strInterviewTime = $scope.dataSheetDataset[i].InterviewTime;
							if ((typeof strInterviewTime !== 'undefined') && (strInterviewTime !== null))
							{
								//console.log("strInterviewTime = " + strInterviewTime);
								intTLoc = strInterviewTime.indexOf("T");
								//console.log("intLoc = " + intTLoc);
								strInterviewTime = strInterviewTime.substr(intTLoc + 1, 5);
								//console.log("strInterviewTime = " + strInterviewTime);
								$scope.dataSheetDataset[i].InterviewTime = strInterviewTime
							}
						}
					}
					
					//console.log("$scope in watch query.loading is next...");
					////console.dir($scope);
					//ChartService.buildChart($scope, $scope.dataSheetDataset, $scope.dataset.Datastore.TablePrefix, {height: 360, width: 800});
					ChartService.buildChart($scope, $scope.dataSheetDataset, $scope.dataset.Datastore.TablePrefix, {height: 360, width: 800});
				}
	    		//$scope.chartData = getAdultWeirChartData($scope.query.results);
	    		
	    	});

	    	$scope.openActivity = function()
	    	{
				console.log("Inside $scope.openActivity...");
				//console.log("$scope is next...");
				//console.dir($scope);
	    		$location.path("/dataview/"+$scope.onRow.entity.ActivityId);
	    	};


    		$scope.openExportView = function() {
				var modalInstance = $modal.open({
                    templateUrl: 'app/core/common/components/modals/templates/modal-exportfile.html',
					controller: 'ModalExportController',
					scope: $scope, //very important to pass the scope along... -- TODO: but we don't want to pass in the whole $scope...
					//resolve: { files: function() { return $scope.files; } }
				});
			}
    	}
];
define("core/datasets/components/dataset-query/dataset-query", function(){});

//Global / full query across all projects with this dataset.
var big_bucket_query = ['$scope','$routeParams','CommonService','AdminService','DatasetService','$location', '$modal','DataSheet', '$rootScope',
    	function($scope, $routeParams, CommonService, AdminService, DatasetService, $location, $modal, DataSheet, $rootScope) {

    		$scope.datastoreLocations = CommonService.getLocations($routeParams.Id);
    		$scope.dataFields = AdminService.getFields($routeParams.Id);
    		$scope.datastore = DatasetService.getDatastore($routeParams.Id);

			$scope.headerFields = [];
    		$scope.detailFields = [];
    		$scope.datasheetColDefs = [];
    		$scope.query = {results: []};
    		$scope.dataSheetDataset = [];

			$scope.chartData = {"series": [], "data":[{ "x": "Loading...", "y": [0],"tooltip": ""}]}; //default

    		$scope.gridDatasheetOptions = { 
    			data: 'dataSheetDataset', 
		        columnDefs: 'datasheetColDefs',
    			enableColumnResize: true, 
	        	enableRowSelection: true,
	        	enableCellEdit: false,
	        	enableSorting: true, 
    			enableCellSelection: true,
    			showFilter: false,
    			showColumnMenu: true,
    			multiSelect: false,
    		};

			DataSheet.initScope($scope);

			$scope.datasheetColDefs = [{   
										field: 'LocationId', 
                                        displayName: 'Location', 
                                        cellFilter: 'locationNameFilter'
                                    },
                                    {
                                        field: 'ActivityDate', 
                                        displayName: 'Activity Date',
                                        cellFilter: 'date: \'MM/dd/yyyy\'',
                                    },
                                    {
                                        field: 'ActivityQAStatusId',
                                        displayName: 'QA Status',
                                        cellFilter: 'QAStatusFilter'
                                    }];


    		$scope.$watch('datastoreLocations', function(){
    			if(!$scope.datastoreLocations)
    				return;
    			
    			$scope.locationOptions = $rootScope.locationOptions = makeObjects($scope.datastoreLocations, 'Id','Label') ;
    			$scope.locationOptions["all"] = "- All -";
    			$scope.Criteria.LocationIds = ["all"]; //set the default	
    		},true);


    		$scope.$watch('dataFields', function(){
    			if(!$scope.dataFields)
    				return;
    			
    			var fieldIndex = 0;

    			$scope.dataFields = $scope.dataFields.sort(orderByAlpha);
    			console.log("ordered!");
    			console.dir($scope.dataFields);

				angular.forEach($scope.dataFields, function(field){
					parseField(field, $scope);
					
					//create a javascript list from our possible values (if any)
					if(field.PossibleValues)
					{
						
		                field.PossibleValuesList = makeObjectsFromValues(field.DbColumnName, field.PossibleValues); //set this into our object
	
						fieldIndex ++;

					}

					$scope.datasheetColDefs.push(makeFieldColDef(field, $scope));


	    		});

				$scope.recalculateGridWidth($scope.datasheetColDefs.length);
    			
    		},true);


			$scope.criteriaList = [];

	    	$scope.queryToolVisible = true;
			$scope.Criteria = {};
			$scope.Criteria.paramActivityDateType = "all"; //default
			
		//$scope.QAStatusOptions = $rootScope.QAStatusOptions = makeObjects($scope.dataset.QAStatuses, 'Id','Name');  //TODO
			$scope.QAStatusOptions = {};
			$scope.RowQAStatuses = {};
	        
	        $scope.QAStatusOptions["all"] = "- All -";
	        $scope.RowQAStatusOptions["all"] = "- All -";
	        
	        $scope.Criteria.ParamQAStatusId = "all";
	        $scope.Criteria.ParamRowQAStatusId = "all";
	        
	        $scope.RowQAStatuses["all"] = "- All -";


    		$scope.AutoExecuteQuery = true;

    		$scope.removeCriteria = function(idx) {
    			$scope.criteriaList.splice(idx,1);
    			if($scope.AutoExecuteQuery)
					$scope.executeQuery();
    		};

    		$scope.addCriteria = function(){
				$scope.criteriaList.push({
					//commenting these out because they will be read at EXECUTE time, not saved per query.
					//qastatus:   $scope.Criteria.ParamQAStatusId,
					//locations:  $scope.Criteria.LocationIds,
					//activities: $scope.Criteria.paramActivityDateType, 
					DbColumnName: 		$scope.Criteria.ParamFieldSelect[0].DbColumnName,
					Id: 				$scope.Criteria.ParamFieldSelect[0].Id,
					Value: 				$scope.Criteria.Value,
				});

				//console.dir($scope.criteriaList);

				$scope.Criteria.Value = null;

				if($scope.AutoExecuteQuery)
					$scope.executeQuery();
    		};

    		$scope.buildQuery = function(){
				console.log("Inside DatastoreQueryCtrl.buildQuery...");
				
				var query = 
    			{
					criteria: {
						DatastoreId: 	  $routeParams.Id,
						QAStatusId:   $scope.Criteria.ParamQAStatusId,
						Locations:    angular.toJson($scope.Criteria.LocationIds).toString(),
						FromDate:     $scope.Criteria.BetweenFromActivityDate,
						ToDate:       $scope.Criteria.BetweenToActivityDate,
						DateSearchType: $scope.Criteria.paramActivityDateType, 
						Fields: 	  $scope.criteriaList,

					},
					loading: true,
    			};
				
				console.log("query is next...");
				console.dir(query);

    			return query;
    		};

    		$scope.executeQuery = function(){
				console.log("Inside DatastoreQueryCtrl.executeQuery...");
    			$scope.query = $scope.buildQuery();
				console.log("$scope.query is next...");
				console.dir($scope.query);

    			DatasetService.queryActivities($scope.query);
    			//service will run query and then update:
	    			//query.results
	    			//query.errors
	    	};

	    	$scope.$watch('query.loading', function(){
	    		console.log("--- gathering graph data");
	    		$scope.chartData = getAdultWeirChartData($scope.query.results);	
	    		$scope.dataSheetDataset = $scope.query.results;
	    	});
	    	


		}			
];
define("core/datasets/components/dataset-query/big-bucket-query", function(){});

// all dataset (activities, datastore) related factories and DatasetService.

datasets_module.factory('DatasetFiles', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/file/getdatasetfiles', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

datasets_module.factory('Activities', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/activity/getdatasetactivities', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

datasets_module.factory('ActivitiesForView', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/activity/getdatasetactivitiesview', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: true }
    });
}]);

datasets_module.factory('Dataset', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/dataset/getdataset', {}, {
        query: { method: 'GET', params: { id: 'datasetId' }, isArray: false }
    });
}]);

datasets_module.factory('Datasets', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/dataset/getdatasets', {}, {
        query: { method: 'GET', params: {}, isArray: true }
    });
}]);

datasets_module.factory('Data', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/activity/getdatasetactivitydata', {}, {
        query: { method: 'GET', params: { id: 'activityId' }, isArray: false }
    });
}]);

datasets_module.factory('SaveActivitiesAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/activity/savedatasetactivities');
}]);

datasets_module.factory('UpdateActivitiesAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/activity/updatedatasetactivities');
}]);

datasets_module.factory('QueryActivitiesAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/query/querydatasetactivities', {}, {
        save: { method: 'POST', isArray: true }
    });
}]);

datasets_module.factory('ExportActivitiesAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/export/exportdatasetactivities', {}, {
        save: { method: 'POST', isArray: false }
    });
}]);

datasets_module.factory('DeleteActivitiesAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/activity/deletedatasetactivities');
}]);

datasets_module.factory('SetQaStatusAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/activity/setqastatus');
}]);

//shouldn't this have an ID parameter? my guess is we don't actually use this anywhere...
datasets_module.factory('GetDatastore', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/getdatastore', {}, { query: { method: 'GET', params: {}, isArray: false } });
}]);

datasets_module.factory('GetAllDatastores', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/getdatastores');
}]);

datasets_module.factory('GetDatastoreDatasets', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/getdatastoredatasets');
}]);

datasets_module.factory('GetHeadersDataForDataset', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/dataset/getheadersdatafordataset');
}]);

datasets_module.factory('DeleteDatasetFile', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/file/deletedatasetfile');
}]);

datasets_module.factory('GetRelationData', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/dataset/getrelationdata', {}, {
        save: { method: 'POST', isArray: true }
    });
}])


datasets_module.service('DatasetService', ['$q',
    'DatasetFiles',
    'Activities',
    'ActivitiesForView',
    'Dataset',
    'Datasets',
    'Data',
    'SaveActivitiesAction',
    'UpdateActivitiesAction',
    'QueryActivitiesAction',
    'ExportActivitiesAction',
    'DeleteActivitiesAction',
    'SetQaStatusAction',
    'GetDatastore',
    'GetAllDatastores',
    'GetDatastoreDatasets',
    'GetHeadersDataForDataset',
    'DeleteDatasetFile',
    'GetRelationData',
    function ($q,
        DatasetFiles,
        Activities,
        ActivitiesForView,
        Dataset,
        Datasets,
        Data,
        SaveActivitiesAction,
        UpdateActivitiesAction,
        QueryActivitiesAction,
        ExportActivitiesAction,
        DeleteActivitiesAction,
        SetQaStatusAction,
        GetDatastore,
        GetAllDatastores,
        GetDatastoreDatasets,
        GetHeadersDataForDataset,
        DeleteDatasetFile,
        GetRelationData) {

        var service = {

            datastoreId: null,
            dataset: null,

            clearDataset: function () {
                service.dataset = null;
            },

            getDatastore: function (id) {
                return GetDatastore.query({ id: id });
            },

            getDatastores: function () {
                return GetAllDatastores.query();
            },

            getDatastoreDatasets: function (id) {
                return GetDatastoreDatasets.query({ id: id });
            },

            getDataset: function (datasetId) {
                if (service.dataset && service.dataset.Id == datasetId)
                    return service.dataset;

                console.log("Inside services.js, getDataset...");

                service.dataset = Dataset.query({ id: datasetId });

                //load our configuration if there is one
                service.dataset.$promise.then(function () {
                    service.configureDataset(service.dataset);
                });

                return service.dataset;
            },

            getDatasets: function () {
                return Datasets.query();
            },

            //configureDataset: function(dataset)
            configureDataset: function (dataset, scope) {
                console.log("configuring dataset.Name = " + dataset.Name);
                //default page routes
                dataset.activitiesRoute = "activities"; //default route -- when they click to go to "activities" this is the route they should use.

                //objectify our dataset config for later use
                console.log("dataset.Config is next...");
                console.dir(dataset.Config);
                //if(dataset.Config) // Original line.
                // If we are verifying the variable is defined, this works the best.  Lastly, the database column config may either be null, or contain the text "NULL", so we must check for that too.
                if ((typeof dataset.Config !== 'undefined') && (dataset.Config !== null) && (dataset.Config !== "NULL")) {
                    dataset.Config = angular.fromJson(dataset.Config);

                    //if there are page routes in configuration, set them in our dataset
                    if (dataset.Config.ActivitiesPage && dataset.Config.ActivitiesPage.Route)
                        dataset.activitiesRoute = dataset.Config.ActivitiesPage.Route;

                    if (typeof scope == 'undefined') {
                        console.log("SKIPPING dataset config - no scope is set!");
                    }
                    else {
                        //part of configuration is authorization.  If the user isn't authorized
                        //  for this dataset, bump them to error
                        if (dataset.Config.RestrictRoles) {
                            var authorized = false;
                            for (var i = dataset.Config.RestrictRoles.length - 1; i >= 0; i--) {
                                if (angular.rootScope.Profile.hasRole(dataset.Config.RestrictRoles[i]))
                                    authorized = true;
                            };

                            if (!authorized) {
                                //angular.rootScope.go('/unauthorized');
                                scope.AuthorizedToViewProject = false;
                            }

                            //console.dir(angular.rootScope.Profile);
                            //console.dir(dataset.Config.RestrictRoles);
                        }
                    }
                }
            },

            getHeadersDataForDataset: function (datasetId) {
                return GetHeadersDataForDataset.query({ id: datasetId });
            },

            getActivityData: function (id) {
                return Data.query({ id: id });
            },

            getActivities: function (id) {
                return Activities.query({ id: id });
            },

            getActivitiesForView: function (id) {
                return ActivitiesForView.query({ id: id });
            },

            getDatasetFiles: function (datasetId) {
                console.log("Inside getDatasetFiles...");
                console.log("datasetId = " + datasetId);
                //this.getProject(projectId); //set our local project to the one selected
                return DatasetFiles.query({ id: datasetId });
            },

            deleteDatasetFile: function (projectId, datasetId, file) {
                console.log("Inside deleteDatasetFile");
                console.log("ProjectId = " + projectId + ", DatasetId = " + datasetId + ", attempting to delete file...");
                console.dir(file);
                return DeleteDatasetFile.save({ ProjectId: projectId, DatasetId: datasetId, File: file });
            },

            //NB: looks like this isn't used.
            //this should give you the possible QA Statuses for this dataset's rows
            getPossibleRowQAStatuses: function (id) {
                //for now we fake it:
                return [{
                    id: 1,
                    name: "ok",
                },
                {
                    id: 2,
                    name: "error",
                }
                ];

            },

            queryActivities: function (query) {
                //using "save" here because we need to POST our query criteria object
                QueryActivitiesAction.save(query.criteria, function (data) {
                    query.results = data;
                    query.errors = undefined;
                    console.log("success!");
                    query.loading = false;
                }, function (data) {
                    query.results = undefined;
                    query.errors = ["There was a problem running your querying.  Please try again or contact support."];
                    console.log("Failure!");
                    console.dir(data);
                    query.loading = false;
                });

            },

            exportActivities: function (query) {
                ExportActivitiesAction.save(query.criteria, function (data) {
                    console.log("success!");
                    query.loading = false;
                    query.exportedFile = data;
                    console.dir(data);
                    //console.dir(angular.fromJson(data));
                }, function (data) {
                    console.log("Failure!");
                    query.failed = true;
                    query.loading = false;
                });
            },

            //updateActivities: function(userId, datasetId, activities)
            updateActivities: function (userId, datasetId, activities, datastoreTablePrefix) {
                activities.saving = true; //tell everyone we are saving
                activities.UserId = userId;
                activities.DatasetId = datasetId;
                activities.DatastoreTablePrefix = datastoreTablePrefix;
                UpdateActivitiesAction.save(activities, function (data) {
                    activities.success = "Update successful.";
                    activities.errors = false;
                    console.log("Success!");
                    activities.saving = false; //and... we're done.
                }, function (data) {
                    activities.success = false;
                    activities.errors = { saveError: "There was a problem saving your data.  Please try again or contact support." };
                    console.log("Failure!");
                    console.dir(data);
                    activities.saving = false; //and... we're done.
                });

            },





            saveActivities: function (userId, datasetId, activities) {
                console.log("Inside saveActivities...starting save...");
                console.log("activities is next...");
                console.dir(activities);

                var theDate = new Date();
                console.log(formatDate(theDate));

                activities.saving = true; //tell everyone we are saving
                activities.UserId = userId;
                activities.DatasetId = datasetId;
                return SaveActivitiesAction.save(activities, function (data) {
                    //activities.success = "Save successful.";
                    activities.errors = false;
                    console.log("Set activities.errors...");
                    activities.new_records = data;
                    console.log("Success!");
                    // Situation 1:  The user has NOT clicked Add Section yet, but has clicked Save and close.
                    if (typeof activities.addNewSection === 'undefined') {
                        console.log("Save and close save successful..., Add Section not clicked.");
                        activities.success = "Save successful."; // This line closes the page after a successful save; this is for Save and close.
                    }
                    // Situation 2:  The user has clicked Add Section on that page, before clicking Save and close on the last record entered.
                    else if (activities.addNewSection === false) {
                        console.log("Save and close save successful..., Add Section previously clicked.");
                        activities.success = "Save successful."; // This line closes the page after a successful save; this is for Save and close.
                    }
                    // Situation 3:  The user has only clicked Add Section.
                    else if (activities.addNewSection === true) {
                        console.log("Add Section save successful..., Add Section only clicked.");
                        activities.addNewSection = false; // This flag indicates to the Data Entry form that we are adding a new section, not save and close.
                    }

                    activities.saving = false; //and... we're done.
                }, function (data) {
                    activities.success = false;
                    // activities.errors = {saveError: "There was a problem saving your data.  Please try again or contact support."}; // Original line.
                    // Let's provide a little more information that will help us figure out what happened.
                    var theErrorText = "";
                    if (typeof data.message !== 'undefined')
                        theErrorText = data.message;
                    else if (typeof data.data !== 'undefined') {
                        if (typeof data.data.ExceptionMessage !== 'undefined') {
                            theErrorText = data.data.ExceptionMessage;
                            console.log("Save error:  theErrorText = " + theErrorText);
                        }
                        else {
                            theErrorText = data.data;
                            var titleStartLoc = theErrorText.indexOf("<title>") + 7;
                            console.log("titleStartLoc = " + titleStartLoc);
                            var titleEndLoc = theErrorText.indexOf("</title>");
                            console.log("titleEndLoc = " + titleEndLoc);
                            theErrorText = theErrorText.substr(titleStartLoc, titleEndLoc - titleStartLoc);
                        }
                    }
                    var theErrorMessage = "There was a problem saving your data (" + theErrorText + ").  Please try again or contact support.";
                    activities.errors = { saveError: theErrorMessage };
                    console.log("Failure!");
                    console.log(theErrorText);
                    console.log(theErrorMessage);
                    console.dir(data);
                    activities.saving = false; //and... we're done.
                });
            },

            //delete selectedItems activities
            deleteActivities: function (userId, datasetId, grid, saveResults) {

                if (!grid.selectedItems) {
                    saveResults.success = true;
                    saveResults.message = "Nothing to do.";
                    return;
                }

                var payload = {
                    UserId: userId,
                    DatasetId: datasetId,
                    Activities: grid.selectedItems,
                }

                DeleteActivitiesAction.save(payload, function (data) {
                    saveResults.success = true;
                    saveResults.message = "Activities Deleted.";
                }, function (data) {
                    saveResults.failure = true;
                    saveResults.message = "There was a problem deleting the records.  Please try again or contact support.";
                });

            },

            updateQaStatus: function (ActivityId, QAStatusId, Comments, saveResults) {
                saveResults.saving = true;
                var payload = {
                    QAStatusId: QAStatusId,
                    ActivityId: ActivityId,
                    Comments: Comments,
                };

                console.dir(payload);

                SetQaStatusAction.save(payload, function (data) {
                    saveResults.saving = false;
                    saveResults.success = true;
                },
                    function (data) {
                        saveResults.saving = false;
                        saveResults.failure = true;
                    });
            },

            getRelationData: function (relationFieldId, activityId, rowId) {
                return GetRelationData.save({ FieldId: relationFieldId, ActivityId: activityId, ParentRowId: rowId });
            },
        };

        return service;
    }
]);

define("core/datasets/services/dataset-service", function(){});


//ActivityParser
// Works with a wide datasheet that includes both headers and details that might represent multiple locations/days of activity
//  This full sheet idea makes it easier for data entry and importing, but we need to use this function to break
//  them out into individual activities.
/* when we're done our data will look like this:

{ "activities":{"76_10/1/2013":{"LocationId":"76","ActivityDate":"2013-10-01T07:00:00.000Z","Header":{"WaterTemperature":4,"TimeStart":"","TimeEnd":"","WaterFlow":"","AirTemperature":""},"Details":[{"locationId":"76","activityDate":"10/1/2013","WaterTemperature":4,"Species":"CHS","Sex":"M","Origin":"HAT","Mark":"[\"None\"]","Disposition":"PA","ForkLength":488,"Weight":"","TotalLength":"","GeneticSampleId":"","RadioTagId":"","FishComments":"","TimeStart":"","TimeEnd":"","WaterFlow":"","AirTemperature":"","Solution":"","SolutionDosage":""}]}},
  "errors":false,
  "UserId":1,
  "DatasetId":5
}

*/

datasets_module.service('ActivityParser', ['Logger',
    function (Logger) {
        var service = {

            parseMetricsActivity: function (heading, fields, qaStatuses) {
                console.log("Inside service, ActivityParser, parseMetricsActivity...");
                console.log("heading is next...");
                console.dir(heading);
                console.log("qaStatuses is next");
                console.dir(qaStatuses);
                var activities = { activities: {}, errors: false };

                //var tmpdata = data.slice(0); // create a copy.

                var key = service.makeKey(heading, null);

                if (key) {
                    /*if(tmpdata.length > 0) {
                        angular.forEach(tmpdata, function(data_row, index){
                            //note we mash the heading fields into our row -- addActivity splits them out appropriately.
                            //service.addActivity(activities, key, angular.extend(data_row, heading), fields);
                            service.addActivity(activities, key, angular.extend(data_row, heading), fields, qaStatuses);
                        });
                    }
                    else
					{*/
                    //at least do a single.
                    console.log("trying a single with no rows!");
                    //service.addActivity(activities, key, heading, fields);
                    service.addActivity(activities, key, heading, fields, qaStatuses);
                    //}
                }
                else {
                    service.addError(activities, 0, "Both a Location and ActivityDate are required to save a new Activity.");
                }


                return activities;

            },

            //parseSingleActivity: function(heading, data, fields) {
            parseSingleActivity: function (heading, data, fields, qaStatuses) {
                console.log("Inside service, ActivityParser, parseSingleActivity...");
                console.log("heading is next...");
                console.dir(heading);
                console.log("qaStatuses is next");
                console.dir(qaStatuses);
                var activities = { activities: {}, errors: false };

                var tmpdata = data.slice(0); // create a copy.

                var key = service.makeKey(heading, null);

                if (key) {
                    if (tmpdata.length > 0) {
                        angular.forEach(tmpdata, function (data_row, index) {
                            //note we mash the heading fields into our row -- addActivity splits them out appropriately.
                            //service.addActivity(activities, key, angular.extend(data_row, heading), fields);
                            service.addActivity(activities, key, angular.extend(data_row, heading), fields, qaStatuses);
                        });
                    }
                    else {
                        //at least do a single.
                        console.log("trying a single with no rows!");
                        //service.addActivity(activities, key, heading, fields);
                        service.addActivity(activities, key, heading, fields, qaStatuses);
                    }
                }
                else {
                    service.addError(activities, 0, "Both a Location and ActivityDate are required to save a new Activity.");
                }


                return activities;

            },

            //parses an array of header+detail fields into discrete activities
            //parseActivitySheet: function(data, fields){
            //parseActivitySheet: function(data, fields, datastoreTablePrefix, callingPage){
            parseActivitySheet: function (data, fields, datastoreTablePrefix, callingPage, qaStatuses) {
                console.log("Inside services, parseActivitySheet...called by " + callingPage);
                console.log("data is next...");
                console.dir(data);
                console.log("qaStatuses is next...");
                console.dir(qaStatuses);
                var activities = { activities: {}, errors: false };

                var tmpdata = data.slice(0); //create a copy

                var activityDateToday = new Date(); //need an activity date to use for the whole sheet, if we need to provide one.

				/* If we are adding data from a temperature logger, we will have lots of data with the same FieldActivityType (Data File Upload).
				*  In this case, the FieldActivityType will be the same, but the ReadingDateTime will change for each record.
				*  However, if the user adds several different other activities using the Data Entry Sheet, the FieldActivityType could be the same,
				*  but the ReadingDateTime will change. Therefore, we must check the FieldActivityType AND the ReadingDateTime of each non-Data File Upload
				*  record we are saving.  If either value is different from the last record, the activity has changed and we must get/create a new key,
				*  so that the record is stored as a new activity.
				*/
                var holdRow = tmpdata[0];
                var rowCount = 0;
                angular.forEach(tmpdata, function (row, index) {
                    if ((typeof datastoreTablePrefix !== 'undefined') && (datastoreTablePrefix === "WaterTemp") &&
                        (typeof callingPage !== 'undefined') && (callingPage === "DataEntrySheet")) {

                        console.log("holdRow is next...");
                        console.dir(holdRow);

                        console.log("holdRow.FieldActivityType.toString() = " + holdRow.FieldActivityType.toString());
                        console.log("row.FieldActivityType.toString() = " + row.FieldActivityType.toString());
                        console.log("holdRow.ReadingDateTime.toString() = " + holdRow.ReadingDateTime.toString());
                        console.log("row.ReadingDateTime.toString() = " + row.ReadingDateTime.toString());

                        if (rowCount > 0) {
                            //var tmpReadingDateTime = formatDateFromFriendlyToUtc(row.ReadingDateTime.toString());
                        }

                        // If the FieldActivityType IS NOT "Data File Upload", we need to check two more things.
                        if (row.FieldActivityType.toString().indexOf("Data File Upload") === -1) {
                            console.log("We are working with something other than Data File Upload.");
                            // If rowCount = 0, we are on the first record, with nothing to compare with but itself.
                            if (rowCount > 0) {
                                // If either the FieldActivityType or the ReadingDateTime are different, the record is a new activity,
                                // so we need a new date for the key.
                                if ((row.FieldActivityType.toString().indexOf(holdRow.FieldActivityType.toString()) === -1) ||
                                    (row.ReadingDateTime.toString().indexOf(holdRow.ReadingDateTime.toString()) === -1)) {
                                    console.log("Something changed...");
                                    activityDateToday = new Date();
                                }
                            }
                        }


                        var key = service.makeKey(row, activityDateToday);
                        console.log("row...index");
                        console.dir(row);
                        console.dir(index);
                        console.log("key...");
                        console.dir(key);

                        if (key) {
                            //service.addActivity(activities, key, row, fields);
                            service.addActivity(activities, key, row, fields, qaStatuses);
                        }
                        else
                            service.addError(activities, index, "Please check for errors, something required is missing to save a new Activity.");

                        rowCount++;
                        holdRow = row;

                        console.log("holdRow.ReadingDateTime = " + holdRow.ReadingDateTime);
                        var utcFormatSeparatorLoc = holdRow.ReadingDateTime.toString().indexOf("-");
                        console.log("utcFormatSeparatorLoc = " + utcFormatSeparatorLoc);
                        if (utcFormatSeparatorLoc > -1) {
                            console.log("Reformatting holdRow.ReadingDateTime to friendly date format...");
                            holdRow.ReadingDateTime = formatDateFromUtcToFriendly(holdRow.ReadingDateTime);
                            console.log("Reformatted holdRow.ReadingDateTime = " + holdRow.ReadingDateTime);
                        }
                    }
                    else {
                        var key = service.makeKey(row, activityDateToday);

                        if (key) {
                            //service.addActivity(activities, key, row, fields);
                            service.addActivity(activities, key, row, fields, qaStatuses);
                        }
                        else
                            service.addError(activities, index, "Please check for errors, something required is missing to save a new Activity.");
                    }

                    //console.log("At the end of the angular.forEach, going back to the top...");
                });

                return activities;
            },

            addError: function (activities, index, message) {
                console.log("Inside services.js, parseActivitySheet, addError...");
                if (!activities.errors) {
                    activities.errors = {};
                }
                activities.errors.saveError = message;
            },


            makeKey: function (row, activityDateToday) {

                // Some codepaths pass null for activityDateToday
                if (activityDateToday == null)
                    activityDateToday = new Date();

                if (!row.activityDate)
                    row.activityDate = toExactISOString(activityDateToday);

                if (row.locationId && row.activityDate)
                    return location + '_' + row.activityDate;

                return undefined;
            },

            //addActivity: function(activities, key, row, fields){
            addActivity: function (activities, key, row, fields, qaStatuses) {
                //console.log("Inside services, addActivity...");
                //console.log("qaStatuses is next...");
                //console.dir(qaStatuses);
                if (row.Timezone)
                    var currentTimezone = row.Timezone;

                if (!activities.activities[key]) {

                    var a_date = row.activityDate;

                    if (row.activityDate instanceof Date) {
                        //console.log("is a Date");

                        a_date = toExactISOString(row.activityDate); //
                        console.log(a_date);
                    }
                    else {
                        //console.log("Is a string.");
                        a_date = row.activityDate;
                    }
                    //console.log("finally: " + a_date);

                    //console.log(a_date);

                    //setup the new activity object structure
                    activities.activities[key] = {
                        LocationId: row.locationId,
                        ActivityDate: a_date,
                        InstrumentId: row.InstrumentId,
                        Header: {},
                        Details: [],
                    };

                    if (row.AccuracyCheckId)
                        activities.activities[key].AccuracyCheckId = row.AccuracyCheckId;

                    if (row.PostAccuracyCheckId)
                        activities.activities[key].PostAccuracyCheckId = row.PostAccuracyCheckId;

                    if (row.Timezone) {
                        activities.activities[key].Timezone = angular.toJson(row.Timezone).toString();
                        row.Timezone = undefined;
                    }

                    //add in activityqa if there isn't one (now required)
                    if (!row.ActivityQAStatus) {
                        //datasheet case
                        row.ActivityQAStatus =
                            {
                                QAStatusId: row.QAStatusId,
                                Comments: ''
                            };
                        row.QAStatusId = row.RowQAStatusId; // and then set QA status for this row...
                    }
                    else {
                        //console.log("row.ActivityQAStatus already exists...");
                        //console.dir(row.ActivityQAStatus);
                    }

                    if ((typeof qaStatuses !== 'undefined') && (qaStatuses !== null)) {
                        for (var i = 0; i < qaStatuses.length; i++) {
                            //console.log("Checking QId:  " +qaStatuses[i].Id + ", Name:  " + qaStatuses[i].Name);
                            //console.log("row.ActivityQAStatus.QAStatusId = " + row.ActivityQAStatus.QAStatusId);
                            //if (row.ActivityQAStatus.QAStatusId.indexOf(qaStatuses[i].Id) > -1)
                            if (row.ActivityQAStatus.QAStatusId === qaStatuses[i].Id) {
                                //console.log("This is the match...");
                                row.QAStatusName = qaStatuses[i].Name;
                                row.QAStatusDescription = qaStatuses[i].Description;
                            }
                            else {
                                //console.log("Did not match...");
                            }
                        }
                    }
                    else {
                        throw qaStatusError("Services-addActivity, check1 has a problem with QAStatus...");
                    }

                    //console.log("row is next...");
                    //console.dir(row);
                    activities.activities[key].ActivityQAStatus =
                        {
                            QAStatusID: row.ActivityQAStatus.QAStatusId,
                            Comments: row.ActivityQAStatus.Comments,
                            Name: row.QAStatusName,
                            Description: row.QAStatusDescription
                        };
                    //console.log("ActivityQAStatus is next...");
                    //console.dir(activities.activities[key].ActivityQAStatus);



                    //true if we are editing...
                    if (row.ActivityId)
                        activities['ActivityId'] = row.ActivityId;

                    //copy the other header fields from this first row.
                    angular.forEach(fields.header, function (field) {

                        //flatten multiselect values into an json array string
                        if (field.ControlType == "multiselect" && row[field.DbColumnName]) {
                            row[field.DbColumnName] = angular.toJson(row[field.DbColumnName]).toString(); //wow, definitely need tostring here!
                        }

                        activities.activities[key].Header[field.DbColumnName] = row[field.DbColumnName];
                    });

                }

                //add in activityqa if there isn't one (now required) -- for every row
                if (!row.ActivityQAStatus) {
                    //datasheet case
                    row.ActivityQAStatus =
                        {
                            QAStatusId: row.QAStatusId,
                            Comments: ''
                        };
                    row.QAStatusId = row.RowQAStatusId; // and then set QA status for this row...

                    for (var i = 0; i < qaStatuses.length; i++) {
                        //console.log("Checking QId:  " +qaStatuses[i].Id + ", Name:  " + qaStatuses[i].Name);
                        //console.log("row.ActivityQAStatus.QAStatusId = " + row.ActivityQAStatus.QAStatusId);
                        //if (row.ActivityQAStatus.QAStatusId.indexOf(qaStatuses[i].Id) > -1)
                        if (row.ActivityQAStatus.QAStatusId === qaStatuses[i].Id) {
                            //console.log("This is the match...");
                            row.QAStatusName = qaStatuses[i].Name;
                            row.QAStatusDescription = qaStatuses[i].Description;
                        }
                        else {
                            //console.log("Did not match...");
                        }
                    }
                }
                else {
                    //console.log("row.ActivityQAStatus already exists...");
                    //console.dir(row);
                }

                if ((typeof qaStatuses !== 'undefined') && (qaStatuses !== null)) {
                    for (var i = 0; i < qaStatuses.length; i++) {
                        //console.log("Checking QId:  " +qaStatuses[i].Id + ", Name:  " + qaStatuses[i].Name);
                        //console.log("row.ActivityQAStatus.QAStatusId = " + row.ActivityQAStatus.QAStatusId);
                        //if (row.ActivityQAStatus.QAStatusId.indexOf(qaStatuses[i].Id) > -1)
                        if (row.ActivityQAStatus.QAStatusId === qaStatuses[i].Id) {
                            //console.log("This is the match...");
                            row.QAStatusName = qaStatuses[i].Name;
                            row.QAStatusDescription = qaStatuses[i].Description;
                        }
                        else {
                            //console.log("Did not match...");
                        }
                    }
                }
                else {
                    throw qaStatusError("Services-addActivity, check2 has a problem with QAStatus...");
                }

                //iterate through each field and do any necessary processing to field values
                var rowHasValue = prepFieldsToSave(row, fields.detail, currentTimezone);

                //console.dir(fields);

                //iterate through fields now and also prep any grid fields
                angular.forEach(Object.keys(fields.relation), function (relation_field) {
                    //console.dir(relation_field);
                    //console.log("we ahve a grid cell to save!: " + relation_field);
                    var rel_grid = row[relation_field];
                    //console.dir(rel_grid);
                    angular.forEach(rel_grid, function (grid_row) {
                        //console.dir(grid_row);
                        var gridHasValue = prepFieldsToSave(grid_row, fields.relation[relation_field], currentTimezone);
                        rowHasValue = (rowHasValue) ? rowHasValue : gridHasValue; //bubble up the true!
                    });
                });

                //only save the detail row if we have a value in at least one of the fields.
                if (rowHasValue)
                    activities.activities[key].Details.push(row);

            },

        };

        return service;
    }]);


// this function is used to parse the field to prepare it to save, used by ActivityParser service.
function prepFieldsToSave(row, fields, currentTimezone) {
    var rowHasValue = false;

    //handle field level validation or processing
    angular.forEach(fields, function (field) {
        if (row[field.DbColumnName]) {
            //flatten multiselect values into an json array string
            if (field.ControlType == "multiselect")
                row[field.DbColumnName] = angular.toJson(row[field.DbColumnName]).toString(); //wow, definitely need tostring here!

            //convert to a date string on client side for datetimes
            if (field.ControlType == "datetime" && row[field.DbColumnName]) {
                if (row[field.DbColumnName] instanceof Date) {
                    row[field.DbColumnName] = toExactISOString(row[field.DbColumnName]);
                }
                else {
                    try {
                        row[field.DbColumnName] = toExactISOString(new Date(row[field.DbColumnName]));
                    } catch (e) {
                        console.log("Error converting date: " + row[field.DbColumnName]);
                    }
                }
            }

            rowHasValue = true;
        }
    });

    return rowHasValue;

};
define("core/datasets/services/activity-parser", function(){});


datasets_module.service('ConvertStatus', ['Logger', '$window', '$route',
    function (Logger, $window, $route, $q) {

        var service = {

            convertStatus: function (aStatus) {
                //console.log("Inside convertStatus...");
                //console.log("aStatus = " + aStatus);

                var strStatus = null;

                if (aStatus === 0) {
                    strStatus = "Active";
                }
                else {
                    strStatus = "Inactive";
                }
                //console.log("strStatus = " + strStatus);

                return strStatus;
            },
            convertOkToCall: function (aStatus) {
                //console.log("Inside convertOkToCall...");
                //console.log("aStatus = " + aStatus);

                var strStatus = null;

                if (aStatus === 0) {
                    strStatus = "Yes";
                }
                else {
                    strStatus = "No";
                }
                //console.log("strStatus = " + strStatus);

                return strStatus;
            },
        }
        return service;
    }]);
define("core/datasets/services/convert-status", function(){});



//gridDatasheetOptions needs to be set to your datasheet grid
datasets_module.service('DataSheet', ['Logger', '$window', '$route',
    function (Logger, $window, $route, $q) {
        //var LocationCellTemplate = '<input ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-blur="updateEntity(row)" />';

        var LocationCellEditTemplate = '<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'locationId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in locationOptions"/>';

        var QACellEditTemplate = '<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'QAStatusId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in QAStatusOptions"/>';

        var InstrumentCellEditTemplate = '<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'InstrumentId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in instrumentOptions"/>';

        var FishermanCellEditTemplate = '<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'FishermanId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in fishermenOptions"/>';  // GC

        var TimezoneCellEditTemplate = '<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'timezone\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in timezoneOptions"/>';

        var service = {

            initScope: function (scope) {

                //setup variable in the scope
                scope.CellOptions = {}; //dropdown list options
                scope.FieldLookup = {}; //convenience lookup dbcolname->fieldobj (populated by dataentry-controller.makecoldef)
                scope.onRow = undefined;
                scope.onField = undefined;
                scope.autoUpdateUndone = [];
                scope.deletedRows = [];
                scope.updatedRows = [];
                scope.autoUpdateFeatureDisabled = true;
                scope.headerFieldErrors = {};
                scope.dataChanged = false; //any changes to the grid yet?
                scope.gridWidth = { width: '2000' }; //will set below based on number of fields

                //scope wrapper functions
                scope.undoAutoUpdate = function () { service.undoAutoUpdate(scope) };
                scope.updateCell = function (row, field) { service.updateCell(row, field, scope) };
                //scope.updateHeaderField = function(field) { service.updateHeaderField(field, scope)};
                scope.updateHeaderField = function (row, field) { service.updateHeaderField(row, field, scope) };
                //scope.validateGrid = function() { service.validateGrid(scope)};
                scope.validateGrid = function () { service.validateGrid(scope) };
                scope.validate = function (row) { service.validate(scope, row) };
                scope.removeRow = function () { service.removeOnRow(scope) };
                scope.undoRemoveRow = function () { service.undoRemoveOnRow(scope) };
                scope.getFieldStats = function () { return service.getFieldStats(scope) };

                scope.onNumberField = function () {
                    if (!scope.onField)
                        return false;

                    return (scope.onField.ControlType == "number");
                };

                scope.recalculateGridWidth = function (length) {
                    console.log("recalculateGridWidth with length: " + length);

                    var minwidth = (980 < $window.innerWidth) ? $window.innerWidth - 50 : 980;
                    //console.log("minwidth: " + minwidth);

                    var width = 150 * length; //multiply number of columns by 100px
                    //console.log("or multiplied: " + width);

                    //if(width < minwidth) width=minwidth; //min-width
                    if (width < minwidth) width = minwidth; //min-width

                    //console.log("Decided: " + width);

                    scope.gridWidth = { width: width };
                    //refresh the grid
                    setTimeout(function () {
                        scope.gridDatasheetOptions.$gridServices.DomUtilityService.RebuildGrid(scope.gridDatasheetOptions.$gridScope, scope.gridDatasheetOptions.ngGrid); //refresh
                        console.log("Width now: " + width);
                    }, 400);
                };

                scope.selectCell = function (field) {
                    //console.log("select cell!");
                    scope.onField = scope.FieldLookup[field];
                };

                //dynamically set the width of the grids.
                /*
                var grid_width_watcher = scope.$watch('FieldLookup', function(){
                    var length = array_count(getMatchingByField(scope.FieldLookup,"2","FieldRoleId"));

                    console.log("Found number of detail fields: "+length);

                    //however -- if we are in full-grid mode, we need space calculated on adding in the header fields.
                    //  currently that is only for import, full datasheet and query.
                    if($route.current.controller == 'DatasetImportCtrl' || $route.current.controller == 'DataQueryCtrl' || $route.current.controller == 'DataEntryDatasheetCtrl')
                        length = array_count(scope.FieldLookup);

                    console.log("calling with length: "+ length);

                    scope.recalculateGridWidth(length);
                    grid_width_watcher(); //remove watcher.

                },true);
                */

                //only do this for pages that have editing enabled
                if (scope.gridDatasheetOptions.enableCellEdit) {
                    //setup editing rowtemplate
                    scope.gridDatasheetOptions.rowTemplate = '<div ng-click="selectCell(col.field)" ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" ng-class="{\'has-validation-error\': !row.getProperty(\'isValid\')}" class="{{col.colIndex()}} ngCell {{col.cellClass}}"><div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div><div ng-cell></div></div>';
                }
                else {
                    //for viewing
                    scope.gridDatasheetOptions.rowTemplate = '<div ng-click="selectCell(col.field)" ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" class="{{col.colIndex()}} ngCell {{col.cellClass}}"><div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div><div ng-cell></div></div>';

                }

                //this is pure awesomeness: setup a watcher so that when we navigate the grid we update our current row and validate it.
                scope.$watch('gridDatasheetOptions.$gridScope.selectionProvider.lastClickedRow', function () {
                    //console.dir(scope.gridDatasheetOptions.$gridScope);
                    scope.onRow = scope.gridDatasheetOptions.$gridScope.selectionProvider.lastClickedRow;
                    //console.dir(scope.gridDatasheetOptions.$gridScope.selectionProvider);
                });

            },

            getColDefs: function (DatastoreTablePrefix, theMode) {
                console.log("Inside services, getColDefs...");
                console.log("theMode = " + theMode);
                console.log("DatastoreTablePrefix = " + DatastoreTablePrefix);

                if (DatastoreTablePrefix === "WaterTemp")   // Water Temp related
                {
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [
                            {
                                field: 'InstrumentId',
                                Label: 'Instrument',
                                displayName: 'Instrument',
                                cellFilter: 'instrumentFilter', //'','instrumentFilter',
                                //editableCellTemplate: '<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />', //'<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />',   InstrumentCellEditTemplate,
                                //Field: { Description: "ID number of the instrument"}
                                editableCellTemplate: InstrumentCellEditTemplate, //'<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />',   'InstrumentCellEditTemplate',
                                visible: false,
                                Field: { Description: "Instrument the detected this value." }
                            },
                        ];
                        console.log("Water Temp-related form...");
                    }
                    else {
                        var coldefs = [
                            {
                                field: 'locationId',
                                Label: 'Location',
                                displayName: 'Location',
                                cellFilter: 'locationNameFilter', //'locationNameFilter','',
                                editableCellTemplate: LocationCellEditTemplate,
                                Field: { Description: "What location is this record related to?" }
                            },
                            {
                                field: 'InstrumentId',
                                Label: 'Instrument',
                                displayName: 'Instrument',
                                cellFilter: 'instrumentFilter', //'','instrumentFilter',
                                //editableCellTemplate: '<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />', //'<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />',   InstrumentCellEditTemplate,
                                //Field: { Description: "ID number of the instrument"}
                                editableCellTemplate: InstrumentCellEditTemplate, //'<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />',   'InstrumentCellEditTemplate',
                                visible: true,
                                Field: { Description: "Instrument the detected this value." }
                            },
                            {
                                field: 'QAStatusId',
                                Label: 'QA Status',
                                displayName: 'QA Status',
                                cellFilter: 'QAStatusFilter',
                                editableCellTemplate: QACellEditTemplate,
                                Field: { Description: "Quality Assurance workflow status" }

                            },
                            {
                                field: 'Timezone',
                                Label: 'Reading Timezone',
                                displayName: 'Reading Timezone',
                                editableCellTemplate: TimezoneCellEditTemplate,
                                cellFilter: 'timezoneFilter',
                                Field: { Description: "The timezone the reading took place in." }
                            }
                        ];
                    }
                }
                else if (DatastoreTablePrefix === "WaterQuality")  // Water Quality related
                {
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [
                            {
                                field: 'InstrumentId',
                                Label: 'Instrument',
                                displayName: 'Instrument',
                                cellFilter: 'instrumentFilter', //'','instrumentFilter',
                                //editableCellTemplate: '<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />', //'<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />',   InstrumentCellEditTemplate,
                                //Field: { Description: "ID number of the instrument"}
                                editableCellTemplate: InstrumentCellEditTemplate, //'<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />',   'InstrumentCellEditTemplate',
                                visible: false,
                                Field: { Description: "Instrument the detected this value." }
                            },
                        ];
                        console.log("Water Quality-related form...");
                    }
                    else {
                        var coldefs = [
                            {
                                field: 'locationId',
                                Label: 'Location',
                                displayName: 'Location',
                                cellFilter: 'locationNameFilter', //'locationNameFilter','',
                                editableCellTemplate: LocationCellEditTemplate,
                                Field: { Description: "What location is this record related to?" }
                            },
                            {
                                field: 'InstrumentId',
                                Label: 'Instrument',
                                displayName: 'Instrument',
                                cellFilter: 'instrumentFilter', //'','instrumentFilter',
                                //editableCellTemplate: '<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />', //'<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />',   InstrumentCellEditTemplate,
                                //Field: { Description: "ID number of the instrument"}
                                editableCellTemplate: InstrumentCellEditTemplate, //'<input ng-blur="updateCell(row,\'instrumentId\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />',   'InstrumentCellEditTemplate',
                                visible: true,
                                Field: { Description: "Instrument the detected this value." }
                            },
                            {
                                field: 'QAStatusId',
                                Label: 'QA Status',
                                displayName: 'QA Status',
                                cellFilter: 'QAStatusFilter',
                                editableCellTemplate: QACellEditTemplate,
                                Field: { Description: "Quality Assurance workflow status" }

                            }
                        ];
                    }
                }
                //else if (theDatasetId == 1206) // This changes the order of the fields, to what makes for sense for the users of this dataset.
                else if (DatastoreTablePrefix === "CreelSurvey") // Creel Survey related
                {
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [
                            {
                                field: 'FishermanId',
                                Label: 'Fisherman',
                                displayName: 'Fisherman',
                                cellFilter: 'fishermanFilter',
                                editableCellTemplate: FishermanCellEditTemplate,
                                //visible:  false,
                                Field: { Description: "Fisherman that was interviewed." }
                            }
                        ];
                    }
                    else {
                        var coldefs = [
                            {
                                field: 'activityDate',
                                Label: 'Activity Date',
                                displayName: 'Activity Date (MM/DD/YYYY)',
                                cellFilter: 'date: \'MM/dd/yyyy\'',
                                editableCellTemplate: '<input ng-blur="updateCell(row,\'activityDate\')" type="text" ng-pattern="' + date_pattern + '" ng-model="COL_FIELD" ng-input="COL_FIELD" />',
                                Field: { Description: "Date of activity in format: '10/22/2014'" }
                            },
                            {
                                field: 'locationId',
                                Label: 'Location',
                                displayName: 'Location',
                                cellFilter: 'locationNameFilter',
                                editableCellTemplate: LocationCellEditTemplate,
                                Field: { Description: "What location is this record related to?" }
                            },
							/*{
								field: 'QAStatusId',
								Label: 'QA Status',
								displayName: 'QA Status',
								cellFilter: 'QAStatusFilter',
								editableCellTemplate: QACellEditTemplate,
								Field: { Description: "Quality Assurance workflow status"}

							},*/
                            {
                                field: 'FishermanId',
                                Label: 'Fisherman',
                                displayName: 'Fisherman',
                                cellFilter: 'fishermanFilter',
                                editableCellTemplate: FishermanCellEditTemplate,
                                //visible:  false,
                                Field: { Description: "Fisherman that was interviewed." }
                            }
                        ];
                    }
                }
                else if ((DatastoreTablePrefix === "SpawningGroundSurvey") || //Spawning Ground related
                    (DatastoreTablePrefix === "SnorkelFish") || //Snorkel Fish related
                    (DatastoreTablePrefix === "FishTransport") || //Fish Transport related
                    (DatastoreTablePrefix === "Electrofishing") || //Electrofishing related
                    (DatastoreTablePrefix === "ScrewTrap") || //Screw Trap related
                    (DatastoreTablePrefix === "ArtificialProduction") || //ArtificialProduction related
                    (DatastoreTablePrefix === "BSample") || //BSample related
                    (DatastoreTablePrefix === "JvRearing") || //JvRearing related
                    (DatastoreTablePrefix === "Genetic") || //Genetic related
                    (DatastoreTablePrefix === "Benthic") || //Benthic related
                    (DatastoreTablePrefix === "Drift") || //Drift related
                    (DatastoreTablePrefix === "AdultWeir") //Adult Weir related
                ) {
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [];
                    }
                    else {
                        var coldefs = [
                            {
                                field: 'locationId',
                                Label: 'Location',
                                displayName: 'Location',
                                cellFilter: 'locationNameFilter',
                                editableCellTemplate: LocationCellEditTemplate,
                                Field: { Description: "What location is this record related to?" }
                            },
                            {
                                field: 'activityDate',
                                Label: 'Activity Date',
                                displayName: 'Activity Date (MM/DD/YYYY)',
                                cellFilter: 'date: \'MM/dd/yyyy\'',
                                editableCellTemplate: '<input ng-blur="updateCell(row,\'activityDate\')" type="text" ng-pattern="' + date_pattern + '" ng-model="COL_FIELD" ng-input="COL_FIELD" />',
                                Field: { Description: "Date of activity in format: '10/22/2014'" }
                            },
                            {
                                field: 'QAStatusId',
                                Label: 'QA Status',
                                displayName: 'QA Status',
                                cellFilter: 'QAStatusFilter',
                                editableCellTemplate: QACellEditTemplate,
                                Field: { Description: "Quality Assurance workflow status" }
                            }
                        ];
                    }
                }
                else if ((DatastoreTablePrefix === "StreamNet_RperS") ||
                    (DatastoreTablePrefix === "StreamNet_NOSA") ||
                    (DatastoreTablePrefix === "StreamNet_SAR")
                ) {
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [];
                    }
                    else {
                        var coldefs = [
                            {
                                field: 'locationId',
                                Label: 'Location',
                                displayName: 'Location',
                                cellFilter: 'locationNameFilter',
                                editableCellTemplate: LocationCellEditTemplate,
                                Field: { Description: "What location is this record related to?" }
                            },
                            {
                                field: 'activityDate',
                                Label: 'Activity Date',
                                displayName: 'Activity Date (MM/DD/YYYY)',
                                cellFilter: 'date: \'MM/dd/yyyy\'',
                                editableCellTemplate: '<input ng-blur="updateCell(row,\'activityDate\')" type="text" ng-pattern="' + date_pattern + '" ng-model="COL_FIELD" ng-input="COL_FIELD" />',
                                Field: { Description: "Date of activity in format: '10/22/2014'" }
                            },
                            {
                                field: 'QAStatusId',
                                Label: 'QA Status',
                                displayName: 'QA Status',
                                cellFilter: 'QAStatusFilter',
                                editableCellTemplate: QACellEditTemplate,
                                Field: { Description: "Quality Assurance workflow status" }
                            }
                        ];
                    }
                }
                else if (DatastoreTablePrefix === "FishScales") //Fish Scales related
                {
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [];
                    }
                    else {
                        var coldefs = [{
                            field: 'QAStatusId',
                            Label: 'QA Status',
                            displayName: 'QA Status',
                            cellFilter: 'QAStatusFilter',
                            editableCellTemplate: QACellEditTemplate,
                            Field: { Description: "Quality Assurance workflow status" }
                        }];
                    }
                }

                else if (DatastoreTablePrefix === "Metrics") {
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [];
                    }
                    else {
                        var coldefs = [{
                            field: 'QAStatusId',
                            Label: 'QA Status',
                            displayName: 'QA Status',
                            cellFilter: 'QAStatusFilter',
                            editableCellTemplate: QACellEditTemplate,
                            Field: { Description: "Quality Assurance workflow status" }
                        }];
                    }
                }

                else if (DatastoreTablePrefix === "Appraisal") // Appraisal-related (Tax Parcels)
                {
                    console.log("Configuring for Appraisal...");
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [];
                    }
                    else {
                        var coldefs = [];
                    }
                }

                else if (DatastoreTablePrefix === "CrppContracts") // CRPP Contracts-related
                {
                    console.log("Configuring for CrppContracts...");
                    if ((typeof theMode !== 'undefined') && (theMode.indexOf("form") > -1)) {
                        var coldefs = [];
                    }
                    else {
                        var coldefs = [];
                    }
                }

                else {
                    var coldefs = [
                        {
                            field: 'locationId',
                            Label: 'Location',
                            displayName: 'Location',
                            cellFilter: 'locationNameFilter',
                            editableCellTemplate: LocationCellEditTemplate,
                            Field: { Description: "What location is this record related to?" }
                        },
                        {
                            field: 'activityDate',
                            Label: 'Activity Date',
                            displayName: 'Activity Date (MM/DD/YYYY)',
                            cellFilter: 'date: \'MM/dd/yyyy\'',
                            editableCellTemplate: '<input ng-blur="updateCell(row,\'activityDate\')" type="text" ng-pattern="' + date_pattern + '" ng-model="COL_FIELD" ng-input="COL_FIELD" />',
                            Field: { Description: "Date of activity in format: '10/22/2014'" }
                        },
                        {
                            field: 'QAStatusId',
                            Label: 'QA Status',
                            displayName: 'QA Status',
                            cellFilter: 'QAStatusFilter',
                            editableCellTemplate: QACellEditTemplate,
                            Field: { Description: "Quality Assurance workflow status" }
                        }
                    ];
                }

                return coldefs;
            },

            //in order to call validate, you'll need to have your FieldLookup and CellOptions set
            //  on the controller (and obviously previously populated by the DataSheet service.)
            validate: function (row, scope) {
                if (row) {
                    console.log("Inside validate...");
                    console.log("scope.callingPage = " + scope.callingPage);
                    ////console.log("scope is next...");
                    ////console.dir(scope);
                    //console.log("row is next...");
                    //console.dir(row);

                    //spin through our fields and validate our value according to validation rules
                    var row_errors = [];

                    //console.log("Validating a row with " + array_count(scope.FieldLookup) + " rows.");

                    // We use row_num to give us a reference for what line of data we are on, in the debugger.
                    //var row_num = 0;

                    angular.forEach(scope.FieldLookup, function (field, key) {
                        //TODO: first check if there is no value but one is required.

                        //if not value, ditch.
                        if (!row[key])
                            return;


                        validateField(field, row, key, scope, row_errors);
                        //row_num++;
                        //console.log("  >>incrementing!");

                    });

                    if (scope.DatastoreTablePrefix === "CreelSurvey") {
                        // Do we have a valid location?
                        if ((typeof row.LocationId !== 'undefined') && (row.LocationId !== null)) {
                            row_errors.push("[LocationId] The Location does not match anything in the Locations table for this dataset.");
                        }


                        if ((typeof row.InterviewTime === 'undefined') && (typeof row.FishermanId === 'undefined')) // No interviewTime && No FishermandId
                        {
                            // Do nothing, because we probably do not have a detail; no error.
                            console.log("No detail...");
                        }
                        else if (((typeof row.InterviewTime !== 'undefined') && (row.InterviewTime !== null)) && ((typeof row.FishermanId === 'undefined') || (row.FishermanId === null))) {
                            // We have an interview, so we must have a fisherman also; error
                            row_errors.push("[Fisherman] InterviewTime is present, but the Fisherman is missing.");
                        }
                        else // We have row.InterviewTime && row.FishermanId
                        {
                            // Verify that the fisherman is in the Fishermen table.
                            var foundName = false;
                            angular.forEach(scope.fishermenList, function (aFisherman) {
                                //console.log("aFisherman.Fullname = " + aFisherman.Fullname + ", row.Fullname =" + row.Fullname);
                                if ((typeof row.FishermanId !== 'undefined') && (aFisherman.Id === row.FishermanId)) {
                                    //console.log("Matched the fisherman to a name in the Fishermen table.");
                                    foundName = true;
                                }

                            });

                            //console.log("typeof row.FishermanId = " + typeof row.FishermanId + ", row.FishermanId = " + row.FishermanId + ", foundName = " + foundName);
                            //if ((row.FishermanId !== null) && (!foundName))
                            //	row_errors.push("Fisherman name does not match any name in the Fishermen table."); // This turns the row color to red.
                        }
                    }

                    //console.log(row_num + " --------------- is our rownum");
                    //console.log("row_errors is next...");
                    //console.dir(row_errors);
                    if (row_errors.length > 0) {
                        row.isValid = false;
                        //row.errors = row_errors;
                        row.errors = angular.copy(row_errors); // row.errors is $scope.dataSheetDataset.errors
                        //scope.row.errors = angular.copy(row_errors);
                        scope.gridHasErrors = true;
                    }
                    else {
                        row.isValid = true;
                        row.errors = undefined;
                    }

                }
            },

            //updateHeaderField: function(field_name, scope)
            updateHeaderField: function (row, field_name, scope) {
                scope.dataChanged = true;

                //var value = scope.row[field_name];
                if (typeof field_name === 'undefined') {
                    // We are probably checking a header field on the form.
                    field_name = row;
                    console.log("field_name updated = " + field_name);
                    var value = scope.row[row];
                }
                else {
                    var value = scope.row[field_name];
                }
                console.log("value = " + value);

                var field = scope.FieldLookup[field_name];
                var errors = [];
                var row = scope.row;
                var headers = []; //there are none; our row is the headers.

                validateField(field, scope.row, field_name, scope, errors);

                if (errors.length > 0) {
                    scope.headerFieldErrors[field_name] = errors;
                    row.isValid = false;
                    //if (typeof scope.onRow !== 'undefined')
                    //{
                    scope.onRow.errors = errors;
                    scope.gridHasErrors = true;
                    //}
                }
                else {
                    delete scope.headerFieldErrors[field_name];
                    row.isValid = true;
                    //row.errors = undefined;
                    if (typeof scope.onRow !== 'undefined')
                        scope.onRow.errors = undefined;
                }


                //fire rules - OnChange

                fireRules("OnChange", row, field, value, headers, errors, scope);

                scope.headerHasErrors = (array_count(scope.headerFieldErrors) > 0);

            },

            undoAutoUpdate: function (scope) {
                for (var i = 0; i < scope.autoUpdate.updated.length; i++) {

                    //TODO -- eww don't do it this way! don't need rendered rows
                    var entityFieldValue = scope.gridDatasheetOptions.$gridScope.renderedRows[i].entity[scope.autoUpdate.field];

                    //console.log("Unsetting "+scope.autoUpdate.field+": " + entityFieldValue + " back to " + scope.autoUpdate.from);

                    scope.gridDatasheetOptions.$gridScope.renderedRows[i].entity[scope.autoUpdate.field] = scope.autoUpdate.from;
                }

                //set the originally changed one to still be TO
                scope.gridDatasheetOptions.$gridScope.renderedRows[scope.autoUpdate.origRowIndex].entity[scope.autoUpdate.field] = scope.autoUpdate.to;

                scope.autoUpdateUndone.push(scope.autoUpdate.field); // mark this so we don't do it again.
                scope.autoUpdate = undefined;

                service.validateGrid(scope);

            },

            //fired whenever a cell value changes.
            updateCell: function (row, field_name, scope) {
                //console.log("Field changed: " + field_name);

                scope.dataChanged = true;

                if (scope.onRow.entity) {
                    var fromValue = scope.onRow.entity[field_name];
                    var toValue = row.entity[field_name];

                    console.log("Changed " + field + " from: " + fromValue + " to: " + toValue);
                }
                //console.log("has an id? " + row.entity.Id);

                //make note of this update so we can save it later. (relevant only for editing)
                if (row.entity.Id) {

                    if (scope.updatedRows.indexOf(row.entity.Id) == -1) {
                        //console.log("added an update: " + row.entity.Id);
                        scope.updatedRows.push(row.entity.Id);
                    }
                    //else
                    //    console.log("Not updating a record.");
                }
                //else
                //console.log("not row.entity.id");


                //set value of multiselect back to an array


                //row.entity[field] = angular.toJson(toValue).toString();


                /*

                // bail out if it would be a duplicate update
                if(fromValue == toValue)
                {
                    scope.validateGrid(scope);
                    return;
                }

                //bail out if they've already undone this cascade once before
                if(scope.autoUpdateUndone.indexOf(field) > -1 || scope.autoUpdateFeatureDisabled)
                {
                    scope.validateGrid(scope); // before we bail out.
                    return;
                }
                */

                /*
                //go ahead and change all the others (this will expose an option to undo if they want)
                scope.autoUpdate = {
                    field: field,
                    from: fromValue,
                    to: toValue,
                    origRowIndex: row.rowIndex,
                    updated: [],
                };

                angular.forEach(scope.gridDatasheetOptions.$gridScope.renderedRows, function(data_row, key){
                    //if the value of this row is the same as what they just changed FROM
                    //  AND if the rowindex is higher than the current rowindex (cascade down only)
                    if(data_row.entity[field] == fromValue && key > row.rowIndex )
                    {
                        data_row.entity[field] = toValue;
                        scope.autoUpdate.updated.push(key);
                        //console.log("Autoupdated: " + key);
                    }
                });
                */

                var value = row.entity[field_name];
                var field = scope.FieldLookup[field_name];

                //console.dir(scope.FieldLookup);
                //console.log("field name = " + field_name);

                row = row.entity; //get the right reference for our rules

                //fire OnChange rule

                // -------------------------------------------
                //I like to write my test rules here and move into rule and delete when i'm done  ---------------------------
                //eg:
                /*
                
                                if(field_name == "Disposition")
                                {
                                    console.log("Disposition value: " + value);
                                    var testRule =
                                    {
                                        "OnChange":
                                        ""
                                    };
                
                                    field.Field.Rule = angular.fromJson(testRule);
                
                                }
                */
                // ------------------------------------------
                var headers = scope.row;
                console.log("headers is next...");
                console.dir(headers);

                if (typeof scope.onRow.entity.errors === 'undefined')
                    scope.onRow.entity.errors = [];

                if ((typeof field !== 'undefined') && (field.FieldRoleId !== null) && (field.FieldRoleId == 1)) {
                    scope.onRow.errors = [];
                    fireRules("OnValidate", row, field, value, headers, scope.onRow.errors, scope);
                }
                else {
                    fireRules("OnValidate", row, field, value, headers, scope.onRow.entity.errors, scope);
                }

                if (field && value) {
                    fireRules("OnChange", row, field, value, headers, [], scope);
                }

                //this is expensive in that it runs every time a value is changed in the grid.
                scope.validateGrid(scope); //so that number of errors gets calculated properly.


            },


            undoRemoveOnRow: function (scope) {
                var entity = scope.deletedRows.pop();
                scope.dataSheetDataset.push(entity);
                scope.validateGrid(scope);
            },


            removeOnRow: function (scope) {
                scope.dataChanged = true;
                scope.deletedRows.push(scope.onRow.entity);
                var index = scope.dataSheetDataset.indexOf(scope.onRow.entity);
                scope.dataSheetDataset.splice(index, 1);
                scope.onRow = undefined;
                scope.validateGrid(scope);
            },



            //spin through all of the rows and re-validate.
            validateGrid: function (scope) {
                console.log("Inside validateGrid...");
                console.log("scope.callingPage = " + scope.callingPage);
                //console.dir(scope);

                if (!scope.gridDatasheetOptions.enableCellEdit)
                    return;

                console.log(">>>>>>> validating the whole grid baby");
                scope.validation_error_count = 0;

                angular.forEach(scope.dataSheetDataset, function (data_row, key) {
                    service.validate(data_row, scope);
                    if (!data_row.isValid)
                        scope.validation_error_count++;
                });

                scope.gridHasErrors = (scope.validation_error_count == 0) ? false : true;

            },

            getFieldStats: function (scope) {

                if (!scope.onField || scope.onField.ControlType != "number")
                    return "";

                //first get the mean (average)
                var total = 0;
                var num_recs = 0;
                var max = undefined;
                var min = undefined;

                //calculate total (for mean), max, min
                angular.forEach(scope.dataSheetDataset, function (item, key) {

                    try {
                        var num = new Number(item[scope.onField.DbColumnName]);

                        if (!isNaN(num)) //just skip if it is not a number (NaN)
                        {
                            total += num;

                            if (typeof min == "undefined")
                                min = num;

                            if (typeof max == "undefined")
                                max = num;

                            if (num > max)
                                max = num;

                            if (num < min)
                                min = num;

                            num_recs++;
                        }
                    }
                    catch (e) {
                        //ran across something that wasn't a number (usurally a blank...)
                        console.log("couldn't convert this to a number: " + item[scope.onField.DbColumnName] + " on " + scope.onField.DbColumnName);
                    }

                });

                var mean = total / num_recs;

                var std_total = 0;

                //now do standard deviation
                angular.forEach(scope.dataSheetDataset, function (item, key) {
                    if (!isNaN(item[scope.onField.DbColumnName]))
                        std_total += Math.pow((item[scope.onField.DbColumnName] - mean), 2); //difference of each item, squared
                });

                var std_dev = Math.sqrt(std_total / (num_recs - 1));//square root of sum of squared differences

                var stats = "Mean: " + mean.toFixed(2);
                stats += " / Max: " + max;
                stats += " / Min: " + min;
                stats += " / Std Dev: " + std_dev.toFixed(2);
                stats += " / Total: " + total;

                return stats;
            },

        } //end service

        return service;

    }]);
define("core/datasets/services/datasheet", function(){});



datasets_module.service('FileUploadService', ['$q', '$upload', function ($q, $upload) {
    var service = {
        uploadFiles: function (filesToUpload, $scope) {
            console.log("Inside FileUploadService, uploadFiles...");
            //console.log("$scope is next...");
            //console.dir($scope);

            $scope.uploadErrorMessage = undefined;

            var promises = [];

            angular.forEach(filesToUpload, function (files, field) {

                if (field == "null" || field == "")
                    return;

                console.log("handling files for: " + field);
                console.log("files is next...");
                console.dir(files);

                // If the user selected a file, but it was already in the file list (project, or dataset, or subproject),
                // and then DID NOT select another file for that field, the field will be detectable, but its value will be undefined.
                // Example:  They after picking a duplicate, they omitted that entry, made a different update, and then saved.
                // Therefore, verify that the field's value IS NOT undefined, before proceding.
                if (typeof files !== 'undefined') {
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];

                        if ($scope.dataset.Id) {
                            console.log("Checking if file " + file.Name + " already exists in the dataset files...");
                            for (var p = 0; p < $scope.dataset.Files.length; p++) {
                                if (file.Name.length <= $scope.dataset.Files[p].Name.length) {
                                    if ($scope.dataset.Files[p].Name.indexOf(file.Name) > -1) {
                                        $scope.foundDuplicate = true;
                                        console.log("...Yes, it does.");
                                    }
                                }
                            }
                        }
                        else {
                            console.log("Checking if file " + file.Name + " already exists in the project files...");
                            for (var p = 0; p < $scope.project.Files.length; p++) {
                                if (file.Name.length <= $scope.project.Files[p].Name.length) {
                                    if ($scope.project.Files[p].Name.indexOf(file.Name) > -1) {
                                        $scope.foundDuplicate = true;
                                        console.log("...Yes, it does.");
                                    }
                                }
                            }
                        }
                        console.log("$scope.foundDuplicate = " + $scope.foundDuplicate);
                        if ($scope.foundDuplicate === false)
                            console.log("...No, it does not.  The file name is good.")

                        //if(file.success != "Success")
                        if (($scope.foundDuplicate === false) && (file.success != "Success")) {

                            var deferred = $q.defer();

                            if ($scope.DatastoreTablePrefix === "CrppContracts") {
                                $upload.upload({
                                    url: serviceUrl + '/api/v1/crppsubproject/uploadcrppsubprojectfile',
                                    method: "POST",
                                    // headers: {'headerKey': 'headerValue'},
                                    // withCredential: true,
                                    data: { ProjectId: $scope.project.Id, SubprojectId: $scope.viewSubproject.Id, Description: "Uploaded file for: " + file.Name, Title: file.Name },
                                    file: file,

                                }).progress(function (evt) {
                                    console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));

                                }).success(function (data, status, headers, config) {
                                    //console.dir(data);
                                    config.file.success = "Success";
                                    config.file.data = data;
                                    deferred.resolve(data);

                                })
                                    .error(function (data, status, headers, config) {
                                        $scope.uploadErrorMessage = "There was a problem uploading your file for the subproject.  Please try again or contact the Helpdesk if this issue continues.";
                                        console.log(" error.");
                                        config.file.success = "Failed";
                                        deferred.reject();

                                    });

                                promises.push(deferred.promise);
                            }
                            else {
                                $upload.upload({
                                    //url: serviceUrl + '/data/UploadProjectFile',
                                    url: serviceUrl + '/api/v1/file/uploaddatasetfile',
                                    method: "POST",
                                    // headers: {'headerKey': 'headerValue'},
                                    // withCredential: true,
                                    //data: {ProjectId: $scope.project.Id, Description: "Uploaded file for: "+file.Name, Title: file.Name},
                                    data: { ProjectId: $scope.project.Id, DatasetId: $scope.dataset.Id, Description: "Uploaded file for: " + file.Name, Title: file.Name },
                                    file: file,

                                }).progress(function (evt) {
                                    console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));

                                }).success(function (data, status, headers, config) {
                                    //console.dir(data);
                                    config.file.success = "Success";
                                    config.file.data = data;
                                    deferred.resolve(data);

                                })
                                    .error(function (data, status, headers, config) {
                                        $scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
                                        console.log(" error.");
                                        config.file.success = "Failed";
                                        deferred.reject();

                                    });

                                promises.push(deferred.promise);
                            }
                        }
                        else {
                            console.log("$scope.foundDuplicate is true OR file.success == Success");
                            if ($scope.DatastoreTablePrefix === "CrppContracts") {
                                $scope.uploadErrorMessage = "The file is already in the subproject files.  Please choose another file name, try again, or contact the Helpdesk if this issue continues.";
                                console.log(" error.");
                                var errors = [];
                                errors.push("File " + file.Name + " already exists in the subproject files.");
                                $scope.onRow.errors = errors;
                                //config.file.success = "Failed";
                                //deferred.reject();
                                //promises.push(deferred.promise);
                            }
                            else {
                                $scope.uploadErrorMessage = "The file is already in the project files.  Please choose another file name, try again, or contact the Helpdesk if this issue continues.";
                                console.log(" error.");
                                var errors = [];
                                errors.push("File " + file.Name + " already exists in the project files.");
                                $scope.onRow.errors = errors;
                                //config.file.success = "Failed";
                                //deferred.reject();
                                //promises.push(deferred.promise);
                            }
                        }

                    }
                }
            });

            return $q.all(promises);
        },

        uploadSubprojectFiles: function (filesToUpload, $scope) {
            console.log("Inside FileUploadService, uploadSubprojectFiles...");
            //console.log("$scope is next...");
            //console.dir($scope);

            $scope.uploadErrorMessage = undefined;

            var promises = [];

            angular.forEach(filesToUpload, function (files, field) {

                if (field == "null" || field == "")
                    return;

                console.log("handling files for: " + field)

                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    console.log("Checking if file " + file.Name + " already exists in the subproject files...");

                    for (var p = 0; p < $scope.viewSubproject.Files.length; p++) {
                        if (file.Name.length <= $scope.viewSubproject.Files[p].Name.length) {
                            if ($scope.viewSubproject.Files[p].Name.indexOf(file.Name) > -1) {
                                $scope.foundDuplicate = true;
                                console.log("...Yes, it does.");
                            }
                        }
                    }
                    console.log("$scope.foundDuplicate = " + $scope.foundDuplicate);
                    if ($scope.foundDuplicate === false)
                        console.log("...No, it does not.  The file name is good.")

                    //if(file.success != "Success")
                    console.log("file is next...");
                    console.dir(file);
                    if (($scope.foundDuplicate === false) && (file.success != "Success")) {
                        var deferred = $q.defer();

                        if ($scope.DatastoreTablePrefix === "CrppContracts") {
                            $upload.upload({
                                url: serviceUrl + '/api/v1/crppsubproject/uploadcrppsubprojectfile',
                                method: "POST",
                                // headers: {'headerKey': 'headerValue'},
                                // withCredential: true,
                                data: { ProjectId: $scope.project.Id, SubprojectId: $scope.viewSubproject.Id, Description: "Uploaded file for: " + file.Name, Title: file.Name },
                                file: file,

                            }).progress(function (evt) {
                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));

                            }).success(function (data, status, headers, config) {
                                //console.dir(data);
                                config.file.success = "Success";
                                config.file.data = data;
                                deferred.resolve(data);

                            }).error(function (data, status, headers, config) {
                                $scope.uploadErrorMessage = "There was a problem uploading your file for the subproject.  Please try again or contact the Helpdesk if this issue continues.";
                                console.log(" error.");
                                config.file.success = "Failed";
                                deferred.reject();

                            });

                            promises.push(deferred.promise);
                        }
                        else //not a crpp... habitat then i guess (for now)
                        {
                            $upload.upload({
                                url: serviceUrl + '/api/v1/habsubproject/uploadhabitatfile',
                                method: "POST",
                                // headers: {'headerKey': 'headerValue'},
                                // withCredential: true,
                                data: { ProjectId: $scope.project.Id, Description: "Uploaded file for: " + file.Name, Title: file.Name },
                                file: file,

                            }).progress(function (evt) {
                                console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));

                            }).success(function (data, status, headers, config) {
                                //console.dir(data);
                                config.file.success = "Success";
                                config.file.data = data;
                                deferred.resolve(data);

                            })
                                .error(function (data, status, headers, config) {
                                    $scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
                                    console.log(" error.");
                                    config.file.success = "Failed";
                                    deferred.reject();

                                });

                            promises.push(deferred.promise);
                        }
                    }
                    else {
                        if ($scope.DatastoreTablePrefix === "CrppContracts") {
                            $scope.uploadErrorMessage = "The file is already in the subproject files.  Please choose another file name, try again, or contact the Helpdesk if this issue continues.";
                            console.log(" error.");
                            var errors = [];
                            errors.push("File " + file.Name + " already exists in the subproject files.");
                            $scope.onRow.errors = errors;
                            //config.file.success = "Failed";
                            //deferred.reject();
                            //promises.push(deferred.promise);
                        }
                        else {
                            $scope.uploadErrorMessage = "The file is already in the project files.  Please choose another file name, try again, or contact the Helpdesk if this issue continues.";
                            console.log(" error.");
                            var errors = [];
                            errors.push("File " + file.Name + " already exists in the project files.");
                            $scope.onRow.errors = errors;
                            //config.file.success = "Failed";
                            //deferred.reject();
                            //promises.push(deferred.promise);
                        }
                    }

                }
            });

            return $q.all(promises);
        },
    };
    return service;
}]);
define("core/datasets/services/file-upload", function(){});

// defines the dataset module and all dataset controllers.

//dataset module and its dependencies
var datasets_module = angular.module('DatasetModule', ['ui.bootstrap','ngResource']);

//load the components for this module
require([

    //loads the dataset functions
    'core/datasets/datasets-functions',

    //loads the dataset filters
    'core/datasets/datasets-filters',

    //load all components for the dataset module
    'core/datasets/components/dataset-activities-list/dataset-activities-list',
    'core/datasets/components/dataset-detail/dataset-detail',
    'core/datasets/components/dataset-editor/dataset-edit-form',
    'core/datasets/components/dataset-entry-form/dataset-entry-form',
    'core/datasets/components/dataset-entry-sheet/dataset-entry-sheet',
    'core/datasets/components/dataset-view/dataset-view',
    'core/datasets/components/dataset-view/modal-qa-update',
    'core/datasets/components/dataset-view/modal-data-entry',
    'core/datasets/components/dataset-import/dataset-import',
    'core/datasets/components/dataset-import/modal-dataset-duplicates',
    'core/datasets/components/dataset-query/dataset-query',
    'core/datasets/components/dataset-query/big-bucket-query',
    //'core/datasets/components/dataset-relationgrid/modal-relationgrid',

    //load the various dataset services
    'core/datasets/services/dataset-service',
    'core/datasets/services/activity-parser',
    'core/datasets/services/convert-status',
    'core/datasets/services/datasheet',
    'core/datasets/services/file-upload',

], function () {
    //add the controllers and services to the module once the files are loaded!

    //controllers 
    datasets_module.controller('DatasetActivitiesCtrl', dataset_activities_list);
    datasets_module.controller('DatasetDetailsCtrl', dataset_detail);
    datasets_module.controller('DataEditCtrl', dataset_edit_form);
    datasets_module.controller('DataEntryFormCtrl', dataset_entry_form);
    datasets_module.controller('DataEntryDatasheetCtrl', dataset_entry_sheet);
    datasets_module.controller('DatasetViewCtrl', dataset_view);
    datasets_module.controller('ModalQaUpdateCtrl', modal_qa_update);
    datasets_module.controller('ModalDataEntryCtrl', modal_data_entry);
    datasets_module.controller("DatasetImportCtrl", dataset_import);
    datasets_module.controller('ModalDuplicatesViewCtrl', modal_dataset_duplicates);
    datasets_module.controller('DataQueryCtrl', dataset_query);
    datasets_module.controller('DatastoreQueryCtrl', big_bucket_query);
    //datasets.controller('RelationGridModalCtrl', modal_relationgrid); <--not used just yet...
});


define("core/datasets/datasets-module", function(){});


var admin_view = ['$scope', '$modal', 'DatasetService','ProjectService',
    function ($scope, $modal, DatasetService, ProjectService) {

        //TODO: a nicer global route authorization scheme...
        if (!$scope.Profile.isAdmin())
            angular.rootScope.go("/unauthorized");

        $scope.datastores = DatasetService.getDatastores();
        $scope.projects = ProjectService.getProjects();

        var watcher = $scope.$watch('datastores', function () {

            if ($scope.datastores.length > 0) {
                watcher();	//removes watch since we're about to do some updates that would cause multiple firings...!

                angular.forEach($scope.datastores, function (datastore, key) {
                    datastore.Datasets = DatasetService.getDatastoreDatasets(datastore.Id);
                });

            }


        }, true);


        $scope.addNewProjectDataset = function (datastore) {
            $scope.datastore = datastore;
            var modalInstance = $modal.open({
                templateUrl: 'app/core/admin/components/admin-page/templates/addNewProjectDataset.html',
                controller: 'ModalAddProjectDatasetCtrl',
                scope: $scope, //very important to pass the scope along... 

            });
        };

        $scope.getProjectName = function (id) {

            //console.log(">>" + id);
            var ret = "";
            var project = getMatchingByField($scope.projects, id, 'Id');
            if (project)
                ret = " - " + project.Name;

        }


    }

];
define("core/admin/components/admin-page/admin-view", function(){});


var add_project_dataset = ['$scope','$modalInstance', 'ProjectService',
	function($scope,  $modalInstance, ProjectService){

		$scope.row = {};

        $scope.projects = ProjectService.getProjects(); //.sort(orderByAlpha);
		

		$scope.save = function(){
			
			$modalInstance.dismiss();

		};

		$scope.cancel = function(){
			$modalInstance.dismiss();
		};

	}
];

define("core/admin/components/admin-page/admin-add-project-dataset", function(){});


var admin_edit_dataset = ['$scope', '$modal', '$routeParams', 'DatasetService', 'CommonService','ProjectService','AdminService',
    function ($scope, $modal, $routeParams, DatasetService, CommonService, ProjectService, AdminService ){

		$scope.dataset = DatasetService.getDataset($routeParams.Id);
		$scope.FieldLookup = {};
        $scope.SelectedField = null;
        $scope.saveResults = {};
		
		$scope.Sources = CommonService.getSources();
		$scope.Instruments = ProjectService.getInstruments();

		$scope.$watch('dataset.Id', function(){
			
			if(!$scope.dataset.Id)
				return;
			
			console.log("Inside dataset.Id watcher...");
			console.dir($scope.dataset);
		
			if(!$scope.MasterFields)
				$scope.MasterFields = AdminService.getMasterFields($scope.dataset.Datastore.FieldCategoryId);

			angular.forEach($scope.dataset.Fields.sort(orderByAlpha), function(field){
				//parseField(field, $scope);
				console.log("field.Field.DbColumnName = " + field.Field.DbColumnName);
				if(field.Field.PossibleValues)
					field.Values = makeObjectsFromValues($scope.dataset.DatastoreId+field.DbColumnName, field.Field.PossibleValues);

				field.SourceId = ""+field.SourceId; //so we can find it in the dropdown!
				field.InstrumentId = ""+field.InstrumentId;
			});

			$scope.dataFields = $scope.dataset.Fields;

            if ($scope.dataset.Config !== undefined && $scope.dataset.Config != null) {
                $scope.dataset.ConfigString = angular.toJson($scope.dataset.Config, true);
                $scope.parseConfigString();
            }

            $scope.dataset.DefaultActivityQAStatusId = "" + $scope.dataset.DefaultActivityQAStatusId;
            $scope.dataset.DefaultRowQAStatusId = "" + $scope.dataset.DefaultRowQAStatusId;

            $scope.QAStatusList = makeObjects($scope.dataset.QAStatuses, 'Id', 'Name');
            $scope.RowQAStatuses = makeObjects($scope.dataset.RowQAStatuses, 'Id', 'Name');  

            console.log('-----------------');
            console.dir($scope.QAStatusList);
            console.dir($scope.dataset.DefaultActivityQAStatusId);
            console.dir($scope.dataset);



            //$scope.QAStatusOptions = $rootScope.QAStatusOptions = makeObjects($scope.dataset.QAStatuses, 'Id', 'Name');



		});

        $scope.logStatus = function () {
            console.log('-----------------');
            console.dir($scope.QAStatusList);
            console.dir($scope.dataset.DefaultActivityQAStatusId);
            console.log(typeof $scope.dataset.DefaultActivityQAStatusId);
            console.dir($scope.dataset);
        };

		$scope.$watch('Sources',function(){
			if($scope.Sources.length > 0)
			$scope.SourcesLookup = makeObjects($scope.Sources, 'Id','Name');
		},true);

		$scope.$watch('Instruments',function(){
			if($scope.Instruments.length > 0)
			$scope.InstrumentsLookup = makeObjects($scope.Instruments, 'Id','Name');
		},true);

		$scope.$watch('saveResults.success', function(){
			if (!$scope.saveResults.success)
				return;

            console.log("The result of saveResults: " + $scope.saveResults.success);
            console.log(" - so now we'll reload the dataset: " + $routeParams.Id);
			
			DatasetService.clearDataset();
			$scope.dataset = DatasetService.getDataset($routeParams.Id); //reload
			$scope.SelectedField = null;

		},true);

		$scope.removeField = function()
		{
			if(!confirm("Are you sure you want to remove '" + $scope.SelectedField.Label + "' from this dataset?"))
                return;

			$scope.saveResults = {};
			AdminService.removeField($scope.dataset.Id, $scope.SelectedField.FieldId, $scope.saveResults);
		}

		$scope.addMasterField = function()
		{
			console.log("Inside admin-controller.js, addMasterField...");
			$scope.saveResults = {};
			
			// Note:  Given a list with zero-based index (0, 1, 2, 3, etc.), like we have here.
			// With angular, when you select the first item in a list, it often (always?) shows blank (null).
			// The problem does not present itself for items 1 and following.
			// This problem is a known issue (see this article:  http://stackoverflow.com/questions/12654631/why-does-angularjs-include-an-empty-option-in-select).
			// To avoid this problem, we access the first item (0), using index 0.
			if ($scope.newField === null)
				$scope.newField = $scope.MasterFields[0].Id;
			
			console.log("$scope.newField (after checking) = " + $scope.newField);
			AdminService.addMasterFieldToDataset($scope.dataset.Id, $scope.newField, $scope.saveResults);
			//$scope.saveResults = AdminService.addMasterFieldToDataset($scope.dataset.Id, $scope.newField, $scope.saveResults);
			// JavaScript might run the next lines too fast, so I (GC) put them into watch saveResults.DatasetId up above.
			//setTimeout(function(){
			//	DatasetService.clearDataset();
            //	$scope.dataset = DatasetService.getDataset($routeParams.Id); //reload
            //},400);
		};

		$scope.saveField = function()
		{
			$scope.saveResults = {};
			AdminService.saveDatasetField($scope.SelectedField, $scope.saveResults);
        };

        $scope.saveConfig = function () {
            $scope.saveResults = {};
            dataset.Config = dataset.ConfigString;
            DatasetService.saveDataset($scope.dataset, $scope.saveResults);
        };

		$scope.selectField = function(field){
			$scope.SelectedField = field;
        };

        $scope.parseConfigString = function () {
            try {
                var ConfigObject = angular.fromJson($scope.dataset.ConfigString);
                if (ConfigObject)
                    $scope.ConfigParse = "Parse successful.";
            } catch (exception) {
                console.dir(exception);
                $scope.ConfigParse = exception.message;
            }
        }
		

	}
];
define("core/admin/components/admin-page/admin-edit-dataset", function(){});


var admin_edit_master = ['$scope', '$modal', 'DatasetService', 'AdminService', '$routeParams',
	function($scope, $modal, DatasetService, AdminService, $routeParams){

		$scope.datastore = DatasetService.getDatastore($routeParams.Id);
		
		$scope.SelectedField = null;

		$scope.$watch('datastore.Id', function(){
			if($scope.datastore.Id > 0)
				$scope.datastoreFields = AdminService.getMasterFields($scope.datastore.FieldCategoryId); //AdminService.getFields($routeParams.Id);
		});

		$scope.$watch('datastoreFields', function(){
			if(!$scope.datastoreFields)
				return;

				angular.forEach($scope.datastoreFields, function(field){
					//parseField(field, $scope);
					if(field.PossibleValues)
						field.Values = makeObjectsFromValues($scope.datastore.Id+field.DbColumnName, field.PossibleValues);

				});				
			

		},true);

		$scope.saveField = function()
		{
			$scope.saveResults = {};
			AdminService.saveMasterField($scope.SelectedField, $scope.saveResults);
		}
		
		$scope.selectField = function(field){
			$scope.SelectedField = field;
		};
		

	}
];
define("core/admin/components/admin-page/admin-edit-master", function(){});

// AdminService 
//  factories and service to manage dataset master and dataset fields...
//  

admin_module.factory('SaveDatasetField', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/dataset/savedatasetfield');
}]);

admin_module.factory('SaveDataset', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/dataset/dataset', {}, {
        save: { method: 'PUT' }
    });
}]);

admin_module.factory('SaveMasterField', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/savemasterfield');
}]);

admin_module.factory('DeleteDatasetField', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/dataset/deletedatasetfield');
}]);

admin_module.factory('GetAllFields', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/getfieldcategoryfields');
}]);

admin_module.factory('AddMasterFieldToDataset', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/addmasterfieldtodataset');
}]);

admin_module.factory('GetAllDatastoreFields', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/datastore/getdatastorefields');
}]);


admin_module.service('AdminService', ['$q', 
    'SaveDatasetField',
    'SaveMasterField',
    'DeleteDatasetField',
    'GetAllFields',
    'AddMasterFieldToDataset',
    'GetAllDatastoreFields',
    'SaveDataset',
    function ($q,
        SaveDatasetField,
        SaveMasterField,
        DeleteDatasetField,
        GetAllFields,
        AddMasterFieldToDataset,
        GetAllDatastoreFields,
        SaveDataset) {

        var service = {

           addMasterFieldToDataset: function(datasetId, fieldId, saveResults)
            {
               AddMasterFieldToDataset.save({ DatasetId: datasetId, FieldId: fieldId },
                   function (data) {
                       saveResults.success = true;
                   },
                   function (data) {
                       saveResults.success = false;
                   });
            },

            removeField: function(datasetId, fieldId, saveResults)
            {
				console.log("Trying to remove a field... datasetId = " + datasetId + ", fieldId = " + fieldId);
                DeleteDatasetField.save({ DatasetId: datasetId, FieldId: fieldId }, function(data){
                    saveResults.success = true;
                }, function (data) {
                    saveResults.success = false;
                });
            },

            getFields: function (id) {
                return GetAllDatastoreFields.query({ id: id });
            },

            getMasterFields: function (categoryId) {
                return GetAllFields.query({ id: categoryId });
            },

            saveDataset: function (dataset, saveResults) {
                saveResults.saving = true;

                SaveDataset.save({id: dataset.id, dataset: dataset}, function (data) {
                    saveResults.saving = false;
                    saveResults.success = true;
                }, function (data) {
                    saveResults.saving = false;
                    saveResults.failure = true;
                });
            },

            saveDatasetField: function (field, saveResults) {
                saveResults.saving = true;

                SaveDatasetField.save(field, function (data) {
                    saveResults.saving = false;
                    saveResults.success = true;
                }, function (data) {
                    saveResults.saving = false;
                    saveResults.failure = true;
                });

            },
            saveMasterField: function (field, saveResults) {
                saveResults.saving = true;

                SaveMasterField.save(field, function (data) {
                    saveResults.saving = false;
                    saveResults.success = true;
                }, function (data) {
                    saveResults.saving = false;
                    saveResults.failure = true;
                });

            },

        };

        return service;
    }
]);



define("core/admin/admin-service", function(){});

// defines the admin module and loads the components, controllers and services

var admin_module = angular.module('AdminModule', ['ui.bootstrap', 'ngResource']);

//load the components for this module
require([
    'core/admin/components/admin-page/admin-view',
    'core/admin/components/admin-page/admin-add-project-dataset',
    'core/admin/components/admin-page/admin-edit-dataset',
    'core/admin/components/admin-page/admin-edit-master',

    //service
    'core/admin/admin-service',

], function () {
    //add the controllers and services to the module once the files are loaded!

    //controllers 
    admin_module.controller('AdminCtrl', admin_view);
    admin_module.controller('ModalAddProjectDatasetCtrl', add_project_dataset);
    admin_module.controller('AdminEditDatasetCtrl', admin_edit_dataset);
    admin_module.controller('AdminEditMasterCtrl', admin_edit_master);



    //load services

    //define routes
});







define("core/admin/admin-module", function(){});


var dataset_preferences = ['$scope', '$rootScope', '$location', 'DatasetService','PreferencesService','$window',
    function ($scope, $rootScope, $location, DatasetService, PreferencesService, $window){

		//var mydatasets = getByName($rootScope.Profile.UserPreferences, 'Datasets');
		$scope.mydatasets = PreferencesService.getMyDatasets();
		$scope.favoriteDatasetStores = {};

		$scope.$watch('mydatasets',function(){
			if($scope.mydatasets.$resolved)
			{
				angular.forEach($scope.mydatasets, function(dataset, key){

		            //need to bump this since we are looking at a LIST of datasets...
	                DatasetService.configureDataset(dataset);    

					if(!$scope.favoriteDatasetStores[dataset.Datastore.Name])
						$scope.favoriteDatasetStores[dataset.Datastore.Name] = { Datastore: dataset.Datastore, favoriteDatasets: []};

					$scope.favoriteDatasetStores[dataset.Datastore.Name].favoriteDatasets.push(dataset);					
				});
			}
		},true);
		
		$scope.openReportWindow = function( target ){
			$window.open( REPORTSERVER_URL + target,'_blank');
		};

}];
define("core/preferences/components/dataset-preferences/dataset-preferences", function(){});

var my_preferences = ['$scope', 'PreferencesService', 'ConvertStatus',
    function ($scope, PreferencesService, ConvertStatus) {
        console.log("Inside MyPreferencesCtrl...");
        //console.log("$scope is next");
        ////console.dir($scope);

        $scope.savePreferences = function () {
            console.log("Inside savePreferences...");

            $scope.User = {
                Id: $scope.Profile.Id,
                Username: $scope.Profile.Username,
                Description: $scope.Profile.Description,
                DepartmentId: $scope.Profile.DepartmentId,
                Fullname: $scope.Profile.Fullname
            }
            console.log("$scope.preferencesUpdate is next...");
            console.dir($scope.preferencesUpdate);

            $scope.savePreferencesResults = [];
            console.log("$scope.savePreferencesResults = " + $scope.savePreferencesResults);

            PreferencesService.saveUserInfo($scope.User, $scope);
        };

        $scope.cancel = function () {
            window.location = "index.html";
        };

        $scope.$watch('savePreferencesResults.success', function () {
			/* We will check if savePreferencesResults.success exists.  
			If it does, it will always = true.
			If the save failed, then savePreferencesResults.failed gets set.
			savePreferencesResults does not exist after the page loads; it gets declared/set after the user clicks the Save button.
			*/
            if ((typeof $scope.savePreferencesResults !== 'undefined') && ($scope.savePreferencesResults !== null)) {
                console.log("Inside MyPreferencesControllers, savePreferencesResults.success watcher...");

                // OK.  We were successful, now we can go back to the index page.  Comment this line out, if we must keep the page for troubleshooting.
                window.location = "index.html";
            }
        });
    }
];
define("core/preferences/components/my-preferences/my-preferences", function(){});


var project_preferences = ['$scope', '$rootScope', '$location','PreferencesService','$window',
    function ($scope, $rootScope, $location, PreferencesService, $window){
		$scope.myprojects = PreferencesService.getMyProjects();
}];
define("core/preferences/components/project-preferences/project-preferences", function(){});


// preferences factories and service

preferences_module.factory('SaveUserInfo', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/user/saveuserinfo');
}]);

preferences_module.factory('GetMyProjectsAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/user/getmyprojects', {}, {
        query: { method: 'GET', params: {}, isArray: true }
    });
}]);

preferences_module.factory('SaveUserPreferenceAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/user/saveuserpreference', {}, {
        save: { method: 'POST', isArray: false }
    });
}]);

preferences_module.factory('GetMyDatasetsAction', ['$resource', function ($resource) {
    return $resource(serviceUrl + '/api/v1/user/getmydatasets', {}, {
        query: { method: 'GET', params: {}, isArray: true }
    });
}]);

/*
* define the service that can be used by any module in our application to work with projects.
*/
preferences_module.service('PreferencesService', ['$q',
    'SaveUserInfo',
    'GetMyProjectsAction',
    'SaveUserPreferenceAction',
    'GetMyDatasetsAction', 

    function ($q,
        SaveUserInfo,
        GetMyProjectsAction,
        SaveUserPreferenceAction,
        GetMyDatasetsAction) {

        var service = {

            getMyDatasets: function () {
                return GetMyDatasetsAction.query();
            },

            getMyProjects: function () {
                return GetMyProjectsAction.query();
            },

            saveUserPreference: function (name, value, results) {
                var payload = { UserPreference: { Name: name, Value: value } };

                SaveUserPreferenceAction.save(payload, function (data) {
                    results.done = true;
                    results.success = true;
                }, function (data) {
                    results.done = true;
                    results.failure = true;
                });

            },

            saveUserInfo: function (user, scope) {
                console.log("Inside services, DatasetService.saveUserInfo...");
                var payload = { User: user };

                SaveUserInfo.save(payload, function (data) {
                    //scope.savePreferencesResults.done = true;
                    scope.savePreferencesResults.success = true;
                    console.log("scope.savePreferencesResults.success = " + scope.savePreferencesResults.success);
                }, function (data) {
                    //scope.savePreferencesResults.done = true;
                    scope.savePreferencesResults.failure = true;
                    console.log("scope.savePreferencesResults.failure = " + scope.savePreferencesResults.failure);
                });

            },


            
        };

        return service;
    }
]);



define("core/preferences/preferences-service", function(){});

// defines the preferences module 

var preferences_module = angular.module('PreferencesModule', ['ui.bootstrap', 'ngResource']);

require([
    //load components
    'core/preferences/components/dataset-preferences/dataset-preferences',
    'core/preferences/components/my-preferences/my-preferences',
    'core/preferences/components/project-preferences/project-preferences',

    //load preference service
    'core/preferences/preferences-service',

], function () {
    //add the controllers and services to the module once the files are loaded!

    //controllers 
    preferences_module.controller('MyPreferencesCtrl', my_preferences);
    preferences_module.controller('MyDatasetsCtrl', dataset_preferences);
    preferences_module.controller('MyProjectsCtrl', project_preferences);

    
});




define("core/preferences/preferences-module", function(){});


var modal_add_habitat = ['$scope', '$rootScope', '$modalInstance', '$modal', 'DatasetService','SubprojectService','ServiceUtilities',
	'$filter', 'FileUploadService','$upload','$location', '$anchorScroll',
    function ($scope, $rootScope, $modalInstance, $modal, DatasetService, SubprojectService, ServiceUtilities, 
	$filter, FileUploadService, $upload, $location, $anchorScroll){
	console.log("Inside ModalAddHabitatItemCtrl...");
	
	if ((typeof $scope.viewSubproject !== 'undefined') && ($scope.viewSubproject !== null))
		$rootScope.subprojectId = $scope.viewSubproject.Id;
	
	$scope.filesToUpload = {};
	$scope.verifyActionFormOpen = "No";
	$scope.showOtherResponseType = false;
	$scope.ReadyToClose = "";
	$scope.showCloseButton = false;
	$scope.showCancelButton = true;
	$scope.showFormItems = true;
	$scope.fileCount = 0;
	$scope.fileProgress = 0;
	
	$rootScope.projectId = $scope.project.Id;
	console.log("$scope.projectId = " + $scope.projectId);
	
	var keepGoing = true;
	var foundIt = false;

    if($scope.hi_row.Id > 0)
    {
        $scope.header_message = "Edit Item for Project " + $scope.viewSubproject.ProjectName;
    }
	else
	{
		if ((typeof $scope.viewSubproject !== 'undefined' ) && ($scope.viewSubproject !== null))
			$scope.header_message = "Add Item to Project " + $scope.viewSubproject.ProjectName;
		else if ((typeof $scope.habProjectName !== 'undefined' ) && ($scope.habProjectName !== null))
			$scope.header_message = "Add Item to Project " + $scope.habProjectName;
	}
	
	console.log("$scope.hi_row is next...");
	console.dir($scope.hi_row);
	
	console.log("$scope (after initialization) is next...");
	//console.dir($scope);
	
	$scope.openFileModal = function(row, field)
	{
		console.log("Inside ModalAddHabitatItemCtrl, openFileModal...");
		console.log("row is next...");
		console.dir(row);
		console.log("field is next...");
		console.dir(field);
		$scope.file_row = row;
		//$scope.file_field = field;
		$scope.file_field = {
			DbColumnName: "ItemFiles"
		};
		
		var modalInstance = $modal.open({
			templateUrl: 'app/core/common/components/file/templates/modal-file.html',
			controller: 'FileModalCtrl',
			scope: $scope, //scope to make a child of
		});
	};
	
	$scope.openLinkModal = function(row, field)
	{
		console.log("Inside ModalAddHabitatItemCtrl, openLinkModal...");
		console.log("row is next...");
		console.dir(row);
		console.log("field is next...");
		console.dir(field);
		$scope.link_row = row;
		//$scope.link_field = field;
		$scope.link_field = {
			DbColumnName: "ExternalLinks"
		};
		
		var modalInstance = $modal.open({
            templateUrl: 'app/core/common/components/modals/templates/modal-link-field.html',
			controller: 'LinkModalCtrl',
			scope: $scope, //scope to make a child of
		});
	};
	
	//field = DbColumnName
	$scope.onFileSelect = function(field, files)
	{
		console.log("Inside ModalAddHabitatItemCtrl, onFileSelect");
		console.log("file selected! " + field);
		$scope.filesToUpload[field] = files;
	};
	
	
	
	$scope.$watch('fileProgress', function(){
		if($scope.fileProgress < $scope.fileCount)
			return;
		
		if ($scope.saving)
		{
			$scope.loading = false; // Stop the fish spinner.
			$scope.showCloseButton = true;
			$scope.showCancelButton = false;
			$scope.showFormItems = false;
		}
	});
	
    $scope.save = function(){
		console.log("Inside ModalAddHabitatItemCtrl, save...");
		//console.log("$scope is next...");
		//console.dir($scope);
		
		$scope.saving = true; // Used in $scope.$watch('fileProgress'
		$scope.loading = true; // Start the fish spinner.
		
		var saveRow = angular.copy($scope.hi_row);
		//console.log("saveRow is next, before checking the Id...");
		//console.dir(saveRow);
		if (!saveRow.Id)
			saveRow.Id = 0;
		//$scope.foundDuplicate = false;

		
		console.log("saveRow is next, after checking/setting the Id...");
		console.dir(saveRow);

		if ($scope.foundDuplicate)
		{
			alert("One or more of the files to upload is a duplicate!");
			return;
		}
		
		var subprojectId = 0;
		if ($scope.viewSubproject)
			subprojectId = $scope.viewSubproject.Id
		else
			subprojectId = $scope.subprojectId;
		
		// First let's handle the files.
		if ($scope.filesToUpload.ItemFiles)
		{
			// Count how many files we have.
			$scope.fileCount = 0;
			angular.forEach($scope.filesToUpload.ItemFiles, function(aFile){
				$scope.fileCount++;
			});
			console.log("$scope.fileCount = " + $scope.fileCount);
			
			console.log("$scope.filesToUpload.ItemFiles is next...");
			console.dir($scope.filesToUpload.ItemFiles);
			for(var i = 0; i < $scope.filesToUpload.ItemFiles.length; i++)
			{
				var file = $scope.filesToUpload.ItemFiles[i];
				console.log("file is next...");
				console.dir(file);
				
				var newFileNameLength = file.name.length;
				console.log("file name length = " + newFileNameLength);

				// Inform the user immediately, if there are duplicate files.
				if ($scope.foundDuplicate)
					alert(errors);
				else
				{
					console.log("file is next again...");
					console.dir(file);
					console.log("file.success = " + file.success);
					if(file.success != "Success")
					{
						console.log("No file.success, so let's save the file...");
						$scope.upload = $upload.upload({
                            url: serviceUrl + '/api/v1/habsubproject/uploadhabitatfile',
							method: "POST",
							// headers: {'headerKey': 'headerValue'},
							// withCredential: true,
							//data: {ProjectId: $scope.project.Id, SubprojectId: subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name},
							//data: {ProjectId: $scope.project.Id, SubprojectId: subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name, DatastoreTablePrefix: $scope.DatastoreTablePrefix},
							data: {ProjectId: $scope.project.Id, SubprojectId: subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name, SubprojectType: "Hab"},
							file: file,

							}).progress(function(evt) {
								console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
							}).success(function(data, status, headers, config) {
								console.log("The following are next:  data, status, headers, config, file");
								//console.log("file is next...");
								console.dir(data);
								console.dir(status);
								console.dir(headers);
								console.dir(config);
								console.dir(file);
								config.file.success = "Success";
								
								//console.log("file is next...");
								//console.dir(file);
								//var promise = SubprojectService.saveSubprojectFile($scope.project.Id, "Hab", $scope.subprojectId, file);
								//promise.$promise.then(function(){
									console.log("done and success!");
									//reload the project -- this will cause the locations and locationlayer to be reloaded!  wow!  go AngularJS!  :)
									//$scope.refreshProjectLocations();
									//$modalInstance.dismiss();
								//});
								
								$scope.fileProgress++;
							}).error(function(data, status, headers, config) {
								$scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
								//console.log(file.name + " was error.");
								config.file.success = "Failed";
							});
							
						console.log("$scope.upload is next...");
						console.dir($scope.upload);

					}
					
					if (file.success)
					{
						
					}
				}
			}
			
			angular.forEach($scope.filesToUpload, function(files, field){

				if(field == "null" || field == "")
					return;
				
				var local_files = [];

				for(var i = 0; i < files.length; i++)
				{
					console.log("$scope is next...")
					//console.dir($scope);
				  
					var file = files[i];
					console.log("Reviewing results on file " + file.Name);
					console.dir(file);
				  
					console.log("$scope.errors is next...");
					console.dir($scope.errors);
					console.log("typeof $scope.errors = " + typeof $scope.errors);
					if(file.data && file.data.length == 1) //since we only upload one at a time...
					{
						//console.dir(file.data);
						local_files.push(file.data[0]); //only ever going to be one if there is any...
						//console.log("file id = "+file.data[0].Id);
					}
					else if (typeof $scope.errors === 'undefined')
					{
						console.log("No errors...");
					}
					else
					{
						//console.log("no file id.");
						$scope.foundDuplicate = true;
						$scope.errors.heading.push("There was a problem saving file: " + file.Name + " - Try a unique filename.");
						//console.log("$scope is next...");
						//console.dir($scope);
						throw "Problem saving file: " + file.Name;
					}
				}

				console.log("$scope.file_row is next...");
				console.dir($scope.file_row);
				console.log("field = " + field);
				//if we already had actual files in this field, copy them in
				if($scope.file_row[field])
				{
					console.log("On Files field...");
					var current_files = angular.fromJson($scope.file_row[field]);
					angular.forEach(current_files, function(file){
						if(file.Id) //our incoming files don't have an id, just actual files.
							local_files.push(file);		
					});
				}

				$scope.file_row[field] = angular.toJson(local_files);
				//console.log("Ok our new list of files: "+$scope.row[field]);
			});
		}
		
		/*
		// Now let's handle the links.
		console.log("$scope.link_row.ExternalLinks is next...");
		console.dir($scope.link_row.ExternalLinks);
		if ($scope.link_row.ExternalLinks)
		{
			console.log("")
			$scope.saveLink = $upload.upload({
				url: serviceUrl + '/data/UploadHabitatFile',
				method: "POST",
				data: {ProjectId: $scope.project.Id, SubprojectId: subprojectId, Description: "Uploaded link " + link.Name, Title: link.Name, SubprojectType: "Hab"},

				}).progress(function(evt) {
					console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
				}).success(function(data, status, headers, config) {
					console.log("The following are next:  data, status, headers, config, file");
					console.dir(data);
					console.dir(status);
					console.dir(headers);
					console.dir(config);
					console.dir(file);
					config.file.success = "Success";
					
					console.log("file is next...");
					console.dir(file);
					//var promise = SubprojectService.saveSubprojectFile($scope.project.Id, "Hab", $scope.subprojectId, file);
					//promise.$promise.then(function(){
						console.log("done and success!");
						//reload the project -- this will cause the locations and locationlayer to be reloaded!  wow!  go AngularJS!  :)
						//$scope.refreshProjectLocations();
						//$modalInstance.dismiss();
					//});
				}).error(function(data, status, headers, config) {
					$scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
					//console.log(file.name + " was error.");
					config.file.success = "Failed";
			});
		}
		*/
		
		// Now let's handle the other fields on the form.		
		//console.log("$scope is next...");
		//console.dir($scope);
		

        //save the habitat item
        var promise = SubprojectService.saveHabitatItem($scope.projectId, $scope.viewSubproject.Id, saveRow);

        if (typeof promise !== 'undefined') {

            promise.$promise.then(function () {
                //did we edit or add new?
                if (saveRow.Id > 0) {
                    $scope.postEditHabitatItemUpdateGrid(promise);
                } else {
                    $scope.postAddHabitatItemUpdateGrid(promise);
                }
                $modalInstance.dismiss();
            });

            console.log("1 typeof $scope.errors = " + typeof $scope.errors + ", $scope.fileCount = " + $scope.fileCount + ", $scope.fileProgress = " + $scope.fileProgress);
            if ($scope.fileCount === 0) {
                $scope.loading = false; // Stop the fish spinner.
                $scope.showCloseButton = true;
                $scope.showCancelButton = false;
                $scope.showFormItems = false;
            }

        }




        

		/*	If the user chooses to create a Habitat Item (HI), at the same time that they are creating a new Subproject,
		*   $scope.viewSubproject is not available yet, so we cannot pass the Id from there.  When we create the new Subproject,
		*   we capture the Id from the Subproject, which is the same thing, so we pass that instead, to create the HI.
		*/
            /*
		if ($rootScope.habProjectName)
			$scope.habProjectName = $rootScope.habProjectName;
		
		if ($scope.viewSubproject !== null)
		{
			console.log("$scope.viewSubproject is present, using that...");
			console.log("$scope.viewSubproject.Id = " + $scope.viewSubproject.Id);
			var promise = SubprojectService.saveHabitatItem($scope.projectId, $scope.viewSubproject.Id, saveRow);
			if (typeof promise !== 'undefined')
			{
                promise.$promise.then(function () {
                    //$scope.reloadSubprojects();
                    //$scope.viewSelectedSubproject();
                    //$("#habitatItems").load("habitatItems.html #habitatItems");
                    //$modalInstance.dismiss();
                    $scope.postAddHabitatItemUpdateGrid(promise);
                });
					
				console.log("1 typeof $scope.errors = " + typeof $scope.errors + ", $scope.fileCount = " + $scope.fileCount + ", $scope.fileProgress = " + $scope.fileProgress);
				if ($scope.fileCount === 0)
				{
					$scope.loading = false; // Stop the fish spinner.
					$scope.showCloseButton = true;
					$scope.showCancelButton = false;
					$scope.showFormItems = false;
				}
			}	
		}
		else if ((typeof $scope.habProjectName !== 'undefined' ) && ($scope.habProjectName !== null))
		{
			console.log("$scope.viewSubproject missing, using $scope.subprojectId:  " + $scope.subprojectId);
			var promise = SubprojectService.saveHabitatItem($scope.projectId, $scope.subprojectId, saveRow);
			if (typeof promise !== 'undefined')
			{
                promise.$promise.then(function () {
                    //$scope.reloadSubprojects();
                    //$scope.viewSelectedSubproject();
                    //$("#habitatItems").load("habitatItems.html #habitatItems");
                    //$modalInstance.dismiss();
                    $scope.postEditHabitatItemUpdateGrid(promise); //we edited
                });
					
				if ($scope.fileCount === 0)
				{
					$scope.loading = false; // Stop the fish spinner.
					$scope.showCloseButton = true;
					$scope.showCancelButton = false;
					$scope.showFormItems = false;					
				}
			}
		}*/
    };
	
	$scope.close = function(){
		console.log("Inside $scope.close...");
		$modalInstance.dismiss();	
	};

    $scope.cancel = function(){
		$modalInstance.dismiss();
    };
	
	$scope.gotoBottom = function (){
		// set the location.hash to the id of
		// the element you wish to scroll to.
		$location.hash('bottom');
		
		// call $anchorScroll()
		$anchorScroll();
	};
	  
	$scope.gotoTopHabitatItemsTop = function (){
		// set the location.hash to the id of
		// the element you wish to scroll to.
		console.log("Inside gotoTopHabitatItemsTop...");
		//$location.hash('top');
		$location.hash('hiTop');
		
		// call $anchorScroll()
		$anchorScroll();
	};
	  
	$scope.gotoCategory = function (category) {
		$location.hash(category);
		$anchorScroll();
	};

  }
];

define("private/habitat/components/habitat-sites/modal-add-habitat-item", function(){});



var modal_create_habitat_subproject = ['$scope', '$rootScope', '$modalInstance', '$modal', 'DatasetService','CommonService','SubprojectService', 'ServiceUtilities', 
	'$timeout', '$location', '$anchorScroll', '$document', '$upload', 
    function ($scope, $rootScope, $modalInstance, $modal, DatasetService, CommonService, SubprojectService, ServiceUtilities, 
	$timeout, $location, $anchorScroll, $document, $upload){
	console.log("Inside ModalCreateHabSubprojectCtrl...");

    initEdit(); //prevent backspace
	
    $scope.header_message = "Create new Habitat project";
	$rootScope.newSubproject = $scope.newSubproject = true;
    $scope.waterbodies = CommonService.getWaterBodies();
	$rootScope.habProjectName = $scope.habProjectName = "";
	$scope.showAddDocument = true;
	$scope.savingHabSubproject = false;
	$scope.showFundingBox = false;
	$rootScope.projectId = $scope.project.Id;
	$scope.SdeObjectId = angular.copy($scope.SdeObjectId);
	$scope.NewPoint = false;
	$scope.fundersPresent = false;
	$scope.collaboratorPresent = false;
	$scope.featureImagePresent = false;
	
    $scope.subproject_row = {
        StatusId: 0,
        //OwningDepartmentId: 1,
    };
	
	// This line pulls in the Projection and the UTMZone
	$scope.subproject_row = angular.copy(DEFAULT_LOCATION_PROJECTION_ZONE);
	
	$scope.subproject_row.strFunders = "";
	$scope.subproject_row.Funding = [];
	
	//var fundtionOptionCount = 0;
	/*angular.forEach($scope.metadataList['Funding'].options, function(value){
		console.log("value = " + value);

		var fundingOption = new Object();
		//fundingOption.Checked = false;
		fundingOption.Name = "";
		fundingOption.Amount = 0;
		
		fundingOption.Name = value;
		$scope.subproject_row.Funding.push(fundingOption);
	});
	console.dir($scope.subproject_row.Funding);
	*/
	
	
		
	$scope.collaboratorList = [];
		$scope.collaboratorList.push("Blue Mountain Habitat Restoration Council");
		$scope.collaboratorList.push("Bureau of Reclamation");
		$scope.collaboratorList.push("Bonneville Power Authority");
		$scope.collaboratorList.push("Columbia Conservation District");
		$scope.collaboratorList.push("CTUIR");
		$scope.collaboratorList.push("Eco Trust");
		$scope.collaboratorList.push("Grande Ronde Model Watershed");
		$scope.collaboratorList.push("Landowners");
		$scope.collaboratorList.push("Nez Perce Tribe");
		$scope.collaboratorList.push("NF John Day Watershed Council");
		$scope.collaboratorList.push("Natural Resource Conservation Service");
		$scope.collaboratorList.push("Oregon Department of Fish and Wildlife");
		$scope.collaboratorList.push("Oregon Department of Transportation");
		$scope.collaboratorList.push("Oregon Watershed Enhancement Board");
		$scope.collaboratorList.push("Other");
		$scope.collaboratorList.push("Pacific Coastal Salmon Recovery Fund");
		$scope.collaboratorList.push("Pomeroy Conservation District");
		$scope.collaboratorList.push("Salmon Recovery Funding Board");
		$scope.collaboratorList.push("Snake River Salmon Recovery Board");
		$scope.collaboratorList.push("Umatilla County Soil and Water Conservation District");
		$scope.collaboratorList.push("Umatilla National Forest");
		$scope.collaboratorList.push("US Forest Service");
		$scope.collaboratorList.push("Wallowa Whitman National Forest");
		$scope.collaboratorList.push("Washington Department of Fish and Wildlife");
	
	//console.log("$scope.collaboratorList is next...");
	//console.dir($scope.collaboratorList);
	
	$scope.showCollaboratorOptions = false;
	$scope.showOtherCollaborators = false;
	$scope.showOtherFundingAgency = false;
	$scope.showFunders = false;
	$scope.showFundingOptions = false;
	$scope.subproject_row.strCollaborators = "";
	$scope.subproject_row.Collaborators = [];
	$scope.uploadComplete = false;
	var values = null;
	
	//console.log("$scope.subproject_row (after initialization) is next...");
	//console.dir($scope.subproject_row);
	
	//if we are editing, this will be set.
    if($scope.viewSubproject)
    {
        $scope.header_message = "Edit Habitat project: " + $scope.viewSubproject.ProjectName;
		$rootScope.newSubproject = $scope.newSubproject = false;
		$scope.subprojectFileList = $rootScope.subprojectFileList;
		
        $scope.subproject_row = angular.copy($scope.viewSubproject);
		
		//console.log("$scope.subproject_row (in viewSubproject) is next...");
		//console.dir($scope.subproject_row);
		
		$scope.showAddDocument = false;

        /* kb commented out 11/21 - not used?
		if ((typeof $scope.subproject_row.Collaborators !== 'undefined') && ($scope.subproject_row.Collaborators !== null))
		{
			//console.log("$scope.subproject_row.Collaborators is next...");
			//console.dir($scope.subproject_row.Collaborators);
			
			var strCollaborators = $scope.subproject_row.Collaborators;
			strCollaborators = strCollaborators.replace(/(\r\n|\r|\n)/gm, ""); // Remove any newlines
			strCollaborators = strCollaborators.replace(/["\[\]]+/g, ''); // Remove any brackets []
			strCollaborators = strCollaborators.trim();
			console.log("strCollaborators = " + strCollaborators);
			
			//$scope.subproject_row.strCollaborators = null; // dump the previous contents.
			$scope.subproject_row.strCollaborators = strCollaborators; // reset its value
			//console.log("$scope.subproject_row.strCollaborators = " + $scope.subproject_row.strCollaborators);
			if ($scope.subproject_row.strCollaborators.indexOf("Other") > -1)
				$scope.showOtherCollaborators = true;
			
			$scope.subproject_row.strCollaborators = strCollaborators;
			
		}
        */
		
		//if ((typeof $scope.subproject_row.OtherCollaborators !== 'undefined') && ($scope.subproject_row.OtherCollaborators !== null))
		//	$scope.showOtherCollaborators = true;
		
		if ($scope.subproject_row.FeatureImage !== null)
		{
			$scope.subproject_row['ItemFiles'] = '[{"Name":"' + $scope.subproject_row.FeatureImage + '"}]';
		}
				
		values = null; // Set/reuse this variable.
		try
		{
			values = angular.fromJson($scope.subproject_row.FirstFoods);
			//console.log("First Foods was an object.");
			//console.log("First Foods = " + values);
			var strFirstFoods = values.toString();
			//console.log("strFirstFoods = " + strFirstFoods);
		}
		catch(e)
		{
			values = $scope.subproject_row.FirstFoods.split(",");
			//console.log("First Foods was a string.");
			var strFirstFoods = $scope.subproject_row.FirstFoods.toString();
			//console.log(strFirstFoods);
		}
		$scope.subproject_row.FirstFoods = values;
		
		values = null; // Set/reuse this variable.		
		try
		{
			values = angular.fromJson($scope.subproject_row.RiverVisionTouchstone);
			//console.log("It was an object.");
		}
		catch(e)
		{
			values = $scope.subproject_row.RiverVisionTouchstone.split(",");
			//console.log("It was a string.");
		}
		$scope.subproject_row.RiverVisionTouchstone = values;
		
		values = null; // Set/reuse this variable.
		try
		{
			values = angular.fromJson($scope.subproject_row.HabitatObjectives);
			//console.log("It was an object.");
		}
		catch(e)
		{
			values = $scope.subproject_row.HabitatObjectives.split(",");
			//console.log("It was a string.");
		}
		$scope.subproject_row.HabitatObjectives = values;
		
		values = null; // Set/reuse this variable.
		try
		{
			values = angular.fromJson($scope.subproject_row.NoaaEcologicalConcerns);
			//console.log("It was an object.");
		}
		catch(e)
		{
			values = $scope.subproject_row.NoaaEcologicalConcerns.split(",");
			//console.log("It was a string.");
		}
		$scope.subproject_row.NoaaEcologicalConcerns = values;
		
		values = null; // Set/reuse this variable.
		try
		{
			values = angular.fromJson($scope.subproject_row.NoaaEcologicalConcernsSubcategories);
			//console.log("It was an object.");
		}
		catch(e)
		{
			values = $scope.subproject_row.NoaaEcologicalConcernsSubcategories.split(",");
			//console.log("It was a string.");
		}
		$scope.subproject_row.NoaaEcologicalConcernsSubcategories = values;

		values = null; // Set/reuse this variable.
		try
		{
			values = angular.fromJson($scope.subproject_row.LimitingFactors);
			//console.log("It was an object.");
		}
		catch(e)
		{
			values = $scope.subproject_row.LimitingFactors.split(",");
			//console.log("It was a string.");
		}
		$scope.subproject_row.LimitingFactors = values;
		
    }
	
	console.log("$scope inside ModalCreateHabSubprojectCtrl, after initializing, is next...");
	//console.dir($scope);

    //var uploadWatch = $scope.$watch('uploadComplete', function(){
    $scope.$watch('uploadComplete', function(){
		if (!$scope.uploadComplete)
			return;
		
		console.log("Inside watch uploadComplete...");
		angular.forEach($scope.filesToUpload, function(files, field){

			if(field == "null" || field == "")
				return;
			
			var local_files = [];

			for(var i = 0; i < files.length; i++)
			{
				console.log("$scope is next...")
				//console.dir($scope);
			  
				var file = files[i];
				console.log("Reviewing results on file " + file.Name);
				console.dir(file);
			  
				console.log("$scope.errors is next...");
				console.dir($scope.errors);
				console.log("typeof $scope.errors = " + typeof $scope.errors);
				if(file.data && file.data.length == 1) //since we only upload one at a time...
				{
					//console.dir(file.data);
					local_files.push(file.data[0]); //only ever going to be one if there is any...
					//console.log("file id = "+file.data[0].Id);
				}
				else if (typeof $scope.errors === 'undefined')
				{
					console.log("No errors...");
				}
				else
				{
					//console.log("no file id.");
					$scope.foundDuplicate = true;
					$scope.errors.heading.push("There was a problem saving file: " + file.Name + " - Try a unique filename.");
					//console.log("$scope is next...");
					//console.dir($scope);
					throw "Problem saving file: " + file.Name;
				}
			}

			console.log("$scope.subproject_row is next...");
			console.dir($scope.subproject_row);
			console.log("field = " + field);
			//if we already had actual files in this field, copy them in
			if($scope.subproject_row[field])
			{
				console.log("On Files field...");
				var current_files = angular.fromJson($scope.subproject_row[field]);
				angular.forEach(current_files, function(file){
					if(file.Id) //our incoming files don't have an id, just actual files.
						local_files.push(file);		
				});
			}

			$scope.subproject_row[field] = angular.toJson(local_files);
			//console.log("Ok our new list of files: "+$scope.row[field]);
			
			if ($scope.addDocument === "Yes")
			{
				console.log("$scope.addDocument = Yes...");
				
				// If the user wishes to add a Correspondence Event right away, we must wait to get the ID of the new subproject, before we can continue.
				//$scope.reloadSubproject(promise.Id);
				//var promise2 = $scope.reloadSubproject(promise.Id);
				//console.log("Inside reloadSubproject...");
				//SubprojectService.clearSubproject();
				//DatasetService.clearHabSubproject(); // Commented out in services.js
				//$scope.reloadSubproject($scope.subprojectId);
				//$modalInstance.dismiss();	
				$scope.openHabitatItemForm();
				//$scope.subproject = SubprojectService.getSubproject(id);
			}
			else
			{
				console.log("$scope.addDocument != Yes");
				
				// If the user just wants to create the Subproject, we can continue without waiting.
				//$scope.reloadSubproject($scope.subprojectId);
				//$modalInstance.dismiss();
			}
			
			SubprojectService.clearSubproject();
			if (($scope.filesToUpload.ItemFiles) || ($scope.NewPoint)) // No new files to upload, and using an existing point.
			{
				console.log("Reloading the whole project, because we have a new location or file...");
				$scope.reloadThisProject();
			}
			else
			{
				console.log("Just reloading the subproject...");
				$scope.reloadSubproject($scope.subprojectId);
			}
		});
		
		//uploadWatch();
	});
	
    $scope.$watch('savingHabSubproject', function(){
		console.log("Inside ModalCreateHabSubprojectCtrl, watch savingHabSubproject...");
		console.log("$scope.savingHabSubproject = " + $scope.savingHabSubproject);

		// The save function saved the location associated to this subproject.
		// This watch saves the actual subproject, and any files associated to it.
		
		//if ((!$scope.subproject_row.LocationId) || ($scope.subproject_row.LocationId === null))
		if ($scope.savingHabSubproject === false)
			return;
		
		var fileAlreadySaved = false;
		// Now begin saving the subproject.
		console.log("$scope.subproject_row.LocationId (in watch) = " + $scope.subproject_row.LocationId);
		
		var saveRow = angular.copy($scope.subproject_row);
		console.log("saveRow (before wiping HabitatItems) is next..");
		console.dir(saveRow);

		saveRow.HabitatItems = undefined;
		console.log("saveRow (after wiping HabitatItems) is next...");
		console.dir(saveRow);
		
		var promise = null;		
		promise = SubprojectService.saveHabSubproject(parseInt($scope.projectId), saveRow, $scope.saveResults);
		
		if (typeof promise !== 'undefined')
		{
			promise.$promise.then(function(){
				//window.location.reload();

                
				// Are we working with a new point, or an existing one?
				if ($scope.NewPoint)
				{
					// Normally, scope.SdeObjectId is set to 0; if it is > 0, then we just saved a new location and need to handle it.
					//console.log("promise in $scope.$watch('subproject_row.LocationId' is next...");
					//console.dir(promise);
					//console.dir($scope);
					$scope.subprojectId = $rootScope.subprojectId = promise.Id;
					console.log("$scope.subprojectId = " + $scope.subprojectId);
					$scope.locationId = promise.LocationId;
					console.log("$scope.locationId = " + $scope.locationId);			
					
					// Note:  In the Save function, we created a location object, but we had no SubprojectId.
					// Now we have subprojects, so let's go back right away and update that Location object, providing the new SubprojectId.
					var newLocation = angular.copy(DEFAULT_LOCATION_PROJECTION_ZONE);
					newLocation.Id = $scope.locationId;
					newLocation.Label = saveRow.ProjectName;
					newLocation.Description = saveRow.ProjectDescription;
					newLocation.GPSEasting = saveRow.GPSEasting;
					newLocation.GPSNorthing = saveRow.GPSNorthing;
					newLocation.ProjectId = parseInt($scope.projectId);
					newLocation.SubprojectId = $scope.subprojectId;
					newLocation.SdeObjectId = $scope.SdeObjectId; // We set this in the $scope.save function.
					newLocation.LocationTypeId = LOCATION_TYPE_Hab;
					newLocation.WaterBodyId = saveRow.WaterBodyId;
					
					console.log("newLocation is next...");
					console.dir(newLocation);
					
                    var loc_promise = CommonService.saveNewProjectLocation($scope.project.Id, newLocation);

                    loc_promise.$promise.then(function () {
                        console.log("Adding this to the project locations: ");
                        console.dir(loc_promise);
                        console.log(" -- locations after");
                        console.dir(scope.project.Locations);
                        scope.project.Locations.push(loc_promise); //add to our list of locations.
                    });

				}
				else
				{
					console.log("We are working with an existing location...");
				}
				
				var i = 0;  // Number of files.
				var fileSize = 1;
				// Check if we updated the file list.
				if ($scope.filesToUpload.ItemFiles)
				{
					console.log("$scope.filesToUpload.ItemFiles is next...");
					console.dir($scope.filesToUpload.ItemFiles);
					$rootScope.featureImagePresent = $scope.featureImagePresent = true;
					//var i = 0;
					for(i = 0; i < $scope.filesToUpload.ItemFiles.length; i++)
					{
						var file = $scope.filesToUpload.ItemFiles[i];
						console.log("file is next...");
						console.dir(file);
						
						var newFileNameLength = file.name.length;
						console.log("file name length = " + newFileNameLength);

						// Inform the user immediately, if there are duplicate files.
						if ($scope.foundDuplicate)
							alert(errors);
						else
						{
							console.log("file is next again...");
							console.dir(file);
							console.log("file.success = " + file.success);
							if(file.success != "Success")
							{
								console.log("No file.success means we have not saved the file yet, so let's save it...");
								// *** Note:  Timing issue.  After the upload kicks off, JavaScript goes on, running the stuff that follows, and then this completes. ***
								$scope.upload = $upload.upload({
                                    url: serviceUrl + '/api/v1/habsubproject/uploadhabitatfile',
									method: "POST",
									// headers: {'headerKey': 'headerValue'},
									// withCredential: true,
									//data: {ProjectId: $scope.project.Id, SubprojectId: subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name},
									//data: {ProjectId: $scope.project.Id, SubprojectId: subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name, DatastoreTablePrefix: $scope.DatastoreTablePrefix},
									//data: {ProjectId: $scope.project.Id, SubprojectId: $scope.subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name, SubprojectType: "Hab"},
									
									// FeatureImage of 1 = Yes
									// FeatureImage of 0 = No, HabitatItem file
									data: {ProjectId: $scope.project.Id, SubprojectId: $scope.subprojectId, Description: "Uploaded file " + file.Name, Title: file.Name, SubprojectType: "Hab", FeatureImage: 1},
									file: file,

									}).progress(function(evt) {
										console.log('percent: ' + parseInt(100.0 * evt.loaded / evt.total));
									}).success(function(data, status, headers, config) {
										//console.log("The following are next:  data, status, headers, config, file");
										console.log("file is next...");
										//console.dir(data);
										//console.dir(status);
										//console.dir(headers);
										//console.dir(config);
										console.dir(file);
										config.file.success = "Success";
										
										console.log("file is next...");
										console.dir(file);
										//var promise = SubprojectService.saveSubprojectFile($scope.project.Id, "Hab", $scope.subprojectId, file);
										//promise.$promise.then(function(){
											console.log("done and success!");
											//reload the project -- this will cause the locations and locationlayer to be reloaded!  wow!  go AngularJS!  :)
											$scope.refreshProjectLocations();
											//$modalInstance.dismiss();
										//});
										
										//$scope.uploadComplete = true;
										
									}).error(function(data, status, headers, config) {
										$scope.uploadErrorMessage = "There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";
										//console.log(file.name + " was error.");
										config.file.success = "Failed";
										
									});
									
								//console.log("$scope.upload is next...");
								//console.dir($scope.upload);

							}
							else
							{
								console.log("We have already saved this file...");
								fileAlreadySaved = true;
							}
							
						}
					}
					if (i === 0)
						$rootScope.featureImagePresent = $scope.featureImagePresent = false;
					
					if (!fileAlreadySaved)
						setTimeout($scope.fileUploadResultsReviewer, (i*1000));
					
					/*angular.forEach($scope.filesToUpload, function(files, field){

						if(field == "null" || field == "")
							return;
						
						var local_files = [];

						for(var i = 0; i < files.length; i++)
						{
							console.log("$scope is next...")
							//console.dir($scope);
						  
							var file = files[i];
							console.log("Reviewing results on file " + file.Name);
							console.dir(file);
						  
							console.log("$scope.errors is next...");
							console.dir($scope.errors);
							console.log("typeof $scope.errors = " + typeof $scope.errors);
							if(file.data && file.data.length == 1) //since we only upload one at a time...
							{
								//console.dir(file.data);
								local_files.push(file.data[0]); //only ever going to be one if there is any...
								//console.log("file id = "+file.data[0].Id);
							}
							else if (typeof $scope.errors === 'undefined')
							{
								console.log("No errors...");
							}
							else
							{
								//console.log("no file id.");
								$scope.foundDuplicate = true;
								$scope.errors.heading.push("There was a problem saving file: " + file.Name + " - Try a unique filename.");
								//console.log("$scope is next...");
								//console.dir($scope);
								throw "Problem saving file: " + file.Name;
							}
						}

						console.log("$scope.subproject_row is next...");
						console.dir($scope.subproject_row);
						console.log("field = " + field);
						//if we already had actual files in this field, copy them in
						if($scope.subproject_row[field])
						{
							console.log("On Files field...");
							var current_files = angular.fromJson($scope.subproject_row[field]);
							angular.forEach(current_files, function(file){
								if(file.Id) //our incoming files don't have an id, just actual files.
									local_files.push(file);		
							});
						}

						$scope.subproject_row[field] = angular.toJson(local_files);
						//console.log("Ok our new list of files: "+$scope.row[field]);
					});
					*/
				}
				else
				{
					console.log("Not uploading any new files...");
				}
				
				setTimeout($scope.finalPart, ((i+1)*1000));
				
				//$scope.reloadThisProject(); // Reload the project, to reload the project locations (what shows on the map); this will also reload the subprojects.
				//$scope.reloadSubprojects(); // Reload the subprojects, 
				
				
				/*if ($scope.addDocument === "Yes")
				{
					console.log("$scope.addDocument = Yes...");
					
					// If the user wishes to add a Correspondence Event right away, we must wait to get the ID of the new subproject, before we can continue.
					//$scope.reloadSubproject(promise.Id);
					//var promise2 = $scope.reloadSubproject(promise.Id);
					//console.log("Inside reloadSubproject...");
					//SubprojectService.clearSubproject();
					//DatasetService.clearHabSubproject(); // Commented out in services.js
					//$scope.reloadSubproject($scope.subprojectId);
					$modalInstance.dismiss();	
					$scope.openHabitatItemForm();
					//$scope.subproject = SubprojectService.getSubproject(id);
				}
				else
				{
					console.log("$scope.addDocument != Yes");
					
					// If the user just wants to create the Subproject, we can continue without waiting.
					//$scope.reloadSubproject($scope.subprojectId);
					$modalInstance.dismiss();
				}
				
				SubprojectService.clearSubproject();
				if (($scope.filesToUpload.ItemFiles) || ($scope.NewPoint)) // No new files to upload, and using an existing point.
				{
					console.log("Reloading the whole project, because we have a new location or file...");
					$scope.reloadThisProject();
				}
				else
				{
					console.log("Just reloading the subproject...");
					$scope.reloadSubproject($scope.subprojectId);
				}*/

                console.log("----------------------- ***************** ------------ PROMISE return from hab");
                console.log("promise");
                console.dir(promise);

                console.log("and the saverow");
                console.dir(saveRow);

                promise.Collaborators = saveRow.Collaborators;
                promise.Funding = saveRow.Funding;
                
                console.log("and here is our final:");

                $scope.subproject_edited = promise;

                console.dir($scope.subproject_edited);


                console.log("and if we do the extends thing:")
                var extended = angular.extend({}, saveRow, promise); //empty + saveRow + promise -- in that order
                console.dir(extended);


			});
		}		
	});

	$scope.fileUploadResultsReviewer = function(){
		console.log("Inside $scope.fileUploadResultsReviewer...");
		//angular.forEach($scope.filesToUpload, function(files, field){
		angular.forEach($scope.filesToUpload, function(files, field){

			if(field == "null" || field == "")
				return;
			
			var local_files = [];
			console.log("$scope is next...")
			//console.dir($scope);
			
			for(var i = 0; i < files.length; i++)
			{ 
				var file = files[i];
				console.log("Reviewing results on file " + file.Name);
				console.dir(file);
			  
				console.log("$scope.errors is next...");
				console.dir($scope.errors);
				console.log("typeof $scope.errors = " + typeof $scope.errors);
				if(file.data && file.data.length == 1) //since we only upload one at a time...
				{
					//console.dir(file.data);
					local_files.push(file.data[0]); //only ever going to be one if there is any...
					//console.log("file id = "+file.data[0].Id);
				}
				else if (typeof $scope.errors === 'undefined')
				{
					console.log("No errors...");
				}
				else
				{
					//console.log("no file id.");
					$scope.foundDuplicate = true;
					$scope.errors.heading.push("There was a problem saving file: " + file.Name + " - Try a unique filename.");
					//console.log("$scope is next...");
					//console.dir($scope);
					throw "Problem saving file: " + file.Name;
				}
			}

			console.log("$scope.subproject_row is next...");
			console.dir($scope.subproject_row);
			console.log("field = " + field);
			//if we already had actual files in this field, copy them in
			if($scope.subproject_row[field])
			{
				console.log("On Files field...");
				var current_files = angular.fromJson($scope.subproject_row[field]);
				console.log("var current_files is next...");
				console.dir(current_files);
				angular.forEach(current_files, function(file){
					if(file.Id) //our incoming files don't have an id, just actual files.
						local_files.push(file);		
				});
			}

			$scope.subproject_row[field] = angular.toJson(local_files);
			//console.log("Ok our new list of files: "+$scope.row[field]);
		});
	};
	
	$scope.finalPart = function(){
        console.log("Inside $scope.finalPart...");

        $scope.postSaveHabitatSubprojectUpdateGrid($scope.subproject_edited);

		if ($scope.addDocument === "Yes")
		{
			console.log("$scope.addDocument = Yes...");
			
			// If the user wishes to add a Habitat Item right away, we must wait to get the ID of the new subproject, before we can continue.
			//$scope.reloadSubproject(promise.Id);
			//var promise2 = $scope.reloadSubproject(promise.Id);
			//console.log("Inside reloadSubproject...");
			//SubprojectService.clearSubproject();
			//DatasetService.clearHabSubproject(); // Commented out in services.js
			//$scope.reloadSubproject($scope.subprojectId);
			$modalInstance.dismiss();	
			$scope.openHabitatItemForm();
			//$scope.subproject = SubprojectService.getSubproject(id);
		}
		else
		{
			console.log("$scope.addDocument != Yes");
			
			// If the user just wants to create the Subproject, we can continue without waiting.
			//$scope.reloadSubproject($scope.subprojectId);
			
			//$scope.subprojects = null;
			//$scope.reloadSubprojects();
			$scope.reloadSubprojectLocations();
			
			$modalInstance.dismiss();
		}
		
		//SubprojectService.clearSubproject();

		//console.log("Reload the whole project; this is the easiest way to capture the updates.");
		// If we use services.js, service.getSubproject, it only reloads what we already had, before the changes.
		// The save action puts the updates in the database, so we must pull the updates (and update our variables in the process) from the database.
		//$scope.reloadThisProject();
	};
	
	//$scope.showStartDate = function(){
	//	console.log("$scope.subproject_row.ProjectStartDate (before conversion) = " + $scope.subproject_row.ProjectStartDate);		
		//$scope.subproject_row.ProjectStartDate = setDateTo0000($scope.subproject_row.ProjectStartDate);
	//	console.log("$scope.subproject_row.ProjectStartDate (after conversion) = " + $scope.subproject_row.ProjectStartDate);
	//};
	
	//$scope.showEndDate = function(){
	//	console.log("$scope.subproject_row.ProjectEndDate (before conversion) = " + $scope.subproject_row.ProjectEndDate);		
		//$scope.subproject_row.ProjectEndDate = setDateTo0000($scope.subproject_row.ProjectEndDate);
	//	console.log("$scope.subproject_row.ProjectEndDate (after conversion) = " + $scope.subproject_row.ProjectEndDate);
	//};

	$scope.selectFunder = function () {
		console.log("Inside selectFunder...");
		//console.dir($scope);
		console.log("$scope.subproject_row is next...");
		console.dir($scope.subproject_row);
				
		if ($scope.subproject_row.fundingName === "Other")
		{
			$scope.showOtherFunder = true;
			$scope.subproject_row.OtherFundingAgency = "";
		}
		else
		{
			$scope.showOtherFunder = false;
			$scope.subproject_row.OtherFundingAgency = 'undefined';
		}
		
		console.log("$scope.showOtherAgency = " + $scope.showOtherAgency);
	};

	$scope.selectCollaborator = function () {
		console.log("Inside selectCollaborator...");
		//console.dir($scope);
		console.log("$scope.subproject_row is next...");
		console.dir($scope.subproject_row);
						
		if ($scope.subproject_row.Collaborators === "Other")
		{
			$scope.showOtherCollaborators = true;
			$scope.subproject_row.OtherCollaborators = "";
		}
		else
		{
			$scope.showOtherCollaborators = false;
			$scope.subproject_row.OtherCollaborators = 'undefined';
		}
		
		console.log("$scope.OtherCollaborators = " + $scope.OtherCollaborators);
	};
	
	$scope.enteredSelectedCollaborators = function () {
		$scope.showCollaboratorOptions = true;
	};
	
	$scope.enteredSomethingElse = function () {
		$scope.showCollaboratorOptions = false;
	};
	
	$scope.collaboratorChanged = function() {
		console.log("Inside collaboratorChanged...");
		console.log("$scope.subproject_row is next...");
		console.dir($scope.subproject_row);
		
		$scope.subproject_row.strCollaborators = $scope.subproject_row.Collaborators.toString();
		if ($scope.subproject_row.strCollaborators.indexOf("Other") > -1)
		{
			$scope.showOtherCollaborators = true;
		}
		else
		{
			$scope.showOtherCollaborators = false;
			$scope.subproject_row.OtherCollaborators = null;
		}
		
		console.log("$scope.showOtherCollaborators = " + $scope.showOtherCollaborators);
	};
	
	$scope.addCollaborator = function() {
		console.log("+C clicked...");
		console.log("$scope.subproject_row.strCollaborators = " + $scope.subproject_row.strCollaborators);	
		
		if (typeof $scope.subproject_row.strCollaborators === 'undefined')
			$scope.subproject_row.strCollaborators = "";

		// We will add a new line at the end, so that the string presents well on the page.
		if ($scope.subproject_row.Collaborators === "Other")
		{
			$scope.subproject_row.strCollaborators += $scope.subproject_row.OtherCollaborators + ";\n";			
		}
		else
		{
			$scope.subproject_row.strCollaborators += $scope.subproject_row.Collaborators + ";\n";
		}
		
		console.log("$scope.subproject_row.strCollaborators = " + $scope.subproject_row.strCollaborators);		
	};
	
	$scope.removeCollaborator = function() {
		console.log("-C clicked...");
		console.log("$scope.subproject_row.strCollaborators before stripping = " + $scope.subproject_row.strCollaborators);
		
		// First, strip out the new line characters.
		$scope.subproject_row.strCollaborators = $scope.subproject_row.strCollaborators.replace(/(\r\n|\r|\n)/gm, "");
		console.log("$scope.subproject_row.strCollaborators after stripping = " + $scope.subproject_row.strCollaborators);
		
		// Note, we still have the trailing semicolon.
		// Convert the string to an array, so that we can easily remove the applicable funding agency from the string.
		var aryCollaborators = $scope.subproject_row.strCollaborators.split(";");
		
		// Next, get rid of that trailing semicolon.
		aryCollaborators.splice(-1, 1);
		console.dir(aryCollaborators);
		
		// Now we can continue with the delete action.
		var aryCollaboratorsLength = aryCollaborators.length;
		
		// First check if the user entered an "other" funder.
		if (($scope.subproject_row.Collaborators === "Other") && ($scope.subproject_row.OtherCollaborators))
		{	
			for (var i = 0; i < aryCollaboratorsLength; i++)
			{
				console.log("aryCollaborators[i] = " + aryCollaborators[i]);
				if (aryCollaborators[i].indexOf($scope.subproject_row.OtherCollaborators) > -1)
				{
					console.log("Found the item...");
					aryCollaborators.splice(i,1);
					console.log("Removed the item.");
					
					$scope.subproject_row.strCollaborators = "";
					console.log("Wiped $scope.subproject_row.strCollaborators...");
					
					// Rebuild the string now, adding the semicolon and newline after every line.
					angular.forEach(aryCollaborators, function(item){
						$scope.subproject_row.strCollaborators += item + ";\n";
						console.log("Added item...");
					});
					
					// Since we found the item, skip to then end to exit.
					i = aryCollaboratorsLength;
				}
			}
		}
		else
		{
			for (var i = 0; i < aryCollaboratorsLength; i++)
			{
				console.log("aryCollaborators[i] = " + aryCollaborators[i]);
				if (aryCollaborators[i].indexOf($scope.subproject_row.Collaborators) > -1)
				{
					console.log("Found the item...");
					aryCollaborators.splice(i,1);
					console.log("Removed the item.");
					
					$scope.subproject_row.strCollaborators = "";
					console.log("Wiped $scope.subproject_row.strCollaborators...");
					
					// Rebuild the string now, adding the semicolon and newline after every line.
					angular.forEach(aryCollaborators, function(item){
						$scope.subproject_row.strCollaborators += item + ";\n";
						console.log("Added item...");
					});
					
					// Since we found the item, skip to then end to exit.
					i = aryCollaboratorsLength;
				}
			}
		}
		console.log("Finished.");
	};
	
	/*$scope.fundingItemClicked = function(itemChecked) {
		console.log("itemChecked = " + itemChecked);
		console.log("$scope.subproject_row.Funding is next...");
		console.dir($scope.subproject_row.Funding);
		if ($scope.subproject_row.Funding.Checked)
			$scope.showFundingBox = false;
		else
			$scope.showFundingBox = true;
		
		console.log("$scope.showFundingBox = " + $scope.showFundingBox);
	};*/
	
	$scope.addFundingAgency = function() {
		console.log("+FA clicked...");
		console.log("$scope.subproject_row.strFunders = " + $scope.subproject_row.strFunders);
		//console.log("$scope.subproject_row.Funding.Amount = " + $scope.subproject_row.Funding.Amount + ", typeof $scope.subproject_row.Funding.Amount = " + typeof $scope.subproject_row.Funding.Amount);
		console.log("$scope.subproject_row.fundingAmount = " + $scope.subproject_row.fundingAmount + ", typeof $scope.subproject_row.fundingAmount = " + typeof $scope.subproject_row.fundingAmount);
		
		//if (!$scope.subproject_row.Funding.Amount) //|| (!$scope.subproject_row.Funding.Amount.trim()))
		if (!$scope.subproject_row.fundingAmount) //|| (!$scope.subproject_row.Funding.Amount.trim()))
		{
			alert("If you add a Funding Agency, you MUST enter a funding amount.");
			return;
		}
		
		// First, capture what we really need for a number ($ and commas are OK, but we strip them out).
		//var amt1 = $scope.subproject_row.Funding.Amount.replace(/(,|\$)/gm, "");  // Remove the $ and commas.
		
		// Next, locate the decimal; there should only be one.
		//var decimalLoc1 = $scope.subproject_row.Funding.Amount.indexOf(".");  // Find the decimal.
		//var decimalLoc2 = $scope.subproject_row.Funding.Amount.lastIndexOf(".");  // Find the last decimal; the number can have only one decimal.
		
		// Remove the decimals.
		//var noDecimal = amt1.replace(/./gm, "");  // Remove the decimals now.
		
		// Remove the digits.
		//var noDigits = noDecimal.replace(/\d/gm, "");  // Now remove the digits.
		
		// If anything remains now, the value is not a number.
		//console.log("decimalLoc1 = " + decimalLoc1 + ", decimalLoc2 = " + decimalLoc2);
		//if (decimalLoc1 !== decimalLoc2)
		//{
		//	alert("Only one decimal (.) is allowed.");
		//	return;
		//}
		//$scope.subproject_row.Funding.Amount = $scope.subproject_row.Funding.Amount.replace(/(,|\$)/gm, "");
		
		//console.log("$scope.subproject_row.Funding.Name = " + $scope.subproject_row.Funding.Name);
		console.log("$scope.subproject_row.fundingName = " + $scope.subproject_row.fundingName);
		//console.log("$scope.subproject_row.Funding.Amount = " + $scope.subproject_row.Funding.Amount);
		console.log("$scope.subproject_row.fundingAmount = " + $scope.subproject_row.fundingAmount);

		if (typeof $scope.subproject_row.strFunders === 'undefined')
			$scope.subproject_row.strFunders = "";
		
		// We will add a new line at the end, so that the string presents well on the page.
		if ($scope.subproject_row.fundingName === "Other")
		{
			$scope.subproject_row.strFunders += $scope.subproject_row.OtherFundingAgency + ", " + $scope.subproject_row.fundingAmount + ";\n";			
		}
		else
		{
			//$scope.subproject_row.strFunders += $scope.subproject_row.Funding.Name + ", " + $scope.subproject_row.Funding.Amount + ";\n";
			$scope.subproject_row.strFunders += $scope.subproject_row.fundingName + ", " + $scope.subproject_row.fundingAmount + ";\n";
		}
		
		console.log("$scope.subproject_row.strFunders = " + $scope.subproject_row.strFunders);
	};
	
	$scope.removeFundingAgency = function() {
		console.log("- clicked...");
		console.log("$scope.subproject_row.strFunders before stripping = " + $scope.subproject_row.strFunders);
		
		// First, strip out the new line characters.
		//$scope.subproject_row.strFunders = $scope.subproject_row.strFunders.replace(/[^\x00-\x1F]/gmi, "");
		$scope.subproject_row.strFunders = $scope.subproject_row.strFunders.replace(/(\r\n|\r|\n)/gm, "");
		console.log("$scope.subproject_row.strFunders after stripping = " + $scope.subproject_row.strFunders);
		
		// Note, we still have the trailing semicolon.
		// Convert the string to an array, so that we can easily remove the applicable funding agency from the string.
		var aryFunders = $scope.subproject_row.strFunders.split(";");
		
		// Next, get rid of that trailing semicolon.
		aryFunders.splice(-1, 1);
		console.dir(aryFunders);
		
		// Now we can continue with the delete action.
		var aryFundersLength = aryFunders.length;
		
		// First check if the user entered an "other" funder.
		if (($scope.subproject_row.fundingName === "Other") && ($scope.subproject_row.OtherFundingAgency))
		{	
			for (var i = 0; i < aryFundersLength; i++)
			{
				console.log("aryFunders[i] = " + aryFunders[i]);
				if (aryFunders[i].indexOf($scope.subproject_row.OtherFundingAgency) > -1)
				{
					console.log("Found the item...");
					aryFunders.splice(i,1);
					console.log("Removed the item.");
					
					$scope.subproject_row.strFunders = "";
					console.log("Wiped $scope.subproject_row.strFunders...");
					
					// Rebuild the string now, adding the semicolon and newline after every line.
					angular.forEach(aryFunders, function(item){
						$scope.subproject_row.strFunders += item + ";\n";
						console.log("Added item...");
					});
					
					// Since we found the item, skip to then end to exit.
					i = aryFundersLength;
				}
			}
		}
		else
		{
			for (var i = 0; i < aryFundersLength; i++)
			{
				console.log("aryFunders[i] = " + aryFunders[i]);
				if (aryFunders[i].indexOf($scope.subproject_row.fundingName) > -1)
				{
					console.log("Found the item...");
					aryFunders.splice(i,1);
					console.log("Removed the item.");
					
					$scope.subproject_row.strFunders = "";
					console.log("Wiped $scope.subproject_row.strFunders...");
					
					// Rebuild the string now, adding the semicolon and newline after every line.
					angular.forEach(aryFunders, function(item){
						$scope.subproject_row.strFunders += item + ";\n";
						console.log("Added item...");
					});
					
					// Since we found the item, skip to then end to exit.
					i = aryFundersLength;
				}
			}
		}
		console.log("Finished.");
	};
	
	$scope.openFileModal = function(row, field)
	{
		console.log("Inside ModalCreateHabSubprojectCtrl, openFileModal...");
		console.log("row is next...");
		console.dir(row);
		console.log("field is next...");
		console.dir(field);
		$scope.file_row = row;
		//$scope.file_field = field;
		$scope.file_field = {
			DbColumnName: "ItemFiles"
		};
		
		var modalInstance = $modal.open({
			templateUrl: 'app/core/common/components/file/templates/modal-file.html',
			controller: 'FileModalCtrl',
			scope: $scope, //scope to make a child of
		});
	};
	
	$scope.onFileSelect = function(field, files)
	{
		console.log("Inside ModalCreateHabSubprojectCtrl, onFileSelect");
		console.log("file selected! " + field);
		$scope.filesToUpload[field] = files;
	};
	
	/*$scope.$watch('fileProgress', function(){
		console.log("Inside watch fileProgress...");
		console.log("$scope.fileCount = " + $scope.fileCount + ", $scope.fileProgress = " + $scope.fileProgress);
		if($scope.fileProgress < $scope.fileCount)
			return;
		
		if ($scope.saving)
		{
			$scope.loading = false; // Stop the fish spinner.
			$scope.showCloseButton = true;
			$scope.showCancelButton = false;
			$scope.showFormItems = false;
		}
	});
	*/
	
    $scope.save = function(){
		console.log("Inside ModalCreateHabSubprojectCtrl, save...");
		$scope.subprojectSave = undefined;
		$scope.subprojectSave = [];
		$scope.subprojectSave.error = false;
		$scope.subprojectSave.errorMessage = "";
		$scope.savingHabSubproject = false;
		$scope.subproject_row.Funding = []; // Declare this again.
		$scope.subproject_row.Collaborators = []; // Declare this again.
		$scope.createNewSubproject = false;
		//$scope.featureImage = null;
		$scope.locationId = 0;
		$scope.NewPoint = false;
		//$scope.subproject_row.LocationTypeId = 112; // Metrics
		
		// Note:  The main thing that we do in this function is save the new location for the Subproject.
		// After we save the location, the watch for $scope.savingHabSubproject run, and it saves the subproject.
		
		if ((typeof $scope.subproject_row.ProjectName === 'undefined') || ($scope.subproject_row.ProjectName === null))
		{
			console.log("Project name is empty...");
			$scope.subprojectSave.error = true;
			$scope.subprojectSave.errorMessage = "Project Name cannot be blank!  ";
		}
		
		if ((typeof $scope.subproject_row.GPSEasting === 'undefined') || (typeof $scope.subproject_row.GPSNorthing === 'undefined'))
		{
			console.log("Easting or Northing is blank...");
			$scope.subprojectSave.error = true;
			$scope.subprojectSave.errorMessage += "Easting and Northing cannot be blank!  ";
		}
		
		//console.log("$scope is next...");
		//console.dir($scope);
		
		if (!$scope.subprojectSave.error)
		{
			console.log("$scope.subproject_row, full is next...");
			console.dir($scope.subproject_row);

			// Capture the AddDocument flag, before discarding it.			
			$scope.addDocument = $scope.subproject_row.AddDocument;
			$scope.subproject_row.AddDocument = null;
			
			if (!$scope.subproject_row.LocationId)
				$scope.subproject_row.LocationId = 0;
			
			/********* A note about time start ***********/
			/* 	When we save the subproject, when the backend converts the ProjectStartDate and ProjectEndDate to UTC (adds 8 hours).
				So, with an initial saved time of 0000, the backend converts it to 0800.
				Each time we save then, the time will have 8 hours added to it.  On the 4th save, it will go into the next day.
				To avoid this, we take the saved date (now 0800), and set it back to 0000.
				This will keep the time in the same spot (keep it from changing).
				There may be a better way to handle this issue, but this technique works too...
			*/
			
			if ($scope.subproject_row.ProjectStartDate)
			{
				var psDate = new Date(Date.parse($scope.subproject_row.ProjectStartDate));
				$scope.subproject_row.ProjectStartDate = setDateTo0000(psDate);
			}
			
			if ($scope.subproject_row.ProjectEndDate)
			{
				var peDate = new Date(Date.parse($scope.subproject_row.ProjectEndDate));
				$scope.subproject_row.ProjectEndDate = setDateTo0000(peDate);
			}
			/********* A note about time end ***********/

			console.log("$scope.addDocument = " + $scope.addDocument);
			console.log("$scope.subproject_row, after del is next...");
			console.dir($scope.subproject_row);			
			
			$scope.saveResults = {};
			//console.log("$scope is next...");
			//console.dir($scope);
			
			// First, a little cleanup.
			$scope.subprojectSave.error = false;
			$scope.subprojectSave.errorMessage = "";
			
			// Check the Feature Image box.
			/*if ((typeof $scope.subproject_row['ItemFiles'] !== 'undefined') && (typeof $scope.subproject_row['ItemFiles'] !== 'undefined'))
			{
				$scope.subproject_row.featureImage = 1;
			}
			else
			{
				$scope.subproject_row.featureImage = null;
			}
			*/
			
			// First Foods
			console.log("First Foods = " + $scope.subproject_row.FirstFoods);
			
			// Funding
			console.log("$scope.subproject_row.Funding is next...");
			console.dir($scope.subproject_row.Funding);
			console.log("type of $scope.subproject_row.Funding = " + typeof $scope.subproject_row.Funding);
			
			//if ($scope.subproject_row.Funding.length > 0)
			if ((typeof $scope.subproject_row.strFunders !== 'undefined') && ($scope.subproject_row.strFunders !== null) && ($scope.subproject_row.strFunders.length > 0))
			{
				if ($scope.subproject_row.strFunders.length > 0)
				{
					$rootScope.fundersPresent = $scope.fundersPresent = true;
					var strFunders = $scope.subproject_row.strFunders.replace(/(\r\n|\r|\n)/gm, "");  // Remove all newlines (used for presentation).
					var aryFunders = $scope.subproject_row.strFunders.split(";");  // 
					aryFunders.splice(-1, 1);
					
					angular.forEach(aryFunders, function(item) {
						console.log("item = " + item);
						var funderRecord = item.split(",");
						
						var fundingOption = new Object();
						//fundingOption.Checked = false;
						fundingOption.Id = 0;
						fundingOption.Name = "";
						fundingOption.Amount = 0;
						
						fundingOption.Name = funderRecord[0].trim();
						console.log("fundingOption.Name = " + fundingOption.Name);
						
						// Get the Id for the funder from funderList.
						//angular.forEach($scope.funderList, function(funder) {
						//	if (funder.Name = fundingOption.Name)
						//		fundingOption.Id = funder.Id;
						//});
						
						fundingOption.Amount = parseFloat(funderRecord[1]);
						console.log("fundingOption.Amount = " + fundingOption.Amount);
						
						$scope.subproject_row.Funding.push(fundingOption);		
					});
					$scope.subproject_row.strFunders = undefined;
				}
			}
			
			// Collaborators
			console.log("$scope.subproject_row.strCollaborators = " + $scope.subproject_row.strCollaborators);
			console.log("type of $scope.subproject_row.strCollaborators = " + typeof $scope.subproject_row.strCollaborators);
	
			if ((typeof $scope.subproject_row.strCollaborators !== 'undefined') && ($scope.subproject_row.strCollaborators !== null) && ($scope.subproject_row.strCollaborators.length > 0))
			{
				$rootScope.collaboratorPresent = $scope.collaboratorPresent = true;
				var strCollaborators = $scope.subproject_row.strCollaborators.replace(/(\r\n|\r|\n)/gm, "");  // Remove all newlines (used for presentation).
				console.log("strCollaborators = " + strCollaborators);
				var aryCollaborators = $scope.subproject_row.strCollaborators.split(";");  // 
				//aryCollaborators.splice(-1, 1);
				
				angular.forEach(aryCollaborators, function(item) {
					//After the split on ";", one of the lines is a newline.  We need to watch for and omit that line.
					//console.log("item = X" + item + "X");
					//item = item.replace(/(\r\n|\r|\n)/gm, "");
					item = item.replace(/\n/g, "");
					//console.log("item = X" + item + "X");
					
					if (item.length > 0)
					{
						var collaboratorOption = new Object();
						collaboratorOption.Id = 0;
						collaboratorOption.Name = "";
						
						collaboratorOption.Name = item.trim();
						//console.log("collaboratorOption.Name = " + collaboratorOption.Name);
						
						$scope.subproject_row.Collaborators.push(collaboratorOption);
					}
				});
				$scope.subproject_row.strCollaborators = undefined;
			}
			//$scope.savingHabSubproject = true;
			
			var subprojectId = 0;
			// Are we creating a new Subproject, or editing an existing one?
			if ($scope.viewSubproject)
			{
				console.log("We are editing an existing subproject; no new location needed...");
				subprojectId = $scope.viewSubproject.Id
				
				// We put this inside both branches of the if, because we need the branch to complete, before the watch triggers.
				$scope.savingHabSubproject = true;
			}
			else
			{
				subprojectId = $scope.subprojectId;
				
				//$scope.viewSubproject either does not exist or is null, so we are creating a new Subproject.
				// Next, we add/save the location.
				console.log("This is a new subproject; creating a new location...");
				var newLocation = angular.copy(DEFAULT_LOCATION_PROJECTION_ZONE);
				newLocation.Label = $scope.subproject_row.ProjectName;
				newLocation.Description = $scope.subproject_row.ProjectDescription;
				newLocation.GPSEasting = $scope.subproject_row.GPSEasting;
				newLocation.GPSNorthing = $scope.subproject_row.GPSNorthing;
				newLocation.ProjectId = parseInt($scope.projectId);
				newLocation.LocationTypeId = LOCATION_TYPE_Hab;
				newLocation.WaterBodyId = $scope.subproject_row.WaterBodyId;
				//newLocation.SubprojectId = $scope.subprojectId; // When we are creating a new subproject, we do not have the subprojectId yet; this is from the old one.
				console.log("newLocation is next...");
				console.dir(newLocation);
				
				//nad83 zone 11...  might have to have this as a list somehwere...
				var inSR = new esri.SpatialReference({ wkt: NAD83_SPATIAL_REFERENCE });
				var outSR = new esri.SpatialReference({wkid: 102100});
				var geometryService = new esri.tasks.GeometryService(GEOMETRY_SERVICE_URL);
				$scope.newPoint = new esri.geometry.Point(newLocation.GPSEasting, newLocation.GPSNorthing, inSR);			

				//convert spatial reference
				var PrjParams = new esri.tasks.ProjectParameters();

				PrjParams.geometries = [ $scope.newPoint ];
				// PrjParams.outSR is not set yet, so we must set it also.
				PrjParams.outSR = outSR;

				//do the projection (conversion)
				geometryService.project(PrjParams, function(outputpoint) {

					$scope.newPoint = new esri.geometry.Point(outputpoint[0], outSR);
					$scope.newGraphic = new esri.Graphic($scope.newPoint, new esri.symbol.SimpleMarkerSymbol());
					$scope.map.graphics.add($scope.newGraphic);

					//add the graphic to the map and get SDE_ObjectId
					$scope.map.locationLayer.applyEdits([$scope.newGraphic],null,null).then(function(results){

						if(results[0].success)
						{
							newLocation.SdeObjectId = $scope.SdeObjectId = results[0].objectId;
							$scope.setSdeObjectId($scope.SdeObjectId);
							console.log("Created a new point! "+ newLocation.SdeObjectId);
							$scope.NewPoint = true;

							var promise = CommonService.saveNewProjectLocation($scope.project.Id, newLocation);
							promise.$promise.then(function(result){
								console.log("done and success!");
								console.log("result is next...");
								console.dir(result);
								angular.forEach(result, function(item, key){
									//console.log("key = " + key + ", item is next...");
									//console.dir(item);
									if (key === "Id")
									{
										//$scope.locationId = promise.LocationId;
										$scope.subproject_row.LocationId = item;
										console.log("$scope.subproject_row.LocationId = " + $scope.subproject_row.LocationId);
										
										// We put this inside both branches of the if ($scope.viewSubproject), because we need the branch to complete, before the watch triggers. ...Obsolete?
										$scope.savingHabSubproject = true;
									}
								});
						
								//reload the project -- this will cause the locations and locationlayer to be reloaded!  wow!  go AngularJS!  :)
								//$scope.refreshProjectLocations();
								//$modalInstance.dismiss();  // This is from the ActivitiesConroller, ModalAddLocationCtrl.  We have this down below, so we do not need it here; it causes an error.
							});

						}
						else
						{
							$scope.subprojectSave.errorMessage = "There was a problem saving that location.";
						}

					});
				});
			}
			
			// If we had a problem saving the location, stop here and do not save the subproject.
			if ($scope.subprojectSave.errorMessage.length > 0)
			{
				console.log("Had a problem saving the location.  Stopping the save...");
				return;
			}
		}
    };

    $scope.cancel = function(){	
		$scope.subproject_row = 'undefined';
        $modalInstance.dismiss();
		//$scope.reloadSubprojects();

    };
  }
];

define("private/habitat/components/habitat-sites/modal-create-habitat-subproject", function(){});

//this is a nested controller used on the project-details page to load
// the sites tab grid. It only appears for projects that are Habitat type projects.

//hab-sites-grid

//var METADATA_PROPERTY_SUBPROGRAM = 24; //add this to your config.js 

var tab_sites = ['$scope', '$timeout','$routeParams', 'SubprojectService', 'ProjectService', 'DatasetService', 'CommonService', 'PreferencesService',
    '$rootScope', '$modal', '$sce', '$window', '$http',
    'ServiceUtilities', 'ConvertStatus', '$location', '$anchorScroll',
    function (scope, $timeout, routeParams, SubprojectService, ProjectService, DatasetService, CommonService, PreferencesService, $rootScope, $modal, $sce, $window, $http,
        ServiceUtilities, ConvertStatus, $location, $anchorScroll) {
//        console.log("Inside tab sites controller...");

        scope.subprojectFileList = null;
        scope.funderList = null;
        scope.collaboratorList = null;

        var ItemCount = function (params) {
            if (params.node.data.HabitatItems === undefined || params.node.data.HabitatItems === null)
                return '0';

            return '' + params.node.data.HabitatItems.length;
        };

        var EditMasterLinksTemplate = function (param) {

            var div = document.createElement('div');

            var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
            editBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.editHabitatSubproject(param.data);
            });
            div.appendChild(editBtn);
            div.appendChild(document.createTextNode("|"));

            var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
            delBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.removeHabitatSubproject(param.data);
            });
            div.appendChild(delBtn);
            div.appendChild(document.createTextNode("|"));

            var addBtn = document.createElement('a'); addBtn.href = '#'; addBtn.innerHTML = 'Add Item';
            addBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.openHabitatItemForm(param.data, {});
            });
            div.appendChild(addBtn);

            return div;
        };


        var FileListCellTemplate = function (params) {
            var list = '<div class="event-file-list"><ul>';

            var file_links = scope.getSubprojectFilesArrayAsLinks(scope.project.Id, params.node.data.SubprojectId, params.node.data.ItemFiles);

            file_links.forEach(function (link) {
                list += '<li>' + link + '</li>';
            });

            list += '</ul></div>';

            return list;
        };


        //this template gives the Edit|Delete|Add for the detail.
        var EditDetailLinksTemplate = function (detailparam) {
            var subproject = getById(scope.subprojectList, detailparam.data.SubprojectId);

            var div = document.createElement('div');

            var editBtn = document.createElement('a'); editBtn.href = '#'; editBtn.innerHTML = 'Edit';
            editBtn.addEventListener('click', function (event) {
                event.preventDefault();
                //console.log("detail param: ");
                //console.dir(detailparam);
                scope.openHabitatItemForm(subproject, detailparam.data); //parent subproject, detail line.
            });
            div.appendChild(editBtn);
            div.appendChild(document.createTextNode("|"));

            var delBtn = document.createElement('a'); delBtn.href = '#'; delBtn.innerHTML = 'Delete';
            delBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.removeHabitatFileItem(subproject, detailparam.data);
            });
            div.appendChild(delBtn);
            div.appendChild(document.createTextNode("|"));

            var addBtn = document.createElement('a'); addBtn.href = '#'; addBtn.innerHTML = 'Add';
            addBtn.addEventListener('click', function (event) {
                event.preventDefault();
                scope.openHabitatItemForm(subproject, {});
            });

            div.appendChild(addBtn);

            return div;
            /* can't do angular stuff in here unless we enable it as an angular grid... let's see if we can do without...
            return '<div project-role="editor">' +
                        '<a ng-click="editViewSubproject();">Edit</a>|' +
                        '<a ng-click="removeViewSubproject();">Delete</div>|' + 
                        '<a ng-click="openCorrespondenceEventForm();">Add</div>' +
                '</div>';
                */
        };


        //grid columns for sites tab (master/subprojects)
        scope.sitesColumnDefs = [  //in order the columns will display, by the way...
            {
                width: 130, cellRenderer: EditMasterLinksTemplate, menuTabs: [],
            },
            {
                field: 'ProjectName', headerName: 'Name', width: 325, cellRenderer: 'group',
                cellRendererParams: { suppressCount: true },
                menuTabs: ['filterMenuTab'],
                filter: 'text'
            },
            {
                field: 'EffDt',
                headerName: 'Updated',
                width: 130,
                valueFormatter: function (params) {
                    if (params.node.data.EffDt !== undefined && params.node.data.EffDt !== null)
                        return moment(params.node.data.EffDt).format('L');
                },
                sort: 'desc',
                menuTabs: [],
            },
            {
                headerName: 'Items', width: 60,
                cellRenderer: ItemCount,
                valueGetter: function (params) {
                    return (params.data.HabitatItems !== undefined && params.data.HabitatItems.length > 0) ? params.data.HabitatItems.length : 0;
                },
                menuTabs: [],
            },
            {
                field: 'ProjectStartDate', headerName: 'Start Date', width: 150,
                valueFormatter: function (params) {
                    if (params.node.data.ProjectStartDate !== undefined && params.node.data.ProjectStartDate !== null)
                        return moment(params.node.data.ProjectStartDate).format('L');
                },
                menuTabs: [],

            },
            {
                field: 'ProjectEndDate', headerName: 'End Date', width: 150,
                valueFormatter: function (params) {
                    if (params.node.data.ProjectEndDate !== undefined && params.node.data.ProjectEndDate !== null)
                        return moment(params.node.data.ProjectEndDate).format('L');
                },
                menuTabs: [],
            },
        ];

        //details for the correspondence
        var detailColumnDefs = [
            {
                headerName: '', width: 100, cellRenderer: EditDetailLinksTemplate, menuTabs: [],
            },
            
            { headerName: 'Item Type', field: 'ItemType', cellClass: 'item-record-cell', width: 100, menuTabs: ['filterMenuTab'], },
            { headerName: 'Item Name', field: 'ItemName', cellClass: 'item-record-cell', width: 150, menuTabs: ['filterMenuTab'], filter: 'text' },
            { headerName: 'Documents', field: 'ItemFiles', width: 300, cellRenderer: FileListCellTemplate, menuTabs: [], },
            { headerName: 'External Links', field: 'ExternalLinks', cellClass: 'item-record-cell', width: 250, menuTabs: [], },
            {
                field: 'EffDt',
                headerName: 'Updated',
                width: 150,
                valueFormatter: function (params) {
                    if (params.node.data.EffDt !== undefined && params.node.data.EffDt !== null)
                        return moment(params.node.data.EffDt).format('L');
                },
                menuTabs: [],
            },
        ];

        //detail grid options correspondence events
        scope.sitesDetailGridOptions = {
            enableSorting: true,
            enableFilter: true,
            enableColResize: true,
            //rowSelection: 'single',
            //onSelectionChanged: function (params) {
            //    console.log("selection changed!");
            //scope.sitesGridOptions.selectedItems = scope.sitesGridOptions.api.getSelectedRows();
            //scope.$apply(); //trigger angular to update our view since it doesn't monitor ag-grid
            //},
            //onFilterModified: function () {
            //    scope.sitesGridOptions.api.deselectAll();
            //},
            //selectedItems: [],
            //rowData: eventRecords,
            columnDefs: detailColumnDefs,
            //onGridReady: function (params) {
                //setTimeout(function () { params.api.sizeColumnsToFit(); }, 0);
            //},
            
            getRowHeight: function (params) {
                var file_height = 25 * (scope.getFilesArrayAsList(params.node.data.ItemFiles).length); //count up the number of file lines we will have.
                return (file_height > 25) ? file_height : 25;
            },
            
            //onRowClicked: function (row) {
            //console.dir(row);

            //    row.node.setSelected(true);
            //    console.log("detail selected!");
            //},
            //defaultColDef: {
            //    editable: true
            //},
            //enableRangeSelection: true
        };



        scope.sitesGridOptions = {
            masterDetail: true,
            detailCellRendererParams: {
                detailGridOptions: scope.sitesDetailGridOptions,
                getDetailRowData: function (params) {
                    params.successCallback(params.data.HabitatItems);
                },
            },

            animateRows: true,
            enableSorting: true,
            enableFilter: true, 
            enableColResize: true,
            showToolPanel: false,
            columnDefs: scope.sitesColumnDefs,
            rowData: null,
            //filterParams: { apply: true }, //enable option: doesn't do the filter unless you click apply
            //debug: true,
            rowSelection: 'single',
            onSelectionChanged: function (params) {
                console.log("selection changed fired!");
                
                var rows = scope.sitesGridOptions.api.getSelectedRows();

                if (Array.isArray(rows) && rows[0] != null)
                {
                    console.log("rows:");
                    console.dir(rows);
                }
                
            },
            //onFilterModified: function () {
            //    scope.sitesGridOptions.api.deselectAll();
            //},
            selectedItems: [],
            //isFullWidthCell: function (rowNode) {
            //    return rowNode.level === 1;
            //},
            onGridReady: function (params) {
                //params.api.sizeColumnsToFit();
            },
            //fullWidthCellRenderer: CorrespondenceDetailCellRenderer,
            /*
            getRowHeight: function (params) {
                var rowIsDetailRow = params.node.level === 1;
                // return dynamic height when detail row, otherwise return 25
                if (rowIsDetailRow) {
                    return 300;
                } else {
                    var comment_length = (params.data.Comments === null) ? 1 : params.data.Comments.length;
                    return 25 * (Math.floor(comment_length / 45) + 1); //base our detail height on the comments field.
                }
                //return rowIsDetailRow ? 200 : 25;
            },
            */
            /*
            getNodeChildDetails: function (record) {
                //console.dir(record);
                if (record.HabitatItems) {
                    //console.log("yep we have events!");
                    return {
                        group: true,
                        // the key is used by the default group cellRenderer
                        key: record.CorrespondenceDate,
                        // provide ag-Grid with the children of this group
                        parentData: record,
                        children: [record.HabitatItems],
                    };
                } else {
                    //console.log("didn't find any correspondence events for that record.");
                    return null;
                }
            },*/
            onRowDoubleClicked: function (row) {
                scope.sitesGridOptions.api.collapseAll();
                row.node.setSelected(true);
                row.node.setExpanded(true);
            },
            onRowClicked: function (row) {
                row.node.setSelected(true);
            },
        };




        //do we need this? was set when the project was loaded
        /*************************************************************/
        // Need this section for the subprojects in Habitat and CRPP to work properly.
        //scope.subprojectType = $rootScope.subprojectType = ProjectService.getProjectType(scope.project.Id);
        //console.log("scope.subprojectType = " + scope.subprojectType);
        //SubprojectService.setServiceSubprojectType(scope.subprojectType);
		/*************************************************************/




        //watch the project on the parent-detail page to load... once it does, check to see if we should show our tab
        var sites_ds_watcher = scope.$parent.$watch('project', function () {
            //console.log("Inside TAB SITES watch project... --------------------------");

            if (typeof scope.project === 'undefined' || typeof scope.project.Id === 'undefined')
                return;

            sites_ds_watcher(); //turn off the watcher.

            //console.log("Woohoo! are we habitat project?");
            //console.dir(scope.project);
                
            if (scope.isHabitatProject(scope.project)) {
                console.log("Turning on Sites tab because we are a habitat project...");
                scope.$parent.ShowHabitat = true; //need to update parent scope for the map to show.

                $timeout(function () {

                    var ag_grid_div = document.querySelector('#hab-sites-grid');    //get the container id...
                    //console.dir(ag_grid_div);
                    scope.ag_grid = new agGrid.Grid(ag_grid_div, scope.sitesGridOptions); //bind the grid to it.
                    scope.sitesGridOptions.api.showLoadingOverlay(); //show loading...

                    scope.subprojectList = SubprojectService.getProjectSubprojects(scope.project.Id); //the habitat subprojects
                    //console.log("Fetching Habitat subprojects...");

                    //ok let's watch for when the subprojects come back and we can load the other things we need.
                    var watcher = scope.$watch('subprojectList.length', function () {
                        if (scope.subprojectList === undefined || scope.subprojectList == null)
                            return;

                        //console.log("our subproject list is back! we have " + scope.subprojectList.length + " of them.");

                        //if there are no subprojects then don't show any points on the map.
                        if (scope.subprojectList.length === 0) {
                            if (scope.map && scope.map.locationLayer && scope.map.locationLayer.hasOwnProperty('showLocationsById')) {
                                //scope.map.locationLayer.showLocationsById(scope.thisProjectsLocationObjects); //bump and reload the locations.
                                // Note:  If we sent an empty list, it pulls all the locations.
                                // If we supply an Id that we know does not exist (0), we get no locations, which is what we want.
                                scope.map.locationLayer.showLocationsById(0); //
                            }
                            return;
                        }

                        //build the grid based on our subprojects
                        scope.sitesGridOptions.api.setRowData(scope.subprojectList);

                        //console.log("ok now firing off the habitat subproject parts loading...");
                        scope.refreshSubprojectLists();

                        watcher();
                    });
                },0);

            } else {
                console.log(" we are NOT a habitat project so no Sites tab.");
            }

        }, true);


        scope.matchLocationsToSubprojects = function () {

            scope.thisProjectsLocationObjects = []; // Dump this list, before refilling it.
            angular.forEach(scope.subprojectList, function (subproject) {

                angular.forEach(scope.project.Locations, function (location, key) {
                    //console.log("location key = " + key);
                    //console.log("location is next...");
                    //console.dir(location);

                    // We will show the Primary Project Location, and the locations of the subprojects.
                    //if ((location.LocationTypeId === 3) || (subproject.Id === location.SubprojectId))
                    //console.log("location.LocationTypeId = " +  location.LocationTypeId + ", subproject.LocationId = " + subproject.LocationId + ", location.Id = " + location.Id);
                    if (subproject.LocationId === location.Id) {
                        //console.log("Found a subproject location")
                        //console.dir(location);
                        scope.thisProjectsLocationObjects.push(location.SdeObjectId);
                        subproject.GPSEasting = location.GPSEasting;
                        subproject.GPSNorthing = location.GPSNorthing;
                        subproject.UTMZone = location.UTMZone;
                        subproject.Projection = location.Projection;
                        subproject.WaterBodyId = location.WaterBodyId;
                    }
                });
            });
            if(scope.map !== undefined)
                scope.map.locationLayer.showLocationsById(scope.thisProjectsLocationObjects); //bump and reload the locations.
        };

        //looks like we will need a version of this over on the crpp correspondence tab. TODO:kb 11/21/17
        scope.matchFilesToSubproject = function () {

            //console.log("ok matching files: ");
            //console.dir(scope.project.SubprojectFileList);

            angular.forEach(scope.subprojectList, function (subproject) {

                angular.forEach(scope.project.SubprojectFileList, function (spFile) {
                    //if (subproject.Id === spFile.SubprojectId)
                    //if (subproject.Id === spFile.Subproject_CrppId)
                    if ((subproject.Id === spFile.Subproject_CrppId) && (spFile.FeatureImage === 1)) {
                        //angular.forEach(scope.project.Files, function(pFile){
                        //	if (pFile.Id === spFile.FileId)
                        //		subproject.ItemFiles = angular.copy(pFile);
                        //});
                        if (!subproject.ItemFiles) {
                            subproject.ItemFiles = [];
                            subproject.ItemFiles.push(spFile);
                        }
                        else
                            subproject.ItemFiles = angular.copy(spFile);

                        //scope.viewSubproject.ItemFiles = subproject.ItemFiles;
                        //console.log("Matched subproject file...");
                    }
                });
            });

            $rootScope.SubprojectFileList = scope.project.SubprojectFileList; //??
        };

        scope.matchFundersToSubproject = function () {
            //console.log("Inside controllers.js, scope.matchFundersToSubproject...");
            //console.dir(scope.project.FunderList);

            var strFunders = "";
            angular.forEach(scope.subprojectList, function (subproject) {
                strFunders = "";
                angular.forEach(scope.project.FunderList, function (funder) {
                    if (funder.SubprojectId === subproject.Id) {
                        strFunders += funder.Name + ", " + funder.Amount + ";\n";
                    }
                });
                subproject.strFunders = strFunders;
            });
        };

        scope.matchCollaboratorToSubproject = function () {
            //console.log("Inside controllers.js, scope.matchCollaboratorToSubproject...");
            //console.dir(scope.project.CollaboratorList);

            var strCollaborators = "";
            angular.forEach(scope.subprojectList, function (subproject) {
                strCollaborators = "";
                angular.forEach(scope.project.CollaboratorList, function (collaborator) {
                    if (collaborator.SubprojectId === subproject.Id) {
                        strCollaborators += collaborator.Name + ";\n";
                    }
                });
                subproject.strCollaborators = strCollaborators;
            });
        };


        //open the habitat item form for creating (if hi_row is {}) or editing (if hi_row is the habitat item)
        scope.openHabitatItemForm = function (subproject, hi_row) {
            //console.log("Inside openHabitatItemForm...")
            //console.dir(scope);

            scope.viewSubproject = subproject;
            scope.hi_row = hi_row;

            var modalInstance = $modal.open({
                templateUrl: 'app/private/habitat/components/habitat-sites/templates/modal-new-habitatItem.html',
                controller: 'ModalAddHabitatItemCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        scope.openGeospatialDataPage = function () {
            //console.log("Inside openGeospatialDataPage...");

            var strUrl = "http://ctuirgis.maps.arcgis.com/apps/webappviewer/index.html?id=1669df9b26874c9eb49cc41ec4d57ec5";
            //var strWindowFeatures = "location=yes,height=570,width=520,scrollbars=yes,status=yes";			
            var strWindowFeatures = "location=yes,scrollbars=yes,status=yes";
            $window.open(strUrl, "_blank", strWindowFeatures);
        };



        //if you are creating a new one for the project, the ce_row should be empty {}
        // if you are editing an existing one, send in the project and the ce_row.
        scope.openCorrespondenceEventForm = function (subproject, ce_row) {
            //console.log("Inside openCorrespondenceEventForm...")

            scope.viewSubproject = subproject;
            //console.log("ok subproject set: ");
            //console.dir(scope.viewSubproject);

            scope.ce_row = ce_row;

            var modalInstance = $modal.open({
                templateUrl: 'app/private/crpp/components/crpp-contracts/templates/modal-new-correspondenceEvent.html',
                controller: 'ModalAddCorrespondenceEventCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        //after we remove one in the modal, call here to update the grid.
        scope.postRemoveHabitatSubprojectUpdateGrid = function () {
            //the scope.viewSubproject is the one we removed.
            //console.log("ok - we removed one so update the grid...");

            scope.subprojectList.forEach(function (item, index) {
                if (item.Id === scope.viewSubproject.Id) {
                    scope.subprojectList.splice(index, 1);
                    //console.log("ok we removed :" + index);
                    //console.dir(scope.subprojectList[index]);
                    scope.sitesGridOptions.api.setRowData(scope.subprojectList);
                    //scope.sitesGridOptions.api.redrawRows();
                    //console.log("done reloading grid.");
                }
            });
        };

        //called by the modal once the habitat item is successfully saved.
        scope.postEditHabitatItemUpdateGrid = function (edited_item) {
            //console.log("postEditHabitatItemUpdateGrid..." + edited_item.Id + " for subproject " + edited_item.SubprojectId);

            //edit our correspondence item and then reload the grid.
            scope.subprojectList.forEach(function (item, index) {
                if (item.Id === edited_item.SubprojectId) {
                    item.EffDt = moment(new Date()).format() + ""; //touch the effdt to bump the sort. - this was already updated in the be
                    item.HabitatItems.forEach(function (hab_item, hab_item_index) {
                        if (hab_item.Id === edited_item.Id) {
                            angular.extend(hab_item, edited_item); //replace the data for that item
                            //console.log("OK!! we edited that habitat item");
                        }
                    });
                }
            });

            scope.sitesGridOptions.api.setRowData(scope.subprojectList);

            //after we setRowData, the grid collapses our expanded item. we want it to re-expand that item and make sure it is visible.
            var the_node = scope.expandSubProjectById(edited_item.SubprojectId);
            if (the_node != null)
                scope.sitesGridOptions.api.ensureNodeVisible(the_node);

            console.log("done reloading grid after removing item.");

        };

        //called by the modal once a habitat item is saved
        scope.postAddHabitatItemUpdateGrid = function (new_item) {
            //console.dir(new_item);
            //console.log("saving habitat item for " + new_item.SubprojectId);

            var subproject = getById(scope.subprojectList, new_item.SubprojectId);

            if (subproject === undefined || subproject == null) { //TODO: the case where they create items before the proejct is saved?
                console.log("no subproject...");
            } else {
                scope.subprojectList.forEach(function (item, index) {
                    if (item.Id === subproject.Id) {
                        item.EffDt = moment(new Date()).format() + ""; //touch the effdt to bump the sort - this was already updated in the be
                        item.HabitatItems.push(new_item);
                        console.log("Added item " + new_item.Id + " to " + subproject.Id);
                    }
                });
                scope.sitesGridOptions.api.setRowData(scope.subprojectList);

                //after we setRowData, the grid collapses our expanded item. we want it to re-expand that item and make sure it is visible.
                var the_node = scope.expandSubProjectById(subproject.Id);
                if (the_node != null)
                    scope.sitesGridOptions.api.ensureNodeVisible(the_node);

                console.log("done reloading grid after removing item.");
            }
        };

        //returns the (last) node or null if none found.
        scope.expandSubProjectById = function (id_in) {
            var the_node = null;
            scope.sitesGridOptions.api.forEachNode(function (node) {
                if (node.data.Id === id_in) {
                    //console.log("Expanding! " + id_in);
                    node.setExpanded(true);
                    the_node = node;
                }
            });
            return the_node;
        };

        scope.removeHabitatFileItem = function (subproject, item) {
            $scope.remove = function () {
                //console.log("Inside ModalAddHabitatItemCtrl, remove...");
                //console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
                //console.log("$scope.hi_row is next...");
                //console.dir($scope.hi_row);
                $scope.hi_rowId = $scope.hi_row.Id;

                $scope.verifyAction = "Delete";
                $scope.verifyingCaller = "HabitatItem";
                //console.log("scope.verifyAction = " + scope.verifyAction);

                $scope.verifyActionFormOpen = "Yes";

                if (confirm('Are you sure that you want to delete this Habitat Item?')) {
                    //SubprojectService.removeSubproject($scope.project.Id, $scope.viewSubproject.Id);

                    //var promise = SubprojectService.removeCorrespondenceEvent($scope.project.Id, $scope.viewSubproject.Id, $scope.ce_rowId);
                    //var promise = SubprojectService.removeHabitatItem($scope.project.Id, $scope.viewSubproject.Id, $scope.hi_rowId, $scope.DatastoreTablePrefix);
                    var promise = SubprojectService.removeHabitatItem($scope.project.Id, $scope.viewSubproject.Id, $scope.hi_rowId);

                    promise.$promise.then(function () {
                        $scope.subprojects = null;

                        // If we were down in the list of subprojects (sites) somewhere, and we removed a Habitat Item
                        // -- perhaps we entered it in error on the wrong Subproject (site) -- 
                        // we would want that item to pop to the top; all updated items to go the top (most recent).
                        // Therefore we must reload all the subprojects to pop it to the top, not just this project.
                        //$scope.reloadThisProject();

                        $scope.reloadSubprojects(); // Need to reload ALL the subprojects, so that this one will pop to the top.
                        //$scope.viewSelectedSubproject(); // Don't run this just yet, because the project has not re-loaded yet.
                        $("#habitatItems").load("habitatItems.html #habitatItems");
                        $modalInstance.dismiss();
                    });
                }
            };
        };

        //removes the habitat item and then updates the grid
        scope.removeHabitatFileItem = function (subproject, in_item) {
            //console.log("removeHabitatFileItem..." + in_item.Id + " for subproject " + subproject.Id);

            if (confirm('Are you sure that you want to delete this Habitat Item?')) {
                var promise = SubprojectService.removeHabitatItem(scope.project.Id, subproject.Id, in_item.Id, scope.DatastoreTablePrefix);

                promise.$promise.then(function () {
                    //remove from our subprojectList and then reload the grid.
                    scope.subprojectList.forEach(function (item, index) {
                        if (item.Id === subproject.Id) {
                            item.HabitatItems.forEach(function (hab_item, hab_item_index) {
                                if (hab_item.Id === in_item.Id) {
                                    item.HabitatItems.splice(hab_item_index, 1);
                                    //console.log("OK!! we removed that habitat item");
                                }
                            });
                        }
                    });
                    scope.sitesGridOptions.api.setRowData(scope.subprojectList);

                    //after we setRowData, the grid collapses our expanded item. we want it to re-expand that item and make sure it is visible.
                    var the_node = scope.expandSubProjectById(subproject.Id);
                    if (the_node != null)
                        scope.sitesGridOptions.api.ensureNodeVisible(the_node);

                    console.log("done reloading grid after removing item.");
                });
            }
        };



        scope.removeHabitatSubproject = function (subproject) {
            //console.log("Inside removeHabitatSubproject, scope is next...");

            if (!subproject)
                return;

            scope.viewSubproject = subproject;

            //console.log("removing scope.projectId = " + scope.projectId);
            if (scope.viewSubproject.HabitatItems.length > 0) {
                alert("This project has associated Habitat items.  Those must be deleted first.");
            }
            else {
                scope.verifyAction = "Delete";
                scope.verifyingCaller = "HabSubproject";
                //console.log("scope.verifyAction = " + scope.verifyAction + ", scope.verifyingCaller = " + scope.verifyingCaller + ", scope.viewSubproject.Id = " + scope.viewSubproject.Id);
                var modalInstance = $modal.open({
                    templateUrl: 'app/core/common/components/modals/templates/modal-verifyAction.html',
                    controller: 'ModalVerifyActionCtrl',
                    scope: scope, //very important to pass the scope along...
                });
            }
            
        };

        scope.createHabSubproject = function () {
            scope.viewSubproject = null;
            scope.createNewSubproject = true;
            //scope.subprojectList = null;
            scope.subprojectOptions = null;
            //console.log("scope.createNewSubproject = " + scope.createNewSubproject);
            var modalInstance = $modal.open({
                templateUrl: 'app/private/habitat/components/habitat-sites/templates/modal-create-habSubproject.html',
                controller: 'ModalCreateHabSubprojectCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        

        //refresh all of the project match lists
        scope.refreshSubprojectLists = function () {
            // Call the functions that will build the list of funders, and list of files related to the project.
            // We add the items from these lists to the subproject -- as the data comes in.
            scope.project.SubprojectFileList = SubprojectService.getSubprojectFiles(scope.projectId);
            scope.project.FunderList = ProjectService.getProjectFunders(scope.projectId);
            scope.project.CollaboratorList = ProjectService.getProjectCollaborators(scope.projectId);

            //this one we can start right away since project locations are loaded with the project.
            scope.matchLocationsToSubprojects();

            //do each match as the list finishes loading...
            scope.project.SubprojectFileList.$promise.then(function () {
                //console.log(" -- ok done loading now matching SubprojectFileList for " + scope.project.SubprojectFileList.length);
                scope.matchFilesToSubproject();
            });

            scope.project.FunderList.$promise.then(function () {
                //console.log(" -- ok done loading now matching FunderList for " + scope.project.FunderList.length);
                scope.matchFundersToSubproject();
            });

            scope.project.CollaboratorList.$promise.then(function () {
                //console.log(" -- ok done loading now matching CollaboratorList for " + scope.project.CollaboratorList.length);
                scope.matchCollaboratorToSubproject();
            });
        };

        //fired after a user saves a new or edited project.
        // we update the item in the main subproject array and then refresh the grid.
        scope.postSaveHabitatSubprojectUpdateGrid = function (the_promise) {
            //console.log("ok - we saved so update the grid...");
            var total = scope.subprojectList.length;
            var count = 0;
            var updated = false;
            scope.subprojectList.forEach(function (item, index) {
                if (item.Id === the_promise.Id) {
                    updated = true;

                    //console.log("ok we found a match! -- updating! before:");
                    //console.dir(scope.subprojectList[index]);

                    if (the_promise.HabitatItems !== undefined)
                        delete the_promise.HabitatItems; //remove this before the copy.

                    angular.extend(scope.subprojectList[index], the_promise); //replace the data for that item
                    //console.log("ok we found a match! -- updating! after:");
                    //console.dir(scope.subprojectList[index]);
                    scope.sitesGridOptions.api.redrawRows();
                    //console.log("done reloading grid.");
                }
                count++;
                if (count == total && updated == false) //if we get all done and we never found it, lets add it to the end.
                {
                    //console.log("ok we found never a match! -- adding!");
                    the_promise.HabitatItems = [];
                    the_promise.Files = [];
                    scope.subprojectList.push(the_promise); //add that item
                    scope.sitesGridOptions.api.setRowData([]);
                    scope.sitesGridOptions.api.setRowData(scope.subprojectList);

                    //console.log("done reloading grid.");
                }
            });

            console.log("updated the list and the grid... now refreshing the habitat lists");
            scope.refreshSubprojectLists(); //funders, collaborators, etc.

        };

        /*
        scope.viewSelectedSubproject = function (subproject) {
            console.log("Inside controllers.js, scope.viewSelectedSubproject");

            //console.log("subproject is next...");
            //console.dir(subproject);

            ////console.log("scope is next...");
            ////console.dir(scope);
            if (scope.viewSubproject) {
                console.log("scope.viewSubproject exists...");
                delete scope.viewSubproject;
            }

            //console.log("subproject is next...");
            //console.dir(subproject);
            if ((typeof subproject !== 'undefined') && (subproject !== null)) {
                // Need to verify that these two $rootScope variables are set.
                //$rootScope.DatastoreTablePrefix = scope.DatastoreTablePrefix;
                $rootScope.viewSubproject = scope.viewSubproject = angular.copy(subproject);

                //console.log("scope (in scope.viewSelectedSubproject) is next...");
                //console.dir(scope);			
                console.log("scope.viewSubproject (in scope.viewSelectedSubproject) is next...");
                //console.dir(scope.viewSubproject);
                console.log("scope.viewSubproject.ProjectName (in scope.viewSelectedSubproject) = " + scope.viewSubproject.ProjectName);
                $rootScope.subprojectId = scope.viewSubproject.Id;
            }
        };

        */
        scope.addSubproject = function () {
            console.log("Inside controllers.addSubproject.");
            //console.log("scope is next...");
            //console.dir(scope);
            //console.log("scope.selectedSubproject is next...");
            //console.dir(scope.selectedSubproject);

            if (!scope.selectedSubproject || scope.selectedSubproject === null || getMatchingByField(scope.project.CrppSubProjects, scope.selectedSubproject, 'Id').length > 0)
                return;

            var theSubproject = getMatchingByField(scope.correspondenceProjectList, scope.selectedSubproject, 'Id');

            var promise = SubprojectService.saveSubproject(scope.project.Id, theSubproject[0]);

            promise.$promise.then(function () {
                scope.reloadProject();
            });
        };



        scope.editHabitatSubproject = function (subproject) {

            //console.log("Inside editHabitatSubproject...");

            scope.viewSubproject = subproject; //set this var for the modal controller.

            var modalInstance = $modal.open({
                templateUrl: 'app/private/habitat/components/habitat-sites/templates/modal-create-habSubproject.html',
                controller: 'ModalCreateHabSubprojectCtrl',
                scope: scope, //very important to pass the scope along...
            });
        };

        //spin through subprojects and make a list of the locations that belong to one
        // then refresh the map.
        scope.reloadSubprojectLocations = function () {
            console.log("maybe not used?");
            console.log("Inside controllers.js, projectDatasetsController, scope.reloadSubprojectLocations...");

            scope.thisProjectsLocationObjects = []; // Dump this list, before refilling it.
            angular.forEach(scope.subprojectList, function (subproject) {
                angular.forEach(scope.project.Locations, function (location, key) {
                    //console.log("location key = " + key);
                    //console.log("location is next...");
                    //console.dir(location);

                    if (subproject.LocationId === location.Id)
                        scope.thisProjectsLocationObjects.push(location.SdeObjectId);

                });
            });
            //console.log("scope.thisProjectsLocationObjects is next...");
            //console.dir(scope.thisProjectsLocationObjects);

            if (scope.thisProjectsLocationObjects.length > 0) {
                if (scope.map && scope.map.locationLayer && scope.map.locationLayer.hasOwnProperty('showLocationsById'))
                    scope.map.locationLayer.showLocationsById(scope.thisProjectsLocationObjects); //bump and reload the locations.
            }
            //else
            //{
            //	scope.map.locationLayer.showLocationsById(0);
            //}
        };

        scope.redrawRows = function () {
            scope.sitesGridOptions.api.setRowData([]);
            setTimeout(function () { scope.sitesGridOptions.api.setRowData(scope.subprojectList); }, 4000);


            //console.log("redrawrows!");
        };

        scope.refreshCells = function () {
            scope.sitesGridOptions.api.refreshCells();
            //console.log("refreshcells!");
        };

        scope.refreshMemory = function () {
            scope.sitesGridOptions.api.refreshInMemoryRowModel('group');
            //console.log("redrawgroupmodel!");
        };

        //looks at the metadata setting to see if it is a habitat project
        scope.isHabitatProject = function(a_project)
        {
            return (a_project.MetadataValue[METADATA_PROPERTY_SUBPROGRAM]) === "Habitat";
        }

    }
];

define("private/habitat/components/habitat-sites/tab-sites", function(){});

// defines the habitat module

var habitat_module = angular.module('HabitatModule', ['ui.bootstrap', 'ngResource']);

require([
    //controllers
    'private/habitat/components/habitat-sites/modal-add-habitat-item',
    'private/habitat/components/habitat-sites/modal-create-habitat-subproject',
    'private/habitat/components/habitat-sites/tab-sites',
   

], function () {
    habitat_module.controller('ModalAddHabitatItemCtrl', modal_add_habitat);
    habitat_module.controller('ModalCreateHabSubprojectCtrl', modal_create_habitat_subproject);
    habitat_module.controller('TabSitesController', tab_sites);

});




define("private/habitat/habitat-module", function(){});

var appraisal_activities = ['$scope', '$route', '$routeParams', 'DatasetService', '$modal', '$location', '$window', '$rootScope', 'ProjectService',
    'CommonService','PreferencesService',
    	function ($scope, $route, $routeParams, DatasetService, $modal, $location, $window, $rootScope, ProjectService,CommonService, PreferencesService) {
			console.log("Inside appraisalController...");
			console.log("$routeParams.Id = " + $routeParams.Id);
            $scope.dataset = DatasetService.getDataset($routeParams.Id);
            $scope.activities = DatasetService.getActivities($routeParams.Id);
            $scope.loading = true;
            $scope.project = null;
            $scope.saveResults = null;
            $scope.isFavorite = $rootScope.Profile.isDatasetFavorite($routeParams.Id);
            $scope.allActivities = null;
            $scope.headerdata = DatasetService.getHeadersDataForDataset($routeParams.Id);
            $scope.filteringActivities = false;
			$scope.startAppraisalDisabled = true;

            //console.log("Profile = ");
            //console.dir($rootScope.Profile);

            var linkTemplate = '<div class="ngCellText" ng-class="col.colIndex()">' + 
            				   '<a href="#/dataview/{{row.getProperty(\'Id\')}}">{{row.getProperty("ActivityDate") | date:\'MM/dd/yyyy\'}}</a>' +
            				   '</div>';

            var desclinkTemplate = '<div class="ngCellText" ng-class="col.colIndex()">' + 
                               '<a href="#/dataview/{{row.getProperty(\'Id\')}}">{{row.getProperty("Description") }}</a>' +
                               '</div>';

            var allotmentTemplate = '<div class="ngCellText" ng-class="col.colIndex()">' + 
                               '<a href="#/dataview/{{row.getProperty(\'Id\')}}">{{row.getProperty("headerdata.Allotment") }}</a>' +
                               '</div>';


            var QATemplate = '<div class="ngCellText" ng-class="col.colIndex()">{{QAStatusList[row.getProperty("ActivityQAStatus.QAStatusId")]}}</div>';

            //performance idea: if project-role evaluation ends up being slow, you can conditionally include here...
          	var editButtonTemplate = '<div project-role="editor" class="ngCellText" ng-class="col.colIndex()">' + 
            				   '<a href="#/edit/{{row.getProperty(\'Id\')}}">Edit</a>' +
            				   '</div>';

            $scope.columnDefs = [
                        {field:'ActivityDate', displayName:'Activity Date', cellTemplate: linkTemplate, width:'100px', visible: false},

                        {field:'headerdata.Allotment',displayName: 'Parcel Id', cellTemplate: allotmentTemplate, width: '140px'},
                        {field:'headerdata.AllotmentStatus',displayName: 'Status'},
                        {field:'headerdata.CobellAppraisalWave',displayName: 'Wave', width: '200px'},

                        {field:'headerdata.LastAppraisalRequestDate',displayName: 'Request Date', width: '200px', cellFilter: 'date'},

                        //{field:'Location.Label',displayName: 'Location'},
                    
                        {field:'User.Fullname',displayName: 'By User', width: '120px'},
                        {field:'QAStatus', displayName: 'QA Status', cellTemplate: QATemplate, width: '100px', visible: false},
                        {field:'Actions',displayName: '', cellTemplate: editButtonTemplate, width: '40px'},

                    ];

            $scope.showFilter = false;

            $scope.selectedActivity = [];

			/*******************
			* Some notes about sorting with the gridOptions below.
			* Referring to the sortInfo line, Angular sorts weirdly.
			* Rather than a true numeric, or true alphabetic sort, it ignors the letters, and sorts the allotments 
			* in true numeric order.  While incorrect, it is at least somewhat helpful, and predictable.
			* After noticing this oddity, the work-around is a training issue.
			* To fix this issue, this page (http://stackoverflow.com/questions/30873468/sortinfo-does-not-work) indicates 
			* that we do not have the sortInfo line set up correctly.  However, uiGridConstants causes Angular to barf.
			* I (gc) am thinking that we need a newer version of Angular for this to work.  We have 1.2.13.
			*/
            $scope.gridOptionsFilter = {};
            $scope.gridOptions = {
            	data: 'activities',
                selectedItems: $scope.selectedActivity,
            	showColumnMenu: true,
                sortInfo: {fields:['headerdata.Allotment'], directions: ['desc']},
            	columnDefs: 'columnDefs',
                filterOptions: $scope.gridOptionsFilter,
                multiSelect: false,

            };
			
            $scope.$watch('dataset.Fields', function() { 
                if(!$scope.dataset.Fields ) return;
				
				console.log("Inside appraisalController, watch dataset.Fields...");
				$rootScope.datasetId = $scope.dataset.Id;
				
                //load our project based on the projectid we get back from the dataset
                $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
				$scope.dataset.Files = DatasetService.getDatasetFiles($scope.dataset.Id);
                $scope.QAStatusList = makeObjects($scope.dataset.QAStatuses, 'Id','Name');

				$rootScope.DatastoreTablePrefix = $scope.DatastoreTablePrefix = $scope.dataset.Datastore.TablePrefix;
				console.log("$scope.DatastoreTablePrefix = " + $scope.DatastoreTablePrefix);
            });
			
            $scope.$watch('project.Name', function(){
                if($scope.project && $scope.project.$resolved){
                    $scope.reloadProjectLocations();
					
					$rootScope.projectId = $scope.project.Id;
                }
            });

            $scope.$watch('activities.$resolved', function(){ 
                $scope.loading = true;
                if($scope.activities && $scope.activities.$resolved)
                {

                    if(!$scope.allActivities)
                       $scope.allActivities = $scope.activities;

                    $scope.loading = false;
                    
                    if($scope.activities.length > 0)
                    {
						console.log("$scope.gridOptions is next...");
                        $scope.gridOptions.ngGrid.data.$promise.then(function(){
                            $rootScope.GridActivities = $scope.gridOptions.ngGrid.data;
                        });
						$scope.startAppraisalDisabled = true;
                    }
					else
					{
						$scope.startAppraisalDisabled = false;
					}

                }

                //turn off the wheel of fishies
                if(typeof $scope.activities.$resolved == "undefined")
                    $scope.loading = false;
                
            });

            //Maybe there is a better way?!
            $scope.activities.$promise.then(function(){
                $scope.headerdata.$promise.then(function(){
                    angular.forEach($scope.activities, function(activity, key){
                        activity.headerdata = getByField($scope.headerdata, activity.Id, "ActivityId");
                    });
                });
				console.log("$scope at end of activities.$promise...");
				//console.dir($scope);
            });
			
			// Someone clicks on an item in the grid.
            // When someone clicks an item in the grid, angular will add it to the selectedItems array, so we watch that.
            $scope.$watch('gridOptions.selectedItems', function(){

                if(!$scope.gridOptions.selectedItems || $scope.gridOptions.selectedItems.length == 0 )
                    return;

                //if clicked on the already selected one, do nothing.
                if($scope.map.selectedFeature && 
                    $scope.map.selectedFeature.attributes.OBJECTID == $scope.gridOptions.selectedItems[0].Location.SdeObjectId)
                {
                    return;
                }

                $scope.map.selectedFeature = undefined;
                $scope.map.loading = true;
				$scope.startAppraisalDisabled = true; // Disable the Start Appraisal button

  //              console.log("clicked a grid item.  querying for: ");
//                console.dir($scope.gridOptions.selectedItems[0].Location.SdeObjectId);
                var selectedAppraisal = $scope.gridOptions.selectedItems[0];
                $scope.clearAll();
                $scope.map.querySelectParcel(null,selectedAppraisal.Location.SdeObjectId, function(features){
                    $scope.map.loading = false;
                    if (features.length == 0) { 
                          //alert('No parcel polygon found that matches that appraisal.');
                          return;
                    };

                    $scope.map.addParcelToMap(features[0]);
                    $scope.map.centerAndZoomToGraphic($scope.map.selectedGraphic).then(function(){
                        //show the infowindow
                        $scope.map.infoWindow.resize(250, 300);
                        $scope.map.infoWindow.setContent($scope.getInfoWindowContent(features[0]));
                        $scope.map.infoWindow.show($scope.map.selectedGraphic.geometry.getExtent().getCenter());    
                    });

                    $scope.$apply();
                });

            },true);

            //someone clicks search on the Search button
            $scope.parcelSearch = function()
            {
                if(!$scope.parcelSearchText)
                    return;

                $scope.hasResults = true;
                $scope.map.searchResults = [];
                $scope.map.searchMessage = "Searching...";

                $scope.map.querySearchParcel($scope.parcelSearchText, function(features){
                    if(features.length == 0)
                    {
                        $scope.map.searchMessage = "No results found.";
                    }
                    else
                    {
                        angular.forEach(features, function(feature){
                            $scope.map.searchResults.push(feature.attributes);
                        });
                    }
                    $scope.$apply();
                    
                });
				$scope.startAppraisalDisabled = true; // Disable the Start Appraisal button
            }

            //when someone clicks an item in the returned list of parcels
            $scope.selectParcel = function(parcelObjectId)
            {
                $scope.map.loading = true;
                $scope.clearAll();
                $scope.map.querySelectParcel(null,parcelObjectId, function(features){
                    $scope.map.loading = false;
                    if (features.length == 0) { 
                          alert('No parcel polygon found that matches that allotment.');
                          return;
                    };

                    $scope.map.addParcelToMap(features[0]);
                    $scope.map.centerAndZoomToGraphic($scope.map.selectedGraphic).then(function(){
                        //show the infowindow
                        $scope.map.infoWindow.resize(250, 300);
                        $scope.map.infoWindow.setContent($scope.getInfoWindowContent(features[0]));
                        $scope.map.infoWindow.show($scope.map.selectedGraphic.geometry.getExtent().getCenter());    
                    });

					$scope.startAppraisalDisabled = true; // Disable the Start Appraisal button
                    $scope.$apply();
                    
                });
            };

            $scope.clearAll = function()
            {
                $scope.activities = $scope.allActivities;
                $scope.filteredActivities = undefined;
                $scope.map.clearGraphics();
                $scope.map.infoWindow.hide();
                $scope.map.selectedFeature = undefined;
                $scope.filteringActivities = false;
				$scope.startAppraisalDisabled = true;
            };
            
            // expose a method for handling clicks ON THE MAP - this is linked to from the Map.js directive
            $scope.click = function(e){
                $scope.map.loading = true;
                $scope.clearAll();
                $scope.map.reposition(); //this is important or else we end up with our map points off somehow.

                $scope.map.querySelectParcel(e.mapPoint, null, function(features){
                    if (features.length == 0) { 
                      alert('No parcel found at that location.');
                      $scope.map.loading = false;
                      $scope.$apply(); //bump angular
                      return;
                    };

                    $scope.map.addParcelToMap(features[0]);

                    //show the infowindow
                    $scope.map.infoWindow.resize(250, 300);
                    $scope.map.infoWindow.setContent($scope.getInfoWindowContent(features[0]));
                    $scope.map.infoWindow.show($scope.map.selectedGraphic.geometry.getExtent().getCenter());

                    var objectid = $scope.map.selectedFeature.attributes.OBJECTID;
                    console.log("Found objectid: " + objectid);	

                    $scope.filteredActivities = [];

                    //now select the item in the grid
                    angular.forEach($scope.allActivities, function(item, index){

                        if(item.Location.SdeObjectId == objectid){
                            $scope.filteredActivities.push(item);                       
                        }
                    });

                    
                    $scope.activities = $scope.filteredActivities;
					console.log("$scope.activities is next...");
					console.dir($scope.activities);
					
					if ($scope.activities.length === 0)
					{
						$scope.startAppraisalDisabled = false;  // Enable the Start Appraisal button
						//console.log("$scope.startAppraisalDisabled (in $scope.click) = " + $scope.startAppraisalDisabled);
					}
					
                    $scope.filteringActivities = true; //need this because we also filter to empty...
                    $scope.map.loading = false;
                    $scope.$apply(); //bump angular

                });
            };
          
            //start a new appraisal record (really just an activity data entry for appraisal dataset)
            $scope.newRecord = function()
            {
                //create a new location from the map feature selected
                var new_location = {
                    LocationTypeId: LOCATION_TYPE_APPRAISAL,
                    SdeFeatureClassId: SDE_FEATURECLASS_TAXLOTQUERY,
                    SdeObjectId: $scope.map.selectedFeature.attributes.OBJECTID,
                    Label: $scope.map.selectedFeature.attributes.PARCELID,

                };
                

                var promise = CommonService.saveNewProjectLocation($scope.project.Id, new_location);
                promise.$promise.then(function(){ 
                   console.log("done and success!");

                   //reload the project locations and spin through to grab our new locationId for the one we just created.
                   $scope.refreshProjectLocations();
                   $scope.project.$promise.then(function(){
                        //grab our new locationId
                        var location = getByField($scope.project.Locations, $scope.map.selectedFeature.attributes.OBJECTID,"SdeObjectId");
                        var acres = $scope.map.selectedFeature.attributes.ACRES_GIS;
                        
                        //bounce the user to the data entry form with that location selected.
                        $location.path("/dataentryform/"+$scope.dataset.Id).search({LocationId: location.Id, Allotment: location.Label, Acres: acres});
                   });
                    
                   
                });

            };

            $scope.toggleFavorite = function(){
                $scope.isFavorite = !$scope.isFavorite; //make the visible change instantly.
                
                $scope.results = {};

                $rootScope.Profile.toggleDatasetFavorite($scope.dataset);
                
                PreferencesService.saveUserPreference("Datasets", $rootScope.Profile.favoriteDatasets.join(), $scope.results);

                var watcher = $scope.$watch('results', function(){
                    if($scope.results.done)
                    {
                        //if something goes wrong, roll it back.
                        if($scope.results.failure)
                        {
                            $scope.isFavorite = !$scope.isFavorite; 
                            $rootScope.Profile.toggleDatasetFavorite($scope.dataset);
                        }
                        watcher();
                    }
                },true);
                

            };    

            $scope.refreshProjectLocations = function(){
                ProjectService.clearProject();
                $scope.project = null;
                $scope.project = ProjectService.getProject($scope.dataset.ProjectId);
            };

            $scope.reloadProjectLocations = function(){
				console.log("Inside Appraisal-controller.js, $scope.reloadProjectLocations...");

                $scope.locationsArray = getMatchingByField($scope.project.Locations,LOCATION_TYPE_APPRAISAL,"LocationTypeId");

                $scope.locationObjectIds = getLocationObjectIdsByType(LOCATION_TYPE_APPRAISAL,$scope.project.Locations);
				console.log("$scope.locationObjectIds is next...");
				console.dir($scope.locationObjectIds);

				//console.log("$scope.map is next...");
				//console.dir($scope.map);
				//console.log("$scope.map.locationLayer is next...");
				//console.dir($scope.map.locationLayer);
                if($scope.map && $scope.map.locationLayer && $scope.map.locationLayer.hasOwnProperty('showLocationsById'))
                    $scope.map.locationLayer.showLocationsById($scope.locationObjectIds); //bump and reload the locations.

                //console.log("Project locations loaded!");

            };      

            $scope.reloadActivities = function(){
                $scope.activities = DatasetService.getActivities($routeParams.Id);
            };

            $scope.openQueryWindow = function(p) {
            	$location.path("/datasetquery/"+$scope.dataset.Id);
            };

            $scope.openDetailsWindow = function(p) {
            	$location.path("/dataset-details/"+$scope.dataset.Id);
            };
            
            $scope.deleteActivities = function() {
                $scope.saveResults = {};
                if(!confirm("Are you sure you want to delete this allotment?  There is no undo for this operation."))
                    return;

                DatasetService.deleteActivities($rootScope.Profile.Id, $scope.dataset.Id, $scope.gridOptions, $scope.saveResults);
                var deleteWatcher = $scope.$watch('saveResults', function(){
                    if($scope.saveResults.success)
                    {
                        $scope.activities = undefined;
                        $route.reload();
                    }
                    else if($scope.saveResults.failure)
                    {
                        deleteWatcher();
                        console.log("failure! there was a problem deleting a record...");
                    }
                },true);
            };

			$scope.openDataEntry = function (p) { $location.path("/dataentry/"+$scope.dataset.Id);	};

            

            //This is very specific to this appraisal page... might be nice to make this pluggable or something. --even just use a partial?
            $scope.getInfoWindowContent = function(feature)
            {
                var attributes = feature.attributes;
                var location = getByField($scope.locationsArray,feature.attributes.OBJECTID,"SdeObjectId"); //is there already a location for this OBJECTID?

                if(location)
                    var allotment = getByField($scope.activities,location.Id,"LocationId"); //is there already an allotment associated with this location?

                $scope.map.infoWindow.setTitle(feature.attributes.PARCELID);

                var html = "";
                
                if(allotment && allotment.headerdata.CobellAppraisalWave)
                    html += "<b>Wave: </b>" + allotment.headerdata.CobellAppraisalWave + "<br/>";
                if(allotment && allotment.headerdata.AllotmentStatus)
                    html += "<b>Appraisal Status: </b>" + allotment.headerdata.AllotmentStatus + "<hr/>";

                if(attributes.Address && attributes.Address.trim() != "")
                    html += "<b>Address: </b>" + attributes.Address + "<br/>";
                if(attributes.OWNERSHIPS)
                    html += "<b>Ownership: </b>" + attributes.OWNERSHIPS + "<br/>";
                if(attributes.ACRES_GIS)
                    html += "<b>Acres (GIS): </b>" + attributes.ACRES_GIS;
                
                if(allotment && allotment.Id)
                    html += "<br/><div class='right'><a href='#dataview/"+allotment.Id+"'>View</a></div>";
                
                return html;

            };

		}


];


define("private/appraisals/components/appraisal-activities/appraisal-activities", function(){});



define('private/appraisals/appraisal-map-directive',[
  'app',
  'esri/map',
  'esri/geometry/Point',
  'esri/dijit/InfoWindow',
  'esri/InfoTemplate',
  'esri/dijit/BasemapLayer',
  'esri/dijit/BasemapGallery',
  'esri/dijit/Basemap'
], function (app, Map, Point, InfoWindow, InfoTemplate) {

  // register a new directive called esriMap with our app
  app.directive('appraisalMap', function($rootScope){
    // this object will tell angular how our directive behaves
    return {
      // only allow esriMap to be used as an element (<esri-map>)
      restrict: 'E',

      scope: false,

      // define how our template is compiled this gets the $element our directive is on as well as its attributes ($attrs)
      compile: function($element, $attrs){
        // remove the id attribute from the main element
        $element.removeAttr("id");

        // append a new div inside this element, this is where we will create our map
        $element.append("<div id=" + $attrs.id + "></div>");

        // since we are using compile we need to return our linker function
        // the 'link' function handles how our directive responds to changes in $scope
        return function (scope, element, attrs, controller){
          scope.$watch("center", function (newCenter, oldCenter) {
            if(newCenter !== oldCenter){
              controller.centerAt(newCenter);
            }
          });
        };
      },

      // even though $scope is shared we can declare a controller for manipulating this directive
      // this is great for when you need to expose an API for manipulaiting your directive
      // this is also the best place to setup our map
      controller: function($scope, $element, $attrs){

        //console.dir($attrs);

        // setup our map options based on the attributes and scope
        var mapOptions = {
          center: ($attrs.center) ? $attrs.center.split(",") : $scope.center,
          zoom: ($attrs.zoom) ? $attrs.zoom : $scope.zoom,
          spatialReference: {
              wkid:102100 //mercator
              //wkid:26911 //nad_1983
              //"wkt":'PROJCS["NAD83(NSRS2007) / UTM zone 11N",GEOGCS["NAD83(NSRS2007)",DATUM["D_",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-117],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["Meter",1]]'

            }
        };

        // declare our map
        console.log("trying to make the map");
		
		esri.config.defaults.io.proxyUrl = proxyUrl; // From the config.js file.
		esri.config.defaults.io.alwaysUseProxy = true;

        var map = new Map($attrs.id, mapOptions);
        //our first layer from up above...
        //console.log("//restdata.umatilla.nsn.us/arcgis/rest/services/BasemapParcelViewerCTUIR/MapServer?token=" + security_token);

        //setup basemaps
        map.selectedBasemap = defaultLayer; //imageryLayer
        map.selectedServiceLayers = [];

        map.basemaps = [];
        for (var property in parcelLayerConfig) {
          if(parcelLayerConfig.hasOwnProperty(property))
          {
              map.basemaps.push({label: parcelLayerConfig[property].Display, name: property});
          }
        };

        map.serviceLayers = [];
        for (var property in servicesLayerConfig) {
          if(servicesLayerConfig.hasOwnProperty(property))
          {
              map.serviceLayers.push({label: servicesLayerConfig[property].Display, name: property});
          }
        };



        

        //var layer = new esri.layers.ArcGISTiledMapServiceLayer("//restdata.umatilla.nsn.us/arcgis/rest/services/BasemapParcelViewerCTUIR/MapServer?token=" + security_token);

        //var layer = new esri.layers.ArcGISTiledMapServiceLayer(parcelLayerConfig[map.selectedBasemap].ServiceURL);
        //map.addLayer(layer);
        //map.currentBasemapLayer = layer;

        //map.parcelLayer = new esri.layers.GraphicsLayer();
        //map.addLayer(map.parcelLayer);

        map.updateLayers = function(){

            console.log("Changing Layer: "+map.selectedBasemap);

            try{
              console.log("Loading layer: " + parcelLayerConfig[map.selectedBasemap].ServiceURL);      

              map.removeAllLayers();

              //add the selected basemap
              var new_layer = new esri.layers.ArcGISTiledMapServiceLayer(parcelLayerConfig[map.selectedBasemap].ServiceURL);
              map.addLayer(new_layer);
              map.currentBasemapLayer = new_layer;

              //now add any selected service layers
              for (var i = map.selectedServiceLayers.length - 1; i >= 0; i--) {
                var service_layer = new esri.layers.ArcGISDynamicMapServiceLayer(servicesLayerConfig[map.selectedServiceLayers[i]].ServiceURL);
                map.addLayer(service_layer);
              };

              map.parcelLayer = new esri.layers.GraphicsLayer();
              map.addLayer(map.parcelLayer);

              console.log("done!");
              map.reposition();
            }
            catch(e)
            {
              console.dir(e);
            }
        };

        map.updateLayers();


        // start exposing an API by setting properties on "this" which is our controller
        // lets expose the "addLayer" method so child directives can add themselves to the map
        this.addLayer = function(layer, filter){
          map.locationLayer = map.addLayer(layer);

//          console.log("Added layer to map");
//          console.log("layer_"+layer.id);

            //setup our layer locationid function so we can all it again sometime
            layer.showLocationsById = function(locationObjectIds){
              try{
                this.clearSelection();
                var definitionExpression = "OBJECTID IN (" + locationObjectIds + ")";
                console.log("Definition expression: " + definitionExpression);
                this.setDefinitionExpression(definitionExpression);
                this.refresh();
              }catch(e)

              {
                console.dir(e);
              }                  
            };

          if(filter && filter == "location")
          {
              if(typeof $scope.locationObjectIds == "undefined")
              {
                $scope.$watch('locationObjectIds', function(){

                  //skip the first run
                  if(typeof $scope.locationObjectIds == "undefined")
                    return;
                  
                  layer.showLocationsById($scope.locationObjectIds); // now call it

                  layer.show();                  

                });
              }
          }
          
          return map.locationLayer;
        };

        //use this for doing a search by parcelid or address
        map.querySearchParcel = function(searchParam, callback)
        {
			var queryTask = new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);
			var query = new esri.tasks.Query();
			query.where = dojo.string.substitute(parcelLayerConfig[map.selectedBasemap].ParcelQuery, [searchParam]);
			console.log("query.where is next...");
			console.dir(query.where);
			query.returnGeometry = false;
			query.outSpatialReference = this.spatialReference;
			query.outFields = ["*"];
        
			queryTask.execute(query, function (result) {
				callback(result.features); //give back the parcel features we found...
			}, function(err){
				console.log("Failure executing query!");
				console.dir(err);
				console.dir(query);
			});            
        };

        //use this for selecting a specific parcel/allotment by id (no geometry)
        map.queryMatchParcel = function(searchParam, callback)
        {
			var queryTask = new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);
			var query = new esri.tasks.Query();
			query.where = dojo.string.substitute(parcelLayerConfig[map.selectedBasemap].LocateParcelQuery, [searchParam]);
			query.returnGeometry = false;
			query.outSpatialReference = this.spatialReference;
			query.outFields = ["*"];
        
			queryTask.execute(query, function (result) {
				callback(result.features); //give back the parcel features we found...
			}, function(err){
				console.log("Failure executing query!");
				console.dir(err);
				console.dir(query);
			});            
        };


        //use this to select a particular parcel either by objectid (like after a search) or x,y mapPoint
        map.querySelectParcel = function(mapPoint, objectId, callback){
			console.log("Inside AppraisalMap.js...");
			console.log("Running query on: "+ parcelLayerConfig[map.selectedBasemap].QueryURL);

			var queryTask = new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);
			var query = new esri.tasks.Query();

			query.outSpatialReference = this.spatialReference;
			query.returnGeometry = true;
			query.outFields = ["*"];
			if (mapPoint) {
				query.geometry = mapPoint;
			}
			else {
				query.objectIds = [objectId];
			}
          
			query.spatialRelationship = esri.tasks.Query.SPATIAL_REL_INTERSECTS;
			queryTask.execute(query, function (result) {
				console.dir(result);
				callback(result.features); //give back the parcel features we found...
			}, function(err){
				console.log("Failure executing query!");
				console.dir(err);
				console.dir(query);
			});            

                  
        };

        map.clearGraphics = function(){
          this.parcelLayer.clear();
        }

        map.addParcelToMap = function(feature, color, alpha)
        {
            
                var graphic;
                if(!color)
                  color = "#FF6600";
                
                if(!alpha)
                  alpha = .25;


                var lineColor = new dojo.Color();
                lineColor.setColor(color);

                var fillColor = new dojo.Color();
                fillColor.setColor(color);
                fillColor.a = alpha;

                var symbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,
                    new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, lineColor, 3), fillColor);

                graphic = new esri.Graphic(feature.geometry, symbol, feature.attributes);

                this.parcelLayer.clear();
                this.parcelLayer.add(graphic);
                this.selectedFeature = feature;
                this.selectedGraphic = graphic;

                $scope.$emit("map.selectedFeature",feature); //notify
        }

        map.centerAndZoomToGraphic = function(graphic)
        {
            var centerPoint = graphic.geometry.getExtent().getCenter();
            return map.centerAndZoom(centerPoint, 15);
        };

        // lets expose a version of centerAt that takes an array of [lng,lat]
        this.centerAt = function(center){
          var point = new Point({
            x: center[0],
            y: center[1],
            spatialReference: {
              wkid:102100 //mercator
              //wkid:26911 //nad_1983
              //"wkt":'PROJCS["NAD83(NSRS2007) / UTM zone 11N",GEOGCS["NAD83(NSRS2007)",DATUM["D_",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-117],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["Meter",1]]'
            }
          });

          map.centerAt(point);
        };

        // listen for click events and expost them as broadcasts on the scope and suing the scopes click handler
        map.on("click", function(e){
          // emit a message that bubbles up scopes, listen for it on your scope
          $scope.$emit("map.click", e);

          // use the scopes click fuction to handle the event
          $scope.$apply(function($scope) {
            $scope.click.call($scope, e);
          });
        });

        $scope.map = map;

      }
    };
  });
});


// defines the appraisals module

var appraisals_module = angular.module('AppraisalsModule', ['ui.bootstrap', 'ngResource']);

require([
    //controllers
    'private/appraisals/components/appraisal-activities/appraisal-activities',

    //directives
    'private/appraisals/appraisal-map-directive',

], function () {
    appraisals_module.controller('AppraisalCtrl', appraisal_activities);    

});




define("private/appraisals/appraisals-module", function(){});

// CDMS Application bootstrapper
(function (angular) {

    var root = location.pathname.replace(new RegExp(/\/[^\/]+$/), '');

    define('angular', [],function () {
        return angular;
    });

    require({
        async: true,
        packages: [
            { name: 'app', location: root + '/app' },
            { name: 'core', location: root + '/app/core' },
            { name: 'private', location: root + '/app/private' },
        ]
    });
    

    // require loads each of the javascript files referenced below, which can in turn load other files.
    require([
      'angular',
      'dojo/parser',
      'dijit/Menu',
      'dijit/MenuItem',
      'dijit/form/DropDownButton',
//      'app/app',                                                    //main.js
        'core/common/common-module',
        'private/crpp/crpp-module',
      'core/projects/projects-module',
      'core/datasets/datasets-module',
      'core/admin/admin-module',
      'core/preferences/preferences-module',
      
      'private/habitat/habitat-module',
      'private/appraisals/appraisals-module',

    ], function (angular, parser) {
   
        angular.element(document).ready(function () {           //punch it, Chewy!
      
	        //check our authentication and setup our user profile first of all!
	        //http://nadeemkhedr.wordpress.com/2013/11/25/how-to-do-authorization-and-role-based-permissions-in-angularjs/
	
  	        $.get(WHOAMI_URL, function(data){
  		        profile = data;
  	        })
            .fail(function(){
              window.location=LOGIN_URL;
            })
            .always(function () {

                console.log("Booting dojo...");
                //parser.parse();

                require(['dojo/domReady!'], function () {
                    console.log("Booting angular...");
                    setTimeout(function () {
                        angular.bootstrap(document.body, ['app']);
                        console.log("all systems GO!")
                    }, 4000);
                });
                
                
  	        });
	  
      });
  
    });


}(angular));
define("init", function(){});

