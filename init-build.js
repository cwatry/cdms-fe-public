var common_module=angular.module('CommonModule',['ui.bootstrap','ngResource']);var admin_module=angular.module('AdminModule',['ui.bootstrap','ngResource']);var datasets_module=angular.module('DatasetModule',['ui.bootstrap','ngResource']);var preferences_module=angular.module('PreferencesModule',['ui.bootstrap','ngResource']);var projects_module=angular.module('ProjectModule',['ui.bootstrap','angularFileUpload','ui.select2','ngResource']);define("core/all-modules",function(){});function initEdit(){$(document).unbind('keydown').bind('keydown',function(event){var doPrevent=false;if(event.keyCode===8){var d=event.srcElement||event.target;if((d.tagName.toUpperCase()==='INPUT'&&(d.type.toUpperCase()==='TEXT'||d.type.toUpperCase()==='PASSWORD'||d.type.toUpperCase()==='FILE'))||d.tagName.toUpperCase()==='TEXTAREA'){doPrevent=d.readOnly||d.disabled;}
else{doPrevent=true;}}
if(doPrevent){event.preventDefault();}});}
function getById(list,search_name){return getByField(list,search_name,'Id');}
function getByName(list,search_name){return getByField(list,search_name,'Name');}
function getByField(list,search,field){for(var i=0;i<list.length;i++){var pref=list[i];if(pref[field]==search)
return pref;};return null;}
function getMatchingByField(data,search,field){var newlist=[];for(var key in data){if(data[key][field]==search)
{newlist.push(data[key]);}}
return newlist;}
function getMatchingByFieldArray(data,search,field){var newlist=[];var theSearch="";for(var key2 in search){for(var key in data){if((data[key][field]!=="undefined")&&(data[key][field]!==null)){if(data[key][field]===search[key2]){newlist.push(data[key]);var theSearch=theSearch+search[key2]+",";console.log("Searched and found "+search[key2]+" for "+field);}}}}
console.log("newlist display is next...");console.dir(newlist);return newlist;}
function makeObjects(optionList,keyProperty,valueProperty){var objects={};angular.forEach(optionList,function(item){objects[item[keyProperty]]=item[valueProperty];});return objects;}
function makeInstrumentObjects(optionList){console.log("Inside services.js, makeInstrumentObjects...");var objects={};angular.forEach(optionList,function(item){objects[item['Id']]=item['Name']+'('+item['SerialNumber']+')';});return objects;}
function sortObjectsByValue(list){var sorted=[];Object.keys(list).map(function(k){return[k,list[k]];}).sort(function(a,b){if(a[1]<b[1])return-1;if(a[1]>b[1])return 1;return 0;}).forEach(function(d){var nextObj={};nextObj[d[0]]=d[1];sorted.push(nextObj);});return sorted;}
function makeObjectsFromValues(key,valuesList){var objects=angular.rootScope.Cache[key];if(!objects){objects={};if(!valuesList){throw("No values provided.");}
var selectOptions="";try{selectOptions=angular.fromJson(valuesList);}catch(e){console.log("problem parsing: "+valuesList+" for field: "+key);}
if(angular.isArray(selectOptions)){selectOptions.forEach(function(item){objects[item]=item;});}
else{for(var idx in selectOptions){objects[idx]=selectOptions[idx];}}
angular.rootScope.Cache[key]=objects;}
return objects;}
function order2dArrayByAlpha(a,b){if(!a||!b)
return 0;var a=a[1].toLowerCase();var b=b[1].toLowerCase();if(a<b)
return-1;else if(a>b)
return 1;else
return 0;}
function orderByAlpha(a,b){if(!a||!b||!a.Label||!b.Label)
return 0;var nameA=a.Label.toLowerCase(),nameB=b.Label.toLowerCase()
if(nameA<nameB)
return-1
if(nameA>nameB)
return 1
return 0}
function orderByAlphaName(a,b){if(!a||!b||!a.Label||!b.Label)
return 0;var nameA=a.Name.toLowerCase(),nameB=b.Name.toLowerCase()
if(nameA<nameB)
return-1
if(nameA>nameB)
return 1
return 0}
function orderUserByAlpha(a,b){var nameA=a.Fullname.toLowerCase(),nameB=b.Fullname.toLowerCase()
if(nameA<nameB)
return-1
if(nameA>nameB)
return 1
return 0}
function orderByIndex(a,b){if(!a||!b||!a.OrderIndex||!b.OrderIndex||!a.FieldRoleId||!b.FieldRoleId)
return 0;if(a.OrderIndex&&b.OrderIndex)
return(a.OrderIndex-b.OrderIndex);else
return(a.FieldRoleId-b.FieldRoleId);}
function array_count(the_array){var count=0;var keys=(Array.isArray(the_array))?the_array:Object.keys(the_array);for(var i=0;i<keys.length;i++){count++;};return count;}
function stringIsNumber(s){return!isNaN(parseFloat(s))&&isFinite(s);}
function stringIsTime(s){if(s==null)
return false;if(typeof s!='string')
return false;s=s.trim();return s.match(/^([01]?\d|2[0-3]):([0-5]\d)$/);}
function is_empty(obj){if(obj==null)return true;if(obj.length&&obj.length>0)return false;if(obj.length===0)return true;for(var key in obj){if(hasOwnProperty.call(obj,key))return false;}
return true;}
function capitalizeFirstLetter(someText){var firstLetter=someText.toUpperCase(someText.charAt(0));var remainingLetters=someText.toLowerCase(someText.substring(1));var newNext=firstLetter+remainingLetters;return newText;}
function sortLocations(a,b){if((b!=='undefined')&&(b!==null)){var l1=a[8];var l2=b[8];if((l1!=="undefined")&&(l1!==null))
l1.toLowerCase();if((l2!=="undefined")&&(l2!==null))
l2.toLowerCase();if(l1<l2)return-1;if(l1>l2)return 1;return 0;}}
function getUnMatchingByField(data,search,field){var newlist=[];for(var key in data){if(data[key][field]!=search)
newlist.push(data[key]);}
return newlist;}
function isNumber(n){return!isNaN(parseFloat(n))&&isFinite(n);}
function getDataGrade(check){if(!check)
return;var grade="N/A";if(check.CheckMethod==1)
grade=check.Bath1Grade+"-"+check.Bath2Grade;else if(check.CheckMethod==2)
grade=check.Bath1Grade;return grade;};function populateMetadataDropdowns(scope,property){if(property.ControlType=="select"||property.ControlType=="multiselect"){scope.CellOptions[property.Id+'_Options']=makeObjectsFromValues(property.Id+"_Options",property.PossibleValues);}};function getLocationObjectIdsByType(type,locations){console.log("Inisde services, getLocationObjectIdsByType...");var locationsArray=getMatchingByField(locations,type,"LocationTypeId");var locationObjectIdArray=[];angular.forEach(locationsArray,function(item,key){locationObjectIdArray.push(item.SdeObjectId);});var locationObjectIds=locationObjectIdArray.join();console.log("found project locations (locationObjectIds): "+locationObjectIds);return locationObjectIds;}
function getLocationObjectIdsByInverseType(type,locations){var locationsArray=getMatchingByField(locations,type,"LocationTypeId");var locationObjectIdArray=[];angular.forEach(locationsArray,function(item,key){if(item.SdeObjectId)
locationObjectIdArray.push(item.SdeObjectId);});var locationObjectIds=locationObjectIdArray.join();return locationObjectIds;}
function getLocationObjectIdsFromLocationsWithSubprojects(locations){var locationObjectIdArray=[];angular.forEach(locations,function(item,key){if(item.SdeObjectId)
locationObjectIdArray.push(item.SdeObjectId);});var locationObjectIds=locationObjectIdArray.join();console.log("In services, getLocationObjectIdsFromLocationsWithSubprojects, found project locations: "+locationObjectIds);return locationObjectIds;}
function extractYearFromString(strDateTime){var theString=strDateTime;var hyphenLocation=theString.indexOf("-");if(hyphenLocation<0)
return hyphenLocation;theString=theString.substr(0,hyphenLocation);var stringLength=theString.length;var tmpString=theString.replace("\"","");var tmpStringLength=tmpString.length;if(stringLength!==tmpStringLength){theString=theString.substr(1,4);}
else{theString=theString.substr(0,4);}
return theString;}
function checkInteger(aNumber){var INTEGER_REGEXP=/^\-?\d+$/;var n=""+aNumber;n=n.replace(',','.');if(INTEGER_REGEXP.test(n)){return parseFloat(n.replace(',','.'));}
else{return undefined;}}
function check4Digits(aNumber){var INTEGER_REGEXP=/^\d{4}$/;var n=""+aNumber;n=n.replace(',','.');if(INTEGER_REGEXP.test(n)){return n;}
else{return undefined;}}
function check2Digits(aNumber){var INTEGER_REGEXP=/^\d{2}$/;var n=""+aNumber;if(INTEGER_REGEXP.test(n)){return n;}
else{return undefined;}}
function checkSixFloat(aNumber){var FLOAT_REGEXP6=/^\-?\d{6}((\.)\d+)?$/;var n=""+aNumber;n=n.replace(',','.');if(FLOAT_REGEXP6.test(n)){return parseFloat(n.replace(',','.'));}
else{return undefined;}}
function checkSevenFloat(aNumber){var FLOAT_REGEXP7=/^\-?\d{7}((\.)\d+)?$/;var n=""+aNumber;n=n.replace(',','.');if(FLOAT_REGEXP7.test(n)){return parseFloat(n.replace(',','.'));}
else{return undefined;}}
function checkTime(aTime){var FLOAT_REGEXPTIME=/^\d{2}((\:)\d{2})$/;var t=""+aTime;if(FLOAT_REGEXPTIME.test(t)){return t;}
else{return undefined;}}
function checkDateTimeFormat1(strDateTime){var strYear=strDateTime.substr(0,4);var intYear=parseInt(strYear);if(typeof intYear!=='number')
return false;else
strDateTime=strDateTime.slice(4);var isLeapYear=(intYear%100===0)?(intYear%400===0):(intYear%4===0);if(strDateTime.charAt(0)!=='-')
return false;else
strDateTime=strDateTime.slice(1);var strMonth=strDateTime.substr(0,2);var intMonth=parseInt(strMonth);if(typeof intMonth!=='number')
return false;else if(intMonth>12)
return false;else
strDateTime=strDateTime.slice(2);if(strDateTime.charAt(0)!=='-')
return false;else
strDateTime=strDateTime.slice(1);var strDay=strDateTime.substr(0,2);var intDay=parseInt(strDay);if(typeof intDay!=='number')
return false;switch(intMonth){case 1:case 3:case 5:case 7:case 8:case 10:case 12:if(intDay>31){return false;}
break;case 4:case 6:case 9:case 11:if(intDay>30){return false;}
break;case 2:if((isLeapYear)&&(intDay>29)){return false;}
else if(intDay>28){return false;}
break;}
strDateTime=strDateTime.slice(2);if(strDateTime.charAt(0)!==' ')
return false;else
strDateTime=strDateTime.slice(1);var strHours=strDateTime.substr(0,2);var intHours=parseInt(strHours);if(typeof intHours!=='number')
return false;else if(intHours>23)
return false;else
strDateTime=strDateTime.slice(2);if(strDateTime.charAt(0)!==':')
return false;else
strDateTime=strDateTime.slice(1);var strMinutes=strDateTime.substr(0,2);var intMinutes=parseInt(strMinutes);if(typeof intMinutes!=='number')
return false;else if(intMinutes>59)
return false;if(strDateTime.length===2)
return true;else
return false;}
function dateToUTC(a_date){var utc=new Date(Date.UTC(a_date.getFullYear(),a_date.getMonth(),a_date.getDate(),a_date.getHours(),a_date.getMinutes(),a_date.getSeconds()));return utc;}
function pad(number){if(number<10){return'0'+number;}
return number;}
function toExactISOString(a_date){var s_utc=a_date.getFullYear()+'-'+pad(a_date.getMonth()+1)+'-'+pad(a_date.getDate())+'T'+pad(a_date.getHours())+':'+pad(a_date.getMinutes())+':'+pad(a_date.getSeconds())+'.'+(a_date.getMilliseconds()/1000).toFixed(3).slice(2,5);return s_utc;}
function setDateTo0000(a_date){console.log("a_date = "+a_date);console.log("type of a_date = "+typeof a_date);var inDate=a_date;var theYear=inDate.getFullYear();console.log("theYear = "+theYear);var theMonth=inDate.getMonth();console.log("theMonth = "+theMonth);var theDay=inDate.getDate();console.log("theDay = "+theDay);var theHour=0;var theMinutes=0;var theSeconds=0;var theMilliseconds=0;var newDate=new Date(theYear,theMonth,theDay,theHour,theMinutes,theSeconds,theMilliseconds);console.log("newDate = "+newDate);return newDate;}
function toTimeString(a_date){var t='T'+pad(a_date.getHours())+':'+pad(a_date.getMinutes())+':'+pad(a_date.getSeconds());return t;}
function getTimeFromDate(a_date){var d=a_date.toString();var theYear=d.substring(0,4);var separatorLocation=d.indexOf("-");d=d.substring(separatorLocation+1);var theMonth=d.substring(0,2);separatorLocation=d.indexOf("-");d=d.substring(separatorLocation+1);var theDay=d.substring(0,2);d=d.substring(3);var theHour=d.substring(0,2);separatorLocation=d.indexOf(":");d=d.substring(separatorLocation+1);var theMinutes=d.substring(0,2);return theHour+":"+theMinutes;}
function toDateOffset(str_date,int_offset){var orig_date=new Date(str_date);var d=new Date(orig_date.getTime()+int_offset);return d;}
function formatDate(d){var d_str=[d.getMonth()+1,d.getDate(),d.getFullYear()].join('/')+" "+
[("00"+d.getHours()).slice(-2),("00"+d.getMinutes()).slice(-2),("00"+d.getSeconds()).slice(-2)].join(':');return d_str;}
function formatDateFromUtcToFriendly(d){console.log("d = "+d);var theYear=d.substring(0,4);console.log("theYear = "+theYear);var separatorLocation=d.indexOf("-");d=d.substring(separatorLocation+1);console.log("d = "+d);var theMonth=d.substring(0,2);console.log("theMonth = "+theMonth);separatorLocation=d.indexOf("-");d=d.substring(separatorLocation+1);console.log("d = "+d);var theDay=d.substring(0,2);console.log("theDay = "+theDay);d=d.substring(3);console.log("d = "+d);var theHour=d.substring(0,2);console.log("theHour = "+theHour);separatorLocation=d.indexOf(":");d=d.substring(separatorLocation+1);console.log("d = "+d);var theMinutes=d.substring(0,2);console.log("theMinutes = "+theMinutes);separatorLocation=d.indexOf(":");d=d.substring(separatorLocation+1);console.log("d = "+d);var theSeconds=d.substring(0,2);console.log("theSeconds = "+theSeconds);separatorLocation=d.indexOf(".");d=d.substring(separatorLocation+1);console.log("d = "+d);var theMilli=d.substring(0);console.log("theMilli = "+theMilli);var friendlyDate=theMonth+"/"+theDay+"/"+theYear+" "+theHour+":"+theMinutes;return friendlyDate}
function formatDateFromFriendlyToUtc(d){console.log("d = "+d);var separatorLocation=d.indexOf("/");console.log("slashLocation = "+separatorLocation);if(separatorLocation<2){var theMonth=d.substring(0,1);console.log("theMonth = "+theMonth);theMonth=pad(theMonth);console.log("theMonth = "+theMonth);d=d.substring(2);}
else{var theMonth=d.substring(0,2);console.log("theMonth = "+theMonth);d=d.substring(3);}
console.log("d = "+d);separatorLocation=d.indexOf("/");if(separatorLocation<2){var theDay=d.substring(0,1);console.log("theDay = "+theDay);theDay=pad(theDay);console.log("theDay = "+theDay);d=d.substring(2);}
else{var theDay=d.substring(0,2);console.log("theDay = "+theDay);d=d.substring(3);}
console.log("d = "+d);var theYear=d.substring(0,4);d=d.substring(5);console.log("d = "+d);separatorLocation=d.indexOf(":");if(separatorLocation<2){var theHour=d.substring(0,1);console.log("theHour = "+theHour);theHour=pad(theHour);console.log("theHour = "+theHour);d=d.substring(2);}
else{var theHour=d.substring(0,2);console.log("theHour = "+theHour);d=d.substring(3);}
console.log("d = "+d);var theMinutes=d.substring(0,2);d=d.substring(3);d=""+d;console.log("d = "+d);if((d.length>0)&&(d.length<2))
var theSeconds=pad(d);else
var theSeconds="00";var utc=theYear+"-"+theMonth+"-"+theDay+" "+theHour+":"+theMinutes+":"+theSeconds+"."+"000";console.log("utc = "+utc);return utc;}
if(!Array.prototype.contains){Array.prototype.contains=function(searchElement){searchElement=searchElement.toLowerCase();if(this==null)
throw new TypeError('Array.contains: "this" is null or not defined');if(this.length==0)
return false;for(var i=this.length-1;i>=0;i--){if(this[i].toLowerCase()==searchElement)
return true;};return false;}}
if(!Array.prototype.containsInt){Array.prototype.containsInt=function(searchElement){if(this==null)
throw new TypeError('Array.contains: "this" is null or not defined');if(this.length==0)
return false;for(let i=0;i<this.length;i++){if(this[i]===searchElement)
return true;};return false;}}
function addMetadataProperties(metadata_list,all_metadata,scope,CommonService){angular.forEach(metadata_list,function(i_property,key){var property=i_property;if(i_property.MetadataPropertyId)
property=CommonService.getMetadataProperty(i_property.MetadataPropertyId);if((typeof property.Name!=='undefined')&&(property.Name!==null)&&!(property.Name in all_metadata)){scope.metadataList[property.Name]={field:property.Name,MetadataPropertyId:property.Id,controlType:property.ControlType,};}
if(i_property.Values){if(property.ControlType=="multiselect"){var values;try{values=angular.fromJson(i_property.Values);}
catch(e)
{values=i_property.Values.split(",")}
all_metadata[property.Name].Values=values;}
else{all_metadata[property.Name].Values=i_property.Values;}
if(scope.project)
scope.project.MetadataValue[property.Id]=all_metadata[property.Name].Values;}
else
all_metadata[property.Name].Values="";if(property.PossibleValues){populateMetadataDropdowns(scope,property);all_metadata[property.Name].options=scope.CellOptions[property.Id+"_Options"];}});};define("core/common/common-functions",function(){});common_module.factory('GetMetadataProperties',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/metadata/getmetadataproperties');}]);common_module.factory('SaveDatasetMetadata',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/metadata/setdatasetmetadata');}]);common_module.factory('GetMetadataFor',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/metadata/getmetadatafor',{},{save:{method:'POST',isArray:true}});}]);common_module.factory('GetWaterBodies',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/list/getwaterbodies');}]);common_module.factory('GetSources',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/list/getsources');}]);common_module.factory('GetTimeZones',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/list/gettimezones');}]);common_module.factory('GetDepartments',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/department/getdepartments');}]);common_module.factory('Users',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/user/getusers',{},{query:{method:'GET',params:{},isArray:true}});}]);common_module.factory('SaveProjectLocation',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/location/saveprojectlocation');}]);common_module.factory('DeleteLocationAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/location/deletelocation');}]);common_module.factory('GetAllPossibleDatastoreLocations',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/getdatastorelocations');}]);common_module.factory('GetLocationTypes',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/location/getlocationtypes');}]);common_module.service('CommonService',['$q','GetMetadataProperties','SaveDatasetMetadata','GetMetadataFor','GetWaterBodies','GetSources','GetTimeZones','GetDepartments','Users','DeleteLocationAction','GetAllPossibleDatastoreLocations','GetLocationTypes','SaveProjectLocation',function($q,GetMetadataProperties,SaveDatasetMetadata,GetMetadataFor,GetWaterBodies,GetSources,GetTimeZones,GetDepartments,Users,DeleteLocationAction,GetAllPossibleDatastoreLocations,GetLocationTypes,SaveProjectLocation){var service={datastoreId:null,metadataProperties:null,getLocations:function(id)
{service.datastoreId=id;return GetAllPossibleDatastoreLocations.query({id:id});},getLocationTypes:function(){return GetLocationTypes.query();},getWaterBodies:function()
{return GetWaterBodies.query();},getSources:function()
{return GetSources.query();},getDatasetLocationType:function(aDatastoreName)
{var theLocationType=0;if(aDatastoreName==="AdultWeir")
{console.log("This dataset is for Adult Weir...");theLocationType=LOCATION_TYPE_AdultWeir;}
else if(aDatastoreName==="BSample")
{console.log("This dataset is for Water Temperature...");theLocationType=LOCATION_TYPE_BSample;}
else if(aDatastoreName==="WaterTemp")
{console.log("This dataset is for Water Temperature...");theLocationType=LOCATION_TYPE_WaterTemp;}
else if(aDatastoreName==="SpawningGroundSurvey")
{console.log("This dataset is for Spawning Ground Survey...");theLocationType=LOCATION_TYPE_SpawningGroundSurvey;}
else if(aDatastoreName==="CreelSurvey")
{console.log("This dataset is for Creel Survey...");theLocationType=LOCATION_TYPE_CreelSurvey;}
else if(aDatastoreName==="Electrofishing")
{console.log("This dataset is for Electrofishing...");theLocationType=LOCATION_TYPE_Electrofishing;}
else if(aDatastoreName==="SnorkelFish")
{console.log("This dataset is for Snorkel Fish...");theLocationType=LOCATION_TYPE_SnorkelFish;}
else if(aDatastoreName==="ScrewTrap")
{console.log("This dataset is for Screw Trap...");theLocationType=LOCATION_TYPE_ScrewTrap;}
else if(aDatastoreName==="FishScales")
{console.log("This dataset is for Fish Scales...");theLocationType=LOCATION_TYPE_FishScales;}
else if(aDatastoreName==="WaterQuality")
{console.log("This dataset is for Water Quality with Labs...");theLocationType=LOCATION_TYPE_WaterQuality;}
else if(aDatastoreName==="StreamNet_RperS")
{console.log("This dataset is for StreamNet_RperS...");theLocationType=LOCATION_TYPE_StreamNet_NOSA;}
else if(aDatastoreName==="StreamNet_NOSA")
{console.log("This dataset is for StreamNet_NOSA...");theLocationType=LOCATION_TYPE_StreamNet_NOSA;}
else if(aDatastoreName==="StreamNet_SAR")
{console.log("This dataset is for StreamNet_SAR...");theLocationType=LOCATION_TYPE_StreamNet_SAR;}
else if(aDatastoreName==="ArtificialProduction")
{console.log("This dataset is for ArtificialProduction...");theLocationType=LOCATION_TYPE_ArtificialProduction;}
else if(aDatastoreName==="Metrics")
{console.log("This dataset is for Metrics...");theLocationType=LOCATION_TYPE_Metrics;}
else if(aDatastoreName==="JvRearing")
{console.log("This dataset is for JvRearing...");theLocationType=LOCATION_TYPE_JvRearing;}
else if(aDatastoreName==="Genetic")
{console.log("This dataset is for Genetic...");theLocationType=LOCATION_TYPE_Genetic;}
else if(aDatastoreName==="Benthic")
{console.log("This dataset is for Benthic...");theLocationType=LOCATION_TYPE_Benthic;}
else if(aDatastoreName==="Drift")
{console.log("This dataset is for Drift...");theLocationType=LOCATION_TYPE_Drift;}
return theLocationType;},deleteLocation:function(locationId)
{return DeleteLocationAction.save({LocationId:locationId});},getTimeZones:function()
{return GetTimeZones.query();},getUsers:function(){return Users.query();},getDepartments:function(){return GetDepartments.query();},saveNewProjectLocation:function(projectId,location){return SaveProjectLocation.save({ProjectId:projectId,Location:location});},getMetadataProperty:function(propertyId){if(!service.metadataProperties){this._loadMetadataProperties().$promise.then(function(){return service.metadataProperties["ID_"+propertyId];});}
else{return service.metadataProperties["ID_"+propertyId];}},getMetadataProperties:function(propertyTypeId){var properties=$q.defer();if(!service.metadataProperties){this._loadMetadataProperties().$promise.then(function(){properties.resolve(getMatchingByField(service.metadataProperties,propertyTypeId,'MetadataEntityId'));});}else{properties.resolve(getMatchingByField(service.metadataProperties,propertyTypeId,'MetadataEntityId'));}
return properties;},getMetadataFor:function(projectId,typeId){return GetMetadataFor.save({ProjectId:projectId,EntityTypeId:typeId});},_loadMetadataProperties:function(){return GetMetadataProperties.query(function(data){service.metadataProperties={};angular.forEach(data,function(value,key){service.metadataProperties["ID_"+value.Id]=value;});});},saveDatasetMetadata:function(datasetId,metadata,saveResults){var payload={DatasetId:datasetId,Metadata:metadata};return SaveDatasetMetadata.save(payload);},};service.getMetadataProperty(1);return service;}]);define("core/common/services/common-service",function(){});common_module.service('Logger',[function(){var service={log:function(){for(var i=0;i<arguments.length;i++){if(arguments[i]instanceof Array){var arrayArg=arguments[i];this.log.apply(this,arrayArg);}}},debug:function(){this.log.apply(this,arguments);},error:function(){this.log.apply(this,arguments);var message={Message:arguments[0],Type:"ERROR"};},audit:function(){var message={Message:arguments[0],Type:"AUDIT"};log.debug("AUDIT Message POSTED to server: "+arguments[0]);},};return service;}]);define("core/common/services/logger",function(){});common_module.service('ServiceUtilities',['Logger','$window','$route',function(Logger,$window,$route,$q){var service={checkDateTimeFormat1:function(strDateTime){var DateTime_REGEXP=/^\d{4}(-)\d{2}(-)\d{2}( )\d{2}(:)\d{2}$/;if(DateTime_REGEXP.test(strDateTime)){return true;}
else{return undefined;}},dateTimeNowToStrYYYYMMDD_HHmmSS:function(){var dtNow=new Date();var intYear=dtNow.getFullYear();var intMonth=dtNow.getMonth();var strMonth=this.padNumber(intMonth);var intDate=dtNow.getDate();var strDate=this.padNumber(intDate);var intHours=dtNow.getHours();var strHours=this.padNumber(intHours);var intMinutes=dtNow.getMinutes();var strMinutes=this.padNumber(intMinutes);var intSeconds=dtNow.getSeconds();var strSeconds=this.padNumber(intSeconds);var strNow=intYear+strMonth+strDate+"_"+strHours+strMinutes+strSeconds;return strNow;},dateTimeNowToStrYYYYMMDD_HHmmSS2:function(){var dtNow=new Date();var intYear=dtNow.getFullYear();var intMonth=dtNow.getMonth();var strMonth=this.padNumber(intMonth);var intDate=dtNow.getDate();var strDate=this.padNumber(intDate);var intHours=dtNow.getHours();var strHours=this.padNumber(intHours);var intMinutes=dtNow.getMinutes();var strMinutes=this.padNumber(intMinutes);var intSeconds=dtNow.getSeconds();var strSeconds=this.padNumber(intSeconds);var intMilliseconds=dtNow.getMilliseconds();var strMilliseconds=this.padNumber(intMilliseconds);var strNow=intYear+"-"+strMonth+"-"+strDate+" "+strHours+":"+strMinutes+":"+strSeconds+"."+strMilliseconds;return strNow;},removeTSfromDateTimeString:function(strDate){console.log("strDate = "+strDate);strDate=strDate.replace("T"," ");strDate=strDate.substring(0,(strDate.length-3));return strDate;},extractDateFromString:function(strDate){console.log("Inside extractDateFromString...");console.log("strDate = "+strDate);var newDate=strDate.substring(0,10);console.log("newDate = "+newDate);return newDate;},extractTimeFromString:function(strDateTime){console.log("Inside extractTimeFromString...");console.log("strDateTime = "+strDateTime);var newTime=strDateTime.substring(11,16);console.log("newTime = "+newTime);return newTime;},extractTimeFromString2:function(strDateTime){var theString=strDateTime;var colonLocation=theString.indexOf(":");var stringLength=theString.length;var tmpString=theString.replace("\"","");var tmpStringLength=tmpString.length;if(stringLength!==tmpStringLength){if(stringLength>5)
theString=theString.substring(colonLocation-2,stringLength-4);}
else{if(stringLength>5)
theString=theString.substring(colonLocation-2,stringLength-3);}
return theString;},extractYearFromString:function(strDateTime){var theString=strDateTime;var hyphenLocation=theString.indexOf("-");if(hyphenLocation<0)
return hyphenLocation;theString=theString.substr(0,hyphenLocation);var stringLength=theString.length;var tmpString=theString.replace("\"","");var tmpStringLength=tmpString.length;if(stringLength!==tmpStringLength){theString=theString.substr(1,4);}
else{theString=theString.substr(0,4);}
return theString;},padNumber:function(number){console.log("Inside padNumber...");if(number<10){return'0'+number;}
return number;},toExactISOString:function(a_date){console.log("Inside toExactISOString...");console.log("a_date is next...");console.dir(a_date);if(a_date.getFullYear()<1950)
a_date.setFullYear(a_date.getFullYear()+100);var s_utc=a_date.getFullYear()+'-'+this.padNumber(a_date.getMonth()+1)+'-'+this.padNumber(a_date.getDate())+'T'+this.padNumber(a_date.getHours())+':'+this.padNumber(a_date.getMinutes())+':'+this.padNumber(a_date.getSeconds())+'.'+(a_date.getMilliseconds()/1000).toFixed(3).slice(2,5)+'Z';return s_utc;},formatDate:function(d){var d_str=[d.getMonth()+1,d.getDate(),d.getFullYear()].join('/')+" "+
[("00"+d.getHours()).slice(-2),("00"+d.getMinutes()).slice(-2),("00"+d.getSeconds()).slice(-2)].join(':');return d_str;},formatDate2:function(d){var d_str=[this.padNumber(d.getMonth()+1),this.padNumber(d.getDate()),d.getFullYear()].join('/')+" "+
[("00"+d.getHours()).slice(-2),("00"+d.getMinutes()).slice(-2),("00"+d.getSeconds()).slice(-2)].join(':');return d_str;},convertHhMmToMinutes:function(aTime){console.log("typeof aTime = "+typeof aTime);var numberMinutes=0;var theHours=parseInt(aTime.substr(0,2));var theMinutes=parseInt(aTime.substr(3,2));numberMinutes=theHours*60+theMinutes;return numberMinutes;},convertMinutesToHhMm:function(numberMinutes){var NumMinutes=numberMinutes;var theHours=parseInt(NumMinutes/60,10);var theMinutes=NumMinutes-(theHours*60);var strTime="";if(theHours<10)
var strHours="0"+theHours;else
var strHours=""+theHours;if(theMinutes<10)
var strMinutes="0"+theMinutes;else
var strMinutes=""+theMinutes;strTime=strHours+":"+strMinutes;return strTime;},checkSixFloat:function(aNumber){var FLOAT_REGEXP6=/^\-?\d{6}((\.)\d+)?$/;var n=""+aNumber;n=n.replace(',','.');if(FLOAT_REGEXP6.test(n)){return parseFloat(n.replace(',','.'));}
else{return undefined;}},checkInteger:function(aNumber){var INTEGER_REGEXP=/^\-?\d+$/;var n=""+aNumber;n=n.replace(',','.');if(INTEGER_REGEXP.test(n)){return parseFloat(n.replace(',','.'));}
else{return undefined;}},check4Digits:function(aNumber){console.log("Inside check4Digits...")
var INTEGER_REGEXP=/^\d{4}$/;var n=""+aNumber;n=n.replace(',','.');if(INTEGER_REGEXP.test(n)){return parseFloat(n.replace(',','.'));}
else{return undefined;}},setFileName:function(aFileName,scope){scope.FieldSheetFile=aFileName;}}
return service;}]);define("core/common/services/service-utilities",function(){});common_module.service('wish',function(){var wish={};function _loadDependencies(deps,next){var reqArr={};var keysArr={};angular.forEach(Array.keys,function(key,val){keysArr.push(key);reqArr.push(val);});try{require(reqArr,function(){var args=arguments;angular.forEach(keysArr,function(name,idx){wish[name]=args[idx];});next();});}catch(e){console.dir(e);}}
return{loadDependencies:function(deps,next){_loadDependencies(deps,next);},get:function(){return wish;}};});define("core/common/services/wish",function(){});var modal_quick_add_accuracycheck=['$scope','$modalInstance','ProjectService',function($scope,$modalInstance,ProjectService){$scope.ac_row={};$scope.save=function(){var promise=ProjectService.saveInstrumentAccuracyCheck($scope.viewInstrument.Id,$scope.ac_row);promise.$promise.then(function(){$scope.reloadProject();$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-quick-add-accuracycheck",function(){});var modal_quick_add_characteristic=['$scope','$modalInstance','DatasetService','DatastoreService',function($scope,$modalInstance,DatasetService,DatastoreService){$scope.char_row={};$scope.save=function(){var promise=DatastoreService.saveCharacteristic($scope.viewLabCharacteristic.Id,$scope.char_row);promise.$promise.then(function(){$scope.reloadProject();$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-quick-add-characteristic",function(){});var modal_add_location=['$scope','$modalInstance','DatasetService','ProjectService','CommonService',function($scope,$modalInstance,DatasetService,ProjectService,CommonService){if($scope.selectedLocation){$scope.headingMessage="Editing existing location";$scope.row=$scope.selectedLocation;}
else{$scope.headingMessage="Create new location for a project";$scope.row=angular.copy(DEFAULT_LOCATION_PROJECTION_ZONE);}
$scope.project=ProjectService.getProject($scope.dataset.ProjectId);$scope.locationTypes=CommonService.getLocationTypes();$scope.waterbodies=CommonService.getWaterBodies();$scope.save=function(){console.log("Inside ModalAddLocationCtrl, save...");if(!$scope.row.GPSEasting||!$scope.row.GPSNorthing){$scope.locationErrorMessage="Please enter an Easting and a Northing for this point.";return;}
$scope.locationErrorMessage=undefined;if(!$scope.row.Id){console.log("$scope.row.Id = "+$scope.row.Id);if($scope.newGraphic)
$scope.map.graphics.remove($scope.newGraphic);$scope.map.reposition();var inSR=new esri.SpatialReference({wkt:NAD83_SPATIAL_REFERENCE});var outSR=new esri.SpatialReference({wkid:102100})
var geometryService=new esri.tasks.GeometryService(GEOMETRY_SERVICE_URL);$scope.newPoint=new esri.geometry.Point($scope.row.GPSEasting,$scope.row.GPSNorthing,inSR);var PrjParams=new esri.tasks.ProjectParameters();PrjParams.geometries=[$scope.newPoint];PrjParams.outSR=outSR;geometryService.project(PrjParams,function(outputpoint){$scope.newPoint=new esri.geometry.Point(outputpoint[0],outSR);$scope.newGraphic=new esri.Graphic($scope.newPoint,new esri.symbol.SimpleMarkerSymbol());$scope.map.graphics.add($scope.newGraphic);$scope.map.locationLayer.applyEdits([$scope.newGraphic],null,null).then(function(results){if(results[0].success){$scope.row.SdeObjectId=results[0].objectId;console.log("Created a new point! "+$scope.row.SdeObjectId);var promise=CommonService.saveNewProjectLocation($scope.project.Id,$scope.row);promise.$promise.then(function(){console.log("done and success!");$scope.refreshProjectLocations();$modalInstance.dismiss();});}
else{$scope.locationErrorMessage="There was a problem saving that location.";}});});}
else
{var save_row=angular.copy($scope.row);save_row.LocationType=undefined;save_row.WaterBody=undefined;var promise=CommonService.saveNewProjectLocation($scope.project.Id,save_row);promise.$promise.then(function(){$scope.reloadActivities();$modalInstance.dismiss();},function(){$scope.locationErrorMessage="There was a problem saving that location.";});}
$scope.map.infoWindow.hide();if($scope.newGraphic)
$scope.map.graphics.remove($scope.newGraphic);};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-add-location",function(){});var modal_create_instrument=['$scope','$modalInstance','DatasetService','ProjectService','CommonService',function($scope,$modalInstance,DatasetService,ProjectService,CommonService){$scope.header_message="Create new instrument";$scope.instrument_row={StatusId:0,OwningDepartmentId:1,};if($scope.viewInstrument)
{$scope.header_message="Edit instrument: "+$scope.viewInstrument.Name;$scope.instrument_row=$scope.viewInstrument;}
$scope.InstrumentTypes=ProjectService.getInstrumentTypes();$scope.Departments=CommonService.getDepartments();$scope.RawProjects=ProjectService.getProjects();$scope.save=function(){console.log("Inside ModalCreateInstrumentCtrl, save...");if(!$scope.instrument_row.InstrumentTypeId)
{alert("You must select an Instrument Type!");return;}
var saveRow=angular.copy($scope.instrument_row);console.log("saveRow is next...");console.dir(saveRow);saveRow.AccuracyChecks=undefined;saveRow.OwningDepartment=undefined;var promise=ProjectService.saveInstrument($scope.project.Id,saveRow);promise.$promise.then(function(){$scope.postSaveInstrumentUpdateGrid(promise);$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-create-instrument",function(){});var modal_bulk_rowqa_change=['$scope','$modalInstance',function($scope,$modalInstance){$scope.newRowQAStatus={};$scope.save=function(){$scope.setSelectedBulkQAStatus($scope.newRowQAStatus.Id);$modalInstance.dismiss();};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-bulk-rowqa-change",function(){});var modal_save_success=['$scope','$modalInstance',function($scope,$modalInstance){$scope.header_message="Save Successful!";$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-save-success",function(){});var modal_create_fisherman=['$scope','$modalInstance','ProjectService','ServiceUtilities','ConvertStatus',function($scope,$modalInstance,ProjectService,ServiceUtilities,ConvertStatus){$scope.header_message="Create new fisherman";$scope.saveResults=null;$scope.fisherman_row={StatusId:0,};console.log("$scope in ModalCreateFishermanCtrl is next...");if($scope.viewFisherman)
{$scope.header_message="Edit fisherman: "+$scope.viewFisherman.FullName;console.log("viewfisherman...");console.dir($scope.viewFisherman);$scope.fisherman_row=$scope.viewFisherman;var strInDate=$scope.viewFisherman.DateAdded;console.log("strInDate = "+strInDate);$scope.viewFisherman.DateAdded=ServiceUtilities.extractDateFromString(strInDate);console.log("$scope.viewFisherman.DateAdded = "+$scope.viewFisherman.DateAdded);$scope.fisherman_row.DateAdded=$scope.viewFisherman.DateAdded;console.log($scope.fisherman_row.DateAdded);console.log("$scope.fisherman_row.DateAdded = "+$scope.fisherman_row.DateAdded);$scope.fisherman_row.StatusId=$scope.viewFisherman.StatusId;$scope.viewFisherman.Status=ConvertStatus.convertStatus($scope.viewFisherman.StatusId);console.log("$scope.viewFisherman.Status = "+$scope.viewFisherman.Status);$scope.fisherman_row.OkToCallId=$scope.viewFisherman.OkToCallId;$scope.viewFisherman.OkToCall=ConvertStatus.convertOkToCall($scope.viewFisherman.OkToCallId);console.log("$scope.viewFisherman.OkToCall = "+$scope.viewFisherman.OkToCall);if((typeof $scope.fisherman_row.Aka!=='undefined')&&($scope.fisherman_row.Aka!==null))
$scope.fisherman_row.FullName=$scope.fisherman_row.FirstName+" ("+$scope.fisherman_row.Aka+") "+$scope.fisherman_row.LastName;else
$scope.fisherman_row.FullName=$scope.fisherman_row.FirstName+" "+$scope.fisherman_row.LastName;}
else
{$scope.fisherman_row['DateAdded']=new Date();}
$scope.updateFullName=function(){if((typeof $scope.fisherman_row.Aka!=='undefined')&&($scope.fisherman_row.Aka!==null)&&($scope.fisherman_row.Aka!==''))
$scope.fisherman_row.FullName=$scope.fisherman_row.FirstName+" ("+$scope.fisherman_row.Aka+") "+$scope.fisherman_row.LastName;else
$scope.fisherman_row.FullName=$scope.fisherman_row.FirstName+" "+$scope.fisherman_row.LastName;}
$scope.saveFisherman=function(){console.log("$scope in saveFisherman is next...");$scope.fishermanSave=[];if((!$scope.viewFisherman)||($scope.viewFisherman===null))
{angular.forEach($scope.fishermenList,function(fishermanInfo,index){if(typeof $scope.fisherman_row.Aka!=='undefined')
{if(($scope.fisherman_row.FirstName===fishermanInfo.FirstName)&&($scope.fisherman_row.Aka===fishermanInfo.Aka)&&($scope.fisherman_row.LastName===fishermanInfo.LastName))
$scope.fishermanSave.error=true;}
else
{if(($scope.fisherman_row.FirstName===fishermanInfo.FirstName)&&($scope.fisherman_row.LastName===fishermanInfo.LastName))
$scope.fishermanSave.error=true;}});var strInDate=ServiceUtilities.toExactISOString($scope.fisherman_row.DateAdded);console.log("strInDate = "+strInDate);$scope.fisherman_row.DateAdded=ServiceUtilities.extractDateFromString(strInDate);console.log($scope.fisherman_row.DateAdded);}
if(!$scope.fishermanSave.error)
{if((typeof $scope.fisherman_row.Aka!=='undefined')&&($scope.fisherman_row.Aka!==null))
$scope.fisherman_row.FullName=$scope.fisherman_row.FirstName+" ("+$scope.fisherman_row.Aka+") "+$scope.fisherman_row.LastName;else
$scope.fisherman_row.FullName=$scope.fisherman_row.FirstName+" "+$scope.fisherman_row.LastName;$scope.fisherman_row.Status=ConvertStatus.convertStatus($scope.fisherman_row.StatusId);console.log("$scope.fisherman_row.Status = "+$scope.fisherman_row.Status);$scope.fisherman_row.OkToCall=ConvertStatus.convertOkToCall($scope.fisherman_row.OkToCallId);console.log("$scope.fisherman_row.OkToCall = "+$scope.fisherman_row.OkToCall);console.log("$scope.fisherman_row is next...");console.dir($scope.fisherman_row);var saveRow=angular.copy($scope.fisherman_row);console.log("saveRow is next...");console.dir(saveRow);$scope.saveResults={};console.log("$scope.saveResults is next...");console.dir($scope.saveResults);var promise=ProjectService.saveFisherman($scope.project.Id,saveRow,$scope.saveResults);if(typeof promise!=='undefined')
{console.log("promise is next...");console.dir(promise);promise.$promise.then(function(){$scope.postSaveFishermanUpdateGrid(promise);$modalInstance.dismiss();});}}};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-create-fisherman",function(){});var modal_link_field=['$scope','$modalInstance','$rootScope',function($scope,$modalInstance,$rootScope){console.log("Inside modals-controller.js, LinkModalCtrl...");if(typeof $scope.onRow!=='undefined')
$scope.onRow.errors=[];$scope.foundDuplicate=false;$scope.makeNewLink=function(){$scope.newLink={Name:"",Link:""}};$scope.makeNewLink();console.log("$scope.link_field.DbColumnName = "+$scope.link_field.DbColumnName);$scope.currentLinks=$scope.link_row[$scope.link_field.DbColumnName];console.log("$scope.currentLinks (before check) is next...");console.dir($scope.currentLinks);if($scope.currentLinks)
$scope.currentLinks=angular.fromJson($scope.currentLinks);else
$scope.currentLinks=[];console.log("$scope.currentLinks (after check) is next...");console.dir($scope.currentLinks);$rootScope.currentLinks=angular.copy($scope.currentLinks);console.log("$rootScope.currentLinks is next...");console.dir($rootScope.currentLinks);$scope.removeLink=function(link){console.log("Inside FileModalCtrl, removeLink...");console.log("link is next...");console.dir(link);console.log("$rootScope.currentLinks is next...");console.dir($rootScope.currentLinks);angular.forEach($scope.currentLinks,function(existing_link,key){if(existing_link.Link==link.Link)
$scope.currentLinks.splice(key,1);});angular.forEach($rootScope.currentLinks,function(existing_link,key){console.log("existing_link.Link = "+existing_link.Link+", link.Link = "+link.Link);var existing_linkLength=existing_link.Link.length;var linkLength=link.Link.length;console.log("existing_linkLength = "+existing_linkLength+", linkLength = "+linkLength);console.log("Check: "+existing_link.Name.indexOf(link.Link));if(existing_linkLength===linkLength){console.log("Lengths match...");if(existing_link.Link.indexOf(link.Link)!==-1){console.log("Link matches...");if($scope.subprojectType==="Habitat"){console.log("Habitat file...");}
$scope.currentLinks.splice(key,1);}}});}
$scope.addLink=function(){$scope.currentLinks.push($scope.newLink);console.log("$scope.currentLinks is next...");console.dir($scope.currentLinks);$scope.makeNewLink();}
$scope.save=function(){console.log("Inside modals-controller, LinkModalCtrl, save...");console.log("Adding link name(s) to the list.");$rootScope.viewSubproject=$scope.viewSubproject;$scope.link_row[$scope.link_field.DbColumnName]=angular.toJson($scope.currentLinks);console.log("$scope.link_row is next...");console.dir($scope.link_row);$modalInstance.dismiss();};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-link-field",function(){});var modal_verify_action=['$scope','$rootScope','$modalInstance','SubprojectService',function($scope,$rootScope,$modalInstance,SubprojectService){console.log("Inside ModalVerifyActionCtrl...");console.log("$scope.verifyAction = "+$scope.verifyAction);console.log("$scope.verifyingCaller = "+$scope.verifyingCaller);console.log("Calling program = "+$scope.verifyingCaller);if($scope.verifyingCaller==="CrppSubproject")
{console.log("CrppSubproject is calling...");$scope.header_title=$scope.verifyAction+" this CRPP project: "+$scope.viewSubproject.ProjectName;$scope.header_message=$scope.verifyAction.toLowerCase()+" this CRPP project: "+$scope.viewSubproject.ProjectName;}
else if($scope.verifyingCaller==="CorrespondenceEvent")
{console.log("CorrespondenceEvent is calling...");var intTLocation=$scope.ce_row.CorrespondenceDate.indexOf("T");var strCeDate=$scope.ce_row.CorrespondenceDate.substring(0,intTLocation);$scope.header_title=$scope.verifyAction+" this Correspondence Event: "+strCeDate;$scope.header_message=$scope.verifyAction+" this Correspondence Event: "+strCeDate+", by this Staff member: "+$scope.ce_row.StaffMember;}
else if($scope.verifyingCaller==="HabSubproject")
{console.log("HabSubproject is calling...");$scope.header_title=$scope.verifyAction+" this Habitat project: "+$scope.viewSubproject.ProjectName;$scope.header_message=$scope.verifyAction.toLowerCase()+" this Habitat project: "+$scope.viewSubproject.ProjectName;}
$scope.cancel=function(){$modalInstance.dismiss();$scope.verifyAction='undefined';};$scope.continueAction=function(){console.log("Inside continueAction...");console.log("$scope.verifyAction = "+$scope.verifyAction);var promise=null;if(($scope.verifyAction==="Delete")&&($scope.verifyingCaller==="CrppSubproject"))
{console.log("$scope.project.Id = "+$scope.project.Id+", $scope.viewSubproject.Id = "+$scope.viewSubproject.Id);promise=SubprojectService.removeSubproject($scope.project.Id,$scope.viewSubproject.Id);promise.$promise.then(function(){$scope.postRemoveSubprojectUpdateGrid();$modalInstance.dismiss();});}
else if(($scope.verifyAction==="Delete")&&($scope.verifyingCaller==="CorrespondenceEvent"))
{console.log("$scope.project.Id = "+$scope.project.Id+", $scope.viewSubproject.Id = "+$scope.viewSubproject.Id+", $scope.ce_RowId = "+$scope.ce_rowId);promise=SubprojectService.removeCorrespondenceEvent($scope.project.Id,$scope.viewSubproject.Id,$scope.ce_rowId);promise.$promise.then(function(){$modalInstance.dismiss();});}
else if(($scope.verifyAction==="Delete")&&($scope.verifyingCaller==="HabSubproject"))
{console.log("$scope.projectId = "+$scope.project.Id+", $scope.viewSubproject.Id = "+$scope.viewSubproject.Id);var theSdeObjectId=0;var keepGoing=true;promise=SubprojectService.removeHabSubproject(parseInt($scope.projectId),$scope.viewSubproject.Id,$scope.viewSubproject.LocationId);promise.$promise.then(function(){$scope.postRemoveHabitatSubprojectUpdateGrid();$modalInstance.dismiss();});}}}];define("core/common/components/modals/modal-verify-action",function(){});var modal_invalid_operation=['$scope','$modalInstance',function($scope,$modalInstance){$scope.header_title=$scope.invalidOperationTitle;$scope.header_message=$scope.invalidOperationMessage;$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/modals/modal-invalid-operation",function(){});var modal_file_add=['$scope','$modalInstance','DatasetService','ServiceUtilities','$rootScope',function($scope,$modalInstance,DatasetService,ServiceUtilities,$rootScope){console.log("Inside modals-controller.js, FileAddModalCtrl");if(typeof $scope.onRow!=='undefined')
$scope.onRow.errors=[];$scope.foundDuplicate=false;console.log("$scope.dataset.Files is next...");console.dir($scope.dataset.Files);console.log("$scope.file_field.DbColumnName = "+$scope.file_field.DbColumnName);$scope.currentFiles=$scope.file_row[$scope.file_field.DbColumnName];if($scope.currentFiles)
$scope.currentFiles=angular.fromJson($scope.currentFiles);else
$scope.currentFiles=[];console.log("$scope.currentFiles (after check) is next...");console.dir($scope.currentFiles);$rootScope.currentFiles=angular.copy($scope.currentFiles);console.log("$rootScope.currentFiles is next...");console.dir($rootScope.currentFiles);$scope.save=function(){console.log("Inside modals-controller, FileAddModalCtrl, save...");console.log("Adding file name(s) to the list.");$rootScope.viewSubproject=$scope.viewSubproject;var errors=[];console.log("$scope.filesToUpload is next...");console.dir($scope.filesToUpload);angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(incoming_file,key){incoming_file.Name=incoming_file.name;console.log("incoming_file.Name = "+incoming_file.Name);$scope.currentFiles.push(incoming_file);$scope.foundDuplicate=false;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);console.log("$scope.viewSubproject is next...");console.dir($scope.viewSubproject);if(($scope.viewSubproject)&&(($scope.DatastoreTablePrefix==="CrppContracts")||($scope.DatastoreTablePrefix==="Metrics")))
{console.log("Need to check subprojects for duplicate document...");for(var p=0;p<$scope.viewSubproject.Files.length;p++)
{if(incoming_file.Name.length<=$scope.viewSubproject.Files[p].Name.length)
{if($scope.viewSubproject.Files[p].Name.indexOf(incoming_file.Name)>-1)
{$scope.foundDuplicate=true;console.log(incoming_file.Name+" already exists in the subproject file list.");errors.push(incoming_file.Name+" already exists in list of subproject documents.");}}}}
else if($scope.dataset)
{console.log("Need to check dataset-level files for duplicate document...");for(var p=0;p<$scope.dataset.Files.length;p++)
{if(incoming_file.Name.length<=$scope.dataset.Files[p].Name.length)
{if($scope.dataset.Files[p].Name.indexOf(incoming_file.Name)>-1)
{$scope.foundDuplicate=true;console.log(incoming_file.Name+" already exists in the dataset file list.");errors.push(incoming_file.Name+" already exists in list of dataset documents.\n");}}}}
else
{console.log("Need to check project-level files for duplicate document...");for(var p=0;p<$scope.project.Files.length;p++)
{if(incoming_file.Name.length<=$scope.project.Files[p].Name.length)
{if($scope.project.Files[p].Name.indexOf(incoming_file.Name)>-1)
{$scope.foundDuplicate=true;console.log(incoming_file.Name+" already exists in the project file list.");errors.push(incoming_file.Name+" already exists in list of project documents.\n");}}}}});console.log("$scope.foundDuplicate = "+$scope.foundDuplicate);if(!$scope.foundDuplicate)
{console.log("$scope.file_field.DbColumnName = "+$scope.file_field.DbColumnName);$scope.file_row[$scope.file_field.DbColumnName]=angular.toJson($scope.currentFiles);console.log("$scope.file_row is next...");console.dir($scope.file_row);if($scope.DatastoreTablePrefix==="Harvest")
$rootScope.FieldSheetFile=$scope.FieldSheetFile=$scope.file_row.FieldSheetFile;else if($scope.DatastoreTablePrefix==="ScrewTrap")
$rootScope.FieldSheetFile=$scope.FieldSheetFile=$scope.file_row.FileTitle;else if($scope.DatastoreTablePrefix==="CrppContracts")
$rootScope.FieldSheetFile=$scope.FieldSheetFile=$scope.file_row.DocumentLink;else
$rootScope.FieldSheetFile=$scope.FieldSheetFile=$scope.file_row.FieldSheetFile;$rootScope.currentFiles=$scope.currentFiles;}
else
{$scope.filesToUpload[$scope.file_field.DbColumnName]=undefined;}
console.log("$rootScope is next...");console.dir($rootScope);$modalInstance.dismiss();if($scope.foundDuplicate)
alert(errors);};$scope.uploadWaypoints=function(){var formData=new FormData();angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(incoming_file,key){formData.append('file',incoming_file);});$.ajax({url:serviceUrl+'/api/v1/file/handlewaypoints',type:'POST',data:formData,processData:false,contentType:false,success:function(data){var waypoints=eval("("+data+")");var size=0,key;for(key in waypoints)
size++;alert(size+" waypoints loaded");$scope.__proto__.waypoints=waypoints;},error:function(jqXHR,error,errorThrown){if(jqXHR.status&&jqXHR.status==400){alert(jqXHR.responseText+"\n\n"+"Waypoints not loaded!");}else{alert("Error uploading file!");}}});$modalInstance.dismiss();};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/file/modal-file-add",function(){});var modal_file_delete=['$scope','$modalInstance','DatasetService','SubprojectService','$rootScope',function($scope,$modalInstance,DatasetService,SubprojectService,$rootScope){console.log("Inside modals-controller.js, FileDeleteModalCtrl");$scope.verifyBeforeDelete=false;$scope.readyToClose=false;if(typeof $scope.onRow!=='undefined')
$scope.onRow.errors=[];$scope.foundDuplicate=false;console.log("$scope.dataset.Files is next...");console.dir($scope.dataset.Files);console.log("$scope.file_field.DbColumnName = "+$scope.file_field.DbColumnName);$scope.currentFiles=$scope.file_row[$scope.file_field.DbColumnName];if($scope.currentFiles)
$scope.currentFiles=angular.fromJson($scope.currentFiles);else
$scope.currentFiles=[];console.log("$scope.currentFiles (after check) is next...");console.dir($scope.currentFiles);$rootScope.currentFiles=angular.copy($scope.currentFiles);console.log("$rootScope.currentFiles is next...");console.dir($rootScope.currentFiles);$scope.verifyDelete=function()
{console.log("Inside FileDeleteModalCtrl, verifyDelete...");$scope.verifyBeforeDelete=true;console.dir($scope.currentFiles);$rootScope.currentFiles=$scope.currentFiles;}
$scope.removeFiles=function()
{console.log("Inside FileDeleteModalCtrl, removeFiles...");console.log($scope);var tmpFiles=[];console.log("$rootScope.currentFiles is next...");console.dir($rootScope.currentFiles);angular.forEach($rootScope.currentFiles,function(existing_file,key){if(existing_file.DeleteThisFile)
{tmpFiles.push(existing_file);console.log("existing_file.Name = "+existing_file.Name);if($scope.DatastoreTablePrefix==="CrppContracts")
{console.log("CRPP file...");SubprojectService.deleteCorresEventFile($scope.projectId,$scope.subprojectId,$scope.ce_row.Id,file);}
else if($scope.DatastoreTablePrefix==="Metrics")
{console.log("Habitat file...");if((typeof $scope.hi_row!=='undefined')&&($scope.hi_row.Id!==null))
{console.log("We want to delete a Habitat Item file...");SubprojectService.deleteHabitatItemFile($scope.projectId,$scope.subprojectId,$scope.hi_row.Id,file);}
else
{console.log("We want to delete a Subproject file...");SubprojectService.deleteHabSubprojectFile($scope.projectId,$scope.subprojectId,file);}}
else if($scope.datasetId)
{console.log("Dataset file...");DatasetService.deleteDatasetFile($scope.projectId,$scope.datasetId,existing_file);}
var foundFile=false;while(!foundFile)
{if($scope.datasetId)
{console.log("We have a dataset file...");angular.forEach($scope.dataset.Files,function(dFile){if(!foundFile)
{if((typeof existing_file.Id==='undefined')||(existing_file.Id===null))
{console.log("dFile.Name = "+dFile.Name+", existing_file.Name = "+existing_file.Name);if(dFile.Name===existing_file.Name)
{foundFile=true;$scope.dataset.Files.splice(dFile.Id,1);console.log("Removed file from $scope.dataset.Files...");angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name===dFile.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);console.log("Removed file from $scope.filesToUpload...");}});}}
else if(dFile.Id===existing_file.Id)
{foundFile=true;$scope.dataset.Files.splice(dFile.Id,1);console.log("Removed file from $scope.dataset.Files...");angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name===dFile.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);console.log("Removed file from $scope.filesToUpload...");}});}}});if(foundFile)
{console.log("Found file in $scope.dataset.Files and removed it...");}
else
{console.log("Did not find file in $scope.dataset.Files...");foundFile=true;}}
else
{console.log("We have a project file...");angular.forEach($scope.project.Files,function(pFile){if(!foundFile)
{if((typeof existing_file.Id==='undefined')||(existing_file.Id===null))
{if(pFile.Name===existing_file.Name)
{foundFile=true;$scope.project.Files.splice(pFile.Id,1);console.log("Removed file from $scope.project.Files...");angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name===pFile.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);console.log("Removed file from $scope.filesToUpload...");}});}}
else if(pFile.Id===existing_file.Id)
{foundFile=true;$scope.project.Files.splice(pFile.Id,1);console.log("Removed file from $scope.project.Files...");angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name===pFile.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);console.log("Removed file from $scope.filesToUpload...");}});}}});if(foundFile)
console.log("Found file in $scope.project.Files and removed it.");else
{console.log("Did not find file in $scope.project.Files...");foundFile=true;}}}
$rootScope.currentFiles.splice(key,1);console.log("Deleted file from currentFiles");$scope.currentFiles=$rootScope.currentFiles;console.dir($rootScope.currentFiles);angular.forEach($scope.file_row,function(field,key){console.log("field = "+field+", key = "+key);if(key===$scope.file_field.DbColumnName)
{console.log("Found the field...");var theFiles=JSON.parse(field);console.dir(theFiles);angular.forEach(theFiles,function(item,key){console.log("item = "+item+", key = "+key);console.dir(item);if(item.Name===existing_file.Name)
{console.log("Names match...");theFiles.splice(key,1);}});$scope.file_row[$scope.file_field.DbColumnName]=JSON.stringify(theFiles);console.log("$scope.file_row[$scope.file_field.DbColumnName] = "+$scope.file_row[$scope.file_field.DbColumnName]);}});console.log("$scope.file_row is next...");console.dir($scope.file_row);}});angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){angular.forEach(tmpFiles,function(tmpFile){if(to_upload_file.Name==tmpFile.Name)
{$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);}});});$scope.readyToClose=true;}
$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/file/modal-file-delete",function(){});var modal_files=['$scope','$modalInstance','DatasetService','SubprojectService','$rootScope',function($scope,$modalInstance,DatasetService,SubprojectService,$rootScope){console.log("Inside modals-controller.js, FileModalCtrl");if(typeof $scope.onRow!=='undefined')
$scope.onRow.errors=[];$scope.foundDuplicate=false;console.log("$scope.file_field.DbColumnName = "+$scope.file_field.DbColumnName);$scope.currentFiles=$scope.file_row[$scope.file_field.DbColumnName];if($scope.currentFiles)
$scope.currentFiles=angular.fromJson($scope.currentFiles);else
$scope.currentFiles=[];console.log("$scope.currentFiles (after check) is next...");console.dir($scope.currentFiles);$rootScope.currentFiles=angular.copy($scope.currentFiles);console.log("$rootScope.currentFiles is next...");console.dir($rootScope.currentFiles);$scope.removeFile=function(file)
{console.log("Inside FileModalCtrl, removeFile...");console.log("file is next...");console.dir(file);console.log($scope);console.log("$rootScope.currentFiles is next...");console.dir($rootScope.currentFiles);angular.forEach($rootScope.currentFiles,function(existing_file,key){console.log("existing_file.Name = "+existing_file.Name+", file.Name = "+file.Name);var existing_fileLength=existing_file.Name.length;var fileNameLength=file.Name.length;console.log("existing_fileLength = "+existing_fileLength+", fileNameLength = "+fileNameLength);console.log("Check: "+existing_file.Name.indexOf(file.Name));if(existing_fileLength===fileNameLength)
{console.log("Lengths match...");if(existing_file.Name.indexOf(file.Name)!==-1)
{console.log("Name matches...");if($scope.DatastoreTablePrefix==="CrppContracts")
{console.log("CRPP file...");SubprojectService.deleteCorresEventFile($scope.projectId,$scope.subprojectId,$scope.ce_row.Id,file);}
else if($scope.DatastoreTablePrefix==="Metrics")
{console.log("Habitat file...");if((typeof $scope.hi_row!=='undefined')&&($scope.hi_row.Id!==null))
{console.log("We want to delete a Habitat Item file...");SubprojectService.deleteHabitatItemFile($scope.projectId,$scope.subprojectId,$scope.hi_row.Id,file);}
else
{console.log("We want to delete a Subproject file...");SubprojectService.deleteHabSubprojectFile($scope.projectId,$scope.subprojectId,file);}}
else if($scope.datasetId)
{console.log("Dataset file...");DatasetService.deleteDatasetFile($scope.projectId,$scope.datasetId,file);}
$rootScope.currentFiles.splice(key,1);console.log("Deleted file from currentFiles");$scope.currentFiles=$rootScope.currentFiles;console.dir($rootScope.currentFiles);var foundFile=false;while(!foundFile)
{if($scope.datasetId)
{angular.forEach($scope.dataset.Files,function(dFile){if(!foundFile)
{if((typeof file.Id==='undefined')||(file.Id===null))
{if(dFile.Name===file.Name)
{foundFile=true;$scope.dataset.Files.splice(dFile.Id,1);console.log("Removed file from $scope.dataset.Files...");angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name===dFile.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);console.log("Removed file from $scope.filesToUpload...");}});}}
else if(dFile.Id===file.Id)
{foundFile=true;$scope.dataset.Files.splice(dFile.Id,1);console.log("Removed file from $scope.dataset.Files...");angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name===dFile.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);console.log("Removed file from $scope.filesToUpload...");}});}}});if(foundFile)
console.log("Found file in $scope.dataset.Files and removed it.");else
{console.log("Did not find file in $scope.dataset.Files...");foundFile=true;}}
else
{angular.forEach($scope.project.Files,function(pFile){if(!foundFile)
{if((typeof file.Id==='undefined')||(file.Id===null))
{if(pFile.Name===file.Name)
{foundFile=true;$scope.project.Files.splice(pFile.Id,1);console.log("Removed file from $scope.project.Files...");angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name===pFile.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);console.log("Removed file from $scope.filesToUpload...");}});}}
else if(pFile.Id===file.Id)
{foundFile=true;$scope.project.Files.splice(pFile.Id,1);console.log("Removed file from $scope.project.Files...");angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name===pFile.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);console.log("Removed file from $scope.filesToUpload...");}});}}});if(foundFile)
console.log("Found file in $scope.project.Files and removed it.");else
{console.log("Did not find file in $scope.project.Files...");foundFile=true;}}}}}});if(!file.Id)
{try{angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(to_upload_file,key){if(to_upload_file.Name==file.Name){$scope.filesToUpload[$scope.file_field.DbColumnName].splice(key,1);}});}
catch(e)
{console.dir(e);}}}
$scope.save=function(){console.log("Inside modals-controller, FileModalCtrl, save...");console.log("Adding file name(s) to the list.");$rootScope.viewSubproject=$scope.viewSubproject;var errors=[];console.log("$scope.filesToUpload is next...");console.dir($scope.filesToUpload);angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(incoming_file,key){incoming_file.Name=incoming_file.name;console.log("incoming_file.Name = "+incoming_file.Name);$scope.currentFiles.push(incoming_file);$scope.foundDuplicate=false;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);console.log("$scope.dataset is next..");console.dir($scope.dataset);console.log("$scope.viewSubproject is next...");console.dir($scope.viewSubproject);if(($scope.viewSubproject)&&(($scope.DatastoreTablePrefix==="CrppContracts")||($scope.DatastoreTablePrefix==="Metrics")))
{console.log("Need to check subprojects for duplicate document...");if($scope.viewSubproject.Files)
{for(var p=0;p<$scope.viewSubproject.Files.length;p++)
{if(incoming_file.Name.length<=$scope.viewSubproject.Files[p].Name.length)
{if($scope.viewSubproject.Files[p].Name.indexOf(incoming_file.Name)>-1)
{$scope.foundDuplicate=true;console.log(incoming_file.Name+" already exists in the subproject file list.");errors.push(incoming_file.Name+" already exists in list of subproject documents.");}}}}}
else if($scope.dataset)
{console.log("Need to check dataset-level files for duplicate document...");if($scope.dataset.Files)
{console.log("$scope.dataset.Files is next...");console.dir($scope.dataset.Files);for(var p=0;p<$scope.dataset.Files.length;p++)
{if(incoming_file.Name.length<=$scope.dataset.Files[p].Name.length)
{if($scope.dataset.Files[p].Name.indexOf(incoming_file.Name)>-1)
{$scope.foundDuplicate=true;console.log(incoming_file.Name+" already exists in the dataset file list.");errors.push(incoming_file.Name+" already exists in list of dataset documents.\n");}}}}}
else
{console.log("Need to check project-level files for duplicate document...");if($scope.project.Files)
{for(var p=0;p<$scope.project.Files.length;p++)
{if(incoming_file.Name.length<=$scope.project.Files[p].Name.length)
{if($scope.project.Files[p].Name.indexOf(incoming_file.Name)>-1)
{$scope.foundDuplicate=true;console.log(incoming_file.Name+" already exists in the project file list.");errors.push(incoming_file.Name+" already exists in list of project documents.\n");}}}}}});console.log("$scope.foundDuplicate = "+$scope.foundDuplicate);if(!$scope.foundDuplicate)
{console.log("$scope.file_field.DbColumnName = "+$scope.file_field.DbColumnName);$scope.file_row[$scope.file_field.DbColumnName]=angular.toJson($scope.currentFiles);console.log("$scope.file_row is next...");console.dir($scope.file_row);if($scope.DatastoreTablePrefix==="Harvest")
$rootScope.FieldSheetFile=$scope.FieldSheetFile=$scope.file_row.FieldSheetFile;else if($scope.DatastoreTablePrefix==="ScrewTrap")
$rootScope.FieldSheetFile=$scope.FieldSheetFile=$scope.file_row.FileTitle;else
{console.log("Neither Harvest nor ScrewTrap");$rootScope.FieldSheetFile=$scope.FieldSheetFile=$scope.file_row.FieldSheetFile;}
$rootScope.currentFiles=$scope.currentFiles;}
else
{$scope.filesToUpload[$scope.file_field.DbColumnName]=undefined;}
$modalInstance.dismiss();if($scope.foundDuplicate)
alert(errors);};$scope.uploadWaypoints=function(){var formData=new FormData();angular.forEach($scope.filesToUpload[$scope.file_field.DbColumnName],function(incoming_file,key){formData.append('file',incoming_file);});$.ajax({url:serviceUrl+'/api/v1/file/handlewaypoints',type:'POST',data:formData,processData:false,contentType:false,success:function(data){var waypoints=eval("("+data+")");var size=0,key;for(key in waypoints)
size++;alert(size+" waypoints loaded");$scope.__proto__.waypoints=waypoints;},error:function(jqXHR,error,errorThrown){if(jqXHR.status&&jqXHR.status==400){alert(jqXHR.responseText+"\n\n"+"Waypoints not loaded!");}else{alert("Error uploading file!");}}});$modalInstance.dismiss();};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/file/modal-files",function(){});var modal_exportfile=['$scope','DatasetService','$modalInstance','$window',function($scope,DatasetService,$modalInstance,$window){$scope.Export={Filename:"Export.csv"};$scope.ok=function(){$scope.downloadQuery=$scope.buildQuery();$scope.downloadQuery.criteria.Filename=$scope.Export.Filename;DatasetService.exportActivities($scope.downloadQuery);};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/common/components/file/modal-exportfile",function(){});common_module.directive('checklistModel',['$parse','$compile',function($parse,$compile){function contains(arr,item){if(angular.isArray(arr)){for(var i=0;i<arr.length;i++){if(angular.equals(arr[i],item)){return true;}}}
return false;}
function add(arr,item){arr=angular.isArray(arr)?arr:[];for(var i=0;i<arr.length;i++){if(angular.equals(arr[i],item)){return arr;}}
arr.push(item);return arr;}
function remove(arr,item){if(angular.isArray(arr)){for(var i=0;i<arr.length;i++){if(angular.equals(arr[i],item)){arr.splice(i,1);break;}}}
return arr;}
function postLinkFn(scope,elem,attrs){$compile(elem)(scope);var getter=$parse(attrs.checklistModel);var setter=getter.assign;var value=$parse(attrs.checklistValue)(scope.$parent);scope.$watch('checked',function(newValue,oldValue){if(newValue===oldValue){return;}
var current=getter(scope.$parent);if(newValue===true){setter(scope.$parent,add(current,value));}else{setter(scope.$parent,remove(current,value));}});scope.$parent.$watch(attrs.checklistModel,function(newArr,oldArr){scope.checked=contains(newArr,value);},true);}
return{restrict:'A',priority:1000,terminal:true,scope:true,compile:function(tElement,tAttrs){if(tElement[0].tagName!=='INPUT'||!tElement.attr('type','checkbox')){throw'checklist-model should be applied to `input[type="checkbox"]`.';}
if(!tAttrs.checklistValue){throw'You should provide `checklist-value`.';}
tElement.removeAttr('checklist-model');tElement.attr('ng-model','checked');return postLinkFn;}};}]);define("core/common/directives/checklists",function(){});(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');ga('create',ANALYTICS_CODE,'auto');ga('send','pageview');define('app',['angular'],function(angular){var app=angular.module("app",['ngRoute','ngGrid','CommonModule','ProjectModule','DatasetModule','AdminModule','PreferencesModule','angularFileUpload','angularCharts','CrppModule','AppraisalsModule','HabitatModule',]).config(['$routeProvider',function($routeProvider){$routeProvider.when('/projects',{templateUrl:'app/core/projects/components/project-list/templates/projects.html',controller:'project-list-ctrl'});$routeProvider.when('/projects/:Id',{templateUrl:'app/core/projects/components/project-detail/templates/project-datasets.html',controller:'project-detail-ctrl'});$routeProvider.when('/mydata',{templateUrl:'app/core/preferences/components/dataset-preferences/templates/mydatasets.html',controller:'MyDatasetsCtrl'});$routeProvider.when('/myprojects',{templateUrl:'app/core/preferences/components/project-preferences/templates/myprojects.html',controller:'MyProjectsCtrl'});$routeProvider.when('/mypreferences',{templateUrl:'app/core/preferences/components/my-preferences/templates/mypreferences.html',controller:'MyPreferencesCtrl'});$routeProvider.when('/activities/:Id',{templateUrl:'app/core/datasets/components/dataset-activities-list/templates/dataset-activities.html',controller:'DatasetActivitiesCtrl',permission:'Edit'});$routeProvider.when('/dataview/:Id',{templateUrl:'app/core/datasets/components/dataset-view/templates/dataset-view.html',controller:'DatasetViewCtrl'});$routeProvider.when('/dataentry/:Id',{templateUrl:'app/core/datasets/components/dataset-entry-sheet/templates/dataset-entry-sheet.html',controller:'DataEntryDatasheetCtrl',permission:'Edit'});$routeProvider.when('/dataentryform/:Id',{templateUrl:'app/core/datasets/components/dataset-entry-form/templates/dataset-entry-form.html',controller:'DataEntryFormCtrl',permission:'Edit'});$routeProvider.when('/edit/:Id',{templateUrl:'app/core/datasets/components/dataset-editor/templates/dataset-edit-form.html',controller:'DataEditCtrl',permission:'Edit'});$routeProvider.when('/datasetquery/:Id',{templateUrl:'app/core/datasets/components/dataset-query/templates/dataset-query.html',controller:'DataQueryCtrl'});$routeProvider.when('/dataset-details/:Id',{templateUrl:'app/core/datasets/components/dataset-detail/templates/dataset-details-view.html',controller:'DatasetDetailsCtrl'});$routeProvider.when('/datasetimport/:Id',{templateUrl:'app/core/datasets/components/dataset-import/templates/dataset-import.html',controller:'DatasetImportCtrl',permission:'Edit'});$routeProvider.when('/dataset-edit/:Id',{templateUrl:'app/core/datasets/components/dataset-detail/templates/dataset-details-edit.html',controller:'DatasetDetailsCtrl',permission:'Edit'});$routeProvider.when('/query/:Id',{templateUrl:'app/core/datasets/components/dataset-query/templates/dataset-query.html',controller:'DatastoreQueryCtrl'});$routeProvider.when('/admin',{templateUrl:'app/core/admin/components/admin-page/templates/admin.html',controller:'AdminCtrl'});$routeProvider.when('/admin-dataset/:Id',{templateUrl:'app/core/admin/components/admin-page/templates/admin-dataset.html',controller:'AdminEditDatasetCtrl'});$routeProvider.when('/admin-master/:Id',{templateUrl:'app/core/admin/components/admin-page/templates/admin-master.html',controller:'AdminEditMasterCtrl'});$routeProvider.when('/appraisals/:Id',{templateUrl:'app/private/appraisals/components/appraisal-activities/templates/appraisal-activities.html',controller:'AppraisalCtrl'});$routeProvider.when('/unauthorized',{templateUrl:'app/core/common/templates/unauthorized.html',controller:'ErrorCtrl'});$routeProvider.otherwise({redirectTo:'/projects'});}]);app.run(function($rootScope,$window,$location){$rootScope.config={version:CURRENT_VERSION,CDMS_DOCUMENTATION_URL:CDMS_DOCUMENTATION_URL,};$rootScope.Cache={};$rootScope.Profile=configureProfile(profile);$rootScope.go=function(path){$location.path(path);};angular.rootScope=$rootScope;$rootScope.SystemTimezones=SystemTimezones;$rootScope.DataGradeMethods=DataGradeMethods;$rootScope.$on('$locationChangeSuccess',function(){if(ENVIRONMENT!="prod")return;console.log("Sending "+$location.url()+" to: "+ANALYTICS_CODE);$window.ga('send',{'hitType':'screenview','appName':'CDMS','screenName':$location.url()});});});return app;});function configureProfile(profile)
{console.log("Inside main.js, configureProfile...");if((typeof profile==='undefined')||(profile===null))
{return;}
var favoriteDatasets=getByName(profile.UserPreferences,"Datasets");if(favoriteDatasets)
profile.favoriteDatasets=favoriteDatasets.Value.split(",");else
profile.favoriteDatasets=[];var favoriteProjects=getByName(profile.UserPreferences,"Projects");if(favoriteProjects)
profile.favoriteProjects=favoriteProjects.Value.split(",");else
profile.favoriteProjects=[];if(profile.Roles)
profile.Roles=angular.fromJson(profile.Roles);profile.isAdmin=function()
{return(profile.hasRole("Admin"));};profile.hasRole=function(role)
{if(profile.Roles)
return profile.Roles.contains(role);return false;}
profile.canEdit=function(project)
{return(profile.isProjectOwner(project)||profile.isProjectEditor(project));};profile.isProjectOwner=function(project){if(project&&project.OwnerId==profile.Id)
return true;if(profile.isAdmin())
return true;return false;};profile.isProjectEditor=function(project){var isEditor=false;if(project&&project.Editors)
{for(var i=0;i<project.Editors.length;i++){var editor=project.Editors[i];if(editor.Id==profile.Id)
{isEditor=true;break;}}}
return isEditor;};profile.isDatasetFavorite=function(datasetId){return(profile.favoriteDatasets.indexOf(datasetId+"")!=-1);};profile.isProjectFavorite=function(projectId){return(profile.favoriteProjects.indexOf(projectId+"")!=-1);};profile.toggleDatasetFavorite=function(dataset)
{var dsid=dataset.Id+"";var index=profile.favoriteDatasets.indexOf(dsid);if(index==-1)
profile.favoriteDatasets.push(dsid);else
profile.favoriteDatasets.splice(index,1);};profile.toggleProjectFavorite=function(project)
{var dsid=project.Id+"";var index=profile.favoriteProjects.indexOf(dsid);if(index==-1)
profile.favoriteProjects.push(dsid);else
profile.favoriteProjects.splice(index,1);};return profile;};define('core/common/directives/feature-layer',['app','esri/layers/FeatureLayer'],function(app,FeatureLayer){app.directive('esriFeatureLayer',function(){return{restrict:'E',require:["esriFeatureLayer","^esriMap"],replace:true,controller:function($scope,$element,$attrs){var layer=new FeatureLayer($attrs.url);var filter=$attrs.filter;this.getLayer=function(){return layer;};this.getFilter=function(){return filter;};},link:function(scope,element,attrs,controllers){var layerController=controllers[0];var mapController=controllers[1];mapController.addLayer(layerController.getLayer(),layerController.getFilter());}};});});define('core/common/directives/map',['app','esri/map','esri/geometry/Point','esri/dijit/InfoWindow','esri/InfoTemplate','esri/dijit/BasemapLayer','esri/dijit/BasemapGallery','esri/dijit/Basemap','esri/virtualearth/VETiledLayer'],function(app,Map,Point,InfoWindow,InfoTemplate,VETiledLayer){app.directive('esriMap',function(){return{restrict:'E',scope:false,compile:function($element,$attrs){$element.removeAttr("id");$element.append("<div id="+$attrs.id+"></div>");return function(scope,element,attrs,controller){scope.$watch("center",function(newCenter,oldCenter){if(newCenter!==oldCenter){controller.centerAt(newCenter);}});};},controller:function($scope,$element,$attrs){var bing_layers_map={BingMapsRoad:esri.virtualearth.VETiledLayer.MAP_STYLE_ROAD,BingMapsAerial:esri.virtualearth.VETiledLayer.MAP_STYLE_AERIAL,BingMapsHybrid:esri.virtualearth.VETiledLayer.MAP_STYLE_AERIAL_WITH_LABELS};console.dir(bing_layers_map);var mapOptions={center:($attrs.center)?$attrs.center.split(","):$scope.center,zoom:($attrs.zoom)?$attrs.zoom:$scope.zoom,spatialReference:{wkid:102100}};var map=new Map($attrs.id,mapOptions);map.selectedBasemap=defaultLayer;map.basemaps=[];for(var property in datasetActivitiesBasemapConfig){if(datasetActivitiesBasemapConfig.hasOwnProperty(property))
{map.basemaps.push({label:datasetActivitiesBasemapConfig[property].Display,name:property});}};map.updateLayers=function(){console.log("Changing Layer: "+map.selectedBasemap);try{map.removeAllLayers();var new_layer=undefined;if(datasetActivitiesBasemapConfig[map.selectedBasemap].library=='CTUIR')
new_layer=new esri.layers.ArcGISTiledMapServiceLayer(datasetActivitiesBasemapConfig[map.selectedBasemap].ServiceURL);else if(datasetActivitiesBasemapConfig[map.selectedBasemap].library=='Esri')
{new_layer=new esri.layers.ArcGISTiledMapServiceLayer(datasetActivitiesBasemapConfig[map.selectedBasemap].type);console.log("Created new_layer using ESRI...");}
else if(datasetActivitiesBasemapConfig[map.selectedBasemap].library=='Bing')
{new_layer=new esri.virtualearth.VETiledLayer({bingMapsKey:BING_KEY,mapStyle:bing_layers_map[datasetActivitiesBasemapConfig[map.selectedBasemap].type]});console.log("Created new_layer using Bing...");}
map.addLayer(new_layer);map.currentBasemapLayer=new_layer;if(map.locationLayer)
map.addLayer(map.locationLayer);map.parcelLayer=new esri.layers.GraphicsLayer();map.addLayer(map.parcelLayer);console.log("done!");map.reposition();}
catch(e)
{console.dir(e);}};map.updateLayers();this.addLayer=function(layer,filter){map.locationLayer=map.addLayer(layer);layer.showLocationsById=function(locationObjectIds){try{this.clearSelection();var definitionExpression="";if(locationObjectIds==="")
{console.log("locationObjectIds is blank; give it a number, but we won't pull anything...");definitionExpression="OBJECTID IN (0)";}
else
{console.log("locationObjectIds has something; pull only those points...");definitionExpression="OBJECTID IN ("+locationObjectIds+")";}
console.log("Definition expression: "+definitionExpression);this.setDefinitionExpression(definitionExpression);this.refresh();}
catch(e)
{console.dir(e);}};if(filter&&filter=="location")
{if(typeof $scope.locationObjectIds=="undefined")
{$scope.$watch('locationObjectIds',function(){if(typeof $scope.locationObjectIds=="undefined")
return;layer.showLocationsById($scope.locationObjectIds);layer.show();});}}
return map.locationLayer;};this.centerAt=function(center){var point=new Point({x:center[0],y:center[1],spatialReference:{wkid:102100}});map.centerAt(point);};map.on("click",function(e){$scope.$emit("map.click",e);$scope.$apply(function($scope){$scope.click.call($scope,e);});});map.on("load",function(e){});$scope.map=map;}};});});common_module.directive('ctuirTextField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-text.html',restrict:'E',};return result;});common_module.directive('ctuirTextareaField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-textarea.html',restrict:'E',};return result;});common_module.directive('ctuirDateField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-date.html',restrict:'E',};return result;});common_module.directive('ctuirTimeField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-time.html',restrict:'E',};return result;});common_module.directive('ctuirEastingField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-easting.html',restrict:'E',};return result;});common_module.directive('ctuirNorthingField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-northing.html',restrict:'E',};return result;});common_module.directive('ctuirNumberField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-number.html',restrict:'E',};return result;});common_module.directive('ctuirSelectField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-select.html',restrict:'E',controller:function($scope,$element,$attrs){$scope.selectOptions=makeObjectsFromValues($scope.dataset.DatastoreId+$scope.field.DbColumnName,$scope.field.Field.PossibleValues);}};return result;});common_module.directive('ctuirMultiselectField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-multiselect.html',restrict:'E',controller:function($scope,$element,$attrs){$scope.selectOptions=makeObjectsFromValues($scope.dataset.DatastoreId+$scope.field.DbColumnName,$scope.field.Field.PossibleValues);}};return result;});common_module.directive('ctuirMultilookupField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-multilookup.html',restrict:'E',controller:function($scope,$element,$attrs){$scope.selectOptions=makeObjectsFromValues($scope.dataset.DatastoreId+$scope.field.DbColumnName,$scope.field.Field.PossibleValues);}};return result;});common_module.directive('ctuirLookupField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-lookup.html',restrict:'E',controller:function($scope,$element,$attrs){$scope.selectOptions=makeObjectsFromValues($scope.dataset.DatastoreId+$scope.field.DbColumnName,$scope.field.Field.PossibleValues);}};return result;});common_module.directive('ctuirFileField',function($modal){var result={templateUrl:'app/core/common/templates/grid-fields/field-file.html',restrict:'E',};return result;});common_module.directive('ctuirTempWaypointFileField',function($modal){var result={templateUrl:'app/core/common/templates/grid-fields/field-waypoint-file.html',restrict:'E',};return result;});common_module.directive('ctuirLinkField',function($modal){var result={templateUrl:'app/core/common/templates/grid-fields/field-link.html',restrict:'E',controller:function($scope,$element,$attrs)
{$scope.openLinkModal=function(row,field)
{$scope.link_row=row;$scope.link_field=field;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-link-field.html',controller:'LinkModalCtrl',scope:$scope,});};}};return result;});common_module.directive('ctuirRadioField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-radio.html',restrict:'E',};return result;});common_module.directive('ctuirCheckboxField',function(){var result={templateUrl:'app/core/common/templates/grid-fields/field-checkbox.html',restrict:'E',};return result;});common_module.directive('uiSelectWrapper',function(){return{link:function(scope,element,attrs){var uiSelectController=element.children().controller('uiSelect');console.log("uiSelectController is next...");console.dir(uiSelectController);}}});common_module.directive('multiselect',function(){return{scope:true,link:function(scope,element,attrs){element.multiselect({onChange:function(optionElement,checked){optionElement.removeAttr('selected');if(checked){optionElement.attr('selected','selected');}
element.change();}});scope.$watch(function(){return element[0].length;},function(){element.multiselect('rebuild');});scope.$watch(attrs.ngModel,function(){element.multiselect('refresh');});}};});define("core/common/directives/field-definitions",function(){});common_module.directive('showtab',function(){return{link:function(scope,element,attrs){element.click(function(e){e.preventDefault();$(element).tab('show');});}};});common_module.directive('ngBlur',function(){return function(scope,elem,attrs){elem.bind('blur',function(){scope.$apply(attrs.ngBlur);});};});common_module.directive('projectRole',function($rootScope){return{link:function(scope,element,attrs)
{if(!attrs.projectRole)
{throw new Exception("Configuration error: project-role attribute must specify a target role name, 'owner' or 'editor'.");}
var role=attrs.projectRole.trim();if(role!='owner'&&role!='editor')
throw new Exception("Configuration error: project-role attribute must be 'owner' or 'editor'.");var show=false;function applyRoleToElement()
{if(role=='owner'&&$rootScope.Profile.isProjectOwner(scope.project))
{show=true;}
if(role=='editor'&&($rootScope.Profile.isProjectOwner(scope.project)||$rootScope.Profile.isProjectEditor(scope.project)))
{show=true;}
if(show)
element.show();else
element.hide();}
if(!scope.project||!scope.project.$resolved)
{var projectWatch=scope.$watch('project',function(){if(scope.project!=null)
{projectWatch();scope.project.$promise.then(function(){applyRoleToElement();});}});}
applyRoleToElement();}};});common_module.directive('hasRole',function($rootScope){return{link:function(scope,element,attrs){if(!attrs.hasRole)
return;var value=attrs.hasRole.trim();var notPermissionFlag=value[0]==='!';if(notPermissionFlag)
value.slice(1).trim();if(!$rootScope.Profile.Roles)
$rootScope.Profile.Roles=[];var hasPermission=$rootScope.Profile.Roles[value]?true:false;if(hasPermission||(notPermissionFlag&&!hasPermission))
{console.log("hasPermission("+value+") = true");element.show();}
else
{console.log("hasPermission("+value+") = false");element.hide();}}};});define("core/common/directives/roles",function(){});var INTEGER_REGEXP=/^\-?\d+$/;common_module.directive('integer',function(){return{require:'ngModel',link:function(scope,elm,attrs,ctrl){ctrl.$parsers.unshift(function(viewValue){if(viewValue==""){ctrl.$setValidity('integer',true);return true;}
if(INTEGER_REGEXP.test(viewValue)){ctrl.$setValidity('integer',true);return parseInt(viewValue);}else{ctrl.$setValidity('integer',false);return undefined;}});}};});var INTEGER_REGEXP=/^\d{4}$/;common_module.directive('integerfour',function(){return{require:'ngModel',link:function(scope,elm,attrs,ctrl){ctrl.$parsers.unshift(function(viewValue){if(viewValue==""){ctrl.$setValidity('integer',true);return true;}
if(INTEGER_REGEXP.test(viewValue)){ctrl.$setValidity('integer',true);return parseInt(viewValue);}else{ctrl.$setValidity('integer',false);return undefined;}});}};});var FLOAT_REGEXP=/^\-?\d+((\.)\d+)?$/;common_module.directive('smartfloat',function(){return{require:'ngModel',link:function(scope,elm,attrs,ctrl){ctrl.$parsers.unshift(function(viewValue){if(viewValue==""){ctrl.$setValidity('float',true);return true;}
if(FLOAT_REGEXP.test(viewValue)){ctrl.$setValidity('float',true);return parseFloat(viewValue.replace(',','.'));}else{ctrl.$setValidity('float',false);return undefined;}});}};});var FLOAT_REGEXP6=/^\-?\d{6}((\.)\d+)?$/;common_module.directive('sixfloat',function(){return{require:'ngModel',link:function(scope,elm,attrs,ctrl){ctrl.$parsers.unshift(function(viewValue){if(viewValue==""){ctrl.$setValidity('float',true);return true;}
if(FLOAT_REGEXP6.test(viewValue)){ctrl.$setValidity('float',true);return parseFloat(viewValue.replace(',','.'));}else{ctrl.$setValidity('float',false);return undefined;}});}};});var FLOAT_REGEXP7=/^\-?\d{7}((\.)\d+)?$/;common_module.directive('sevenfloat',function(){return{require:'ngModel',link:function(scope,elm,attrs,ctrl){ctrl.$parsers.unshift(function(viewValue){if(viewValue==""){ctrl.$setValidity('float',true);return true;}
if(FLOAT_REGEXP7.test(viewValue)){ctrl.$setValidity('float',true);return parseFloat(viewValue.replace(',','.'));}else{ctrl.$setValidity('float',false);return undefined;}});}};});common_module.directive('textrequired',function(){return{require:'ngModel',link:function(scope,elm,attrs,ctrl){ctrl.$parsers.unshift(function(viewValue){if(viewValue==""){ctrl.$setValidity('text',false);return undefined;}
else{ctrl.$setValidity('text',true);return true;}});}};});define("core/common/directives/validation",function(){});var adultweir_chartservice=[function(){var service={dataset:"AdultWeir",getChartConfig:function(){var config={title:'Fish by Species',tooltips:true,labels:false,legend:{display:true,position:'right'}};return config;},getDefaultChartData:function(){var defaultChartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};return defaultChartData;},getChartData:function(data){var dataCalc={};angular.forEach(data,function(row,key){var num=(row.TotalFishRepresented)?row.TotalFishRepresented:1;if(row.Species){if(!dataCalc[row.Species])
dataCalc[row.Species]={total:0,males:0,females:0};dataCalc[row.Species].total+=num;if(row.Sex=="M")
dataCalc[row.Species].males+=num;if(row.Sex=="F")
dataCalc[row.Species].females+=num;}});var data={"series":["Total","Male","Female"],"data":[]};angular.forEach(dataCalc,function(vals,species){data['data'].push({"x":species,"y":[vals.total,vals.males,vals.females],});});return data;},buildChart:function(){},};return service;}];define("core/common/components/chart/adultweir-chartservice",function(){});var artificialproduction_chartservice=[function(){var service={dataset:"ArtificialProduction",getChartConfig:function(){console.log("Inside getChartConfig...");var config={title:'Fish by Species',tooltips:true,labels:false,legend:{display:true,position:'right'}};return config;},getDefaultChartData:function()
{var defaultChartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};return defaultChartData;},getChartData:function(data)
{console.log("Inside getChartData...");var dataCalc={};angular.forEach(data,function(row,key){var num=(row.TotalFishRepresented)?row.TotalFishRepresented:1;if(row.Species)
{if(!dataCalc[row.Species])
dataCalc[row.Species]={total:0,males:0,females:0};dataCalc[row.Species].total+=num;if(row.Sex=="M")
dataCalc[row.Species].males+=num;if(row.Sex=="F")
dataCalc[row.Species].females+=num;}});var data={"series":["Total","Male","Female"],"data":[]};angular.forEach(dataCalc,function(vals,species){data['data'].push({"x":species,"y":[vals.total,vals.males,vals.females],});});console.log(data);return data;},buildChart:function(){},};return service;}];define("core/common/components/chart/artificialproduction-chartservice",function(){});var bsample_chartservice=[function(){var service={dataset:"BSample",getChartConfig:function(){var config={title:'Fish by Species',tooltips:true,labels:false,legend:{display:true,position:'right'}};return config;},getDefaultChartData:function()
{var defaultChartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};return defaultChartData;},getChartData:function(data)
{var dataCalc={};angular.forEach(data,function(row,key){var num=(row.TotalFishRepresented)?row.TotalFishRepresented:1;if(row.Species)
{if(!dataCalc[row.Species])
dataCalc[row.Species]={total:0,males:0,females:0};dataCalc[row.Species].total+=num;if(row.Sex=="M")
dataCalc[row.Species].males+=num;if(row.Sex=="F")
dataCalc[row.Species].females+=num;}});var data={"series":["Total","Male","Female"],"data":[]};angular.forEach(dataCalc,function(vals,species){data['data'].push({"x":species,"y":[vals.total,vals.males,vals.females],});});return data;},buildChart:function(){},};return service;}];define("core/common/components/chart/bsample-chartservice",function(){});var creelsurvey_chartservice=[function(){var service={dataset:"CreelSurvey",getChartConfig:function(){var config={title:'Fish by Species',tooltips:true,labels:false,legend:{display:true,position:'right'}};return config;},getDefaultChartData:function()
{var defaultChartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};return defaultChartData;},getChartData:function(data)
{var dataCalc={};angular.forEach(data,function(row,key){var num=row.FishCount;if(row.Species)
{if(!dataCalc[row.Species])
dataCalc[row.Species]={total:0,males:0,females:0};dataCalc[row.Species].total+=num;if(row.Sex=="M")
dataCalc[row.Species].males+=num;if(row.Sex=="F")
dataCalc[row.Species].females+=num;}});var data={"series":["Total","Male","Female"],"data":[]};angular.forEach(dataCalc,function(vals,species){data['data'].push({"x":species,"y":[vals.total,vals.males,vals.females],});});return data;},buildChart:function(){},};return service;}];define("core/common/components/chart/creelsurvey-chartservice",function(){});var electrofishing_chartservice=[function(){var service={dataset:"ElectroFishing",getChartConfig:function(){var config={title:'Fish Count',tooltips:true,labels:false,legend:{display:true,position:'right'}};return config;},getDefaultChartData:function()
{var defaultChartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};return defaultChartData;},getChartData:function(data)
{var dataCalc={};angular.forEach(data,function(row,key){var num=row.FishCount||1;var species=row.SpeciesRunRearing||row.OtherSpecies||row.Species||'Not specified';if(species)
{if(!dataCalc[species])
dataCalc[species]={total:0};dataCalc[species].total+=num;}});var data={"series":["Total"],"data":[]};angular.forEach(dataCalc,function(vals,species){data['data'].push({"x":species,"y":[vals.total],});});console.log("Inside chartservices.js, getChartData (EF, ST, FS, SGS), data is next...");console.dir(data);return data;},buildChart:function(){},};return service;}];define("core/common/components/chart/electrofishing-chartservice",function(){});var snorkelfish_chartservice=[function(){var service={dataset:"SnorkelFish",getChartConfig:function(){var config={title:'Fish Count',tooltips:true,labels:false,legend:{display:true,position:'right'}};return config;},getDefaultChartData:function()
{var defaultChartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};return defaultChartData;},getChartData:function(data)
{var dataCalc={};angular.forEach(data,function(row,key){var num=row.FishCount;if(row.Species)
{if(!dataCalc[row.Species])
dataCalc[row.Species]={total:0};dataCalc[row.Species].total+=num;}});var data={"series":["Total"],"data":[]};angular.forEach(dataCalc,function(vals,species){data['data'].push({"x":species,"y":[vals.total],});});console.log("Inside chartservices.js, snorkelfish at end of getChartData, data is next...");console.dir(data);return data;},buildChart:function(){},};return service;}];define("core/common/components/chart/snorkelfish-chartservice",function(){});var water_quality=[function(){var service={dataset:"WaterQuality",getChartConfig:function(){var config={title:'Sample Count',tooltips:true,labels:false,legend:{display:true,position:'right'}};return config;},getDefaultChartData:function()
{var defaultChartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};return defaultChartData;},getChartData:function(data)
{var dataCalc={};angular.forEach(data,function(row,key){var characteristic=row.CharacteristicName||'Unknown';if(characteristic)
{if(!dataCalc[characteristic])
dataCalc[characteristic]={total:0};dataCalc[characteristic].total++;}});var data={"series":["Total"],"data":[]};angular.forEach(dataCalc,function(vals,characteristic){data['data'].push({"x":characteristic,"y":[vals.total],});});return data;},buildChart:function(){},};return service;}];define("core/common/components/chart/waterquality-chartservice",function(){});var watertemp_chartservice=[function(){var service={dataset:"WaterTemp",buildChart:function(data_in,config)
{if(data_in.length==0)
return;if(!config)
config={width:400,height:200};var margin={top:10,right:10,bottom:20,left:30},width=config.width-margin.left-margin.right,height=config.height-margin.top-margin.bottom;var x=d3.time.scale().range([0,width]);var y=d3.scale.linear().range([height,0]);var color=d3.scale.ordinal().domain([1,12,13,14,15,16]).range(["FF0000","#009933","#0000FF","#0FF933","#00FFFF","#00FFAAFB"]);var xAxis=d3.svg.axis().scale(x).orient("bottom");var yAxis=d3.svg.axis().scale(y).orient("left");var line=d3.svg.line().x(function(d){return x(d.chart_date);}).y(function(d){return y(d.chart_temp);});d3.select("#chart-div").selectAll("svg").remove();var svg=d3.select("#chart-div").append("svg").attr("width",width+margin.left+margin.right).attr("height",height+margin.top+margin.bottom).append("g").attr("transform","translate("+margin.left+","+margin.top+")");var data=[];data_in.forEach(function(d){if(!isNaN(d.WaterTemperature))
{d.chart_date=new Date(d.ReadingDateTime);d.chart_temp=+d.WaterTemperature;d.chart_QAStatusId=d.QAStatusId;data.push(d);}});x.domain(d3.extent(data,function(d){return d.chart_date;}));y.domain(d3.extent(data,function(d){return d.chart_temp;}));svg.append("g").attr("class","x axis").attr("transform","translate(0,"+height+")").call(xAxis);svg.append("g").attr("class","y axis").call(yAxis).append("text").attr("transform","rotate(-90)").attr("y",6).attr("dy",".71em").style("text-anchor","end").text("H2O Temp (C)");svg.append("path").datum(data).attr("class","line").attr("d",line);},};return service;}];define("core/common/components/chart/watertemp-chartservice",function(){});require(['core/common/common-functions','core/common/services/common-service','core/common/services/logger','core/common/services/service-utilities','core/common/services/wish','core/common/components/modals/modal-quick-add-accuracycheck','core/common/components/modals/modal-quick-add-characteristic','core/common/components/modals/modal-add-location','core/common/components/modals/modal-create-instrument','core/common/components/modals/modal-bulk-rowqa-change','core/common/components/modals/modal-save-success','core/common/components/modals/modal-create-fisherman','core/common/components/modals/modal-link-field','core/common/components/modals/modal-verify-action','core/common/components/modals/modal-invalid-operation','core/common/components/file/modal-file-add','core/common/components/file/modal-file-delete','core/common/components/file/modal-files','core/common/components/file/modal-exportfile','core/common/directives/checklists','core/common/directives/feature-layer','core/common/directives/map','core/common/directives/field-definitions','core/common/directives/roles','core/common/directives/validation',],function(){common_module.controller('ModalQuickAddAccuracyCheckCtrl',modal_quick_add_accuracycheck);common_module.controller('ModalAddLocationCtrl',modal_add_location);common_module.controller('ModalCreateInstrumentCtrl',modal_create_instrument);common_module.controller('ModalBulkRowQAChangeCtrl',modal_bulk_rowqa_change);common_module.controller('ModalSaveSuccess',modal_save_success);common_module.controller('ModalCreateFishermanCtrl',modal_create_fisherman);common_module.controller('ModalExportController',modal_exportfile);common_module.controller('LinkModalCtrl',modal_link_field);common_module.controller('ModalVerifyActionCtrl',modal_verify_action);common_module.controller('ModalInvalidOperation',modal_invalid_operation);common_module.controller('FileAddModalCtrl',modal_file_add);common_module.controller('FileDeleteModalCtrl',modal_file_delete);common_module.controller('FileModalCtrl',modal_files);});require(['core/common/components/chart/adultweir-chartservice','core/common/components/chart/artificialproduction-chartservice','core/common/components/chart/bsample-chartservice','core/common/components/chart/creelsurvey-chartservice','core/common/components/chart/electrofishing-chartservice','core/common/components/chart/snorkelfish-chartservice','core/common/components/chart/waterquality-chartservice','core/common/components/chart/watertemp-chartservice',],function(){common_module.service('AdultWeir_ChartService',adultweir_chartservice);common_module.service('ArtificialProduction_ChartService',artificialproduction_chartservice);common_module.service('BSample_ChartService',bsample_chartservice);common_module.service('CreelSurvey_ChartService',creelsurvey_chartservice);common_module.service('ElectroFishing_ChartService',electrofishing_chartservice);common_module.service('SnorkelFish_ChartService',snorkelfish_chartservice);common_module.service('WaterQuality_ChartService',water_quality);common_module.service('WaterTemp_ChartService',watertemp_chartservice);require(['core/common/components/chart/chart-services',],function(){common_module.service('ChartService',chart_services);});});define("core/common/common-module",function(){});var project_detail=['$scope','$routeParams','SubprojectService','ProjectService','DatasetService','CommonService','PreferencesService','$rootScope','$modal','$sce','$window','$http','ServiceUtilities','ConvertStatus','$location','$anchorScroll',function(scope,routeParams,SubprojectService,ProjectService,DatasetService,CommonService,PreferencesService,$rootScope,$modal,$sce,$window,$http,ServiceUtilities,ConvertStatus,$location,$anchorScroll){scope.activities=null;scope.datasets=ProjectService.getProjectDatasets(routeParams.Id);scope.project=ProjectService.getProject(routeParams.Id);scope.currentUserId=$rootScope.Profile.Id;scope.filteredUsers=false;scope.ShowInstruments=false;scope.ShowFishermen=false;scope.ShowSubproject=false;scope.ShowHabitat=false;scope.subprojectList=null;scope.subprojectType="";scope.viewSubproject=null;scope.SdeObjectId=0;scope.uploadFileType="";scope.projectName="";scope.DatastoreTablePrefix=$rootScope.DatastoreTablePrefix="";scope.filesToUpload={};scope.AuthorizedToViewProject=true;var theUrl=window.location.href;console.log("theUrl = "+theUrl);var theLastSlashLoc=theUrl.lastIndexOf("/");scope.projectId=theUrl.substring(theLastSlashLoc+1);console.log("scope.projectId = "+scope.projectId);scope.CellOptions={};scope.isFavorite=$rootScope.Profile.isProjectFavorite(routeParams.Id);scope.metadataList={};scope.metadataPropertiesPromise=CommonService.getMetadataProperties(METADATA_ENTITY_PROJECTTYPEID);scope.habitatPropertiesPromise=CommonService.getMetadataProperties(METADATA_ENTITY_HABITATTYPEID);scope.users=[];scope.thisProjectsLocationObjects=[];var dataset_watcher=scope.$watch('datasets',function(){if(!scope.datasets.$resolved)
return;console.log("Inside project-detail datasets. all done loading!");if((scope.datasets)&&(scope.datasets.length>0))
{for(var i=0;i<scope.datasets.length;i++)
{DatasetService.configureDataset(scope.datasets[i],scope);scope.DatastoreTablePrefix=$rootScope.DatastoreTablePrefix=scope.datasets[i].Datastore.TablePrefix;}}
else
{console.log("This project has no datasets.");}
dataset_watcher();},true);var project_watcher=scope.$watch('project',function(){if(typeof scope.project==='undefined'||typeof scope.project.Id==='undefined')
return;project_watcher();console.log("Inside project-detail -- our project just loaded...");console.log("scope.project.Id = "+scope.project.Id);$rootScope.projectId=scope.project.Id;scope.editors=scope.project.Editors;scope.users=CommonService.getUsers();scope.project.MetadataValue={};addMetadataProperties(scope.project.Metadata,scope.metadataList,scope,CommonService);var habitatProjectMetadataPromise=CommonService.getMetadataFor(scope.project.Id,METADATA_ENTITY_HABITATTYPEID);habitatProjectMetadataPromise.$promise.then(function(list){addMetadataProperties(list,scope.metadataList,scope,CommonService);});scope.mapHtml=$sce.trustAsHtml(scope.project.MetadataValue[25]);scope.imagesHtml=$sce.trustAsHtml(scope.project.MetadataValue[13]);scope.project.Files=ProjectService.getProjectFiles(scope.project.Id);var file_watcher=scope.$watch('project.Files',function(){if(typeof scope.project.Files==='undefined'||scope.project.Files.length===0)
return;file_watcher();scope.project.Images=[];scope.project.Docs=[];scope.project.Files.forEach(function(file,key){file.Title=(!file.Title||file.Title==='undefined'||typeof file.Title==='undefined')?"":file.Title;file.Description=(!file.Description||file.Description==='undefined'||typeof file.Description==='undefined')?"":file.Description;if(file.DatasetId===null&&file.Subproject_CrppId===null)
{if(file.FileType.Name==="Image"){scope.project.Images.push(file);}else{scope.project.Docs.push(file);}}});console.log("OK! Done loading files... ");},true);},true);scope.ShowMap={Display:false,Message:"Show Map",MessageToOpen:"Show Map",MessageToClose:"Hide Map",};scope.toggleFavorite=function(){scope.isFavorite=!scope.isFavorite;scope.results={};$rootScope.Profile.toggleProjectFavorite(scope.project);PreferencesService.saveUserPreference("Projects",$rootScope.Profile.favoriteProjects.join(),scope.results);var watcher=scope.$watch('results',function(){if(scope.results.done)
{if(scope.results.failure)
{scope.isFavorite=!scope.isFavorite;$rootScope.Profile.toggleProjectFavorite(scope.project);}
watcher();}},true);}
scope.toggleMap=function(){if(scope.ShowMap.Display)
{scope.removeFilter();scope.ShowMap.Display=false;scope.ShowMap.Message=scope.ShowMap.MessageToOpen;}
else
{scope.ShowMap.Display=true;scope.ShowMap.Message=scope.ShowMap.MessageToClose;setTimeout(function(){scope.map.reposition();console.log("repositioned");},400);}};scope.removeFilter=function()
{scope.clearLocation();};scope.clearLocation=function(){scope.map.infoWindow.hide();scope.selectedLocation=null;if(scope.newGraphic)
{scope.map.graphics.remove(scope.newGraphic);scope.newGraphic=null;}};scope.metadataPropertiesPromise.promise.then(function(list){addMetadataProperties(list,scope.metadataList,scope,CommonService);});scope.habitatPropertiesPromise.promise.then(function(list){addMetadataProperties(list,scope.metadataList,scope,CommonService);});scope.openChooseMapImage=function(){var modalInstance=$modal.open({templateUrl:'app/core/projects/components/project-detail/templates/modal-choosemap.html',controller:'ModalChooseMapCtrl',scope:scope,});};scope.openChooseSummaryImages=function(){var modalInstance=$modal.open({templateUrl:'app/core/projects/components/project-detail/templates/modal-choosesummaryimages.html',controller:'ModalChooseSummaryImagesCtrl',scope:scope,});};scope.syncToStreamnet=function(){$.ajax({url:serviceUrl+'/api/v1/streamnet/synctostreamnet',type:'GET',success:function(data){alert(data.join('\n'));},error:function(jqXHR,error,errorThrown){if(jqXHR.status&&jqXHR.status==400){alert(jqXHR.responseText+"\n\n"+"Error running sync action!");}else{alert("Error running sync action!");}}});};scope.openPrintWindow=function()
{$window.open(PROJECT_REPORT_URL+scope.project.Id,'_blank');};scope.reloadProject=function(){console.log(" --- *** --- *** Reloading project... are you sure you want this?!!  *****************");ProjectService.clearProject();scope.project=ProjectService.getProject(routeParams.Id);};scope.setSdeObjectId=function(sdeObjectId)
{console.log("Inside contollers.js, scope.setSdeObjectId...");console.log("sdeObjectId = "+sdeObjectId);scope.SdeObjectId=sdeObjectId;console.log("scope.SdeObjectId");};scope.getFilesArrayAsList=function(theFiles){if(theFiles===undefined||theFiles===null)
return[];var files=angular.fromJson(theFiles);return(files===null||!Array.isArray(files))?[]:files;}
scope.getSubprojectFilesArrayAsLinks=function(a_projectId,a_subprojectId,a_files)
{var files=scope.getFilesArrayAsList(a_files);var retval=[];angular.forEach(files,function(file,value){retval.push("<a href='"+cdmsShareUrl+"P/"+a_projectId+"/S/"+a_subprojectId+"/"+file.Name+"' target=\"_blank\">"+file.Name+"</a>");});return retval;}
scope.refreshProjectLocations=function(){ProjectService.clearProject();scope.project=null;scope.project=ProjectService.getProject(parseInt(scope.projectId));};scope.clearUsersWatch=scope.$watch('users',function(){if(scope.users)
{if(scope.users.length>0)
{scope.clearUsersWatch();scope.filterUsers();}}
else
console.log("not yet.");},true);scope.filterUsers=function()
{console.log("filterusers starting with "+scope.users.length);var newusers=[];for(var a=0;a<scope.users.length;a++){var user=scope.users[a];var filterOut=false;for(var i=0;i<scope.editors.length;i++){if(scope.editors[i].Id==user.Id)
{filterOut=true;break;}}
if(!filterOut)
newusers.push(user);};console.log("set a new group: "+newusers.length);scope.users=newusers.sort(orderUserByAlpha);}
scope.select2Options={allowClear:true};scope.selectedUser=null;scope.addEditor=function(){console.log("Add Editor.");for(var i=0;i<scope.users.length;i++){var user=scope.users[i];if(user.Id==scope.selectedUser)
{scope.editors.push(user);scope.users.splice(i,1);scope.selectedUser=null;break;}};};scope.removeEditor=function(index)
{scope.users.push(scope.editors.splice(index,1)[0]);scope.users.sort(orderUserByAlpha);};scope.saveEditors=function()
{scope.saveResults={};ProjectService.saveEditors(scope.currentUserId,scope.project.Id,scope.editors,scope.saveResults);};scope.cancel=function()
{};scope.openProjectEditor=function(){scope.row=scope.project;var modalInstance=$modal.open({templateUrl:'app/core/projects/components/project-detail/templates/modal-edit-project.html',controller:'ModalProjectEditorCtrl',scope:scope,});};scope.openDeleteFileModal=function(a_selection,a_callback){scope.row=a_selection;scope.callback=a_callback;var modalInstance=$modal.open({templateUrl:'app/core/projects/components/project-detail/templates/modal-delete-file.html',controller:'ModalDeleteFileCtrl',scope:scope,});};scope.openEditFileModal=function(a_selection,a_callback){scope.row=a_selection;scope.callback=a_callback;var modalInstance=$modal.open({templateUrl:'app/core/projects/components/project-detail/templates/modal-edit-file.html',controller:'ModalEditFileCtrl',scope:scope,});};scope.openNewFileModal=function(a_callback){scope.callback=a_callback;var modalInstance=$modal.open({templateUrl:'app/core/projects/components/project-detail/templates/modal-upload-files.html',controller:'ModalNewFileCtrl',scope:scope,});};scope.removeFromFiles=function(removed_item){scope.project.Files.forEach(function(item,index){if(item.Id===removed_item.File.Id){scope.project.Files.splice(index,1);}});};}];define("core/projects/components/project-detail/project-detail",function(){});modal_new_file=['$scope','$modalInstance','$upload',function($scope,$modalInstance,$upload){$scope.header_message="Add file(s) to "+$scope.project.Name;$scope.onFileSelect=function($files)
{console.log("Inside ModalNewFileCtrl, file selected! "+$files);$scope.uploadFiles=$files;};$scope.save=function(){console.log("Inside controllers.js, ModalNewFileCtrl, save...");if(!$scope.uploadFiles)
{console.log("No file selected; do nothing...");return;}
$scope.foundDuplicate=false;$scope.uploadErrorMessage=undefined;var errors=[];for(var i=0;i<$scope.uploadFiles.length;i++)
{var file=$scope.uploadFiles[i];console.log("file is next...");console.dir(file);var newFileNameLength=file.name.length;console.log("file name length = "+newFileNameLength);console.log("$scope.uploadFileType = "+$scope.uploadFileType);if($scope.uploadFileType==="image")
{console.log("We have an image...");for(var n=0;n<$scope.project.Images.length;n++)
{var existingFileName=$scope.project.Images[n].Name;console.log("existingFileName = "+existingFileName);var existingFileNameLength=existingFileName.length;if((newFileNameLength>=existingFileNameLength)&&(file.name.indexOf(existingFileName)>-1))
{$scope.foundDuplicate=true;console.log(file.name+" already exists in the project file list.");errors.push(file.name+" already exists in the list of project images.");}}}
else
{console.log("We have something other than an image...");for(var n=0;n<$scope.project.Files.length;n++)
{var existingFileName=$scope.project.Files[n].Name;console.log("existingFileName = "+existingFileName);var existingFileNameLength=existingFileName.length;if((newFileNameLength>=existingFileNameLength)&&(file.name.indexOf(existingFileName)>-1))
{$scope.foundDuplicate=true;console.log(file.name+" already exists in the project file list.");errors.push(file.name+" already exists in the list of project Files.");}}}
console.log("$scope.foundDuplicate = "+$scope.foundDuplicate);if($scope.foundDuplicate)
alert(errors);else
{console.log("file is next...");console.dir(file);if(!file.success)
{console.log("file.success does not exist yet...");$scope.upload=$upload.upload({url:serviceUrl+'/api/v1/file/UploadProjectFile',method:"POST",data:{ProjectId:$scope.project.Id,Description:file.Info.Description,Title:file.Info.Title},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){config.file.success="Success";$scope.callback(data);}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";config.file.success="Failed";});}}}};$scope.cancel=function(){$scope.foundDuplicate=undefined;$modalInstance.dismiss();};}];define("core/projects/components/project-detail/modal-new-file",function(){});var modal_edit_file=['$scope','$modalInstance','ProjectService',function($scope,$modalInstance,ProjectService){$scope.header_message="Edit file";$scope.save=function(){var promise=ProjectService.updateFile($scope.project.Id,$scope.row);promise.$promise.then(function(){$scope.callback(promise);$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/projects/components/project-detail/modal-edit-file",function(){});var modal_edit_project=['$scope','$modalInstance','ProjectService',function($scope,$modalInstance,ProjectService){if($scope.row&&$scope.row.Id){$scope.header_message="Edit project: "+$scope.project.Name;}
else{$scope.header_message="Create new project";$scope.row={};}
$scope.save=function(){console.log("Inside ModalProjectEditorCtrl, save...");console.log("$scope.row is next...")
console.dir($scope.row);if(!$scope.row.Name){alert("You must enter a Program/Project Name!");return;}
$scope.row.Metadata=[];angular.forEach($scope.metadataList,function(md){if(md.Values&&md.controlType=="multiselect"){md=angular.copy(md);md.Values=angular.toJson(md.Values).toString();}
$scope.row.Metadata.push(md);});console.log("About to save...");var promise=ProjectService.saveProject($scope.row);console.log("Just saved...");promise.$promise.then(function(){console.log("About to reload project...");$scope.reloadProject();$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/projects/components/project-detail/modal-edit-project",function(){});var modal_delete_file=['$scope','$modalInstance','ProjectService',function($scope,$modalInstance,ProjectService){$scope.header_message="Delete file?";$scope.save=function(){var promise=ProjectService.deleteFile($scope.project.Id,$scope.row);promise.$promise.then(function(){$scope.callback(promise);$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/projects/components/project-detail/modal-delete-file",function(){});var modal_choose_summary_images=['$scope','$modalInstance','ProjectService',function($scope,$modalInstance,ProjectService){var galleryLinkTemplate='<a href="{{row.getProperty(\'Link\')}}" target="_blank" title="{{row.getProperty(\'Link\')}}">'+'<img ng-src="{{row.getProperty(\'Link\')}}" width="150px"/><br/><div class="ngCellText" ng-class="col.colIndex()">'+'</a>'+'</div>';$scope.chooseSummaryImagesSelection=[];$scope.chooseSummaryImagesGallery={data:'project.Images',columnDefs:[{field:'Name',displayName:'File',cellTemplate:galleryLinkTemplate},{field:'Title'},{field:'Description'},],multiSelect:true,selectedItems:$scope.chooseSummaryImagesSelection};$scope.save=function(){if($scope.chooseSummaryImagesSelection.length==0)
{alert("Please choose at least one image to save by clicking on it and try again.");return;}
var imgmd=getByField($scope.project.Metadata,METADATA_PROPERTY_SUMMARYIMAGE,"MetadataPropertyId");var imgmd_html=getByField($scope.project.Metadata,METADATA_PROPERTY_SUMMARYIMAGE_HTML,"MetadataPropertyId");if(!imgmd)
{imgmd={MetadataPropertyId:METADATA_PROPERTY_SUMMARYIMAGE,UserId:$scope.Profile.Id};$scope.project.Metadata.push(imgmd);}
if(!imgmd_html)
{imgmd_html={MetadataPropertyId:METADATA_PROPERTY_SUMMARYIMAGE_HTML,UserId:$scope.Profile.Id};$scope.project.Metadata.push(imgmd_html);}
var selections=[];var the_html="";for(var i=$scope.chooseSummaryImagesSelection.length-1;i>=0;i--){var selection=$scope.chooseSummaryImagesSelection[i];the_html+="<div class='selected-image-div'>";the_html+="<img src='"+selection.Link+"' class='selected-image'>";if(selection.Description)
the_html+="<p>"+selection.Description+"</p>";the_html+="</div>";selections.push(selection.Id);}
imgmd_html.Values=the_html;imgmd.Values=selections.toString();var promise=ProjectService.saveProject($scope.project);promise.$promise.then(function(){$scope.reloadProject();$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/projects/components/project-detail/modal-choose-summary-images",function(){});var modal_choose_map=['$scope','$modalInstance','ProjectService',function($scope,$modalInstance,ProjectService){var galleryLinkTemplate='<a href="{{row.getProperty(\'Link\')}}" target="_blank" title="{{row.getProperty(\'Link\')}}">'+'<img ng-src="{{row.getProperty(\'Link\')}}" width="150px"/><br/><div class="ngCellText" ng-class="col.colIndex()">'+'</a>'+'</div>';$scope.chooseMapSelection=[];$scope.chooseMapGallery={data:'project.Images',columnDefs:[{field:'Name',displayName:'File',cellTemplate:galleryLinkTemplate},{field:'Title'},{field:'Description'},],multiSelect:false,selectedItems:$scope.chooseMapSelection};$scope.save=function(){if($scope.chooseMapSelection.length==0)
{alert("Please choose an image to save by clicking on it and try again.");return;}
var mapmd=getByField($scope.project.Metadata,METADATA_PROPERTY_MAPIMAGE,"MetadataPropertyId");var mapmd_html=getByField($scope.project.Metadata,METADATA_PROPERTY_MAPIMAGE_HTML,"MetadataPropertyId");if(!mapmd)
{mapmd={MetadataPropertyId:METADATA_PROPERTY_MAPIMAGE,UserId:$scope.Profile.Id};$scope.project.Metadata.push(mapmd);}
if(!mapmd_html)
{mapmd_html={MetadataPropertyId:METADATA_PROPERTY_MAPIMAGE_HTML,UserId:$scope.Profile.Id};$scope.project.Metadata.push(mapmd_html);}
mapmd.Values=$scope.chooseMapSelection[0].Id;var the_html="<div class='selected-image-div'>";the_html+="<img src='"+$scope.chooseMapSelection[0].Link+"' class='selected-image'>";if($scope.chooseMapSelection[0].Description)
the_html+="<p>"+$scope.chooseMapSelection[0].Description+"</p>";the_html+="</div>";mapmd_html.Values=the_html;var promise=ProjectService.saveProject($scope.project);promise.$promise.then(function(){$scope.reloadProject();$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/projects/components/project-detail/modal-choose-map",function(){});module_add_accuracy_check=['$scope','$modalInstance','ProjectService',function($scope,$modalInstance,ProjectService){$scope.ac_row=angular.copy($scope.ac_row);$scope.save=function(){var promise=ProjectService.saveInstrumentAccuracyCheck($scope.viewInstrument.Id,$scope.ac_row);promise.$promise.then(function(){$scope.postInstrumentAccuracyCheckUpdateGrid(promise);$modalInstance.dismiss();});};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/projects/components/project-detail/modal-add-accuracy-check",function(){});var tab_instruments=['$scope','$timeout','$routeParams','SubprojectService','ProjectService','DatasetService','CommonService','PreferencesService','$rootScope','$modal','$sce','$window','$http','ServiceUtilities','ConvertStatus','$location','$anchorScroll',function(scope,$timeout,routeParams,SubprojectService,ProjectService,DatasetService,CommonService,PreferencesService,$rootScope,$modal,$sce,$window,$http,ServiceUtilities,ConvertStatus,$location,$anchorScroll){scope.allInstruments=null;scope.getDataGrade=function(check){return getDataGrade(check)};scope.viewInstrument=null;scope.selectedInstrument=null;var CheckMethodRenderer=function(param){return DataGradeMethods[param.data.CheckMethod];};var CheckDateRenderer=function(param){return moment(param.data.CheckDate).format('L');};var EditLinksTemplate=function(param){var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.editInstrument(param.data);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.removeInstrument(param.data);});div.appendChild(delBtn);div.appendChild(document.createTextNode("|"));var addBtn=document.createElement('a');addBtn.href='#';addBtn.innerHTML='Add AC';addBtn.addEventListener('click',function(event){event.preventDefault();scope.openAccuracyCheckForm(param.data,{});});div.appendChild(addBtn);return div;};var EditDetailLinksTemplate=function(param){var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.openAccuracyCheckForm(getById(scope.project.Instruments,param.data.InstrumentId),param.data);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.removeAccuracyCheck(param.data);});div.appendChild(delBtn);div.appendChild(document.createTextNode("|"));var addBtn=document.createElement('a');addBtn.href='#';addBtn.innerHTML='Add';addBtn.addEventListener('click',function(event){event.preventDefault();scope.openAccuracyCheckForm(getById(scope.project.Instruments,param.data.InstrumentId),{});});div.appendChild(addBtn);return div;};var instrDetailColDefs=[{cellRenderer:EditDetailLinksTemplate,width:100,menuTabs:[]},{field:'CheckDate',headerName:'Check Date',width:100,sort:'desc',cellRenderer:CheckDateRenderer,menuTabs:[]},{field:'CheckMethod',headerName:'Check Method',cellRenderer:CheckMethodRenderer,width:230,menuTabs:['filterMenuTab']},{field:'Bath1Grade',headerName:'Bath 1 Grade',width:100,menuTabs:['filterMenuTab']},{field:'Bath2Grade',headerName:'Bath 2 Grade',width:100,menuTabs:['filterMenuTab']},{field:'Comments',headerName:'Comments',width:275,menuTabs:[]},];scope.instrDetailGridOptions={enableSorting:true,enableFilter:true,enableColResize:true,columnDefs:instrDetailColDefs,};scope.instrGridOptions={masterDetail:true,detailCellRendererParams:{detailGridOptions:scope.instrDetailGridOptions,getDetailRowData:function(params){params.successCallback(params.data.AccuracyChecks);},},enableSorting:true,enableFilter:true,enableColResize:true,rowSelection:'single',onSelectionChanged:function(params){console.log("selection changed!");scope.instrGridOptions.selectedItems=scope.instrGridOptions.api.getSelectedRows();},onFilterModified:function(){scope.instrGridOptions.api.deselectAll();},selectedItems:[],columnDefs:[{cellRenderer:EditLinksTemplate,width:120,menuTabs:[],},{field:'Name',headerName:'Name',width:250,sort:'asc',menuTabs:['filterMenuTab'],filter:'text',cellRenderer:'group'},{field:'SerialNumber',headerName:'SerialNumber',width:120,menuTabs:['filterMenuTab'],filter:'text'},{field:'Manufacturer',headerName:'Manufacturer',width:150,menuTabs:['filterMenuTab'],},{field:'Model',headerName:'Model',width:150,menuTabs:['filterMenuTab'],},{field:'InstrumentType.Name',headerName:'Type',menuTabs:['filterMenuTab'],},]};var inst_ds_watcher=scope.$parent.$watch('datasets',function(){if(scope.datasets===undefined||scope.datasets.length===0)
return;inst_ds_watcher();for(var i=0;i<scope.datasets.length;i++){if(scope.datasets[i].Datastore.TablePrefix==="WaterTemp"){console.log("Adding instruments to tab bar...");scope.ShowInstruments=true;}}},true);scope.$parent.$watch('project.Id',function(){if(typeof scope.project==='undefined'||typeof scope.project.Id==='undefined')
return;console.log("project done loading: your project instruments:-------------------- *************************");console.dir(scope.project.Instruments);$timeout(function(){var ag_grid_div=document.querySelector('#instruments-tab-grid');scope.ag_grid=new agGrid.Grid(ag_grid_div,scope.instrGridOptions);scope.instrGridOptions.api.showLoadingOverlay();scope.instrGridOptions.api.setRowData(scope.project.Instruments);},0);scope.allInstruments=ProjectService.getAllInstruments();scope.allInstruments.$promise.then(function(){scope.filterAllInstruments();});});scope.createInstrument=function(){scope.viewInstrument=null;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-instrument.html',controller:'ModalCreateInstrumentCtrl',scope:scope,});};scope.viewSelectedInstrument=function(instrument){scope.viewInstrument=instrument;};scope.addInstrument=function(){if(!scope.selectedInstrument||scope.selectedInstrument===null)
{alert("Please select an Instrument from the dropdown to add to this project.");return;}
var instrument_to_add=getById(scope.allInstruments,scope.selectedInstrument)
var promise=ProjectService.saveProjectInstrument(scope.project.Id,instrument_to_add);promise.$promise.then(function(){scope.project.Instruments.push(instrument_to_add);scope.filterAllInstruments();scope.instrGridOptions.api.setRowData(scope.project.Instruments);});};scope.removeInstrument=function(instrument){scope.viewInstrument=instrument;if(!scope.viewInstrument)
return;if(confirm("Are you sure you want to remove this Instrument from this Project?")){var promise=ProjectService.removeProjectInstrument(scope.project.Id,scope.viewInstrument.Id);promise.$promise.then(function(){scope.project.Instruments.forEach(function(item,index){if(item.Id===scope.viewInstrument.Id){scope.project.Instruments.splice(index,1);scope.instrGridOptions.api.setRowData(scope.project.Instruments);scope.allInstruments.push(instrument);scope.filterAllInstruments();}});});}};scope.removeAccuracyCheck=function(ac){var instrument=getById(scope.project.Instruments,ac.InstrumentId);if(typeof instrument==='undefined'){alert("Cannot remove that Accuracy Check. Can't find related instrument. Please share this error with your administrator.");return;}
if(confirm("Are you sure you want to remove this Accuracy Check from this Instrument?")){var promise=ProjectService.removeInstrumentAccuracyCheck(ac.InstrumentId,ac);promise.$promise.then(function(){instrument.AccuracyChecks.forEach(function(item,index){if(item.Id===ac.Id){instrument.AccuracyChecks.splice(index,1);scope.instrGridOptions.api.setRowData(scope.project.Instruments);var the_node=scope.expandById(ac.InstrumentId);if(the_node!=null)
scope.instrGridOptions.api.ensureNodeVisible(the_node);}});});}};scope.editInstrument=function(instrument){scope.viewInstrument=instrument;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-instrument.html',controller:'ModalCreateInstrumentCtrl',scope:scope,});};scope.postSaveInstrumentUpdateGrid=function(the_promise){var total=scope.project.Instruments.length;var count=0;var updated=false;scope.project.Instruments.forEach(function(item,index){if(item.Id===the_promise.Id){updated=true;if(the_promise.AccuracyChecks!==undefined)
delete the_promise.AccuracyChecks;angular.extend(scope.project.Instruments[index],the_promise);scope.instrGridOptions.api.redrawRows();console.log("done reloading grid after editing an instrument.");}
count++;if(count==total&&updated==false)
{the_promise.AccuracyChecks=[];scope.project.Instruments.push(the_promise);scope.instrGridOptions.api.setRowData([]);scope.instrGridOptions.api.setRowData(scope.project.Instruments);console.log("done reloading grid after adding an instrument.");}});console.log("updated the list and the grid... now refreshing the instrument lists");};scope.expandById=function(id_in){var the_node=null;scope.instrGridOptions.api.forEachNode(function(node){if(node.data.Id===id_in){node.setExpanded(true);the_node=node;}});return the_node;};scope.postInstrumentAccuracyCheckUpdateGrid=function(edited_item){var edited=false;scope.project.Instruments.forEach(function(item,index){if(item.Id===edited_item.InstrumentId){item.AccuracyChecks.forEach(function(instr_item,instr_item_index){if(instr_item.Id===edited_item.Id){angular.extend(instr_item,edited_item);console.log("OK!! we edited that accuracy check item");edited=true;}});if(!edited){item.AccuracyChecks.push(edited_item);console.log("OK we added that accuracy check item!");}}});scope.instrGridOptions.api.setRowData(scope.project.Instruments);var the_node=scope.expandById(edited_item.InstrumentId);if(the_node!=null)
scope.instrGridOptions.api.ensureNodeVisible(the_node);console.log("done reloading grid after editing accuracy check item.");};scope.openAccuracyCheckForm=function(a_instrument,ac_row){scope.viewInstrument=a_instrument;console.dir(a_instrument);if(ac_row)
scope.ac_row=ac_row;else
scope.ac_row={};var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-new-accuracycheck.html',controller:'ModalAddAccuracyCheckCtrl',scope:scope,});};scope.filterAllInstruments=function(){var filteredInstruments=[];scope.allInstruments.forEach(function(item,index){var have_instrument=getById(scope.project.Instruments,item.Id);if(typeof have_instrument==='undefined'||have_instrument==null){filteredInstruments.push(item);}});scope.allInstruments=filteredInstruments.sort(orderByAlphaName);};}];define("core/projects/components/project-detail/project-detail-tab-instruments",function(){});var tab_fishermen=['$scope','$timeout','$routeParams','SubprojectService','ProjectService','DatasetService','CommonService','PreferencesService','$rootScope','$modal','$sce','$window','$http','ServiceUtilities','ConvertStatus','$location','$anchorScroll',function(scope,$timeout,routeParams,SubprojectService,ProjectService,DatasetService,CommonService,PreferencesService,$rootScope,$modal,$sce,$window,$http,ServiceUtilities,ConvertStatus,$location,$anchorScroll){scope.fishermanList=null;scope.theFishermen=null;var FirstNameRenderer=function(param)
{return(param.data.Aka)?param.data.FirstName+' ('+param.data.Aka+')':param.data.FirstName;}
var DateAddedRenderer=function(param){return moment(param.data.DateAdded).format('L');};var StatusIdRenderer=function(param){var str_status=ConvertStatus.convertStatus(param.data.StatusId);return str_status;};var OkToCallRenderer=function(param){return ConvertStatus.convertOkToCall(param.data.OkToCallId);};var EditLinksTemplate=function(param){var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.editFisherman(param.data);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.removeFisherman(param.data);});div.appendChild(delBtn);return div;};scope.fishGridOptions={enableSorting:true,enableFilter:true,enableColResize:true,rowSelection:'single',onSelectionChanged:function(params){console.log("selection changed!");scope.fishGridOptions.selectedItems=scope.fishGridOptions.api.getSelectedRows();},onFilterModified:function(){scope.fishGridOptions.api.deselectAll();},selectedItems:[],columnDefs:[{cellRenderer:EditLinksTemplate,width:80,menuTabs:[],},{field:'FirstName',cellRenderer:FirstNameRenderer,headerName:'First Name',width:100,sort:'asc',menuTabs:['filterMenuTab'],filter:'text'},{field:'LastName',headerName:'Last Name',width:120,menuTabs:['filterMenuTab'],filter:'text'},{field:'FullName',headerName:'Full Name',width:150,menuTabs:['filterMenuTab'],filter:'text'},{field:'PhoneNumber',headerName:'Phone',width:100,menuTabs:['filterMenuTab'],filter:'text'},{field:'OkToCallId',headerName:'Ok To Call',width:80,menuTabs:['filterMenuTab'],cellRenderer:OkToCallRenderer},{field:'FishermanComments',headerName:'Comments',width:250,menuTabs:['filterMenuTab'],filter:'text'},{field:'DateAdded',headerName:'Date Added',width:100,cellRenderer:DateAddedRenderer,menuTabs:[],},{field:'StatusId',headerName:'Status',width:100,menuTabs:['filterMenuTab'],cellRenderer:StatusIdRenderer},]};var f_ds_watcher=scope.$parent.$watch('project',function(){if(typeof scope.project==='undefined'||typeof scope.project.Id==='undefined')
return;f_ds_watcher();if(scope.isHarvestProject(scope.project)){console.log("Adding Fishermen to tab bar because we are a Harvest project...");scope.ShowFishermen=true;$timeout(function(){var ag_grid_div=document.querySelector('#fisherman-tab-grid');scope.ag_grid=new agGrid.Grid(ag_grid_div,scope.fishGridOptions);scope.fishGridOptions.api.showLoadingOverlay();scope.fishGridOptions.api.setRowData(scope.project.Fishermen);},0);}},true);scope.removeFisherman=function(a_fisherman){console.log("alrighty, remove this fisherman!");console.dir(a_fisherman);if(!a_fisherman)
return;if(!confirm("Are you sure you want to remove this fisherman from this project?"))
return;var promise=ProjectService.removeProjectFisherman(scope.project.Id,a_fisherman.Id);promise.$promise.then(function(){scope.project.Fishermen.forEach(function(item,index){if(item.Id===a_fisherman.Id){scope.project.Fishermen.splice(index,1);scope.fishGridOptions.api.setRowData(scope.project.Fishermen);}});});};scope.createFisherman=function(){scope.viewFisherman=null;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-fisherman.html',controller:'ModalCreateFishermanCtrl',scope:scope,});};scope.editFisherman=function(a_fisherman){scope.viewFisherman=a_fisherman;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-fisherman.html',controller:'ModalCreateFishermanCtrl',scope:scope,});};scope.postSaveFishermanUpdateGrid=function(the_promise){var updated=false;scope.project.Fishermen.forEach(function(item,index){if(item.Id===the_promise.Id){updated=true;angular.extend(scope.project.Fishermen[index],the_promise);scope.fishGridOptions.api.redrawRows();console.log("done reloading grid after editing a fisherman.");}});if(updated===false)
{scope.project.Fishermen.push(the_promise);scope.fishGridOptions.api.setRowData([]);scope.fishGridOptions.api.setRowData(scope.project.Fishermen);console.log("done reloading grid after adding a fisherman.");}
console.log("updated the list and the grid... now refreshing ");};scope.isHarvestProject=function(a_project){return(a_project.MetadataValue[METADATA_PROPERTY_SUBPROGRAM])==="Harvest";}}];define("core/projects/components/project-detail/project-detail-tab-fishermen",function(){});var tab_data=['$scope',function(scope){var linkTemplate=function(param){var div=document.createElement('div');var linkBtn=document.createElement('a');linkBtn.href='#/'+param.data.activitiesRoute+'/'+param.data.Id;linkBtn.innerHTML=param.data.Name;div.appendChild(linkBtn);return div;};scope.dataGridOptions={enableSorting:true,enableFilter:true,enableColResize:true,columnDefs:[{field:'Name',headerName:'Dataset Name',cellRenderer:linkTemplate,width:200},{field:'Description',headerName:'Description',width:400},]};var data_ds_watcher=scope.$parent.$watch('datasets',function(){if(typeof scope.datasets==='undefined'||scope.datasets.length===0)
return;data_ds_watcher();var ag_grid_div=document.querySelector('#data-tab-grid');scope.datatab_ag_grid=new agGrid.Grid(ag_grid_div,scope.dataGridOptions);scope.dataGridOptions.api.showLoadingOverlay();scope.dataGridOptions.api.setRowData(scope.$parent.datasets);scope.dataGridOptions.api.sizeColumnsToFit();},true);}];define("core/projects/components/project-detail/project-detail-tab-data",function(){});var tab_docs=['$scope','$document','$timeout',function(scope,$document,$timeout){var UploadedByTemplate=function(param){return moment(param.node.data.UploadDate).format('L')+" by "+param.node.data.User.Fullname;};var EditLinksTemplate=function(param){var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.openEditFileModal(param.data,scope.afterEditDocsFile);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.openDeleteFileModal(param.data,scope.afterDeleteDocsFile);});div.appendChild(delBtn);return div;};var LinkTemplate=function(param){var div=document.createElement('div');var linkBtn=document.createElement('a');linkBtn.href=param.data.Link;linkBtn.innerHTML=param.data.Title;linkBtn.target="_blank";div.appendChild(linkBtn);return div;};scope.docsGridOptions={enableSorting:true,enableFilter:true,enableColResize:true,rowSelection:'single',onSelectionChanged:function(params){console.log("selection changed!");scope.docsGridOptions.selectedItems=scope.docsGridOptions.api.getSelectedRows();},onFilterModified:function(){scope.docsGridOptions.api.deselectAll();},selectedItems:[],columnDefs:[{cellRenderer:EditLinksTemplate,width:80,menuTabs:[]},{field:'Title',headerName:'Title',sort:'asc',cellRenderer:LinkTemplate,width:250,menuTabs:['filterMenuTab'],filter:'text'},{field:'Description',headerName:'Description',menuTabs:['filterMenuTab'],filter:'text'},{field:'Uploaded',headerName:"Uploaded",width:200,cellRenderer:UploadedByTemplate,menuTabs:[]},]};$document.ready(function(){var docs_ds_watcher=scope.$parent.$watch('project.Docs',function(){if(typeof scope.project.Docs==='undefined'||scope.project.Docs.length===0)
return;docs_ds_watcher();$timeout(function(){var ag_grid_div=document.querySelector('#docs-tab-grid');scope.docstab_ag_grid=new agGrid.Grid(ag_grid_div,scope.docsGridOptions);scope.docsGridOptions.api.showLoadingOverlay();scope.docsGridOptions.api.setRowData(scope.project.Docs);scope.docsGridOptions.api.sizeColumnsToFit();},0);},true);});scope.newFile=function(){scope.openNewFileModal(scope.afterNewDocsFile);};scope.afterNewDocsFile=function(new_item){scope.project.Docs.push(new_item[0]);scope.project.Files.push(new_item[0]);scope.docsGridOptions.api.setRowData(scope.project.Docs);console.log("done reloading grid after editing docs item.");};scope.afterDeleteDocsFile=function(removed_item){scope.project.Docs.forEach(function(item,index){console.log("item id is "+item.Id+" looking for "+removed_item.File.Id);if(item.Id===removed_item.File.Id){console.log("FOund an ID that matches for delete");scope.project.Docs.splice(index,1);}});scope.removeFromFiles(removed_item);scope.docsGridOptions.api.setRowData(scope.project.Docs);console.log("done reloading grid after removing doc item.");};scope.afterEditDocsFile=function(edited_item){scope.project.Docs.forEach(function(item,index){if(item.Id===edited_item.Id){angular.extend(hab_item,edited_item);}});scope.docsGridOptions.api.setRowData(scope.project.Docs);console.log("done reloading grid after editing doc item.");};}];define("core/projects/components/project-detail/project-detail-tab-documents",function(){});var tab_gallery=['$scope','$document','$timeout',function(scope,$document,$timeout){var UploadedByTemplate=function(param){console.dir(param);console.log("uploaded by template!");return moment(param.node.data.UploadDate).format('L')+" by "+param.node.data.User.Fullname;};var EditLinksTemplate=function(param){var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.openEditFileModal(param.data,scope.afterEditGalleryFile);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.openDeleteFileModal(param.data,scope.afterDeleteGalleryFile);});div.appendChild(delBtn);return div;};var ImageTemplate=function(param){var div=document.createElement('div');var linkBtn=document.createElement('a');linkBtn.href=param.data.Link;linkBtn.target="_blank";var img=document.createElement('img');img.src=param.data.Link;img.width=150;linkBtn.appendChild(img);div.appendChild(linkBtn);return div;};scope.galleryGridOptions={enableSorting:true,enableFilter:true,enableColResize:true,rowSelection:'single',onSelectionChanged:function(params){console.log("selection changed!");},getRowHeight:function(){return 120;},onFilterModified:function(){scope.galleryGridOptions.api.deselectAll();},columnDefs:[{cellRenderer:EditLinksTemplate,width:120,menuTabs:[]},{headerName:'File',cellRenderer:ImageTemplate,width:190,menuTabs:[]},{field:'Title',headerName:'Title',width:250,sort:'asc',menuTabs:['filterMenuTab'],filter:'text'},{field:'Description',headerName:'Description',cellStyle:{'white-space':'normal'},width:300,menuTabs:['filterMenuTab'],filter:'text'},{field:'Uploaded',headerName:"Uploaded",width:200,cellRenderer:UploadedByTemplate},]};$document.ready(function(){var gallery_ds_watcher=scope.$parent.$watch('project',function(){if(typeof scope.project==='undefined'||typeof scope.project.Images==='undefined')
return;gallery_ds_watcher();var ag_grid_div=document.querySelector('#gallery-tab-grid');console.dir(ag_grid_div);$timeout(function(){ag_grid_div=angular.element(document.getElementById('gallery-tab-grid'));console.dir(ag_grid_div);ag_grid_div=ag_grid_div.context;scope.gallerytab_ag_grid=new agGrid.Grid(ag_grid_div,scope.galleryGridOptions);scope.galleryGridOptions.api.showLoadingOverlay();scope.galleryGridOptions.api.setRowData(scope.project.Images);scope.galleryGridOptions.api.sizeColumnsToFit();},0);},true);});scope.newGalleryFile=function(){scope.openNewFileModal(scope.afterNewGalleryFile);};scope.afterNewGalleryFile=function(new_item){scope.project.Images.push(new_item[0]);scope.project.Files.push(new_item[0]);scope.galleryGridOptions.api.setRowData(scope.project.Images);console.log("done reloading grid after editing gallery item.");};scope.afterEditGalleryFile=function(edited_item){scope.project.Images.forEach(function(item,index){if(item.Id===edited_item.Id){angular.extend(hab_item,edited_item);}});scope.galleryGridOptions.api.setRowData(scope.project.Images);console.log("done reloading grid after editing gallery item.");};scope.afterDeleteGalleryFile=function(removed_item){scope.project.Images.forEach(function(item,index){if(item.Id===removed_item.File.Id){scope.project.Images.splice(index,1);}});scope.removeFromFiles(removed_item);scope.galleryGridOptions.api.setRowData(scope.project.Images);console.log("done reloading grid after removing image item.");};}];define("core/projects/components/project-detail/project-detail-tab-gallery",function(){});var project_list=['$scope','DatasetService','ProjectService','CommonService','$modal',function(scope,DatasetService,ProjectService,CommonService,$modal){scope.projects=ProjectService.getProjects();scope.CellOptions={};scope.metadataList={};scope.metadataPropertiesPromise=CommonService.getMetadataProperties(METADATA_ENTITY_PROJECTTYPEID);scope.habitatPropertiesPromise=CommonService.getMetadataProperties(METADATA_ENTITY_HABITATTYPEID);scope.metadataPropertiesPromise.promise.then(function(list){addMetadataProperties(list,scope.metadataList,scope,CommonService);});scope.habitatPropertiesPromise.promise.then(function(list){addMetadataProperties(list,scope.metadataList,scope,CommonService);});scope.locationObjectArray=[];scope.locationObjectIdArray=[];scope.locationObjectIds="";scope.reloadProject=function()
{scope.projects=ProjectService.getProjects();};scope.openAddProject=function(){var modalInstance=$modal.open({templateUrl:'app/core/projects/components/project-detail/templates/modal-edit-project.html',controller:'ModalProjectEditorCtrl',scope:scope,});};scope.click=function(e){console.log("Inside controllers.js, scope.click...");scope.projects=scope.allProjects;try{if(!scope.map.graphics.infoTemplate)
{scope.map.graphics.infoTemplate=scope.template;console.log("graphics layer infotemplate defined.");}
scope.map.infoWindow.resize(250,300);if(e.graphic)
{console.log("e.graphic is next...");console.dir(e.graphic);scope.getInfoContent(e.graphic);scope.mapEvent='undefined';scope.mapEvent=e;}}catch(e)
{console.dir(e);}};scope.$watch('infoContent',function()
{console.log("Inside controllers.js, watch infoContent...");var matchingProjects=[];var html="";if(!scope.infoContent)
return;else if(scope.infoContent.length===0)
return;console.log("Inside controllers.js, watch infoContent...");console.log("scope.infoContent is next...");console.dir(scope.infoContent);console.log("scope.mapEvent.mapPoint is next...");console.dir(scope.mapEvent.mapPoint);scope.map.infoWindow.setContent(scope.infoContent);scope.map.infoWindow.show(scope.mapEvent.mapPoint);});scope.getInfoContent=function(graphic)
{console.log("Inside controllers.js, getInfoContent...");console.log("graphic is next...");console.dir(graphic);var matchingProjects=[];var html="";console.log("scope.projects is next...");console.dir(scope.projects);var filterProjects=[];angular.forEach(scope.projects,function(project){var proj_loc=getByField(project.Locations,PRIMARY_PROJECT_LOCATION_TYPEID,"LocationTypeId");if(proj_loc&&proj_loc.SdeObjectId===graphic.attributes.OBJECTID){matchingProjects.push(project);filterProjects.push(project);}});scope.projects=angular.copy(filterProjects);scope.selectedLocation=graphic.attributes.OBJECTID;console.log("matchingProjects is next...");console.dir(matchingProjects);if(matchingProjects.length===1)
{scope.map.infoWindow.setTitle("Project at location");html+=matchingProjects[0].Name;html+="<br/><div class='right'><a href='#/projects/"+matchingProjects[0].Id+"'>View</a></div>"}
else if(matchingProjects.length>1)
{scope.map.infoWindow.setTitle("Projects at location");html+="<ul>";angular.forEach(matchingProjects,function(p){html+="<li><a href='#/projects/"+p.Id+"'>"+p.Name+"</a></li>";});html+="</ul>";}
else
{scope.map.infoWindow.setTitle("No project found");html+="Not found: "+graphic.attributes.OBJECTID;}
console.log("html = "+html);scope.infoContent=html;};scope.$watch('projects',function(){if(scope.projects)
{if(!scope.allProjects)
scope.allProjects=scope.projects;angular.forEach(scope.allProjects,function(project,key){var program=getByField(project.Metadata,'23','MetadataPropertyId');var subprogram=getByField(project.Metadata,'24','MetadataPropertyId');if(program)project.Program=program.Values;if(subprogram&&subprogram.Values!="(None)")
project.Program+=" > "+subprogram.Values;var primary_location=getByField(project.Locations,3,"LocationTypeId");if(primary_location)
scope.locationObjectArray.push(primary_location);});angular.forEach(scope.locationObjectArray,function(item,key){scope.locationObjectIdArray.push(item.SdeObjectId);});scope.locationObjectIds=scope.locationObjectIdArray.join();console.log("typeof scope.locationObjectId = "+typeof scope.locationObjectId);console.log("In controllers, projects watcher, found project locations: "+scope.locationObjectIds);if(scope.map&&scope.map.locationLayer&&scope.map.locationLayer.hasOwnProperty('showLocationsById'))
scope.map.locationLayer.showLocationsById(scope.locationObjectIds);if(scope.agGridOptions===undefined){console.log(" ----------- ok we are defining our grid...");var agCellRendererProjectName=function(params){return'<div>'+'<a title="'+params.node.data.Description
+'" href="#/projects/'+params.node.data.Id+'">'
+params.node.data.Name+'</a>'+'</div>';};var agColumnDefs=[{field:'Program',headerName:'Program',suppressSizeToFit:true,minWidth:240,width:250,sort:'asc'},{field:'ProjectType.Name',headerName:'Type',width:100,maxWidth:150,minWidth:80},{field:'Name',headerName:'Project Name',cellRenderer:agCellRendererProjectName,minWidth:500},];scope.agGridOptions={animateRows:true,enableSorting:true,enableFilter:true,enableColResize:true,showToolPanel:false,columnDefs:agColumnDefs,rowData:scope.projects,debug:true,onGridReady:function(params){params.api.sizeColumnsToFit();}};console.log("number of projects: "+scope.projects.length);console.log("starting ag-grid");var ag_grid_div=document.querySelector('#project-list-grid');scope.ag_grid=new agGrid.Grid(ag_grid_div,scope.agGridOptions);scope.agGridOptions.api.showLoadingOverlay();}else{console.log("----- ok we have projects and are defined -- setting new rowdata  ----");console.log("setting number of projects: "+scope.projects.length);scope.agGridOptions.api.setRowData(scope.projects);console.log('done');}}},true);}];define("core/projects/components/project-list/project-list",function(){});projects_module.factory('ProjectFunders',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/getprojectfunders',{},{query:{method:'GET',params:{id:'projectId'},isArray:true}});}]);projects_module.factory('ProjectCollaborators',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/getprojectcollaborators',{},{query:{method:'GET',params:{id:'projectId'},isArray:true}});}]);projects_module.factory('ProjectFiles',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/file/getprojectfiles',{},{query:{method:'GET',params:{id:'projectId'},isArray:true}});}]);projects_module.factory('Projects',['$resource',function(resource){return resource(serviceUrl+'/api/v1/project/getprojects',{},{query:{method:'GET',params:{},isArray:true}});}]);projects_module.factory('Project',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/project/getproject',{},{query:{method:'GET',params:{id:'id'},isArray:false}});}]);projects_module.factory('ProjectDatasets',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/project/getprojectdatasets',{},{query:{method:'GET',params:{id:'projectId'},isArray:true}});}]);projects_module.factory('SetProjectEditors',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/project/setprojecteditors');}]);projects_module.factory('SaveProject',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/project/saveproject');}]);projects_module.factory('GetAllInstruments',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/instrument/getinstruments');}]);projects_module.factory('SaveProjectInstrument',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/instrument/saveprojectinstrument');}]);projects_module.factory('SaveProjectFisherman',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/fishermen/saveprojectfisherman');}]);projects_module.factory('SaveInstrument',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/instrument/saveinstrument');}]);projects_module.factory('SaveInstrumentAccuracyCheck',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/instrument/saveinstrumentaccuracycheck');}]);projects_module.factory('RemoveInstrumentAccuracyCheck',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/instrument/removeinstrumentaccuracycheck');}]);projects_module.factory('SaveFisherman',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/fishermen/savefisherman');}]);projects_module.factory('UpdateFile',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/file/updatefile');}]);projects_module.factory('DeleteFile',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/file/deletefile');}]);projects_module.factory('GetDatastoreProjects',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/getdatastoreprojects');}]);projects_module.factory('GetInstruments',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/instrument/getinstruments');}]);projects_module.factory('GetInstrumentTypes',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/instrument/getinstrumenttypes');}]);projects_module.factory('RemoveProjectInstrument',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/instrument/removeprojectinstrument');}]);projects_module.factory('GetFishermen',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/fishermen/getfishermen');}]);projects_module.factory('GetProjectFishermen',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/fishermen/getprojectfishermen');}]);projects_module.factory('RemoveProjectFisherman',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/fishermen/removeprojectfisherman');}]);projects_module.service('ProjectService',['$q','ProjectFunders','ProjectCollaborators','Projects','Project','ProjectFiles','ProjectDatasets','SetProjectEditors','SaveProject','GetAllInstruments','SaveProjectInstrument','SaveProjectFisherman','SaveInstrument','SaveInstrumentAccuracyCheck','SaveFisherman','UpdateFile','DeleteFile','GetDatastoreProjects','GetInstruments','GetInstrumentTypes','RemoveProjectInstrument','GetFishermen','GetProjectFishermen','RemoveProjectFisherman','RemoveInstrumentAccuracyCheck',function($q,ProjectFunders,ProjectCollaborators,Projects,Project,ProjectFiles,ProjectDatasets,SetProjectEditors,SaveProject,GetAllInstruments,SaveProjectInstrument,SaveProjectFisherman,SaveInstrument,SaveInstrumentAccuracyCheck,SaveFisherman,UpdateFile,DeleteFile,GetDatastoreProjects,GetInstruments,GetInstrumentTypes,RemoveProjectInstrument,GetFishermen,GetProjectFishermen,RemoveProjectFisherman,RemoveInstrumentAccuracyCheck){var service={project:null,clearProject:function(){service.project=null;},getDatastoreProjects:function(id){return GetDatastoreProjects.query({id:id});},getProjects:function(){return Projects.query();},getProjectDatasets:function(projectId){this.getProject(projectId);return ProjectDatasets.query({id:projectId});},getProjectFunders:function(projectId){console.log("Inside getProjectFunders, projectId = "+projectId);this.getProject(projectId);return ProjectFunders.query({id:projectId});},getProjectCollaborators:function(projectId){console.log("Inside getProjectCollaborators...");this.getProject(projectId);return ProjectCollaborators.query({id:projectId});},saveProject:function(project){return SaveProject.save({Project:project});},getProjectFiles:function(projectId){console.log("Inside getProjectFiles...");console.log("projectId = "+projectId);return ProjectFiles.query({id:projectId});},getInstruments:function(){return GetInstruments.query();},getInstrumentTypes:function(){return GetInstrumentTypes.query();},getFishermen:function(){return GetFishermen.query();},getProject:function(id){console.log("Inside getProject; id = "+id);if(service.project&&service.project.Id==id&&service.subprojectType!=="Habitat")
{console.log("service.project.Id = "+service.project.Id);return service.project;}
service.project=Project.query({id:id});return service.project;},getProjectType:function(aProjectId){var theType=null;if(aProjectId===2247)
{theType="CRPP";}
else if((aProjectId===1202)||(aProjectId===1223)||(aProjectId===2223)||(aProjectId===2226)||(aProjectId===2228)||(aProjectId===2229)||(aProjectId===10029)||(aProjectId===2249)){theType="Habitat";}
else if(aProjectId===1217)
theType="Harvest";else if(aProjectId===2246)
theType="DECD";return theType;},saveEditors:function(userId,projectId,editors,saveResults){saveResults.saving=true;var payload={ProjectId:projectId,Editors:editors,};SetProjectEditors.save(payload,function(data){saveResults.saving=false;saveResults.success=true;},function(data){saveResults.saving=false;saveResults.failure=true;});},getAllInstruments:function(){return GetAllInstruments.query();},saveInstrument:function(projectId,instrument){return SaveInstrument.save({ProjectId:projectId,Instrument:instrument});},saveFisherman:function(projectId,fisherman,saveResults){console.log("Inside saveFisherman...");saveResults.saving=true;console.log("saveResults.saving = "+saveResults.saving);return SaveFisherman.save({ProjectId:projectId,Fisherman:fisherman});},saveProjectInstrument:function(projectId,instrument){return SaveProjectInstrument.save({ProjectId:projectId,Instrument:instrument});},saveProjectFisherman:function(projectId,fisherman){return SaveProjectFisherman.save({ProjectId:projectId,Fisherman:fisherman});},removeProjectFisherman:function(projectId,fishermanId){return RemoveProjectFisherman.save({ProjectId:projectId,FishermanId:fishermanId});},removeProjectInstrument:function(projectId,instrumentId){return RemoveProjectInstrument.save({ProjectId:projectId,InstrumentId:instrumentId});},getProjectFishermen:function(projectId){console.log("Inside getProjectFishermen, projectId = "+projectId);return GetProjectFishermen.query({id:projectId});},saveInstrumentAccuracyCheck:function(instrumentId,ac){return SaveInstrumentAccuracyCheck.save({InstrumentId:instrumentId,AccuracyCheck:ac});},removeInstrumentAccuracyCheck:function(instrumentId,ac){return RemoveInstrumentAccuracyCheck.save({InstrumentId:instrumentId,AccuracyCheck:ac});},updateFile:function(projectId,file){return UpdateFile.save({ProjectId:projectId,File:file});},deleteFile:function(projectId,file){console.log("ProjectId = "+projectId+", attempting to delete file...");console.dir(file);return DeleteFile.save({ProjectId:projectId,File:file});},};return service;}]);define("core/projects/services/project-service",function(){});projects_module.factory('MigrationYears',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/list/getmigrationyears',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);projects_module.factory('RunYears',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/list/getrunyears',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);projects_module.factory('ReportYears',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/list/getreportyears',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);projects_module.factory('SpawningYears',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/getspawningyears',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);projects_module.factory('BroodYears',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/list/getbroodyears',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);projects_module.factory('OutmigrationYears',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/getoutmigrationyears',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);projects_module.factory('ProjectSubprojects',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/gethabsubprojects',{},{save:{method:'POST',isArray:true}});}]);projects_module.factory('SubprojectFiles',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/crppsubproject/getcrppsubprojectfiles',{},{query:{method:'GET',params:{id:'projectId'},isArray:true}});}]);projects_module.factory('SaveCorrespondenceEvent',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/crppsubproject/savecorrespondenceevent');}]);projects_module.factory('SaveHabitatItem',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/savehabitatitem');}]);projects_module.factory('DeleteCorresEventFile',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/crppsubproject/deletecorreseventfile');}]);projects_module.factory('DeleteHabitatItemFile',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/deletehabitatitemfile');}]);projects_module.factory('DeleteHabSubprojectFile',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/deletehabsubprojectfile');}]);projects_module.factory('SaveSubproject',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/crppsubproject/savecrppsubproject');}]);projects_module.factory('SaveHabSubproject',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/savehabsubproject');}]);projects_module.factory('GetSubprojects',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/crppsubproject/getcrppsubprojects');}]);projects_module.factory('GetHabSubproject',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/gethabsubproject');}]);projects_module.factory('GetHabSubprojects',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/gethabsubprojects');}]);projects_module.factory('RemoveSubproject',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/crppsubproject/removecrppsubproject',{},{save:{method:'POST',isArray:false}});}]);projects_module.factory('RemoveHabSubproject',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/removehabsubproject');}]);projects_module.factory('RemoveCorrespondenceEvent',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/crppsubproject/removecorrespondenceevent');}]);projects_module.factory('RemoveHabitatItem',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/habsubproject/removehabitatitem');}]);projects_module.service('SubprojectService',['$q','MigrationYears','RunYears','ReportYears','SpawningYears','BroodYears','OutmigrationYears','ProjectSubprojects','SubprojectFiles','SaveCorrespondenceEvent','SaveHabitatItem','DeleteCorresEventFile','DeleteHabitatItemFile','DeleteHabSubprojectFile','SaveSubproject','SaveHabSubproject','GetSubprojects','GetHabSubproject','GetHabSubprojects','RemoveSubproject','RemoveHabSubproject','RemoveCorrespondenceEvent','RemoveHabitatItem',function($q,MigrationYears,RunYears,ReportYears,SpawningYears,BroodYears,OutmigrationYears,ProjectSubprojects,SubprojectFiles,SaveCorrespondenceEvent,SaveHabitatItem,DeleteCorresEventFile,DeleteHabitatItemFile,DeleteHabSubprojectFile,SaveSubproject,SaveHabSubproject,GetSubprojects,GetHabSubproject,GetHabSubprojects,RemoveSubproject,RemoveHabSubproject,RemoveCorrespondenceEvent,RemoveHabitatItem){var service={subproject:null,subprojects:null,subprojectType:null,clearSubproject:function(){service.subproject=null;},clearSubprojects:function(){service.subprojects=null;},getSubproject:function(id){console.log("Inside services.js, getSubproject...");if(service.subproject&&service.subproject.Id==id)
return service.subproject;},setServiceSubprojectType:function(spType){console.log("Inside setServiceSubprojectType, spType = "+spType);service.subprojectType=spType;console.log("service.subprojectType = "+service.subprojectType);},getSubprojects:function(){return GetSubprojects.query();},getHabSubproject:function(id){console.log("Inside getHabSubproject...");return GetHabSubproject.query({id:id});},getHabSubprojects:function()
{console.log("Inside services, getHabSubprojects");return GetHabSubprojects.query();},saveSubproject:function(projectId,subproject,saveResults){console.log("Inside saveSubproject...");saveResults.saving=true;console.log("saveResults.saving = "+saveResults.saving);return SaveSubproject.save({ProjectId:projectId,Subproject:subproject});},saveHabSubproject:function(projectId,subproject,saveResults){console.log("Inside services.js, saveHabSubproject...");saveResults.saving=true;console.log("saveResults.saving = "+saveResults.saving);return SaveHabSubproject.save({ProjectId:projectId,Subproject:subproject});},removeSubproject:function(projectId,subprojectId){return RemoveSubproject.save({ProjectId:projectId,SubprojectId:subprojectId});},removeHabSubproject:function(projectId,subprojectId,locationId){return RemoveHabSubproject.save({ProjectId:projectId,SubprojectId:subprojectId,LocationId:locationId});},removeCorrespondenceEvent:function(projectId,subprojectId,correspondenceEventId,datastoreTablePrefix){console.log("Inside removeCorrespondenceEvent...");console.log("projectId = "+projectId+", subprojectId = "+subprojectId+", correspondenceEventId = "+correspondenceEventId+", datastoreTablePrefix = "+datastoreTablePrefix);return RemoveCorrespondenceEvent.save({ProjectId:projectId,SubprojectId:subprojectId,CorrespondenceEventId:correspondenceEventId,DatastoreTablePrefix:datastoreTablePrefix});},removeHabitatItem:function(projectId,subprojectId,habitatItemId,datastoreTablePrefix){console.log("Inside removeHabitatItem...");console.log("projectId = "+projectId+", subprojectId = "+subprojectId+", habitatItemId = "+habitatItemId+", datastoreTablePrefix = "+datastoreTablePrefix);return RemoveHabitatItem.save({ProjectId:projectId,SubprojectId:subprojectId,HabitatItemId:habitatItemId,DatastoreTablePrefix:datastoreTablePrefix});},saveCorrespondenceEvent:function(projectId,subprojectId,ce){console.log("Inside saveCorrespondenceEvent...")
console.log("projectId = "+projectId);console.log("subprojectId = "+subprojectId);console.log("ce is next...");console.dir(ce);return SaveCorrespondenceEvent.save({ProjectId:projectId,SubprojectId:subprojectId,CorrespondenceEvent:ce});},saveHabitatItem:function(projectId,subprojectId,hi){console.log("Inside saveHabitatItem...")
console.log("projectId = "+projectId);console.log("subprojectId = "+subprojectId);console.log("hi is next...");console.dir(hi);return SaveHabitatItem.save({ProjectId:projectId,SubprojectId:subprojectId,HabitatItem:hi});},deleteCorresEventFile:function(projectId,subprojectId,ceId,file){console.log("Inside deleteCorresEventFile");console.log("SubprojectId = "+subprojectId+", ceId = "+ceId+" attempting to delete file...");console.dir(file);return DeleteCorresEventFile.save({ProjectId:projectId,SubprojectId:subprojectId,CeId:ceId,File:file});},deleteHabitatItemFile:function(projectId,subprojectId,hiId,file){console.log("Inside deleteHabitatItemFile");console.log("ProjectId = "+projectId+", SubprojectId = "+subprojectId+", hiId = "+hiId+" attempting to delete file...");console.dir(file);return DeleteHabitatItemFile.save({ProjectId:projectId,SubprojectId:subprojectId,HiId:hiId,File:file});},deleteHabSubprojectFile:function(projectId,subprojectId,file){console.log("Inside deleteHabSubprojectFile");console.log("SubprojectId = "+subprojectId+", attempting to delete file...");console.dir(file);return DeleteHabSubprojectFile.save({ProjectId:projectId,SubprojectId:subprojectId,File:file});},getMigrationYears:function(datasetId){console.log("Inside services, getMigrationYears");return MigrationYears.query({id:datasetId});},getRunYears:function(datasetId){console.log("Inside services, getRunYears");return RunYears.query({id:datasetId});},getReportYears:function(datasetId){console.log("Inside services, getReportYears");return ReportYears.query({id:datasetId});},getSpawningYears:function(datasetId){console.log("Inside services, getSpawningYears");return SpawningYears.query({id:datasetId});},getBroodYears:function(datasetId){console.log("Inside services, getBroodYears");return BroodYears.query({id:datasetId});},getOutmigrationYears:function(datasetId){console.log("Inside services, getOutmigrationYears");return OutmigrationYears.query({id:datasetId});},getSubprojectFiles:function(projectId){console.log("Inside getSubprojectFiles...");console.log("projectId = "+projectId);return SubprojectFiles.query({id:projectId});},getProjectSubprojects:function(projectId){console.log("Inside getProjectSubprojects, projectId = "+projectId);return ProjectSubprojects.save({ProjectId:projectId});},};return service;}]);define("core/projects/services/subproject-service",function(){});require(['core/projects/components/project-detail/project-detail','core/projects/components/project-detail/modal-new-file','core/projects/components/project-detail/modal-edit-file','core/projects/components/project-detail/modal-edit-project','core/projects/components/project-detail/modal-delete-file','core/projects/components/project-detail/modal-choose-summary-images','core/projects/components/project-detail/modal-choose-map','core/projects/components/project-detail/modal-add-accuracy-check','core/projects/components/project-detail/project-detail-tab-instruments','core/projects/components/project-detail/project-detail-tab-fishermen','core/projects/components/project-detail/project-detail-tab-data','core/projects/components/project-detail/project-detail-tab-documents','core/projects/components/project-detail/project-detail-tab-gallery','core/projects/components/project-list/project-list','core/projects/services/project-service','core/projects/services/subproject-service',],function(){projects_module.controller('project-detail-ctrl',project_detail);projects_module.controller('TabInstrumentsCtrl',tab_instruments);projects_module.controller('TabFishermenCtrl',tab_fishermen);projects_module.controller('TabGalleryCtrl',tab_gallery);projects_module.controller('TabDataCtrl',tab_data);projects_module.controller('TabDocumentsCtrl',tab_docs);projects_module.controller('ModalEditFileCtrl',modal_edit_file);projects_module.controller('ModalNewFileCtrl',modal_new_file);projects_module.controller('ModalProjectEditorCtrl',modal_edit_project);projects_module.controller('ModalDeleteFileCtrl',modal_delete_file);projects_module.controller('ModalChooseSummaryImagesCtrl',modal_choose_summary_images);projects_module.controller('ModalChooseMapCtrl',modal_choose_map);projects_module.controller('project-list-ctrl',project_list);projects_module.controller('ModalAddAccuracyCheckCtrl',module_add_accuracy_check);});define("core/projects/projects-module",function(){});function makeField(colName,placeholder){return'<input type="text" placeholder="'+placeholder+'" ng-blur="updateCell(row,\''+colName+'\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />';}
function makeFieldColDef(field,scope){var coldef={field:field.DbColumnName,displayName:field.Label,minWidth:70,defaultValue:field.DefaultValue};if(scope.DatastoreTablePrefix=="CreelSurvey"){scope.disableFields=true;}
else{scope.datasheetColDefs.cellEditableCondition=true;}
if(scope.gridDatasheetOptions.enableCellEdit){coldef.enableCellEdit=true;if(scope.DatastoreTablePrefix=="CreelSurvey"){scope.datasheetColDefs.cellEditableCondition=false;}
else{scope.datasheetColDefs.cellEditableCondition=true;}
switch(field.ControlType){case'select':case'lookup':if(field.Field.PossibleValues==null)
console.log("Missing list of possible values from select/lookup field "+field.Field.Name);coldef.editableCellTemplate='<select ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-blur="updateCell(row,\''+field.DbColumnName+'\')" ng-options="id as name for (id, name) in CellOptions.'+field.DbColumnName+'Options"><option value="" selected="selected"></option></select>';scope.CellOptions[field.DbColumnName+'Options']=makeObjectsFromValues(scope.dataset.DatastoreId+field.DbColumnName,field.Field.PossibleValues);break;case'multiselect':case'multilookup':coldef.editableCellTemplate='<select class="field-multiselect" multiple="true" ng-blur="updateCell(row,\''+field.DbColumnName+'\')" ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in CellOptions.'+field.DbColumnName+'Options"/>';scope.CellOptions[field.DbColumnName+'Options']=makeObjectsFromValues(scope.dataset.DatastoreId+field.DbColumnName,field.Field.PossibleValues);break;case'easting':coldef.editableCellTemplate=makeField(field.DbColumnName,'ex. 541324');break;case'northing':coldef.editableCellTemplate=makeField(field.DbColumnName,'ex. 7896254');break;case'date':coldef.editableCellTemplate=makeField(field.DbColumnName,'ex. 07/23/2014');break;case'time':coldef.editableCellTemplate=makeField(field.DbColumnName,'ex. 16:20');break;case'datetime':coldef.editableCellTemplate=makeField(field.DbColumnName,'ex. 07/23/2014 16:20');break;case'textarea':case'text':coldef.editableCellTemplate='<input type="text" ng-blur="updateCell(row,\''+field.DbColumnName+'\')" ng-model="COL_FIELD" ng-input="COL_FIELD" />';break;case'number':coldef.editableCellTemplate='<input type="text" ng-model="COL_FIELD" ng-blur="updateCell(row,\''+field.DbColumnName+'\')" ng-input="COL_FIELD" />';break;case'checkbox':coldef.showSelectionCheckbox=true;coldef.editableCellTemplate='<input type="checkbox" ng-checked="row.entity.'+field.DbColumnName+'==true" ng-model="COL_FIELD" ng-input="COL_FIELD" />';coldef.cellTemplate=coldef.editableCellTemplate;break;case'file':coldef.cellTemplate='<button class="right btn btn-xs" ng-click="addFiles(row, col.field)">Add</button> <span ng-cell-text ng-bind-html="row.getProperty(col.field) | fileNamesFromString"></span>';break;default:console.log("Unknown control type: "+field.ControlType);}}
switch(field.ControlType){case'multiselect':case'multilookup':coldef.cellFilter='arrayValues';break;case'date':coldef.cellFilter='date: \'MM/dd/yyyy\'';break;case'currency':coldef.cellFilter='currency';break;case'datetime':coldef.cellFilter='date: \'MM/dd/yyyy HH:mm:ss\'';break;case'link':case'file':coldef.minWidth='200';coldef.maxWidth='400';coldef.width='200';if(!coldef.enableCellEdit)
coldef.cellTemplate='<div class="ngCellText" ng-class="col.colIndex()"><span ng-cell-text ng-bind-html="row.getProperty(col.field) | fileNamesFromString"></span></div>';break;case'grid':coldef.minWidth='150';coldef.maxWidth='150';coldef.width='150';coldef.cellTemplate='<button class="right btn btn-xs" ng-click="viewRelation(row, col.field)">View</button> <div class="ngCellText" ng-bind-html="row.getProperty(col.field) | countItems"></div>';break;}
return coldef;}
function parseField(field,scope){scope.FieldLookup[field.DbColumnName]=field;if(field.parsed===true)
return;var displayName="";if(field.Label)
displayName=field.Label;if(field.Name)
displayName=field.Name;if(field.Field&&field.Field.Units)
if(field.Field.Units!=="NULL")
displayName+=" ("+field.Field.Units+")";if(field.Units)
displayName+=" ("+field.Units+")";field.Label=displayName;if(field.Field&&field.Field.Validation){try{console.log("configuring validation for "+field.DbColumnName);field.Field.Validation=angular.fromJson(field.Field.Validation);}
catch(e){console.log("e string = "+e.message.toString());var errorDescription=e.message.valueOf();if((field.Field.Validation==="t")||(field.Field.Validation==="i")||(field.Field.Validation==="y")||(field.Field.Validation==="NULL")){if(field.Field.Validation==="y"){check4Digits()}}
else if(errorDescription=="Invalid character"){}
else{console.log("** There is an error parsing the validation for: "+field.Field.Name+" **");console.dir(e);console.log("Validation == "+field.Field.Validation);}}}
try{field.Rule=(field.Rule)?angular.fromJson(field.Rule):{};if(field.Field)
field.Field.Rule=(field.Field.Rule)?angular.fromJson(field.Field.Rule):{};}
catch(e){var errorDescription=e.description.valueOf();if((field.Field.Validation==="t")||(field.Field.Validation==="i")||(field.Field.Validation==="NULL")){}
else if(errorDescription=="Invalid character"){}
else{console.log("** There is an error parsing the validation for: "+field.Field.Name+" **");console.dir(e);console.log("Validation == "+field.Field.Validation);}}
fireRules("DefaultValue",null,field,null,null,null,null);fireRules("Default",null,field,null,null,null,null);field.parsed=true;}
function makeNewRow(coldefs){var obj={};angular.forEach(coldefs,function(col){obj[col.field]=(col.defaultValue)?col.defaultValue:null;});obj.isValid=true;return obj;}
function isInvalidOption(scope,field,value){return Object.keys(scope.CellOptions[field.DbColumnName+'Options']).indexOf(value.toString())==-1;}
function checkNumber(row,field,value,range,row_errors){if(is_empty(value))
return true;if(!stringIsNumber(value)){row_errors.push("["+field.DbColumnName+"] Value is not a number.");return false;}
else if(range&&(typeof range==='object')&&range.length===2)
{var min=range[0];var max=range[1];if(min&&value<min){row_errors.push("["+field.DbColumnName+"] Value is too low.");return false;}
if(max&&value>max){row_errors.push("["+field.DbColumnName+"] Value is too high.");return false;}}
return true;}
function validateField(field,row,key,scope,row_errors){var value=row[key];switch(field.ControlType){case'select':if(scope.CellOptions[field.DbColumnName+'Options']){if(isInvalidOption(scope,field,value))
row_errors.push("["+field.DbColumnName+"] Invalid selection, value = "+value);}
else{console.log("Error: no cellOptions for "+field.DbColumnName+'Options');console.dir(scope.CellOptions);console.log("This might be because you're calling a rule wrong?");}
break;case'multiselect':var values=angular.fromJson(value);row[key]=values;for(var a=0;a<values.length;a++){var a_value=values[a];if(isInvalidOption(scope,field,a_value))
row_errors.push("["+field.DbColumnName+"] Invalid selection ("+a_value+")");}
break;case'date':if(isNaN(Date.parse(value)))
row_errors.push("["+field.DbColumnName+"] Value is not a date (mm/dd/yyyy).");break;case'datetime':console.log("Inside datetime...");console.log("value = "+value);if(isNaN(Date.parse(value)))
row_errors.push("["+field.DbColumnName+"] Value is not a date-time (mm/dd/yyyy hh:mm).");else
{var theDate=new Date(value);var theYear=theDate.getFullYear();console.log("theYear = "+theYear);if(theYear<1901)
row_errors.push("["+field.DbColumnName+"] Value has a default year (from Excel?); user must set year.");}
break;case'time':var theTime=value;var strTime=theTime.toString();console.log("strTime = "+strTime);var timeContentValid=true;if(!stringIsTime(value)&&!is_empty(value))
timeContentValid=false;else if(value.indexOf(".")>-1)
timeContentValid=false;else if(value.indexOf(":")===-1)
timeContentValid=false;if(!timeContentValid)
row_errors.push("["+field.DbColumnName+"] Value is not a time (hh:mm).");break;case'text':if(field.Field.Validation&&(field.Field.Validation!=='null')){if(field.Field.Validation==="t")
{if((field.Field.Units==="00:00")||(field.Field.Units==="HH:MM"))
{if((field.DbColumnName==="InterviewTime")||(field.DbColumnName==="TimeStart")||(field.DbColumnName==="TimeEnd")){if((typeof scope.callingPage!=='undefined')&&(scope.callingPage==="Import")){if(!checkDateTimeFormat1(value))
row_errors.push("["+field.DbColumnName+"] Value is not a date-time format (YYYY-MM-DD hh:mm)");var theYear=extractYearFromString(value);if(parseInt(theYear)<1901){strErrorMessage="["+field.DbColumnName+"] has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";console.log(strErrorMessage);row_errors.push(strErrorMessage);}}
else{if(value!==null){var colonLocation=value.indexOf(":");value=value.substr(colonLocation-2);if(value.length>5)
value=value.substr(0,6);var validTime=checkTime(value);if((typeof validTime==='undefined')||(value.length<5)){console.log("Error: Invalid time entry in "+field.DbColumnName+".");row_errors.push("["+field.DbColumnName+"] Invalid entry.  The entry must use the 24-hr military time format.  Example:  8:00 a.m. = 08:00 and 5:15 p.m. = 17:15");}}}}
else{console.log("value (before extracting time)= "+value);var colonLocation=value.indexOf(":");value=value.substr(colonLocation-2);if(value.length>5)
value=value.substr(0,6);var validTime=checkTime(value);if((typeof validTime==='undefined')||(value.length<5)){console.log("Error: Invalid time entry in "+field.DbColumnName+".");row_errors.push("["+field.DbColumnName+"] Invalid entry.  The entry must use the 24-hr military time format.  Example:  8:00 a.m. = 08:00 and 5:15 p.m. = 17:15");}}}}
else if(field.Field.Validation==="nb")
{console.log("Field name = "+field.DbColumnName);if(field.DbColumnName==="Surveyor"){console.log("Found surveyor field...");console.log("Value = "+value);if(value.length>0)
var validName=value;else
console.log("validName = "+validName);if(typeof validName==='undefined'){console.log("Error: Invalid time entry in "+field.DbColumnName+".");row_errors.push("["+field.DbColumnName+"] Invalid entry.  [Surveyor] cannot be blank.");}}}}
break;case'easting':return checkNumber(row,field,value,[100000,999999],row_errors);case'northing':return checkNumber(row,field,value,[1000000,9999999],row_errors);case'number':if(typeof field.Field.Validation==="number"){field.Field.Validation=""+field.Field.Validation;}
if((field.Field.Validation!==null)&&(field.Field.Validation.indexOf("null")<0)){if(field.Field.Validation==="i")
{if((typeof value!=='undefined')&&(value!==null)){var validNumber=checkInteger(value);if(typeof validNumber==='undefined'){console.log("Error: Invalid entry in "+field.DbColumnName+".");if((field.DbColumnName==="NumberAnglersObserved")||(field.DbColumnName==="NumberAnglersInterviewed")){row_errors.push("["+field.DbColumnName+"] Invalid entry in header.  The entry must be a whole number.  Example:  3");}
else{row_errors.push("["+field.DbColumnName+"] Invalid entry.  The entry must be a whole number.  Example:  3");}}
if(field.DbColumnName==="NumberAnglersInterviewed"){if(row.NumberAnglersInterviewed>row.NumberAnglersObserved){row_errors.push("["+field.DbColumnName+"] cannot be more than [NumberAnglersObserved]");}}}}
else if(field.Field.Validation==="i4")
{if(is_empty(value)){}
else if((typeof value!=='undefined')&&(value!==null)){var strErrorMessage="["+field.DbColumnName+"] Invalid entry.  The entry must be a 4-digit whole number.  Example:  1234";var strValue=value.toString();var validNumber=checkInteger(value);if(typeof validNumber==='undefined'){row_errors.push(strErrorMessage);}
else if((strValue.length<4)||(strValue.length>4)){row_errors.push(strErrorMessage);}}}
else if(field.Field.Validation==="y")
{if((typeof value!=='undefined')&&(value!==null)&&(value.length>0)){validNumber=check4Digits(value);if(typeof validNumber==='undefined'){console.log("Error: Invalid entry in "+field.DbColumnName+".");if(field.DbColumnName==="YearReported"){row_errors.push("["+field.DbColumnName+"] Invalid value for year.  The entry must be a 4-digit year.  Example:  2017");}
else{row_errors.push("["+field.DbColumnName+"] Invalid entry.  The entry must be a whole number.  Example:  3");}}}}
else if(field.Field.Validation.indexOf("4d")>-1)
{if((typeof value!=='undefined')&&(value!==null)){var strValue=value.toString();var strDecimalPart="";var intDecimalLoc=strValue.indexOf(".");if(intDecimalLoc>-1){strDecimalPart=strValue.substring(intDecimalLoc+1);if(strDecimalPart.length>4)
row_errors.push("["+field.DbColumnName+"] Invalid entry.  The entry can only have 4 decimal places.")}}}
else if(field.Field.DataType.indexOf("float")>-1){return checkNumber(row,field,value,field.Field.Validation,row_errors);}
else{return checkNumber(row,field,value,field.Field.Validation,row_errors);}}
break;case'checkbox':break;}
fireRules("OnValidate",row,field,value,scope.row,row_errors,scope);}
function convertFtoC(fahr){if(fahr!=null)
return((parseFloat(fahr)-32)*(5/9)).toFixed(NUM_FLOAT_DIGITS);return fahr;}
function convertCtoF(cels){if(cels!=null)
return(parseFloat(cels)*9/5+32).toFixed(NUM_FLOAT_DIGITS);return cels;}
function previousActivity(activities,routeId,$location){var previousId;for(var i=0;i<activities.length;i++){var activity=activities[i];if(activity.Id==routeId){if(previousId)
break;else{previousId=activity.Id;break;}}
previousId=activity.Id;};$location.path("/dataview/"+previousId);};function nextActivity(activities,routeId,$location){var nextId;var found=false;for(var i=0;i<activities.length;i++){var activity=activities[i];if(found){nextId=activity.Id;break;}
if(activity.Id==routeId){found=true;nextId=activity.Id;}};$location.path("/dataview/"+nextId);}
function fireRules(type,row,field,value,headers,errors,scope){var row_errors=errors;try{if(field.Field&&field.Field.Rule&&field.Field.Rule[type]){console.log("Dataset field rule: "+field.Field.Rule[type]);if(type=="DefaultValue")
field.DefaultValue=field.Field.Rule[type];else
eval(field.Field.Rule[type]);}
if(field.Rule&&field.Rule[type]){console.log("Master field rule: "+field.Rule[type]);if(type=="DefaultValue")
field.DefaultValue=field.Rule[type];else
eval(field.Rule[type]);}}catch(e){console.dir(e);}};define("core/datasets/datasets-functions",function(){});datasets_module.filter('checkmark',function(){return function(input){return(input==null)?'\u2713':'\u2718';};}).filter('units',function(){return function(input){return(input==null)?'':' ('+input+')';};}).filter('locationNameFilter',function($rootScope){return function(input){if($rootScope.locationOptions[input])
return $rootScope.locationOptions[input];return input;};}).filter('instrumentFilter',function($rootScope){return function(input){if($rootScope.instrumentOptions[input])
{return $rootScope.instrumentOptions[input];}
return input;};}).filter('timezoneFilter',function($rootScope){return function(input){if($rootScope.timezoneOptions[input])
{return $rootScope.timezoneOptions[input];}
return input;};}).filter('QAStatusFilter',function($rootScope){return function(input){if($rootScope.QAStatusOptions[input])
return $rootScope.QAStatusOptions[input];return input;};}).filter('fishermanFilter',function($rootScope){return function(input){if((typeof input!=='undefined')&&(input!==null))
{return $rootScope.fishermenOptions[input];}
else
{return null;}
if($rootScope.fishermenOptions[input])
{return $rootScope.fishermenOptions[input];}};}).filter('DataGradeMethod',function($rootScope){return function(input){return $rootScope.DataGradeMethods[input];};}).filter('arrayValues',function(){return function(input){var result='';if(input)
{try{result=angular.fromJson(input).toString();}
catch(e){result=input;}}
return result;};}).filter('RowQAStatusFilter',function($rootScope){return function(input){if($rootScope.RowQAStatuses[input]){return $rootScope.RowQAStatuses[input];}
else{return'unknown';}};}).filter('urlsFromString',function($sce,$rootScope){return function(input)
{var retval=[];if(input)
{var urls=angular.fromJson(input);angular.forEach(urls,function(aUrl){var theTarget="_blank";retval.push("<a href='"+aUrl.Link+"' target=\"_blank\">"+aUrl.Name+"</a>");});}
if(retval.length==0)
retval="&nbsp;";else
retval=retval.join(",");return $sce.trustAsHtml(retval);};}).filter('fileNamesFromString',function($sce,$rootScope){return function(input)
{var retval=[];var fileIsString=false;if(input)
{var files=null;try
{files=angular.fromJson(input);}
catch(err)
{files=[];files.push(input);fileIsString=true;}
angular.forEach(files,function(file,value){var theTarget="_blank";if(!$rootScope.viewSubproject)
{if($rootScope.datasetId)
{if(fileIsString)
{retval.push("<a href='"+cdmsShareUrl+"P/"+$rootScope.projectId+"/D/"+$rootScope.datasetId+"/"+file+"' target=\"_blank\">"+file.Name+"</a>");}
else
retval.push("<a href='"+cdmsShareUrl+"P/"+$rootScope.projectId+"/D/"+$rootScope.datasetId+"/"+file.Name+"' target=\"_blank\">"+file.Name+"</a>");}
else if($rootScope.newSubproject)
{if(fileIsString)
{retval.push("<a href='"+cdmsShareUrl+"P/"+$rootScope.projectId+"/S/[TBD]"+"/"+file+"' target=\"_blank\">"+file.Name+"</a>");}
else
retval.push("<a href='"+cdmsShareUrl+"P/"+$rootScope.projectId+"/S/[TBD]"+"/"+file.Name+"' target=\"_blank\">"+file.Name+"</a>");}
else
{if(fileIsString)
{retval.push("<a href='"+cdmsShareUrl+"P/"+$rootScope.projectId+"/"+file+"' target=\"_blank\">"+file.Name+"</a>");}
else
retval.push("<a href='"+cdmsShareUrl+"P/"+$rootScope.projectId+"/"+file.Name+"' target=\"_blank\">"+file.Name+"</a>");}}
else if($rootScope.viewSubproject)
{if(fileIsString)
{retval.push("<a href='"+cdmsShareUrl+"P/"+$rootScope.projectId+"/S/"+$rootScope.subprojectId+"/"+file+"' target=\"_blank\">"+file.Name+"</a>");}
else
retval.push("<a href='"+cdmsShareUrl+"P/"+$rootScope.projectId+"/S/"+$rootScope.subprojectId+"/"+file.Name+"' target=\"_blank\">"+file.Name+"</a>");}});}
if(retval.length==0)
retval="&nbsp;";else
retval=retval.join(",");return $sce.trustAsHtml(retval);};}).filter('countItems',function($sce){return function(input)
{var retval='-';if(input)
{retval=array_count(input)+"";}
return $sce.trustAsHtml(retval);}});define("core/datasets/datasets-filters",function(){});var dataset_activities_list=['$scope','$routeParams','DatasetService','SubprojectService','ProjectService','CommonService','PreferencesService','$modal','$location','$window','$rootScope',function($scope,$routeParams,DatasetService,SubprojectService,ProjectService,CommonService,PreferencesService,$modal,$location,$window,$rootScope){$scope.dataset=DatasetService.getDataset($routeParams.Id);$scope.activities=null;$scope.activities=DatasetService.getActivitiesForView($routeParams.Id);$scope.loading=true;$scope.project=null;$scope.saveResults=null;$scope.isFavorite=$rootScope.Profile.isDatasetFavorite($routeParams.Id);$scope.allActivities=null;$scope.headerdata=DatasetService.getHeadersDataForDataset($routeParams.Id);$scope.thisDatasetLocationObjects=[];$scope.showDataEntrySheetButton=true;var ShowFields=["ActivityDate","Location.Label",];var activityDateTemplate=function(params){return'<a href="#/dataview/'+params.node.data.Id+'">'+moment(params.node.data.ActivityDate).format('L')+'</a>';};var yearReportedTemplate=function(params){if(params.node.data.headerdata.YearReported===undefined)
return;else
return'<a href="#/dataview/'+params.node.data.Id
+'">'+params.node.data.headerdata.YearReported+'</a>';};var runYearTemplate=function(params){if(params.node.data.headerdata.RunYear===undefined)
return;else
return'<a href="#/dataview/'+params.node.data.Id
+'">'+params.node.data.headerdata.RunYear+'</a>';};var desclinkTemplate=function(params){return'<a href="#/dataview/'+params.node.data.Id
+'">'+params.node.data.Description+'</a>';};var allotmentTemplate=function(params){return'<a href="#/dataview/'+params.node.data.Id
+'">'+params.node.data.headerdata.Allotment+'</a>';};var locationLabelTemplate=function(params){return'<span>'+params.node.data.Location.Label+'</span>'
+((params.node.data.Location.OtherAgencyId)?('<span> ('+params.node.data.Location.OtherAgencyId+')</span>'):'');};var QATemplate=function(params){return $scope.QAStatusList[params.node.data.ActivityQAStatus.QAStatusId];};var editButtonTemplate=function(params){return'<div project-role="editor">'+'<a href="#/edit/'+params.node.data.Id+'">Edit</a>'+'</div>';};$scope.columnDefs=[];$scope.possibleColumnDefs=[{field:'ActivityDate',headerName:'Activity Date',filter:'date',cellRenderer:activityDateTemplate,width:150,menuTabs:['filterMenuTab']},{field:'headerdata.YearReported',headerName:'Year Reported',cellRenderer:yearReportedTemplate,width:120,menuTabs:[]},{field:'headerdata.RunYear',headerName:'Run Year',cellRenderer:runYearTemplate,width:120,menuTabs:[]},{field:'headerdata.TimeStart',headerName:'Time Start',width:80,valueFormatter:function(params){if(params.node.data.headerdata.TimeStart!==undefined)
return moment(params.node.data.headerdata.TimeStart).format('HH:mm');},menuTabs:[]},{field:'headerdata.Allotment',headerName:'Allotment',cellRenderer:allotmentTemplate,minWidth:100,menuTabs:['filterMenuTab']},{field:'headerdata.AllotmentStatus',headerName:'Status',minWidth:120,menuTabs:['filterMenuTab']},{field:'Description',headerName:'Date Range',cellRenderer:desclinkTemplate,minWidth:200,width:250,menuTabs:['filterMenuTab'],filter:'text'},{field:'Location.Label',headerName:'Location',cellRenderer:locationLabelTemplate,minWidth:360,menuTabs:['filterMenuTab']},{field:'Location.WaterBody.Name',headerName:'Waterbody',menuTabs:['filterMenuTab']},{field:'headerdata.FieldActivityType',headerName:'Field Activity Type',minWidth:120,menuTabs:['filterMenuTab']},{field:'headerdata.DataType',headerName:'Data Type',minWidth:120,menuTabs:['filterMenuTab']},{field:'User.Fullname',headerName:'By User',minWidth:120,alwaysShowField:true,menuTabs:['filterMenuTab']},{field:'QAStatus',headerName:'QA Status',cellRenderer:QATemplate,minWidth:100,alwaysShowField:true,menuTabs:['filterMenuTab'],valueGetter:function(params){return $scope.QAStatusList[params.node.data.ActivityQAStatus.QAStatusId];}},{field:'Actions',headerName:'',cellRenderer:editButtonTemplate,minWidth:50,alwaysShowField:true,menuTabs:[]},];$scope.selectedLocation=null;$scope.newPoint=null;$scope.newGraphic=null;$scope.agGridOptions={animateRows:true,enableSorting:true,enableFilter:true,enableColResize:true,showToolPanel:false,columnDefs:[],rowData:[],filterParams:{apply:true},debug:true,rowSelection:'multiple',onSelectionChanged:function(params){$scope.agGridOptions.selectedItems=$scope.agGridOptions.api.getSelectedRows();$scope.$apply();},onFilterModified:function(){$scope.agGridOptions.api.deselectAll();},selectedItems:[]};var ag_grid_div=document.querySelector('#activity-list-grid');$scope.ag_grid=new agGrid.Grid(ag_grid_div,$scope.agGridOptions);$scope.agGridOptions.api.showLoadingOverlay();$scope.activities.$promise.then(function(){console.log("Inside activities-controller.js, $scope.activities.$promise, loading header data...");$scope.loading=true;$scope.headerdata.$promise.then(function(){angular.forEach($scope.activities,function(activity,key){activity.headerdata=getByField($scope.headerdata,activity.Id,"ActivityId");});$scope.agGridOptions.api.setRowData($scope.activities);console.log("autosizing columns");var allColumnIds=[];$scope.agGridOptions.columnApi.getAllColumns().forEach(function(column){allColumnIds.push(column.colId);});$scope.agGridOptions.columnApi.autoSizeColumns(allColumnIds);});console.log("$scope at end of $scope.activities.$promise is next...");$scope.allActivities=$scope.activities;$scope.loading=false;});$scope.$watch('dataset.Fields',function(){if(!$scope.dataset.Fields)return;console.log("Inside dataset.Fields watcher...");$rootScope.datasetId=$scope.dataset.Id;$scope.project=ProjectService.getProject($scope.dataset.ProjectId);$scope.QAStatusList=makeObjects($scope.dataset.QAStatuses,'Id','Name');$scope.DatastoreTablePrefix=$scope.dataset.Datastore.TablePrefix;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);console.log("config!");console.dir($scope.dataset.Config);if($scope.dataset.Config!=undefined&&$scope.dataset.Config.ActivitiesPage!=undefined&&$scope.dataset.Config.ActivitiesPage.ShowFields!=undefined){console.log("Hey config has a showfields configured!");ShowFields=$scope.dataset.Config.ActivitiesPage.ShowFields;}else
console.log("aww no showfields in config... we'll just use the ShowFields defaults...");var showColDefs=[];angular.forEach($scope.possibleColumnDefs,function(coldef){if(coldef.alwaysShowField||ShowFields.contains(coldef.field)){showColDefs.push(coldef);}});showColDefs[0].sort="desc";$scope.columnDefs=showColDefs;$scope.agGridOptions.api.setColumnDefs(showColDefs);if($scope.DatastoreTablePrefix==="WaterTemp"){$scope.reloadDatasetLocations("WaterTemp",LOCATION_TYPE_WaterTemp);}else if($scope.DatastoreTablePrefix==="Metrics"){$scope.showDataEntrySheetButton=false;$scope.reloadDatasetLocations("Metrics",LOCATION_TYPE_Hab);}});$scope.$watch('project.Name',function(){if($scope.project&&$scope.project.$resolved){console.log("Inside watch project.Name...");console.log("$scope.project.Id = "+$scope.project.Id);console.log("$scope.subprojectType = "+$scope.subprojectType);SubprojectService.setServiceSubprojectType($scope.subprojectType);if($scope.DatastoreTablePrefix==="Metrics"){console.log("x")
$scope.subprojectList=SubprojectService.getProjectSubprojects($scope.project.Id);var watcher=$scope.$watch('subprojectList.length',function(){if($scope.subprojectList===null){console.log("$scope.subprojectList is null");return;}
else if(typeof $scope.subprojectList.length==='undefined'){console.log("$scope.subprojectList.length is undefined.");return;}
else if($scope.subprojectList.length===0){console.log("$scope.subprojectList.length is 0");return;}
console.log("$scope.subprojectList.length = "+$scope.subprojectList.length);console.log("subprojects is loaded...");console.dir($scope.subprojectList);$scope.reloadProjectLocations();if($scope.map&&$scope.map.locationLayer&&$scope.map.locationLayer.hasOwnProperty('showLocationsById')){$scope.map.locationLayer.showLocationsById(0);}
watcher();});}
else{$scope.reloadProjectLocations();}}});$scope.reloadDatasetLocations=function(datasetName,locationType){console.log("Inside activities-controllers.js, scope.reloadDatasetLocations...");$scope.thisDatasetLocationObjects=[];if(datasetName==="WaterTemp"){console.log("We have a WaterTemp dataset...");angular.forEach($scope.project.Locations,function(location,key){if(location.LocationType.Id===LOCATION_TYPE_WaterTemp)
$scope.thisDatasetLocationObjects.push(location.SdeObjectId);});}
else if(datasetName==="Metrics"){console.log("We have a Metrics dataset...");console.log("$scope.subprojectList is next...");console.dir($scope.subprojectList);angular.forEach($scope.subprojectList,function(subproject){angular.forEach($scope.project.Locations,function(location,key){if((locationType===LOCATION_TYPE_Hab)&&(subproject.LocationId===location.Id)){console.log("Found a subproject location")
console.dir(location);$scope.thisDatasetLocationObjects.push(location.SdeObjectId);subproject.GPSEasting=location.GPSEasting;subproject.GPSNorthing=location.GPSNorthing;subproject.UTMZone=location.UTMZone;subproject.Projection=location.Projection;subproject.WaterBodyId=location.WaterBodyId;}});});}
$scope.map.locationLayer.showLocationsById($scope.thisDatasetLocationObjects);};$scope.ShowMap={Display:false,Message:"Show Map",MessageToOpen:"Show Map",MessageToClose:"Hide Map",};$scope.addLocation=function(){var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-addlocation.html',controller:'ModalAddLocationCtrl',scope:$scope,});};$scope.removeFilter=function(){$scope.activities=$scope.allActivities;$scope.agGridOptions.api.setRowData($scope.activities);$scope.clearLocation();}
$scope.clearLocation=function(){$scope.agGridOptions.api.deselectAll();$scope.map.infoWindow.hide();$scope.selectedLocation=null;if($scope.newGraphic){$scope.map.graphics.remove($scope.newGraphic);$scope.newGraphic=null;}};$scope.removeLocation=function(){if(confirm("Are you sure you want to delete this location?")){var deleting=CommonService.deleteLocation($scope.selectedLocation.Id);$scope.removeFilter();deleting.$promise.then(function(){$scope.refreshProjectLocations();$scope.reloadProjectLocations();});}};$scope.editLocation=function(){$scope.row=$scope.selectedLocation;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-addlocation.html',controller:'ModalAddLocationCtrl',scope:$scope,});};$scope.getFormContent=function(){return"Click button above to create a new location here.";};$scope.click=function(e){$scope.agGridOptions.api.deselectAll();try{if(!$scope.map.graphics.infoTemplate){$scope.map.graphics.infoTemplate=$scope.template;console.log("graphics layer infotemplate defined.");}
$scope.map.infoWindow.resize(250,300);if(e.graphic){console.log("e.graphic is next...");console.dir(e.graphic);$scope.map.infoWindow.setContent($scope.getInfoContent(e.graphic));}
else{$scope.map.infoWindow.setTitle("New Location");$scope.map.infoWindow.setContent($scope.getFormContent());}
$scope.map.infoWindow.show(e.mapPoint);if(e.graphic){var filterActivities=[];var location=getByField($scope.locationsArray,e.graphic.attributes.OBJECTID,"SdeObjectId");angular.forEach($scope.allActivities,function(item,key){if(item.LocationId==location.Id){filterActivities.push(item);}});console.log("number of filteractivities: "+filterActivities.length);$scope.activities=filterActivities;$scope.agGridOptions.api.setRowData($scope.activities);$scope.selectedLocation=location;if($scope.newGraphic){$scope.map.graphics.remove($scope.newGraphic);$scope.newGraphic=null;}}
else
{$scope.selectedLocation=null;$scope.map.reposition();$scope.newPoint=e.mapPoint;if($scope.newGraphic)
$scope.map.graphics.remove($scope.newGraphic);$scope.newGraphic=new esri.Graphic(e.mapPoint,new esri.symbol.SimpleMarkerSymbol());$scope.map.graphics.add($scope.newGraphic);}}catch(e){console.dir(e);}};$scope.toggleMap=function(){if($scope.ShowMap.Display){$scope.removeFilter();$scope.ShowMap.Display=false;$scope.ShowMap.Message=$scope.ShowMap.MessageToOpen;}
else{$scope.ShowMap.Display=true;$scope.ShowMap.Message=$scope.ShowMap.MessageToClose;setTimeout(function(){$scope.map.reposition();console.log("repositioned");},400);}};$scope.toggleFavorite=function(){$scope.isFavorite=!$scope.isFavorite;$scope.results={};$rootScope.Profile.toggleDatasetFavorite($scope.dataset);PreferencesService.saveUserPreference("Datasets",$rootScope.Profile.favoriteDatasets.join(),$scope.results);var watcher=$scope.$watch('results',function(){if($scope.results.done){if($scope.results.failure){$scope.isFavorite=!$scope.isFavorite;$rootScope.Profile.toggleDatasetFavorite($scope.dataset);}
watcher();}},true);}
$scope.refreshProjectLocations=function(){ProjectService.clearProject();$scope.project=null;$scope.project=ProjectService.getProject($scope.dataset.ProjectId);};$scope.reloadProjectLocations=function(){console.log("Inside $scope.reloadProjectLocations...");$scope.subprojectList=angular.copy($scope.subprojectList);$scope.datasetLocationType=CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);console.log("LocationType = "+$scope.datasetLocationType);$scope.locationsArray=getMatchingByField($scope.project.Locations,$scope.datasetLocationType,"LocationTypeId");if($scope.subprojectType==="Habitat"){console.log("Checking for subproject locations now...");angular.forEach($scope.project.Locations,function(location){;angular.forEach($scope.subprojectList,function(subproject){if((subproject.ProjectId===$scope.project.Id)&&(subproject.ProjectId===location.ProjectId)&&(subproject.Id===location.SubprojectId)){console.log("Found subproject location...");$scope.locationsArray.push(location);}});});console.log("$scope.locationsArray (after adding subproject locs) is next...");console.dir($scope.locationsArray);$scope.locationObjectIds=getLocationObjectIdsFromLocationsWithSubprojects($scope.locationsArray);}
else{$scope.locationObjectIds=getLocationObjectIdsByInverseType($scope.datasetLocationType,$scope.project.Locations);}
if($scope.map&&$scope.map.locationLayer&&$scope.map.locationLayer.hasOwnProperty('showLocationsById'))
$scope.map.locationLayer.showLocationsById($scope.locationObjectIds);};$scope.reloadActivities=function(){$scope.loading=true;$scope.activities=DatasetService.getActivitiesForView($routeParams.Id);}
$scope.openQueryWindow=function(p){$location.path("/datasetquery/"+$scope.dataset.Id);};$scope.openDetailsWindow=function(p){$location.path("/dataset-details/"+$scope.dataset.Id);};$scope.openImportWindow=function(){$scope.activities=null;$location.path("/datasetimport/"+$scope.dataset.Id);};$scope.deleteActivities=function(){$scope.saveResults={};if(!confirm("Are you sure you want to delete "+$scope.agGridOptions.selectedItems.length+" activities?  There is no undo for this operation."))
return;DatasetService.deleteActivities($rootScope.Profile.Id,$scope.dataset.Id,$scope.agGridOptions,$scope.saveResults);var deleteWatcher=$scope.$watch('saveResults',function(){if($scope.saveResults.success){var SelectedActivityIds=[];var activitiesProcessed=0;var activitiesToProcess=$scope.activities.length;$scope.agGridOptions.selectedItems.forEach(function(item){SelectedActivityIds.push(item.Id);});console.dir(SelectedActivityIds);$scope.allActivities=[];$scope.activities.forEach(function(activity,index){if(!SelectedActivityIds.containsInt(activity.Id)){$scope.allActivities.push(activity);}else{console.dir(activity);}
activitiesProcessed++;if(activitiesProcessed===activitiesToProcess)
{$scope.agGridOptions.api.deselectAll();$scope.activities=$scope.allActivities;$scope.agGridOptions.api.setRowData($scope.activities);deleteWatcher();}});}
else if($scope.saveResults.failure){deleteWatcher();}},true);};$scope.openDataEntry=function(p){$location.path("/dataentry/"+$scope.dataset.Id);};$scope.getInfoContent=function(graphic){var location=getByField($scope.locationsArray,graphic.attributes.OBJECTID,"SdeObjectId");$scope.map.infoWindow.setTitle(location.Label);var html="";if(location.Description)
html+="<i>"+location.Description+"</i><br/><br/>";html+="<b>Type: </b>"+location.LocationType.Name;if(location.Elevation)
html+="<br/><b>Elevation: </b>"+location.Elevation;if(location.GPSEasting)
html+="<br/><b>Easting: </b>"+location.GPSEasting;if(location.GPSNorthing)
html+="<br/><b>Northing: </b>"+location.GPSNorthing;if(location.Latitude)
html+="<br/><b>Latitude: </b>"+location.Latitude;if(location.Longitude)
html+="<br/><b>Longitude: </b>"+location.Longitude;if(location.OtherAgencyId)
html+="<br/><b>Other Agency Id: </b>"+location.OtherAgencyId;if(location.WettedWidth)
html+="<br/><b>Wetted Width: </b>"+location.WettedWidth;if(location.WettedDepth)
html+="<br/><b>Wetted Depth: </b>"+location.WettedDepth;if(location.RiverMile)
html+="<br/><b>River Mile: </b>"+location.RiverMile;if(location.ImageLink)
html+="<br/><br/><a href='"+location.ImageLink+"' target='_blank'><img width='200px' src='"+location.ImageLink+"'/></a>"
if($scope.Profile.isProjectOwner($scope.project)||$scope.Profile.isProjectEditor($scope.project))
html+="<br/><div class='right'><a href='#/datasetimport/"+$scope.dataset.Id+"?LocationId="+location.Id+"'>Import data</a></div>";return html;};}];define("core/datasets/components/dataset-activities-list/dataset-activities-list",function(){});var dataset_detail=['$scope','$routeParams','DatasetService','ProjectService','CommonService','$location','$filter',function(scope,routeParams,DatasetService,ProjectService,CommonService,$location,$filter){scope.dataset=DatasetService.getDataset(routeParams.Id);scope.metadataList={};scope.CellOptions={};scope.metadataProperties=CommonService.getMetadataProperties(METADATA_ENTITY_DATASETTYPEID);scope.$watch('project.OwnerId',function(){if(scope.project&&scope.project.OwnerId)
{scope.metadataList.Owner={field:'Owner',value:scope.project.Owner.Organization.Name+" / "+scope.project.Owner.Department.Name+" / "+scope.project.Owner.Fullname,locked:true};}});scope.$watch('dataset.ProjectId',function(){if(scope.dataset&&scope.dataset.ProjectId)
{scope.project=ProjectService.getProject(scope.dataset.ProjectId);scope.metadataList=angular.extend(scope.metadataList,{Name:{field:'Name',value:scope.dataset.Name,controlType:'text',},Description:{field:'Description',value:scope.dataset.Description,controlType:'text',},Dataset:{field:'Dataset',value:scope.dataset.Datastore.Name,locked:true},Created:{field:'Created',value:$filter('date')(scope.dataset.CreateDateTime,"MM/dd/yyyy"),locked:true}});angular.forEach(scope.dataset.Metadata,function(value,key){try{var property=CommonService.getMetadataProperty(value.MetadataPropertyId);populateMetadataDropdowns(scope,property);scope.metadataList[property.Name]={field:property.Name,propertyId:property.Id,controlType:property.ControlType,value:value.Values,options:scope.CellOptions[property.Id+"_Options"]};}catch(e)
{console.dir(e);}});}});scope.metadataProperties.promise.then(function(list){scope.metadataProperties=list;angular.forEach(scope.metadataProperties,function(property,key){if(!(property.Name in scope.metadataList))
{populateMetadataDropdowns(scope,property);scope.metadataList[property.Name]={field:property.Name,propertyId:property.Id,controlType:property.ControlType,value:"",options:scope.CellOptions[property.Id+"_Options"]};}});});scope.saveResults={};scope.save=function(){var metadata=[];angular.forEach(scope.metadataList,function(item,key){metadata.push({MetadataPropertyId:item.propertyId,Values:item.value});});console.log("metadatalist - ");console.dir(scope.metadataList);console.log("what we're sending - ");console.dir(metadata);var promise=CommonService.saveDatasetMetadata(scope.dataset.Id,metadata,scope.saveResults);promise.$promise.then(function(){DatasetService.clearDataset();setTimeout(function(){console.log("boom ready to move on.");scope.dataset=DatasetService.getDataset(routeParams.Id);$location.path("/dataset-details/"+routeParams.Id);console.log("moving on.");},250);});};scope.cancel=function(){$location.path("/dataset-details/"+scope.dataset.Id);};scope.close=function(){$location.path("/activities/"+scope.dataset.Id);};scope.edit=function(){$location.path("/dataset-edit/"+scope.dataset.Id);};}];define("core/datasets/components/dataset-detail/dataset-detail",function(){});var dataset_edit_form=['$scope','$q','$sce','$routeParams','DatasetService','SubprojectService','ProjectService','CommonService','$modal','$location','$rootScope','ActivityParser','DataSheet','FileUploadService','$upload',function($scope,$q,$sce,$routeParams,DatasetService,SubprojectService,ProjectService,CommonService,$modal,$location,$rootScope,ActivityParser,DataSheet,UploadService,$upload){initEdit();$scope.userId=$rootScope.Profile.Id;$scope.fields={header:[],detail:[],relation:[]};$scope.filesToUpload={};$scope.file_row={};$scope.file_field={};$scope.errors={heading:[]};$scope.cellInputEditableTemplate='<input ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" />';$scope.cellSelectEditableTemplate='<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'QAStatusId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in RowQAStatuses"/>';$scope.datasheetColDefs=[];$scope.datasetId=null;$scope.option={enableMultiselect:false};$scope.dataset_activities=DatasetService.getActivityData($routeParams.Id);$scope.dataSheetDataset=[];$scope.row={ActivityQAStatus:{}};$scope.fishermenList=null;$scope.subprojectList=null;$scope.sortedLocations=[];$scope.datasetLocationType=0;$scope.datasetLocations=[[]];$scope.primaryDatasetLocation=0;$scope.selectedItems=[];$scope.gridOptionsFilter={};$scope.dataEntryPage=false;$scope.showDetails=true;$scope.foundDuplicate=false;$scope.gridDatasheetOptions={data:'dataSheetDataset',enableCellSelection:true,enableRowSelection:true,multiSelect:true,enableCellEdit:true,columnDefs:'datasheetColDefs',enableColumnResize:true,selectedItems:$scope.selectedItems,filterOptions:$scope.gridOptionsFilter,};console.log("In dataedit-controllers...");DataSheet.initScope($scope);console.log("Completed scope init...");var fishermenWatcher=$scope.$watch('fishermenList.length',function(){if((typeof $scope.fishermenList!=='undefined')&&($scope.fishermenList!==null)){console.log("Inside fishermenList watch...");console.log("$scope.fishermenList.length = "+$scope.fishermenList.length)
if($scope.fishermenList.length>0){$scope.fishermenOptions=$rootScope.fishermenOptions=makeObjects($scope.fishermenList,'Id','FullName');console.log("$scope.fishermenOptions is next...");console.dir($scope.fishermenOptions);}}});$scope.$watch('subprojectList.length',function(){if($scope.subprojectList===null)
return;else if($scope.subprojectList.length===0)
return;console.log("Inside watch subprojectList.length...");if($scope.subprojectType==="Habitat"){console.log("$scope.subprojectList is next...");console.dir($scope.subprojectList);console.log("$scope.project.Locations is next...");console.dir($scope.project.Locations);angular.forEach($scope.subprojectList,function(subproject){angular.forEach($scope.project.Locations,function(location){if(subproject.LocationId===location.Id){console.log("Found a subproject location")
console.dir(location);$scope.datasetLocations.push([location.Id,location.Label]);}});});}
console.log("datasetLocations (with subprojects) is next...");console.dir($scope.datasetLocations);$scope.finishLocationProcessing();});$scope.$watch('dataset_activities.Dataset.Id',function(){if(!$scope.dataset_activities.Dataset)
return;console.log("Inside watcher dataset_activities.Dataset.Id...");console.log("$scope.dataset_activities is next...");console.dir($scope.dataset_activities);$scope.dataset=$scope.dataset_activities.Dataset;console.log("$scope.dataset is next...");console.dir($scope.dataset);$rootScope.datasetId=$scope.datasetId=$scope.dataset.Id;console.log("$rootScope.datasetId = "+$rootScope.datasetId);$scope.dataset.Files=DatasetService.getDatasetFiles($scope.dataset.Id);$scope.DatastoreTablePrefix=$rootScope.DatastoreTablePrefix=$scope.dataset.Datastore.TablePrefix;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);$scope.datasheetColDefs=DataSheet.getColDefs($scope.DatastoreTablePrefix,"form");DatasetService.configureDataset($scope.dataset);$scope.project=ProjectService.getProject($scope.dataset.ProjectId);$scope.QAStatusOptions=$rootScope.QAStatusOptions=makeObjects($scope.dataset.QAStatuses,'Id','Name');console.log("Setting header fields...");$scope.row['ActivityId']=$scope.dataset_activities.Header.ActivityId;$scope.row['activityDate']=$scope.dataset_activities.Header.Activity.ActivityDate;$scope.row['locationId']=""+$scope.dataset_activities.Header.Activity.LocationId;$scope.row['InstrumentId']=$scope.dataset_activities.Header.Activity.InstrumentId;$scope.row['AccuracyCheckId']=$scope.dataset_activities.Header.Activity.AccuracyCheckId;$scope.row['PostAccuracyCheckId']=$scope.dataset_activities.Header.Activity.PostAccuracyCheckId;if(($scope.DatastoreTablePrefix==="CreelSurvey")&&($scope.dataset_activities.Header.FieldSheetFile))
$scope.row['FieldSheetFile']=$scope.dataset_activities.Header.FieldSheetFile;else if(($scope.DatastoreTablePrefix==="ScrewTrap")&&($scope.dataset_activities.Header.FileTitle))
$scope.row['FieldSheetFile']=$scope.dataset_activities.Header.FileTitle;else if($scope.dataset_activities.Header.FieldSheetFile)
$scope.row['FieldSheetFile']=$scope.dataset_activities.Header.FieldSheetFile;if($scope.DatastoreTablePrefix==="CreelSurvey"){console.log("Extracting times from strings...");var strTimeStart=$scope.dataset_activities.Header.TimeStart;var strTimeEnd=$scope.dataset_activities.Header.TimeEnd;var intTLoc=strTimeStart.indexOf("T");strTimeStart=strTimeStart.substr(intTLoc+1,5);$scope.dataset_activities.Header.TimeStart=strTimeStart;strTimeEnd=strTimeEnd.substr(intTLoc+1,5);$scope.dataset_activities.Header.TimeEnd=strTimeEnd;}
console.log("$scope.row is next...");console.dir($scope.row);if($scope.dataset_activities.Header.Activity.ActivityQAStatus){$scope.row.ActivityQAStatus={QAStatusId:""+$scope.dataset_activities.Header.Activity.ActivityQAStatus.QAStatusId,Comments:$scope.dataset_activities.Header.Activity.ActivityQAStatus.Comments,}}
if($scope.dataset_activities.Header.Activity.Timezone)
$scope.row.Timezone=getByField($scope.SystemTimezones,angular.fromJson($scope.dataset_activities.Header.Activity.Timezone).Name,"Name");$scope.RowQAStatuses=$rootScope.RowQAStatuses=makeObjects($scope.dataset.RowQAStatuses,'Id','Name');if(($scope.dataset.Datastore.TablePrefix==="WaterTemp")&&($scope.dataset.RowQAStatuses.length>1)){$scope.datasheetColDefs.push({field:"QAStatusId",displayName:"QA",minWidth:50,maxWidth:180,enableCellEditOnFocus:true,editableCellTemplate:$scope.cellSelectEditableTemplate,cellFilter:'RowQAStatusFilter'});}
if($scope.dataset.Config){var filteredColDefs=[];angular.forEach($scope.datasheetColDefs,function(coldef){console.log("coldef is next...");console.dir(coldef);if($scope.dataset.Config.DataEntryPage&&!$scope.dataset.Config.DataEntryPage.HiddenFields.contains(coldef.field)){filteredColDefs.push(coldef);}});$scope.datasheetColDefs=$scope.colDefs=filteredColDefs;}
$scope.dataSheetDataset=$scope.dataset_activities.Details;$scope.gridFields=[];if($scope.DatastoreTablePrefix==="CreelSurvey")
{var detailsLength=$scope.dataSheetDataset.length;for(var i=0;i<detailsLength;i++){var NumMinutes=parseInt($scope.dataSheetDataset[i].TotalTimeFished);var theHours=parseInt(NumMinutes/60,10);var theMinutes=NumMinutes-(theHours*60);if(theHours<10)
var strHours="0"+theHours;else
var strHours=""+theHours;if(theMinutes<10)
var strMinutes="0"+theMinutes;else
var strMinutes=""+theMinutes;$scope.dataSheetDataset[i].TotalTimeFished=strHours+":"+strMinutes;var strInterviewTime=$scope.dataSheetDataset[i].InterviewTime;intTLoc=strInterviewTime.indexOf("T");strInterviewTime=strInterviewTime.substr(intTLoc+1,5);$scope.dataSheetDataset[i].InterviewTime=strInterviewTime}}
angular.forEach($scope.dataset.Fields.sort(orderByIndex),function(field){parseField(field,$scope);if(field.FieldRoleId==FIELD_ROLE_HEADER){$scope.fields.header.push(field);if(field.ControlType=="multiselect"){$scope.row[field.DbColumnName]=angular.fromJson($scope.dataset_activities.Header[field.DbColumnName]);}
else
$scope.row[field.DbColumnName]=$scope.dataset_activities.Header[field.DbColumnName];}
else if(field.FieldRoleId==FIELD_ROLE_DETAIL){$scope.fields.detail.push(field);$scope.datasheetColDefs.push(makeFieldColDef(field,$scope));}
if(field.ControlType=="grid")
$scope.gridFields.push(field);});$scope.recalculateGridWidth($scope.fields.detail.length);$scope.validateGrid($scope);console.log("$scope at end of watch dataset_activities is next...");console.dir($scope.dataset_activities);});$scope.$watch('project.Name',function(){if((typeof $scope.project==='undefined')||($scope.project===null))
return;else if((typeof $scope.project.Name==='undefined')||($scope.project.Name===null))
return;else if((typeof $scope.project.Id==='undefined')||($scope.project.Id===null))
return;console.log("Inside watcher, project.Name...");console.log("$scope.project is next...");console.dir($scope.project);$rootScope.projectId=$scope.projectId=$scope.project.Id;$scope.project.Files=null;$scope.project.Files=ProjectService.getProjectFiles($scope.project.Id);console.log("$scope.subprojectType = "+$scope.subprojectType);SubprojectService.setServiceSubprojectType($scope.subprojectType);if($scope.DatastoreTablePrefix==="CreelSurvey"){console.log("Loading Harvest...");$scope.ShowFishermen=true;$scope.theFishermen=ProjectService.getProjectFishermen($scope.project.Id);$scope.fishermenList=ProjectService.getFishermen();}
else if($scope.DatastoreTablePrefix==="CrppContracts"){console.log("Loading CRPP subprojects...");$scope.ShowSubproject=true;$scope.subprojectList=SubprojectService.getSubprojects();}
else if(($scope.DatastoreTablePrefix==="Metrics")||($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift")){console.log("Loading Habitat subprojects...");$scope.subprojectList=SubprojectService.getProjectSubprojects($scope.project.Id);var watcher=$scope.$watch('subprojectList.length',function(){console.log("Inside watcher for subprojectList.length...");if($scope.subprojectList===null){console.log("$scope.subprojectList is null");return;}
else if(typeof $scope.subprojectList.length==='undefined'){console.log("$scope.subprojectList.length is undefined.");return;}
else if($scope.subprojectList.length===0){console.log("$scope.subprojectList.length is 0");return;}
console.log("$scope.subprojectList.length = "+$scope.subprojectList.length);console.log("subprojects is loaded...");console.dir($scope.subprojectList);watcher();});}
if(!$rootScope.Profile.isProjectOwner($scope.project)&&!$rootScope.Profile.isProjectEditor($scope.project)){$location.path("/unauthorized");}
$scope.datasetLocationType=CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);console.log("LocationType = "+$scope.datasetLocationType);if($scope.project.Locations){for(var i=0;i<$scope.project.Locations.length;i++){if(($scope.DatastoreTablePrefix==="Metrics")||($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift")){if(($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType)||($scope.project.Locations[i].LocationTypeId===LOCATION_TYPE_Hab)){$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);}}
else{if($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType){$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);}
if($scope.DatastoreTablePrefix==="FishScales"){console.log("Setting $scope.primaryDatasetLocation...");$scope.primaryDatasetLocation=$scope.project.Locations[i].Id;}}}
console.log("datasetLocations is next...");console.dir($scope.datasetLocations);$scope.finishLocationProcessing();}
console.log("$scope at end of watch project.Name is next...");});$scope.$watch('dataSheetDataset',function(){if(!$scope.dataSheetDataset)
return;angular.forEach($scope.dataSheetDataset,function(datarow){angular.forEach($scope.gridFields,function(gridfield){datarow[gridfield.DbColumnName]=DatasetService.getRelationData(gridfield.FieldId,datarow.ActivityId,datarow.RowId);console.log("kicking off loading of "+datarow.ActivityId+' '+datarow.RowId);})})});$scope.finishLocationProcessing=function(){console.log("Inside $scope.finishLocationProcessing...");var index=0;angular.forEach($scope.datasetLocations,function(dsLoc){if(dsLoc.length===0){$scope.datasetLocations.splice(index,1);}
index++;});console.log("datasetLocations after splice is next...");console.dir($scope.datasetLocations);for(var i=0;i<$scope.datasetLocations.length;i++){$scope.sortedLocations.push({Id:$scope.datasetLocations[i][0],Label:$scope.datasetLocations[i][1]});}
$scope.datasetLocations=[[]];$scope.locationOptions=$rootScope.locationOptions=makeObjects($scope.sortedLocations,'Id','Label');console.log("locationOptions is next...");console.dir($scope.locationOptions);if(array_count($scope.locationOptions)==1){angular.forEach(Object.keys($scope.locationOptions),function(key){console.log(key);$scope.row['locationId']=key;});}};$scope.clearSelections=function(){$scope.gridDatasheetOptions.selectAll(false);};$scope.setSelectedBulkQAStatus=function(rowQAId){angular.forEach($scope.gridDatasheetOptions.selectedItems,function(item,key){item.QAStatusId=rowQAId;if($scope.updatedRows.indexOf(item.Id)==-1){$scope.updatedRows.push(item.Id);}});$scope.clearSelections();};$scope.openBulkQAChange=function(){var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-rowqaupdate.html',controller:'ModalBulkRowQAChangeCtrl',scope:$scope,});};$scope.createInstrument=function(){$scope.viewInstrument=null;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-instrument.html',controller:'ModalCreateInstrumentCtrl',scope:$scope,});};$scope.reloadProject=function(){ProjectService.clearProject();$scope.project=ProjectService.getProject($scope.dataset.ProjectId);var watcher=$scope.$watch('project.Id',function(){$scope.selectInstrument();watcher();});};$scope.openAccuracyCheckModal=function(){var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-new-accuracycheck.html',controller:'ModalQuickAddAccuracyCheckCtrl',scope:$scope,});};$scope.getDataGrade=function(check){return getDataGrade(check)};$scope.selectInstrument=function(){$scope.viewInstrument=getByField($scope.project.Instruments,$scope.row.InstrumentId,"Id");$scope.selectAccuracyCheck();};$scope.selectAccuracyCheck=function(){if($scope.row.AccuracyCheckId)
$scope.row.AccuracyCheck=getByField($scope.viewInstrument.AccuracyChecks,$scope.row.AccuracyCheckId,"Id");};$scope.cancel=function(){if($scope.dataChanged){if(!confirm("Looks like you've made changes.  Are you sure you want to leave this page?"))
return;}
$location.path("/"+$scope.dataset.activitiesRoute+"/"+$scope.dataset.Id);};$scope.addNewRow=function(){var row=makeNewRow($scope.datasheetColDefs);row.QAStatusId=$scope.dataset.DefaultRowQAStatusId;$scope.dataSheetDataset.push(row);};$scope.addSection=function(){$scope.invalidOperationTitle="Add Section is an Invalid Operation";$scope.invalidOperationMessage="The Add Section button can only be used on a Data Entry page.";var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-invalid-operation.html',controller:'ModalInvalidOperation',scope:$scope,});}
$scope.addNewInterview=function(){var row=makeNewRow($scope.datasheetColDefs);row.QAStatusId=$scope.dataset.DefaultRowQAStatusId;$scope.dataSheetDataset.push(row);$scope.onRow=row;for(var i=0;i<$scope.datasheetColDefs.length;i++){if(($scope.datasheetColDefs[i].field==="InterviewTime")||($scope.datasheetColDefs[i].field==="GPSEasting")||($scope.datasheetColDefs[i].field==="GPSNorthing")||($scope.datasheetColDefs[i].field==="CarcassComments")||($scope.datasheetColDefs[i].field==="TotalTimeFished")){$scope.datasheetColDefs[i].enableCellEdit=true;}}};$scope.addFisherman=function(){$scope.viewFisherman=null;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-fisherman.html',controller:'ModalCreateFishermanCtrl',scope:$scope,});};$scope.addAnotherFish=function(){console.log("Inside addAnotherFish...");console.log("$scope before copy is next...");var listLength=$scope.dataSheetDataset.length;var theFisherman=$scope.dataSheetDataset[listLength-1].FishermanId
var interviewTime=$scope.dataSheetDataset[listLength-1].InterviewTime;var gpsEasting=$scope.dataSheetDataset[listLength-1].GPSEasting;var gpsNorthing=$scope.dataSheetDataset[listLength-1].GPSNorthing;var carcassComments=$scope.dataSheetDataset[listLength-1].CarcassComments;var totalTimeFished=$scope.dataSheetDataset[listLength-1].TotalTimeFished;var numberFishCaught=$scope.dataSheetDataset[listLength-1].NumberFishCaught;var qaStatusId=$scope.dataSheetDataset[listLength-1].QAStatusId;var row=makeNewRow($scope.datasheetColDefs);$scope.dataSheetDataset.push(row);$scope.onRow=row;listLength=$scope.dataSheetDataset.length;$scope.dataSheetDataset[listLength-1].FishermanId=theFisherman;$scope.dataSheetDataset[listLength-1].InterviewTime=interviewTime;$scope.dataSheetDataset[listLength-1].GPSEasting=gpsEasting;$scope.dataSheetDataset[listLength-1].GPSNorthing=gpsNorthing;$scope.dataSheetDataset[listLength-1].CarcassComments=carcassComments;$scope.dataSheetDataset[listLength-1].TotalTimeFished=totalTimeFished;$scope.dataSheetDataset[listLength-1].NumberFishCaught=numberFishCaught;$scope.dataSheetDataset[listLength-1].QAStatusId=qaStatusId;for(var i=0;i<$scope.datasheetColDefs.length;i++){if(($scope.datasheetColDefs[i].field==="InterviewTime")||($scope.datasheetColDefs[i].field==="GPSEasting")||($scope.datasheetColDefs[i].field==="GPSNorthing")||($scope.datasheetColDefs[i].field==="CarcassComments")||($scope.datasheetColDefs[i].field==="TotalTimeFished")){$scope.datasheetColDefs[i].enableCellEdit=false;}}
console.log("$scope after copy is next...");};$scope.viewRelation=function(row,field_name){var field=$scope.FieldLookup[field_name];$scope.openRelationEditGridModal(row.entity,field);}
$scope.openRelationEditGridModal=function(row,field){$scope.relationgrid_row=row;$scope.relationgrid_field=field;$scope.isEditable=true;var modalInstance=$modal.open({templateUrl:'app/core/datasets/components/dataset-relationgrid/templates/relationgrid-edit-modal.html',controller:'RelationGridModalCtrl',scope:$scope,});};$scope.openFileModal=function(row,field){console.log("Inside DataEditCtrl, openFileModal...");$scope.file_row=row;$scope.file_field=field;$rootScope.FieldSheetFile="";var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file.html',controller:'FileModalCtrl',scope:$scope,});};$scope.openFileAddModal=function(row,field){console.log("Inside DataEditCtrl, openFileAddModal...");$scope.file_row=row;$scope.file_field=field;var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file-add.html',controller:'FileAddModalCtrl',scope:$scope,});};$scope.openFileDeleteModal=function(row,field){console.log("Inside DataEditCtrl, openFileDeleteModal...");console.log("row is next...");console.dir(row);console.log("field is next...");console.dir(field);$scope.file_row=row;$scope.file_field=field;var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file-delete.html',controller:'FileDeleteModalCtrl',scope:$scope,});};$scope.openWaypointFileModal=function(row,field){$scope.file_row=row;$scope.file_field=field;var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-waypoint-file.html',controller:'FileModalCtrl',scope:$scope,});};$scope.onFileSelect=function(field,files){$scope.filesToUpload[field]=files;};$scope.addFiles=function(row,field_name){var field=$scope.FieldLookup[field_name];$scope.openFileModal(row.entity,field);if($scope.updatedRows)
$scope.updatedRows.push(row.entity.Id);}
$scope.saveData=function(){console.log("Saving edited data!");$scope.errors.heading=[];if($scope.gridHasErrors){if(!confirm("There are validation errors.  Are you sure you want to save anyway?"))
return;}
var promise=UploadService.uploadFiles($scope.filesToUpload,$scope);if($scope.foundDuplicate){alert("One or more of the files to upload is a duplicate!");return;}
if($scope.filesToUpload.FieldSheetFile){for(var i=0;i<$scope.filesToUpload.FieldSheetFile.length;i++){var file=$scope.filesToUpload.FieldSheetFile[i];console.log("file is next...");console.dir(file);var newFileNameLength=file.name.length;console.log("file name length = "+newFileNameLength);console.log("file.type = "+file.type);if($scope.uploadFileType==="image"){console.log("We have an image...");for(var n=0;n<$scope.project.Images.length;n++){var existingFileName=$scope.project.Images[n].Name;console.log("existingFileName = "+existingFileName);var existingFileNameLength=existingFileName.length;if((newFileNameLength>=existingFileNameLength)&&(file.name.indexOf(existingFileName)>-1)){$scope.foundDuplicate=true;console.log(file.name+" already exists in the project file list.");errors.push(file.name+" already exists in the list of project images.");}}}
else{console.log("We have something other than an image...");for(var n=0;n<$scope.project.Files.length;n++){var existingFileName=$scope.project.Files[n].Name;console.log("existingFileName = "+existingFileName);var existingFileNameLength=existingFileName.length;if((newFileNameLength>=existingFileNameLength)&&(file.name.indexOf(existingFileName)>-1)){$scope.foundDuplicate=true;console.log(file.name+" already exists in the project file list.");errors.push(file.name+" already exists in the list of project Files.");}}}
console.log("$scope.foundDuplicate = "+$scope.foundDuplicate);if($scope.foundDuplicate)
alert(errors);}
$scope.saveDatasheetData();}
else{$scope.saveDatasheetData();}};$scope.saveDatasheetData=function(){console.log("Inside saveDatasheetData, $scope is next...");var strYear=null;var strMonth=null;var intMonth=-1;var strDay=null;if($scope.DatastoreTablePrefix==="CreelSurvey"){console.log("$scope.row.activityDate = "+$scope.row.activityDate);if(typeof $scope.row.activityDate==="string"){console.log("$scope.row.activityDate is a string...");strYear=$scope.row.activityDate.substr(0,4);console.log("strYear = "+strYear);strMonth=$scope.row.activityDate.substr(5,2);console.log("strMonth = "+strMonth);if(strMonth.length<2)
strMonth="0"+strMonth;strDay=$scope.row.activityDate.substr(8,2);console.log("strDay = "+strDay);if(strDay.length<2)
strDay="0"+strDay;tmpTime=$scope.row.TimeStart;console.log("tmpTime (TimeStart) = "+tmpTime);$scope.row.TimeStart="";$scope.row.TimeStart=strYear+"-"+strMonth+"-"+strDay+"T"+tmpTime+":00.000";console.log("$scope.row.TimeStart = "+$scope.row.TimeStart);tmpTime=$scope.row.TimeEnd;console.log("tmpTime (TimeEnd) = "+tmpTime);$scope.row.TimeEnd="";$scope.row.TimeEnd=strYear+"-"+strMonth+"-"+strDay+"T"+tmpTime+":00.000";console.log("$scope.row.TimeEnd = "+$scope.row.TimeEnd);}
else
{console.log("$scope.row.activityDate is a DateTime...");var intHours=$scope.row.activityDate.getHours();console.log("Hours = "+intHours)
if(intHours>0){console.log("The user entered the date in a format that caused the time zone offset to be applied.");var newDate=$scope.row.activityDate;var intOffsetHours=$scope.row.activityDate.getTimezoneOffset()/60;newDate.setHours(newDate.getHours()+intOffsetHours);$scope.row.activityDate=newDate;}
console.log("$scope.row.activityDate after adjustment = "+$scope.row.activityDate);strYear=$scope.row.activityDate.getFullYear().toString();console.log("strYear = "+strYear);intMonth=$scope.row.activityDate.getMonth()+1;console.log("intMonth = "+intMonth);strMonth=""+intMonth;console.log("strMonth = "+strMonth);if(strMonth.length<2)
strMonth="0"+strMonth;strDay=$scope.row.activityDate.getDate().toString();console.log("strDay = "+strDay);if(strDay.length<2)
strDay="0"+strDay;tmpTime=$scope.row.TimeStart;console.log("tmpTime (TimeStart) = "+tmpTime);$scope.row.TimeStart="";$scope.row.TimeStart=strYear+"-"+strMonth+"-"+strDay+"T"+tmpTime;console.log("$scope.row.TimeStart = "+$scope.row.TimeStart);tmpTime=$scope.row.TimeEnd;console.log("tmpTime (TimeEnd) = "+tmpTime);$scope.row.TimeEnd="";$scope.row.TimeEnd=strYear+"-"+strMonth+"-"+strDay+"T"+tmpTime;console.log("$scope.row.TimeEnd = "+$scope.row.TimeEnd);}}
if((typeof $scope.dataSheetDataset!=='undefined')&&($scope.dataSheetDataset!==null)){for(var i=0;i<$scope.dataSheetDataset.length;i++){if((typeof $scope.dataSheetDataset[i].TotalTimeFished!=='undefined')&&($scope.dataSheetDataset[i].TotalTimeFished!=null)){console.log("TotalTimeFished for row "+i+" = "+$scope.dataSheetDataset[i].TotalTimeFished);var theHours=parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(0,2));console.log("theHours = "+theHours);var theMinutes=parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(3,5));console.log("theMinutes = "+theMinutes);var TotalTimeFished=theHours*60+theMinutes;console.log("TotalTimeFished (in min) = "+TotalTimeFished);$scope.dataSheetDataset[i].TotalTimeFished=TotalTimeFished;}
if((typeof $scope.dataSheetDataset[i].InterviewTime!=='undefined')&&($scope.dataSheetDataset[i].InterviewTime!=null)){var tmpTime=$scope.dataSheetDataset[i].InterviewTime;$scope.dataSheetDataset[i].InterviewTime="";$scope.dataSheetDataset[i].InterviewTime=strYear+"-"+strMonth+"-"+strDay+"T"+tmpTime+":00.000";}}}
var sheetCopy=angular.copy($scope.dataSheetDataset);console.log("The following items are next: $scope.row, sheetCopy, $scope.fields");console.dir($scope.row);console.dir(sheetCopy);console.dir($scope.fields);console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);if($scope.DatastoreTablePrefix=="FishScales"){console.log("$scope.primaryDatasetLocation = "+$scope.primaryDatasetLocation);$scope.row.locationId=$scope.primaryDatasetLocation;}
else
console.log("Not working with FishScales...");if($scope.DatastoreTablePrefix==="CreelSurvey"){console.log("$scope.row.Dry = "+$scope.row.Dry);if((typeof $scope.row.Dry==='undefined')||($scope.row.Dry===null))
$scope.row.Dry="NO";}
console.log("$scope.row.Dry = "+$scope.row.Dry);$scope.activities=ActivityParser.parseSingleActivity($scope.row,angular.extend($scope.dataSheetDataset,$scope.deletedRows),$scope.fields,$scope.dataset.QAStatuses);if(!$scope.activities.errors){if($scope.addNewSection){console.log("$scope.addNewSection is true, so setting $scope.activities.addNewSection to true also.");$scope.activities.addNewSection=true;}
$scope.activities.deletedRowIds=$scope.getDeletedRowIds($scope.deletedRows);$scope.activities.updatedRowIds=$scope.updatedRows;console.log("$scope.activities in saveData, just before calling DatasetService.saveActivities is next...");console.dir($scope.activities);DatasetService.updateActivities($scope.userId,$scope.dataset.Id,$scope.activities,$scope.DatastoreTablePrefix);}
else{console.log("We have errors...");console.dir($scope.activities.errors);}};$scope.doneButton=function(){$scope.activities=undefined;$location.path("/"+$scope.dataset.activitiesRoute+"/"+$scope.dataset.Id);};$scope.getDeletedRowIds=function(rows){var results=[];for(var i=0;i<rows.length;i++){var row=rows[i];if(row.Id)
{results.push(row.Id);}};return results;}}];define("core/datasets/components/dataset-editor/dataset-edit-form",function(){});var dataset_entry_form=['$scope','$routeParams','DatasetService','SubprojectService','ProjectService','CommonService','$modal','$location','$rootScope','ActivityParser','DataSheet','$route','FileUploadService','$upload',function($scope,$routeParams,DatasetService,SubprojectService,ProjectService,CommonService,$modal,$location,$rootScope,ActivityParser,DataSheet,$route,UploadService,$upload){initEdit();$scope.userId=$rootScope.Profile.Id;$scope.fields={header:[],detail:[],relation:[]};$scope.datasheetColDefs=[];$scope.filesToUpload={};$scope.dataSheetDataset=[];$scope.datastoreLocations=CommonService.getLocations($routeParams.Id);$scope.fishermenList=null;$scope.subprojectList=null;$scope.datasetLocations=[[]];$scope.datasetLocationType=0;$scope.primaryDatasetLocation=0;$scope.sortedLocations=[];$scope.errors={heading:[]};$scope.addNewSection=false;$scope.dataEntryPage=true;$scope.foundDuplicate=false;$scope.showDetails=true;$scope.ShowFishermen=false;$scope.showDoneButton=true;$scope.gridDatasheetOptions={data:'dataSheetDataset',enableCellSelection:true,enableRowSelection:false,enableCellEdit:true,columnDefs:'datasheetColDefs',enableColumnResize:true,};DataSheet.initScope($scope);console.log("routeParams.Id = "+$routeParams.Id);$scope.dataset=DatasetService.getDataset($routeParams.Id);$scope.$watch('fishermenList.length',function(){if(!$scope.fishermenList){console.log("$scope.fishermenList has not loaded.");return;}
else if($scope.fishermenList.length===0){console.log("No fishermen found yet...");return;}
console.log("Inside watch, fishermenList");console.log("$scope.fishermenList is next..");console.dir($scope.fishermenList);$scope.fishermenOptions=$rootScope.fishermenOptions=makeObjects($scope.fishermenList,'Id','FullName');console.log("$scope.fishermenOptions is next...");console.dir($scope.fishermenOptions);});$scope.$watch('dataset.Fields',function(){if(!$scope.dataset.Fields)return;console.log("Inside watcher for dataset.Fields.");$rootScope.datasetId=$scope.datasetId=$scope.dataset.Id;console.log("$rootScope.datasetId = "+$rootScope.datasetId);$scope.dataset.Files=DatasetService.getDatasetFiles($scope.dataset.Id);$scope.DatastoreTablePrefix=$scope.dataset.Datastore.TablePrefix;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);$scope.datasheetColDefs=DataSheet.getColDefs($scope.DatastoreTablePrefix,"form");if($scope.DatastoreTablePrefix==="CreelSurvey"){console.log("Loading Harvest...");$scope.ShowFishermen=true;$scope.fishermenList=ProjectService.getFishermen();$scope.theFishermen=ProjectService.getProjectFishermen($scope.dataset.ProjectId);}
else if($scope.DatastoreTablePrefix==="CrppContracts"){console.log("Loading CRPP subprojects...");$scope.ShowSubproject=true;$scope.subprojectList=SubprojectService.getSubprojects();}
else if($scope.DatastoreTablePrefix==="Appraisal"){console.log("Loading DECD ...");$scope.showDoneButton=false;}
$scope.project=ProjectService.getProject($scope.dataset.ProjectId);if($scope.DatastoreTablePrefix==="CreelSurvey"||$scope.DatastoreTablePrefix==="SpawningGroundSurvey")
$scope.row={ActivityQAStatus:{}};else
$scope.row={ActivityQAStatus:{},activityDate:new Date()};console.log("($scope.dataset.QAStatuses is next...");console.dir($scope.dataset.QAStatuses);$scope.QAStatusOptions=$rootScope.QAStatusOptions=makeObjects($scope.dataset.QAStatuses,'Id','Name');angular.forEach($scope.dataset.Fields.sort(orderByIndex),function(field){parseField(field,$scope);if(field.FieldRoleId==FIELD_ROLE_HEADER){$scope.fields.header.push(field);}
else if(field.FieldRoleId==FIELD_ROLE_DETAIL){$scope.fields.detail.push(field);$scope.datasheetColDefs.push(makeFieldColDef(field,$scope));if(field.DbColumnName=="ReadingDateTime"){$scope.row.Timezone=getByField($scope.SystemTimezones,420* -60000,"TimezoneOffset");}}});if($scope.datasheetColDefs.length>2){$scope.addNewRow();}
angular.forEach($scope.fields.header,function(field){$scope.row[field.DbColumnName]=(field.DefaultValue)?field.DefaultValue:null;if($routeParams[field.DbColumnName]){$scope.row[field.DbColumnName]=$routeParams[field.DbColumnName];}});$scope.row.ActivityQAStatus.QAStatusId=""+$scope.dataset.DefaultActivityQAStatusId;$scope.recalculateGridWidth($scope.fields.detail.length);$scope.validateGrid($scope);console.log("headerFieldErrors is next...");console.dir($scope.headerFieldErrors);console.log("headerFieldErrors.length = "+$scope.headerFieldErrors.length);console.log("$scope at end of dataset.Fields watcher...");});$scope.$watch('project.Name',function(){if(!$scope.project.Name)return;console.log("Inside watch project.Name...");$rootScope.projectId=$scope.project.Id;$scope.project.Files=null;$scope.project.Files=ProjectService.getProjectFiles($scope.project.Id);console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);$scope.datasetLocationType=CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);console.log("LocationType = "+$scope.datasetLocationType);$scope.subprojectType=ProjectService.getProjectType($scope.project.Id);console.log("$scope.subprojectType = "+$scope.subprojectType);SubprojectService.setServiceSubprojectType($scope.subprojectType);if($scope.DatastoreTablePrefix==="CreelSurvey"){console.log("Loading Harvest...");$scope.ShowFishermen=true;}
else if($scope.DatastoreTablePrefix==="CrppContracts"){console.log("Loading CRPP subprojects...");$scope.ShowSubproject=true;$scope.subprojectList=SubprojectService.getSubprojects();}
else if(($scope.DatastoreTablePrefix==="Metrics")||($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift")){console.log("Loading Habitat subprojects...");$scope.subprojectList=SubprojectService.getProjectSubprojects($scope.project.Id);var watcher=$scope.$watch('subprojectList.length',function(){console.log("Inside watcher for subprojectList.length...");if($scope.subprojectList===null){console.log("$scope.subprojectList is null");return;}
else if(typeof $scope.subprojectList.length==='undefined'){console.log("$scope.subprojectList.length is undefined.");return;}
else if($scope.subprojectList.length===0){console.log("$scope.subprojectList.length is 0");return;}
if(($scope.DatastoreTablePrefix==="Metrics")||($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift")){console.log("$scope.subprojectList is next...");console.dir($scope.subprojectList);console.log("$scope.project.Locations is next...");console.dir($scope.project.Locations);$scope.datasetLocations=[[]];angular.forEach($scope.subprojectList,function(subproject){angular.forEach($scope.project.Locations,function(location){if(subproject.LocationId===location.Id){console.log("Found a subproject location")
console.dir(location);$scope.datasetLocations.push([location.Id,location.Label]);}});});}
console.log("datasetLocations (with subprojects) is next...");console.dir($scope.datasetLocations);console.log("$scope.subprojectList.length = "+$scope.subprojectList.length);console.dir($scope.subprojectList);$scope.selectProjectLocationsByLocationType();watcher();});}
else if($scope.DatastoreTablePrefix==="Appraisal"){$scope.showDoneButton=false;}
if(($scope.DatastoreTablePrefix!=="Metrics")&&($scope.DatastoreTablePrefix!=="Benthic")&&($scope.DatastoreTablePrefix!=="Drift")){$scope.selectProjectLocationsByLocationType();}
if(!$rootScope.Profile.isProjectOwner($scope.project)&&!$rootScope.Profile.isProjectEditor($scope.project)){$location.path("/unauthorized");}
if($routeParams.LocationId){$scope.row['locationId']=""+$routeParams.LocationId;}
console.log("$scope at end of watch project.Name is next...");});$scope.selectProjectLocationsByLocationType=function(){console.log("Inside selectProjectLocationsByLocationType...");if($scope.project.Locations){console.log("ProjectLocations is next...");console.dir($scope.project.Locations);for(var i=0;i<$scope.project.Locations.length;i++){console.log("$scope.project.Locations[i].LocationTypeId = "+$scope.project.Locations[i].LocationTypeId+", $scope.datasetLocationType = "+$scope.datasetLocationType);if(($scope.DatastoreTablePrefix==="Metrics")||($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift")){if(($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType)||($scope.project.Locations[i].LocationTypeId===LOCATION_TYPE_Hab)){$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);}}
else{if($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType){$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);}
if($scope.DatastoreTablePrefix==="FishScales"){console.log("Setting $scope.primaryDatasetLocation...");$scope.primaryDatasetLocation=$scope.project.Locations[i].Id;}}}
console.log("datasetLocations (only project/dataset) is next...");console.dir($scope.datasetLocations);$scope.finishLocationProcessing();}};$scope.finishLocationProcessing=function(){console.log("Inside $scope.finishLocationProcessing...");var index=0;angular.forEach($scope.datasetLocations,function(dsLoc){if(typeof dsLoc[0]==='undefined')
$scope.datasetLocations.splice(index,1);index++;});console.log("datasetLocations after splice is next...");console.dir($scope.datasetLocations);for(var i=0;i<$scope.datasetLocations.length;i++){$scope.sortedLocations.push({Id:$scope.datasetLocations[i][0],Label:$scope.datasetLocations[i][1]});}
$scope.datasetLocations=[[]];$scope.locationOptions=$rootScope.locationOptions=makeObjects($scope.sortedLocations,'Id','Label');console.log("locationOptions is next...");console.dir($scope.locationOptions);if(array_count($scope.locationOptions)==1){angular.forEach(Object.keys($scope.locationOptions),function(key){console.log(key);$scope.row['locationId']=key;});}};$scope.reloadProject=function(){ProjectService.clearProject();$scope.project=ProjectService.getProject($scope.dataset.ProjectId);var watcher=$scope.$watch('project.Id',function(){$scope.selectInstrument();watcher();});};$scope.openAccuracyCheckModal=function(){var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-new-accuracycheck.html',controller:'ModalQuickAddAccuracyCheckCtrl',scope:$scope,});};$scope.createInstrument=function(){$scope.viewInstrument=null;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-instrument.html',controller:'ModalCreateInstrumentCtrl',scope:$scope,});};$scope.getDataGrade=function(check){return getDataGrade(check)};$scope.selectInstrument=function(){if(!$scope.row.InstrumentId)
return;$scope.viewInstrument=getByField($scope.project.Instruments,$scope.row.InstrumentId,"Id");$scope.row.LastAccuracyCheck=$scope.viewInstrument.AccuracyChecks[$scope.viewInstrument.AccuracyChecks.length-1];$scope.row.DataGradeText=getDataGrade($scope.row.LastAccuracyCheck);if($scope.row.LastAccuracyCheck)
$scope.row.AccuracyCheckId=$scope.row.LastAccuracyCheck.Id;};$scope.cancel=function(){if($scope.dataChanged){if(!confirm("Looks like you've made changes.  Are you sure you want to leave this page?"))
return;}
$location.path("/"+$scope.dataset.activitiesRoute+"/"+$scope.dataset.Id);};$scope.addNewRow=function(){var row=makeNewRow($scope.datasheetColDefs);row.QAStatusId=$scope.dataset.DefaultRowQAStatusId;$scope.dataSheetDataset.push(row);$scope.onRow=row;};$scope.addSection=function(){console.log("Inside addSection...");console.log("$scope in addSection is next...");$scope.addNewSection=true;console.log("$scope.addNewSection = "+$scope.addNewSection);$scope.saveData();$scope.addNewSectionWatcherCount=0;var addNewSectionWatcher=$scope.$watch('activities.addNewSection',function(){console.log("Inside watcher addNewSection...");console.log("$scope.activities.addNewSection = "+$scope.activities.addNewSection);if((typeof $scope.activities.addNewSection!=='undefined')&&($scope.activities.addNewSection===false)){if($scope.addNewSectionWatcherCount===0){console.log("Resetting the page.")
$scope.row.locationId=59;$scope.row.TimeStart=null;$scope.row.TimeEnd=null;$scope.row.NumberAnglersObserved=0;$scope.row.NumberAnglersInterviewed=0;$scope.row.SurveyComments=null;$scope.row.FieldSheetFile=null;$scope.dataSheetDataset=[];$scope.addNewRow();$scope.addNewSection=false;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-save-success.html',controller:'ModalSaveSuccess',scope:$scope,});$scope.addNewSectionWatcherCount++;}}});console.log("At end of addNewSection; $scope is next...");};$scope.addNewInterview=function(){var row=makeNewRow($scope.datasheetColDefs);row.QAStatusId=$scope.dataset.DefaultRowQAStatusId;$scope.dataSheetDataset.push(row);$scope.onRow=row;for(var i=0;i<$scope.datasheetColDefs.length;i++){if(($scope.datasheetColDefs[i].field==="InterviewTime")||($scope.datasheetColDefs[i].field==="GPSEasting")||($scope.datasheetColDefs[i].field==="GPSNorthing")||($scope.datasheetColDefs[i].field==="CarcassComments")||($scope.datasheetColDefs[i].field==="TotalTimeFished")){$scope.datasheetColDefs[i].enableCellEdit=true;}}};$scope.addFisherman=function(){$scope.viewFisherman=null;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-fisherman.html',controller:'ModalCreateFishermanCtrl',scope:$scope,});};$scope.addAnotherFish=function(){console.log("Inside addAnotherFish...");console.log("$scope before copy is next...");var listLength=$scope.dataSheetDataset.length;var theFisherman=$scope.dataSheetDataset[listLength-1].FishermanId
var interviewTime=$scope.dataSheetDataset[listLength-1].InterviewTime;var gpsEasting=$scope.dataSheetDataset[listLength-1].GPSEasting;var gpsNorthing=$scope.dataSheetDataset[listLength-1].GPSNorthing;var interviewComments=$scope.dataSheetDataset[listLength-1].InterviewComments;var totalTimeFished=$scope.dataSheetDataset[listLength-1].TotalTimeFished;var numberFishCaught=$scope.dataSheetDataset[listLength-1].NumberFishCaught;var row=makeNewRow($scope.datasheetColDefs);row.QAStatusId=$scope.dataset.DefaultActivityQAStatusId;$scope.dataSheetDataset.push(row);$scope.onRow=row;listLength=$scope.dataSheetDataset.length;$scope.dataSheetDataset[listLength-1].FishermanId=theFisherman;$scope.dataSheetDataset[listLength-1].InterviewTime=interviewTime;$scope.dataSheetDataset[listLength-1].GPSEasting=gpsEasting;$scope.dataSheetDataset[listLength-1].GPSNorthing=gpsNorthing;$scope.dataSheetDataset[listLength-1].InterviewComments=interviewComments;$scope.dataSheetDataset[listLength-1].TotalTimeFished=totalTimeFished;$scope.dataSheetDataset[listLength-1].NumberFishCaught=numberFishCaught;for(var i=0;i<$scope.datasheetColDefs.length;i++){if(($scope.datasheetColDefs[i].field==="InterviewTime")||($scope.datasheetColDefs[i].field==="GPSEasting")||($scope.datasheetColDefs[i].field==="GPSNorthing")||($scope.datasheetColDefs[i].field==="InterviewComments")||($scope.datasheetColDefs[i].field==="TotalTimeFished")){$scope.datasheetColDefs[i].enableCellEdit=false;}}
console.log("$scope after copy is next...");};$scope.removeRow=function(){if($scope.dataSheetDataset.length>1)
DataSheet.removeOnRow($scope);};$scope.doneButton=function(){$scope.activities=undefined;$route.reload();$scope.reloadProject();}
$scope.viewButton=function(){$location.path("/"+$scope.dataset.activitiesRoute+"/"+$scope.dataset.Id);}
$scope.viewRelation=function(row,field_name){console.dir(row.entity);var field=$scope.FieldLookup[field_name];console.dir(field);$scope.openRelationEditGridModal(row.entity,field);}
$scope.openRelationEditGridModal=function(row,field){$scope.relationgrid_row=row;$scope.relationgrid_field=field;$scope.isEditable=true;var modalInstance=$modal.open({templateUrl:'app/core/datasets/components/dataset-relationgrid/templates/relationgrid-edit-modal.html',controller:'RelationGridModalCtrl',scope:$scope,});};$scope.openFileModal=function(row,field){console.log("Inside DataEntryFormCtrl, openFileModal");$scope.file_row=row;$scope.file_field=field;$rootScope.FieldSheetFile="";var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file.html',controller:'FileModalCtrl',scope:$scope,});};$scope.openFileAddModal=function(row,field){console.log("Inside DataEditCtrl, openFileAddModal...");console.log("row is next...");console.dir(row);console.log("field is next...");console.dir(field);$scope.file_row=row;$scope.file_field=field;var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file-add.html',controller:'FileAddModalCtrl',scope:$scope,});};$scope.openFileDeleteModal=function(row,field){console.log("Inside DataEditCtrl, openFileDeleteModal...");console.log("row is next...");console.dir(row);console.log("field is next...");console.dir(field);$scope.file_row=row;$scope.file_field=field;var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file-delete.html',controller:'FileDeleteModalCtrl',scope:$scope,});};$scope.openWaypointFileModal=function(row,field){$scope.file_row=row;$scope.file_field=field;var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-waypoint-file.html',controller:'FileModalCtrl',scope:$scope,});};$scope.onFileSelect=function(field,files){console.log("Inside DataEntryFormCtrl, onFileSelect");console.log("file selected! "+field);$scope.filesToUpload[field]=files;};$scope.addFiles=function(row,field_name){var field=$scope.FieldLookup[field_name];$scope.openFileModal(row.entity,field);if($scope.updatedRows)
$scope.updatedRows.push(row.entity.Id);};$scope.saveData=function(){console.log("Inside saveData, $scope is next...");console.log("$rootScope is next...");console.dir($rootScope);if($scope.DatastoreTablePrefix==="CreelSurvey"){console.log("$scope.row.activityDate before adjustment = "+$scope.row.activityDate);console.log("Offset = "+$scope.row.activityDate.getTimezoneOffset());var intHours=$scope.row.activityDate.getHours();console.log("Hours = "+intHours)
if(intHours>0){console.log("The user entered the date in a format that caused the time zone offset to be applied.");var newDate=$scope.row.activityDate;var intOffsetHours=$scope.row.activityDate.getTimezoneOffset()/60;newDate.setHours(newDate.getHours()+intOffsetHours);$scope.row.activityDate=newDate;}
console.log("$scope.row.activityDate after adjustment = "+$scope.row.activityDate);var strYear=$scope.row.activityDate.getFullYear().toString();console.log("strYear = "+strYear);var intMonth=$scope.row.activityDate.getMonth()+1;console.log("intMonth = "+intMonth);var strMonth=""+intMonth;console.log("strMonth = "+strMonth);if(strMonth.length<2)
strMonth="0"+strMonth;var strDay=$scope.row.activityDate.getDate().toString();console.log("strDay = "+strDay);if(strDay.length<2)
strDay="0"+strDay;var tmpTime=$scope.row.TimeStart;console.log("tmpTime (TimeStart) = "+tmpTime);if(tmpTime!==null){$scope.row.TimeStart="";$scope.row.TimeStart=strYear+"-"+strMonth+"-"+strDay+"T"+tmpTime+":00.000";console.log("$scope.row.TimeStart = "+$scope.row.TimeStart);}
tmpTime=$scope.row.TimeEnd;console.log("tmpTime (TimeEnd) = "+tmpTime);if(tmpTime!==null){$scope.row.TimeEnd="";$scope.row.TimeEnd=strYear+"-"+strMonth+"-"+strDay+"T"+tmpTime+":00.000";console.log("$scope.row.TimeEnd = "+$scope.row.TimeEnd);}}
if($scope.foundDuplicate){alert("One or more of the files to upload is a duplicate!");return;}
console.log("$rootScope.FieldSheetFile is next...");console.dir($rootScope.FieldSheetFile);$scope.filesToUpload.FieldSheetFile=$rootScope.FieldSheetFile;if($scope.filesToUpload.FieldSheetFile){for(var i=0;i<$rootScope.currentFiles.length;i++){var file=$scope.currentFiles[i];console.log("file is next...");console.dir(file);var newFileNameLength=file.name.length;console.log("file name length = "+newFileNameLength);console.log("file.type = "+file.type);if($scope.uploadFileType==="image"){console.log("We have an image...");for(var n=0;n<$scope.project.Images.length;n++){var existingFileName=$scope.project.Images[n].Name;console.log("existingFileName = "+existingFileName);var existingFileNameLength=existingFileName.length;if((newFileNameLength>=existingFileNameLength)&&(file.name.indexOf(existingFileName)>-1)){$scope.foundDuplicate=true;console.log(file.name+" already exists in the project file list.");errors.push(file.name+" already exists in the list of project images.");}}}
else{console.log("We have something other than an image...");for(var n=0;n<$scope.project.Files.length;n++){var existingFileName=$scope.project.Files[n].Name;console.log("existingFileName = "+existingFileName);var existingFileNameLength=existingFileName.length;if((newFileNameLength>=existingFileNameLength)&&(file.name.indexOf(existingFileName)>-1)){$scope.foundDuplicate=true;console.log(file.name+" already exists in the project file list.");errors.push(file.name+" already exists in the list of project Files.");}}}
console.log("$scope.foundDuplicate = "+$scope.foundDuplicate);if($scope.foundDuplicate)
alert(errors);else{console.log("Not a duplicate.  Uploading the file...");if(file.success!="Success"){$scope.upload=$upload.upload({url:serviceUrl+'/api/v1/file/uploaddatasetfile',method:"POST",data:{ProjectId:$scope.project.Id,DatasetId:$scope.dataset.Id,Description:"Uploaded file "+file.Name,Title:file.Name},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){config.file.success="Success";}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";config.file.success="Failed";});}}}
angular.forEach($scope.currentFiles,function(files,field){if(field=="null"||field=="")
return;var local_files=[];if($scope.file_row[field]){var current_files=angular.fromJson($scope.file_row[field]);angular.forEach(current_files,function(file){if(file.Id)
local_files.push(file);});}
$scope.file_row[field]=angular.toJson(local_files);});$scope.saveDatasheetData();}
else{$scope.saveDatasheetData();}};$scope.saveDatasheetData=function(){console.log("Inside saveDatasheetData, $scope is next...");var strYear=null;var strMonth=null;var strDay=null;var tmpTime=null;if($scope.DatastoreTablePrefix==="CreelSurvey"){strYear=$scope.row.activityDate.getFullYear().toString();console.log("strYear = "+strYear);strMonth=$scope.row.activityDate.getMonth().toString();console.log("strMonth = "+strMonth);if(strMonth.length<2)
strMonth="0"+strMonth;strDay=$scope.row.activityDate.getDate().toString();console.log("strDay = "+strDay);if(strDay.length<2)
strDay="0"+strDay;for(var i=0;i<$scope.dataSheetDataset.length;i++){if((typeof $scope.dataSheetDataset[i].TotalTimeFished!=='undefined')&&($scope.dataSheetDataset[i].TotalTimeFished!=null)){console.log("TotalTimeFished for row "+i+" = "+$scope.dataSheetDataset[i].TotalTimeFished);var theHours=parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(0,2));console.log("theHours = "+theHours);var theMinutes=parseInt($scope.dataSheetDataset[i].TotalTimeFished.substring(3,5));console.log("theMinutes = "+theMinutes);var TotalTimeFished=theHours*60+theMinutes;console.log("TotalTimeFished (in min) = "+TotalTimeFished);$scope.dataSheetDataset[i].TotalTimeFished=TotalTimeFished;}
if((typeof $scope.dataSheetDataset[i].InterviewTime!=='undefined')&&($scope.dataSheetDataset[i].InterviewTime!==null)){tmpTime=$scope.dataSheetDataset[i].InterviewTime;$scope.dataSheetDataset[i].InterviewTime="";$scope.dataSheetDataset[i].InterviewTime=strYear+"-"+strMonth+"-"+strDay+"T"+tmpTime+":00.000";}}}
var sheetCopy=angular.copy($scope.dataSheetDataset);console.log("The following items are next: $scope.row, sheetCopy, $scope.fields");console.dir($scope.row);console.dir(sheetCopy);console.dir($scope.fields);console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);if($scope.DatastoreTablePrefix=="FishScales"){console.log("$scope.primaryDatasetLocation = "+$scope.primaryDatasetLocation);$scope.row.locationId=$scope.primaryDatasetLocation;}
else
console.log("Not working with FishScales...");if($scope.DatastoreTablePrefix==="CreelSurvey"){console.log("$scope.row.Dry = "+$scope.row.Dry);if((typeof $scope.row.Dry==='undefined')||($scope.row.Dry===null))
$scope.row.Dry="NO";}
console.log("$scope.row.Dry = "+$scope.row.Dry);$scope.activities=ActivityParser.parseSingleActivity($scope.row,sheetCopy,$scope.fields,$scope.dataset.QAStatuses);if(!$scope.activities.errors){if($scope.addNewSection){console.log("$scope.addNewSection is true, so setting $scope.activities.addNewSection to true also.");$scope.activities.addNewSection=true;}
console.log("$scope.activities in saveData, just before calling DatasetService.saveActivities is next...");console.dir($scope.activities);DatasetService.saveActivities($scope.userId,$scope.dataset.Id,$scope.activities);}
else{console.log("We have errors...");console.dir($scope.activities.errors);}};}];define("core/datasets/components/dataset-entry-form/dataset-entry-form",function(){});var dataset_entry_sheet=['$scope','$routeParams','DatasetService','$modal','$location','$rootScope','ActivityParser','DataSheet','$route','ProjectService','CommonService',function($scope,$routeParams,DatasetService,$modal,$location,$rootScope,ActivityParser,DataSheet,$route,ProjectService,CommonService){initEdit();$scope.userId=$rootScope.Profile.Id;$scope.fields={header:[],detail:[],relation:{}};$scope.colDefs=[];$scope.dataSheetDataset=[];$scope.datasetLocationType=0;$scope.datasetLocations=[[]];$scope.primaryDatasetLocation=0;$scope.sortedLocations=[];$scope.errors={heading:[]};$scope.fishermenList=ProjectService.getFishermen();$scope.dataEntryPage=true;$scope.gridDatasheetOptions={data:'dataSheetDataset',enableCellSelection:true,enableRowSelection:false,enableCellEdit:true,columnDefs:'datasheetColDefs',enableColumnResize:true,};DataSheet.initScope($scope);$scope.dataset=DatasetService.getDataset($routeParams.Id);$scope.$watch('fishermenList.length',function(){if(!$scope.fishermenList){console.log("$scope.fishermenList has not loaded.");return;}
else if($scope.fishermenList.length===0){console.log("No fishermen found yet...");return;}
console.log("Inside watch, fishermenList");console.log("$scope.fishermenList is next..");console.dir($scope.fishermenList);$scope.fishermenOptions=$rootScope.fishermenOptions=makeObjects($scope.fishermenList,'Id','FullName');console.log("$scope.fishermenOptions is next...");console.dir($scope.fishermenOptions);});$scope.$watch('project.Name',function(){if(!$scope.project.Name)return;console.log("Inside watch project.Name...");$rootScope.projectId=$scope.project.Id;$scope.project.Files=null;$scope.project.Files=ProjectService.getProjectFiles($scope.project.Id);if($scope.subprojectType==="Harvest"){console.log("Loading Harvest...");$scope.ShowFishermen=true;$scope.fishermenList=ProjectService.getFishermen();}
console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);$scope.datasetLocationType=CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);console.log("LocationType = "+$scope.datasetLocationType);console.log("ProjectLocations is next...");console.dir($scope.project.Locations);for(var i=0;i<$scope.project.Locations.length;i++){if($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType){$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);if($scope.DatastoreTablePrefix==="FishScales"){console.log("Setting $scope.primaryDatasetLocation...");$scope.primaryDatasetLocation=$scope.project.Locations[i].Id;}}}
console.log("datasetLocations is next...");console.dir($scope.datasetLocations);var index=0;angular.forEach($scope.datasetLocations,function(dsLoc){if(dsLoc.length===0){$scope.datasetLocations.splice(index,1);}
index++;});console.log("datasetLocations after splice is next...");console.dir($scope.datasetLocations);$scope.datasetLocations.sort(order2dArrayByAlpha);console.log("datasetLocations sorted...");console.dir($scope.datasetLocations);for(var i=0;i<$scope.datasetLocations.length;i++){$scope.sortedLocations.push({Id:$scope.datasetLocations[i][0],Label:$scope.datasetLocations[i][1]});}
$scope.datasetLocations=[[]];$scope.locationOptions=$rootScope.locationOptions=makeObjects($scope.sortedLocations,'Id','Label');console.log("locationOptions is next...");console.dir($scope.locationOptions);console.log("$scope.project.Instruments is next...");console.dir($scope.project.Instruments);if($scope.project.Instruments.length>0){$scope.instrumentOptions=$rootScope.instrumentOptions=makeInstrumentObjects($scope.project.Instruments);}
if(!$rootScope.Profile.isProjectOwner($scope.project)&&!$rootScope.Profile.isProjectEditor($scope.project)){$location.path("/unauthorized");}
console.log("$scope at end of Project watch is next...");});$scope.$watch('dataset.Fields',function(){if(!$scope.dataset.Fields)return;console.log("Inside watch dataset.Fields...");$rootScope.datasetId=$scope.datasetId=$scope.dataset.Id;console.log("$rootScope.datasetId = "+$rootScope.datasetId);$scope.dataset.Files=DatasetService.getDatasetFiles($scope.dataset.Id);$scope.DatastoreTablePrefix=$rootScope.DatastoreTablePrefix=$scope.dataset.Datastore.TablePrefix;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);$scope.datasheetColDefs=DataSheet.getColDefs($scope.DatastoreTablePrefix);$scope.project=ProjectService.getProject($scope.dataset.ProjectId);$scope.QAStatusOptions=$rootScope.QAStatusOptions=makeObjects($scope.dataset.QAStatuses,'Id','Name');$scope.timezoneOptions=$rootScope.timezoneOptions=makeObjects($scope.SystemTimezones,'Name','Name');angular.forEach($scope.dataset.Fields.sort(orderByIndex),function(field){parseField(field,$scope);if(field.FieldRoleId==FIELD_ROLE_HEADER){$scope.fields.header.push(field);$scope.datasheetColDefs.push(makeFieldColDef(field,$scope));}
else if(field.FieldRoleId==FIELD_ROLE_DETAIL){$scope.fields.detail.push(field);$scope.datasheetColDefs.push(makeFieldColDef(field,$scope));}});if($scope.datasheetColDefs.length>2){$scope.addNewRow();}
if($scope.dataset.Config){var filteredColDefs=[];angular.forEach($scope.datasheetColDefs,function(coldef){if($scope.dataset.Config.DataEntryPage&&!$scope.dataset.Config.DataEntryPage.HiddenFields.contains(coldef.field)){filteredColDefs.push(coldef);}});$scope.datasheetColDefs=$scope.colDefs=filteredColDefs;}
$scope.recalculateGridWidth($scope.datasheetColDefs.length);$scope.validateGrid($scope);});$scope.doneButton=function(){$scope.activities=undefined;$scope.dataset=undefined;$scope.foundDuplicate=false;$route.reload();$scope.reloadProject();}
$scope.viewButton=function(){$location.path("/"+$scope.dataset.activitiesRoute+"/"+$scope.dataset.Id);}
$scope.cancel=function(){if($scope.dataChanged){if(!confirm("Looks like you've made changes.  Are you sure you want to leave this page?"))
return;}
$location.path("/"+$scope.dataset.activitiesRoute+"/"+$scope.dataset.Id);};$scope.addNewRow=function(){var row=makeNewRow($scope.datasheetColDefs);row.QAStatusId=$scope.dataset.DefaultActivityQAStatusId;row.RowQAStatusId=$scope.dataset.DefaultRowQAStatusId;$scope.dataSheetDataset.push(row);$scope.onRow=row;};$scope.saveData=function(){angular.forEach($scope.dataSheetDataset,function(dataRow){angular.forEach(dataRow,function(key,value){console.log("key = "+key);if($scope.DatastoreTablePrefix==="JvRearing"){if(key==="Result"){value=parsefloat(value);}}});});var sheetCopy=angular.copy($scope.dataSheetDataset);console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);if($scope.DatastoreTablePrefix=="FishScales"){console.log("$scope.primaryDatasetLocation = "+$scope.primaryDatasetLocation);$scope.row.locationId=$scope.primaryDatasetLocation;}
else
console.log("Not working with FishScales...");$scope.activities=ActivityParser.parseActivitySheet(sheetCopy,$scope.fields,$scope.DatastoreTablePrefix,"DataEntrySheet",$scope.dataset.QAStatuses);if(!$scope.activities.errors){var promise=DatasetService.saveActivities($scope.userId,$scope.dataset.Id,$scope.activities);promise.$promise.then(function(){$scope.new_activity=$scope.activities.new_records;});}};$scope.addFisherman=function(){$scope.viewFisherman=null;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-fisherman.html',controller:'ModalCreateFishermanCtrl',scope:$scope,});};$scope.addNewInterview=function(){var row=makeNewRow($scope.datasheetColDefs);row.QAStatusId=$scope.dataset.DefaultRowQAStatusId;$scope.dataSheetDataset.push(row);$scope.onRow=row;for(var i=0;i<$scope.datasheetColDefs.length;i++){if(($scope.datasheetColDefs[i].field==="activityDate")||($scope.datasheetColDefs[i].field==="locationId")||($scope.datasheetColDefs[i].field==="QAStatusId")||($scope.datasheetColDefs[i].field==="Direction")||($scope.datasheetColDefs[i].field==="Shift")||($scope.datasheetColDefs[i].field==="SurveySpecies")||($scope.datasheetColDefs[i].field==="Comments")||($scope.datasheetColDefs[i].field==="FieldSheetFile")||($scope.datasheetColDefs[i].field==="InterviewTime")||($scope.datasheetColDefs[i].field==="GPSEasting")||($scope.datasheetColDefs[i].field==="GPSNorthing")||($scope.datasheetColDefs[i].field==="CarcassComments")||($scope.datasheetColDefs[i].field==="TotalTimeFished")){$scope.datasheetColDefs[i].enableCellEdit=true;}}};$scope.addAnotherFish=function(){console.log("Inside addAnotherFish...");console.log("$scope before copy is next...");var listLength=$scope.dataSheetDataset.length;var theActivityDate=$scope.dataSheetDataset[listLength-1].activityDate;var theLocationId=$scope.dataSheetDataset[listLength-1].locationId;var theDirection=$scope.dataSheetDataset[listLength-1].Direction;var theShift=$scope.dataSheetDataset[listLength-1].Shift;var theSurveySpecies=$scope.dataSheetDataset[listLength-1].SurveySpecies;var surveyComments=$scope.dataSheetDataset[listLength-1].SurveyComments;var theFieldSheetLink=$scope.dataSheetDataset[listLength-1].FieldSheetFile;var interviewTime=$scope.dataSheetDataset[listLength-1].InterviewTime;var gpsEasting=$scope.dataSheetDataset[listLength-1].GPSEasting;var gpsNorthing=$scope.dataSheetDataset[listLength-1].GPSNorthing;var interviewComments=$scope.dataSheetDataset[listLength-1].InterviewComments;var totalTimeFished=$scope.dataSheetDataset[listLength-1].TotalTimeFished;var numberFishCaught=$scope.dataSheetDataset[listLength-1].NumberFishCaught;var qaStatusId=$scope.dataSheetDataset[listLength-1].QAStatusId;var row=makeNewRow($scope.datasheetColDefs);row.QAStatusId=$scope.dataset.DefaultActivityQAStatusId;$scope.dataSheetDataset.push(row);$scope.onRow=row;listLength=$scope.dataSheetDataset.length;$scope.dataSheetDataset[listLength-1].activityDate=theActivityDate;$scope.dataSheetDataset[listLength-1].locationId=theLocationId;$scope.dataSheetDataset[listLength-1].Direction=theDirection;$scope.dataSheetDataset[listLength-1].Shift=theShift;$scope.dataSheetDataset[listLength-1].SurveySpecies=theSurveySpecies;$scope.dataSheetDataset[listLength-1].SurveyComments=surveyComments;$scope.dataSheetDataset[listLength-1].FieldSheetFile=theFieldSheetLink;$scope.dataSheetDataset[listLength-1].InterviewTime=interviewTime;$scope.dataSheetDataset[listLength-1].GPSEasting=gpsEasting;$scope.dataSheetDataset[listLength-1].GPSNorthing=gpsNorthing;$scope.dataSheetDataset[listLength-1].InterviewComments=interviewComments;$scope.dataSheetDataset[listLength-1].TotalTimeFished=totalTimeFished;$scope.dataSheetDataset[listLength-1].NumberFishCaught=numberFishCaught;$scope.dataSheetDataset[listLength-1].QAStatusId=qaStatusId;for(var i=0;i<$scope.datasheetColDefs.length;i++){if(($scope.datasheetColDefs[i].field==="InterviewTime")||($scope.datasheetColDefs[i].field==="GPSEasting")||($scope.datasheetColDefs[i].field==="GPSNorthing")||($scope.datasheetColDefs[i].field==="InterviewComments")||($scope.datasheetColDefs[i].field==="TotalTimeFished")||($scope.datasheetColDefs[i].field==="activityDate")||($scope.datasheetColDefs[i].field==="locationId")||($scope.datasheetColDefs[i].field==="QAStatusId")||($scope.datasheetColDefs[i].field==="Direction")||($scope.datasheetColDefs[i].field==="Shift")||($scope.datasheetColDefs[i].field==="SurveySpecies")||($scope.datasheetColDefs[i].field==="SurveyComments")||($scope.datasheetColDefs[i].field==="FieldSheetFile")){$scope.datasheetColDefs[i].enableCellEdit=false;}}
console.log("$scope after copy is next...");};}];define("core/datasets/components/dataset-entry-sheet/dataset-entry-sheet",function(){});var dataset_view=['$scope','$routeParams','DatasetService','$modal','$location','DataSheet','$route','$rootScope','ChartService','ProjectService',function($scope,$routeParams,DatasetService,$modal,$location,DataSheet,$route,$rootScope,ChartService,ProjectService){console.log("Inside dataview-controller.js, controller DatasetViewCtrl...");console.log("$routeParams.Id = "+$routeParams.Id);$scope.grid=DatasetService.getActivityData($routeParams.Id);$scope.fields={header:[],detail:[],relation:[]};$scope.datasheetColDefs=[];$scope.dataSheetDataset=[];$scope.gridFields=[];console.log("Setting $scope.fieldsloaded to false...");$scope.fieldsloaded=false;$scope.fishermenList=null;$scope.$watch('QaSaveResults',function(){if($scope.QaSaveResults&&$scope.QaSaveResults.success){$scope.grid=DatasetService.getActivityData($routeParams.Id);}},true);$scope.query={loading:true};$scope.activities=$rootScope.GridActivities;$scope.gridDatasheetOptions={data:'dataSheetDataset',columnDefs:'datasheetColDefs',enableColumnResize:true,enableSorting:true,enableCellSelection:true,showFilter:true,showColumnMenu:true,enableRowSelection:true,multiSelect:false,};DataSheet.initScope($scope);var fishermenWatcher=$scope.$watch('fishermenList.length',function(){if((typeof $scope.fishermenList!=='undefined')&&($scope.fishermenList!==null)){console.log("Inside fishermenList watch...");console.log("$scope.fishermenList.length = "+$scope.fishermenList.length)
if($scope.fishermenList.length>0){$scope.fishermenOptions=$rootScope.fishermenOptions=makeObjects($scope.fishermenList,'Id','FullName');console.log("$scope.fishermenOptions is next...");console.dir($scope.fishermenOptions);}}});$scope.$watch('dataset.ProjectId',function(){if($scope.dataset&&$scope.dataset.ProjectId){console.log("Inside watch dataset.ProjectId...");console.log("ProjectId = "+$scope.dataset.ProjectId);$rootScope.projectId=$scope.dataset.ProjectId;$scope.project=ProjectService.getProject($scope.dataset.ProjectId);$scope.QAStatusOptions=$rootScope.QAStatusOptions=makeObjects($scope.dataset.QAStatuses,'Id','Name');ChartService.buildChart($scope,$scope.grid.Details,$scope.dataset.Datastore.TablePrefix);if(($scope.DatastoreTablePrefix==="WaterTemp")||($scope.DatastoreTablePrefix==="WaterQuality")){if($scope.dataset.RowQAStatuses.length>1){$scope.datasheetColDefs.unshift({field:"QAStatusId",displayName:"QA",cellFilter:'RowQAStatusFilter'});}}
if($scope.DatastoreTablePrefix==="CreelSurvey"){var detailsLength=$scope.dataSheetDataset.length;var NumMinutes=-1;var theHours=-1;var theMinutes=-1;var strHours="";var strMinutes="";for(var i=0;i<detailsLength;i++){NumMinutes=parseInt($scope.dataSheetDataset[i].TotalTimeFished);theHours=parseInt(NumMinutes/60,10);theMinutes=NumMinutes-(theHours*60);if(theHours<10)
strHours="0"+theHours;else
strHours=""+theHours;if(theMinutes<10)
strMinutes="0"+theMinutes;else
strMinutes=""+theMinutes;$scope.dataSheetDataset[i].TotalTimeFished=strHours+":"+strMinutes;NumMinutes=-1;theHours=-1;theMinutes=-1;strHours="";strMinutes="";}}}
console.log("$scope at end of watch dataset.ProjectId is next...");});$scope.$watch('grid.Dataset',function(){if(!$scope.grid.Dataset)return;console.log("Inside watch grid.Dataset...");console.log("$scope.grid is next...");console.dir($scope.grid);$scope.dataset=$scope.grid.Dataset;console.log("Dataset ID = "+$scope.grid.Dataset.Id);$rootScope.datasetId=$scope.datasetId=$scope.grid.Dataset.Id
console.log("$rootScope.datasetId = "+$rootScope.datasetId);$rootScope.DatastoreTablePrefix=$scope.DatastoreTablePrefix=$scope.grid.Dataset.Datastore.TablePrefix;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);$scope.datasheetColDefs=DataSheet.getColDefs($scope.DatastoreTablePrefix,"form");DatasetService.configureDataset($scope.dataset);if($scope.DatastoreTablePrefix==="CreelSurvey"){$scope.fishermenList=ProjectService.getFishermen();console.log("Extracting times from strings...");var strTimeStart=$scope.grid.Header.TimeStart;var strTimeEnd=$scope.grid.Header.TimeEnd;var intTLoc=strTimeStart.indexOf("T");strTimeStart=strTimeStart.substr(intTLoc+1,5);$scope.grid.Header.TimeStart=strTimeStart;strTimeEnd=strTimeEnd.substr(intTLoc+1,5);$scope.grid.Header.TimeEnd=strTimeEnd;for(var i=0;i<$scope.grid.Details.length;i++){console.log("$scope.grid.Details[i] is next...");console.dir($scope.grid.Details[i]);var strInterviewTime=$scope.grid.Details[i].InterviewTime;console.log("strInterviewTime = "+strInterviewTime);intTLoc=strInterviewTime.indexOf("T");console.log("intLoc = "+intTLoc);strInterviewTime=strInterviewTime.substr(intTLoc+1,5);console.log("strInterviewTime = "+strInterviewTime);$scope.grid.Details[i].InterviewTime=strInterviewTime}}
console.log("$scope.fieldsloaded = "+$scope.fieldsloaded);$scope.fields.header=[];if(!$scope.fieldsloaded){angular.forEach($scope.grid.Dataset.Fields.sort(orderByIndex),function(field){parseField(field,$scope);if(field.FieldRoleId==FIELD_ROLE_HEADER){$scope.fields.header.push(field);}
else if(field.FieldRoleId==FIELD_ROLE_DETAIL){$scope.fields.detail.push(field);$scope.datasheetColDefs.push(makeFieldColDef(field,$scope));}
if(field.ControlType=="grid")
$scope.gridFields.push(field);});console.log("Setting $scope.fieldsloaded to true...");$scope.fieldsloaded=true;$scope.dataSheetDataset=$scope.grid.Details;$scope.recalculateGridWidth($scope.datasheetColDefs.length);}
$scope.query.loading=false;$scope.RowQAStatuses=$rootScope.RowQAStatuses=makeObjects($scope.dataset.RowQAStatuses,'Id','Name');$scope.grid.Header.Activity.Timezone=angular.fromJson($scope.grid.Header.Activity.Timezone);});$scope.$watch('dataSheetDataset',function(){if(!$scope.dataSheetDataset)
return;console.log("Inside watch dataSheetDataset...");console.log("$scope.dataSheetDataset is next...");console.dir($scope.dataSheetDataset);console.log("$scope.gridFields is next...");console.dir($scope.gridFields);console.log("*****")
angular.forEach($scope.dataSheetDataset,function(datarow){angular.forEach($scope.gridFields,function(gridfield){datarow[gridfield.DbColumnName]=DatasetService.getRelationData(gridfield.FieldId,datarow.ActivityId,datarow.RowId);console.log("kicking off loading of "+datarow.ActivityId+' '+datarow.RowId);})})});$scope.reloadProject=function(){console.log("Inside reloadProject... we will fetch ProjectId: "+$scope.dataset.ProjectId);ProjectService.clearProject();$scope.fieldsloaded=false;$scope.project=ProjectService.getProject($scope.dataset.ProjectId);var watcher=$scope.$watch('project.Id',function(){console.log("We're back with: "+$scope.project.Id);$rootScope.projectId=$scope.project.Id;watcher();});};$scope.getDataGrade=function(check){return getDataGrade(check)};$scope.changeQa=function(){$scope.QaSaveResults={};$scope.row={ActivityQAStatus:{}};var modalInstance=$modal.open({templateUrl:'app/core/datasets/components/dataset-view/templates/changeqa-modal.html',controller:'ModalQaUpdateCtrl',scope:$scope,});};$scope.openEdit=function(){$location.path("/edit/"+$scope.grid.Header.ActivityId);}
$scope.openExportView=function(){var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-exportfile.html',controller:'ModalDataEntryCtrl',scope:$scope,});}
$scope.openDataEntryModal=function(){var modalInstance=$modal.open({templateUrl:'app/core/datasets/components/dataset-view/templates/dataentry-modal.html',controller:'ModalDataEntryCtrl',scope:$scope,});};$scope.openRelationGridModal=function(row,field){$scope.relationgrid_row=row;$scope.relationgrid_field=field;$scope.isEditable=false;var modalInstance=$modal.open({templateUrl:'app/core/datasets/components/dataset-relationgrid/templates/relationgrid-modal.html',controller:'RelationGridModalCtrl',scope:$scope,});};$scope.viewRelation=function(row,field_name){var field=$scope.FieldLookup[field_name];$scope.openRelationGridModal(row.entity,field);}
$scope.previousActivity=function(){previousActivity($scope.activities,$routeParams.Id,$location);}
$scope.nextActivity=function(){nextActivity($scope.activities,$routeParams.Id,$location);}
$scope.fromJson=function(field){return angular.fromJson($scope.grid.Header[field]);}}];define("core/datasets/components/dataset-view/dataset-view",function(){});var modal_qa_update=['$scope','DatasetService','ProjectService','$modalInstance',function($scope,DatasetService,ProjectService,$modalInstance){$scope.save=function(){DatasetService.updateQaStatus($scope.grid.Header.ActivityId,$scope.row.ActivityQAStatus.QAStatusId,$scope.row.ActivityQAStatus.Comments,$scope.QaSaveResults);ProjectService.clearProject();$scope.fields={header:[],detail:[],relation:[]};$scope.datasheetColDefs=[];$scope.dataSheetDataset=[];$scope.fieldsloaded=false;$scope.reloadProject();$modalInstance.dismiss();};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/datasets/components/dataset-view/modal-qa-update",function(){});var modal_data_entry=['$scope','$modalInstance',function($scope,$modalInstance){$scope.alerts=[];$scope.ok=function(){try{$scope.addGridRow($scope.row);$scope.row={};$scope.alerts.push({type:'success',msg:'Added.'});}catch(e){console.dir(e);}};$scope.cancel=function(){$modalInstance.dismiss('cancel');};$scope.closeAlert=function(index){$scope.alerts.splice(index,1);};$scope.row={};$scope.dateOptions={'year-format':"'yy'",'starting-day':1};}];define("core/datasets/components/dataset-view/modal-data-entry",function(){});var dataset_import=['$scope','$routeParams','ProjectService','CommonService','SubprojectService','DatasetService','$location','$upload','ActivityParser','DataSheet','$rootScope','Logger','$route','$modal','ChartService','ServiceUtilities',function($scope,$routeParams,ProjectService,CommonService,SubprojectService,DatasetService,$location,$upload,ActivityParser,DataSheet,$rootScope,Logger,$route,$modal,ChartService,ServiceUtilities){$scope.dataset=DatasetService.getDataset($routeParams.Id);$scope.activities=null;$scope.mappedActivityFields={};$scope.userId=$rootScope.Profile.Id;$scope.fields={header:[],detail:[],relation:[]};$scope.dataSheetDataset=[];$scope.showHeaderForm=false;$scope.row={};$scope.selectedItems=[];$scope.HeaderColDefs=[];$scope.DetailColDefs=[];$scope.RowQAColDef=[];$scope.sortedLocations=[];$scope.datasetLocationType=0;$scope.datasetLocations=[[]];$scope.primaryProjectLocation=0;$scope.fishermenOptions=$rootScope.fishermenOptions=null;$scope.ShowInstrument=false;$scope.subprojectList=null;$scope.ActivityFields={QAComments:DEFAULT_IMPORT_QACOMMENT,ActivityDate:new Date()};$scope.UploadResults={};$scope.UploadResults.errors=[];$scope.ignoreDuplicates=true;$scope.DuplicateRecordsBucket=[];$scope.mapping={};$scope.ValidRecordsBucket=[];$scope.TempRecordsBucket=[];$scope.gridDatasheetOptions={data:'dataSheetDataset',enableCellSelection:true,enableRowSelection:true,multiSelect:true,enableCellEdit:true,columnDefs:'datasheetColDefs',enableColumnResize:true,selectedItems:$scope.selectedItems};$scope.importing=false;$scope.UploadResults.showPreview=false;$scope.Logger=Logger;$scope.enablePreview=false;$scope.callingPage="Import";DataSheet.initScope($scope);$scope.cellRowQATemplate='<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'RowQAStatusId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in RowQAStatuses"/>';$scope.$watch('subprojectList.length',function(){if($scope.subprojectList===null)
return;else if($scope.subprojectList.length===0)
return;console.log("Inside watch subprojectList.length...");if(($scope.datasets[i].DatastoreTablePrefix==="Metrics")||($scope.datasets[i].DatastoreTablePrefix==="Benthic")||($scope.datasets[i].DatastoreTablePrefix==="Drift"))
{console.log("$scope.subprojectList is next...");console.dir($scope.subprojectList);console.log("$scope.project.Locations is next...");console.dir($scope.project.Locations);angular.forEach($scope.subprojectList,function(subproject){angular.forEach($scope.project.Locations,function(location){if(subproject.LocationId===location.Id)
{console.log("Found a subproject location")
console.dir(location);$scope.datasetLocations.push([location.Id,location.Label]);}});});}
console.log("datasetLocations (with subprojects) is next...");console.dir($scope.datasetLocations);$scope.finishLocationProcessing();});$scope.$watch('dataset.Fields',function(){if(!$scope.dataset.Fields)
return;console.log("Inside DatasetImportCtrl, dataset.Fields watcher...");console.log("$scope.dataset is next...");console.dir($scope.dataset);$rootScope.datasetId=$scope.datasetId=$scope.dataset.Id;console.log("$rootScope.datasetId = "+$rootScope.datasetId);if(((typeof $scope.dataset.Config!=='undefined')&&($scope.dataset.Config!==null)&&($scope.dataset.Config!=="NULL"))&&($scope.dataset.Config.DataEntryPage.HiddenFields)&&($scope.dataset.Config.DataEntryPage.HiddenFields.indexOf("Instrument")>-1))
console.log("Found instrument");$scope.DatastoreTablePrefix=$rootScope.DatastoreTablePrefix=$scope.dataset.Datastore.TablePrefix;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);if($scope.DatastoreTablePrefix==='WaterTemp')
$scope.ShowInstrument=true;else if($scope.DatastoreTablePrefix==="CreelSurvey")
{$scope.fishermenList=ProjectService.getFishermen();$scope.datasheetColDefs2=[{field:'FishermanId',displayName:'Fisherman',cellFilter:'fishermanFilter',}];}
$scope.datasetLocationType=CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);console.log("LocationType = "+$scope.datasetLocationType);$scope.datasheetColDefs=DataSheet.getColDefs($scope.DatastoreTablePrefix);console.log("$scope.datasheetColDefs is next...");console.dir($scope.datasheetColDefs);$scope.mappableFields=$scope.setMappableFields($scope.DatastoreTablePrefix);$scope.project=ProjectService.getProject($scope.dataset.ProjectId);$scope.QAStatusOptions=$rootScope.QAStatusOptions=makeObjects($scope.dataset.QAStatuses,'Id','Name');$scope.RowQAStatuses=$rootScope.RowQAStatuses=makeObjects($scope.dataset.RowQAStatuses,'Id','Name');$scope.ActivityFields.QAStatusId=""+$scope.dataset.DefaultActivityQAStatusId;$scope.FieldLookup['activityDate']={DbColumnName:'activityDate',ControlType:"date"};$scope.FieldLookup['QAStatusId']={DbColumnName:'QAStatusId',ControlType:"select"};$scope.CellOptions['QAStatusIdOptions']=$scope.QAStatusOptions;angular.forEach($scope.dataset.Fields.sort(orderByAlpha),function(field){parseField(field,$scope);$scope.mappableFields.push(field);if(field.FieldRoleId==FIELD_ROLE_HEADER)
{$scope.fields.header.push(field);$scope.HeaderColDefs.push(makeFieldColDef(field,$scope));}
else if(field.FieldRoleId==FIELD_ROLE_DETAIL)
{$scope.fields.detail.push(field);$scope.DetailColDefs.push(makeFieldColDef(field,$scope));}
if(field.DbColumnName=="ReadingDateTime")
{$scope.row.Timezone=getByField($scope.SystemTimezones,420* -60000,"TimezoneOffset");}});angular.forEach($scope.fields.header,function(headerfield){$scope.row[headerfield.DbColumnName]=(headerfield.DefaultValue)?headerfield.DefaultValue:null;});if(($scope.dataset.Datastore.TablePrefix==="WaterTemp")&&($scope.dataset.RowQAStatuses.length>1))
{$scope.RowQAColDef.push({field:"RowQAStatusId",displayName:"Row QA",cellFilter:'RowQAStatusFilter',enableCellEditOnFocus:true,editableCellTemplate:$scope.cellRowQATemplate});}});$scope.$watch('project.Name',function(){if(!$scope.project.Name)return;console.log("Inside DatasetImportCtrl, project.Name watcher...");console.log("$scope.subprojectType = "+$scope.subprojectType);SubprojectService.setServiceSubprojectType($scope.subprojectType);if($scope.DatastoreTablePrefix==="Metrics")
{console.log("Loading Habitat subprojects...");$scope.subprojectList=SubprojectService.getProjectSubprojects($scope.project.Id);var watcher=$scope.$watch('subprojectList.length',function(){console.log("Inside watcher for subprojectList.length...");if($scope.subprojectList===null)
{console.log("$scope.subprojectList is null");return;}
else if(typeof $scope.subprojectList.length==='undefined')
{console.log("$scope.subprojectList.length is undefined.");return;}
else if($scope.subprojectList.length===0)
{console.log("$scope.subprojectList.length is 0");return;}
console.log("$scope.subprojectList.length = "+$scope.subprojectList.length);console.log("subprojects is loaded...");console.dir($scope.subprojectList);watcher();});}
if(!$rootScope.Profile.isProjectOwner($scope.project)&&!$rootScope.Profile.isProjectEditor($scope.project))
{$location.path("/unauthorized");}
else if($rootScope.Profile.isProjectOwner($scope.project)&&$rootScope.Profile.isProjectEditor($scope.project))
{console.log("User is authorized.");}
console.log("ProjectLocations is next...");console.dir($scope.project.Locations);if($scope.project.Locations)
{for(var i=0;i<$scope.project.Locations.length;i++)
{if(($scope.DatastoreTablePrefix==="Metrics")||($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift"))
{if(($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType)||($scope.project.Locations[i].LocationTypeId===LOCATION_TYPE_Hab))
{$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);}}
else
{if($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType)
{$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);}}}
console.log("datasetLocations is next...");console.dir($scope.datasetLocations);$scope.finishLocationProcessing();}
$scope.instrumentOptions=$rootScope.instrumentOptions=makeObjects($scope.project.Instruments,'Id','Name');$scope.FieldLookup['locationId']={DbColumnName:'locationId',ControlType:"select"};$scope.CellOptions['locationIdOptions']=$scope.locationOptions;if($routeParams.LocationId)
{$scope.ActivityFields.LocationId=$routeParams.LocationId;$scope.setLocation();}
else if(array_count($scope.locationOptions)==1)
{angular.forEach(Object.keys($scope.locationOptions),function(key){$scope.ActivityFields.LocationId=key;$scope.setLocation();});}
$scope.fishermenOptions=$rootScope.fishermenOptions=makeObjects($scope.project.Fishermen,'Id','FullName');$scope.FieldLookup['FishermanId']={DbColumnName:'FishermanId',ControlType:"select"};console.log("Just set $scope.fishermenOptions...");console.dir($scope.fishermenOptions);$scope.CellOptions['FishermanIdOptions']=$scope.fishermenOptions;console.log("$scope (at end of watch project.name) is next...");});$scope.$watch('fileFields',function(){if(Array.isArray($scope.fileFields))
{if($scope.fileFields.length==0)
{$scope.uploadErrorMessage="No columns headers were found in the file. Please make sure the column headers are in the first row of your file and try again.";$scope.fileFields=undefined;}
angular.forEach($scope.fileFields,function(field_in){var field_in_compare=field_in.toUpperCase();for(var i=$scope.mappableFields.length-1;i>=0;i--){if($scope.mappableFields[i].Label.toUpperCase()===field_in_compare)
{$scope.mapping[field_in]=$scope.mappableFields[i];return;}};$scope.mapping[field_in]=$scope.mappableFields[DO_NOT_MAP];});}});$scope.finishLocationProcessing=function(){console.log("Inside $scope.finishLocationProcessing...");var index=0;angular.forEach($scope.datasetLocations,function(dsLoc)
{if(dsLoc.length===0)
{$scope.datasetLocations.splice(index,1);}
index++;});console.log("datasetLocations after splice is next...");console.dir($scope.datasetLocations);$scope.datasetLocations.sort(order2dArrayByAlpha);console.log("datasetLocations sorted...");console.dir($scope.datasetLocations);for(var i=0;i<$scope.datasetLocations.length;i++)
{$scope.sortedLocations.push({Id:$scope.datasetLocations[i][0],Label:$scope.datasetLocations[i][1]});}
$scope.datasetLocations=[[]];$scope.locationOptions=$rootScope.locationOptions=makeObjects($scope.sortedLocations,'Id','Label');console.log("locationOptions is next...");console.dir($scope.locationOptions);if(array_count($scope.locationOptions)==1)
{angular.forEach(Object.keys($scope.locationOptions),function(key){console.log(key);$scope.row['locationId']=key;});}
angular.forEach($scope.project.Locations,function(loc)
{if(loc.OtherAgencyId&&loc.Label.indexOf(loc.OtherAgencyId)==-1)
loc.Label=loc.Label+' ('+loc.OtherAgencyId+')';});console.log("$scope (at the end of $scope.finishLocationProcessing) is next...");};$scope.setMappableFields=function()
{console.log("Inside $scope.setMappableFields...");var mappableFields=[];console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);if($scope.DatastoreTablePrefix==="CreelSurvey")
{console.log("Setting for CreelSurvey...");mappableFields.push({Label:"[-- Do not map --]"});mappableFields.push({Label:"[-- Activity Date --]"});mappableFields.push({Label:"[-- Location Id --]"});mappableFields.push({Label:"[-- Fisherman --]"});}
else if($scope.DatastoreTablePrefix==="Benthic")
{console.log("Setting for CreelSurvey...");mappableFields.push({Label:"[-- Do not map --]"});mappableFields.push({Label:"[-- Activity Date --]"});mappableFields.push({Label:"[-- Location Id --]"});}
else
{console.log("Setting for non-CreelSurvey...");mappableFields.push({Label:"[-- Do not map --]"});mappableFields.push({Label:"[-- Activity Date --]"});mappableFields.push({Label:"[-- Index Field --]"});mappableFields.push({Label:"[-- QA Row Status Id --]"});}
return mappableFields;};$scope.setLocation=function()
{$scope.ActivityFields.Location=getByField($scope.project.Locations,$scope.ActivityFields.LocationId,"Id");};$scope.reloadProject=function(){ProjectService.clearProject();$scope.project=ProjectService.getProject($scope.dataset.ProjectId);var watcher=$scope.$watch('project.Id',function(){$scope.selectInstrument();watcher();});};$scope.clearSelections=function()
{$scope.gridDatasheetOptions.selectAll(false);};$scope.setSelectedBulkQAStatus=function(rowQAId)
{angular.forEach($scope.gridDatasheetOptions.selectedItems,function(item,key){item.RowQAStatusId=rowQAId;});$scope.clearSelections();};$scope.createInstrument=function(){$scope.viewInstrument=null;var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-create-instrument.html',controller:'ModalCreateInstrumentCtrl',scope:$scope,});};$scope.openBulkQAChange=function(){var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-rowqaupdate.html',controller:'ModalBulkRowQAChangeCtrl',scope:$scope,});};$scope.openAccuracyCheckModal=function(){var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-new-accuracycheck.html',controller:'ModalQuickAddAccuracyCheckCtrl',scope:$scope,});};$scope.getDataGrade=function(check){return getDataGrade(check)};$scope.selectInstrument=function(){$scope.viewInstrument=getByField($scope.project.Instruments,$scope.ActivityFields.InstrumentId,"Id");if((typeof $scope.viewInstrument!=='undefined')&&($scope.viewInstrument!==null))
{if($scope.viewInstrument&&$scope.viewInstrument.AccuracyChecks.length>0)
$scope.row.AccuracyCheckId=$scope.viewInstrument.AccuracyChecks[$scope.viewInstrument.AccuracyChecks.length-1].Id;}};$scope.toggleDuplicates=function(){try{if(!$scope.ignoreDuplicates)
{$scope.TempRecordsBucket=[];$scope.DuplicateRecordsBucket=[];angular.forEach($scope.dataSheetDataset,function(item,key){var date_check=item.activityDate;if(typeof item.activityDate=="object")
date_check=item.activityDate.toISOString();if($scope.existingActivities.indexOf(item.locationId+"_"+date_check.substr(0,10))!=-1)
$scope.DuplicateRecordsBucket.push(item);else
$scope.TempRecordsBucket.push(item);});$scope.dataSheetDataset=$scope.TempRecordsBucket;$scope.TempRecordsBucket=[];}
else
{angular.forEach($scope.DuplicateRecordsBucket,function(item,key){$scope.dataSheetDataset.push(item);});$scope.DuplicateRecordsBucket=[];}
$scope.validateGrid($scope,"Import");$scope.floatErrorsToTop();}
catch(e)
{console.dir(e);}};$scope.floatErrorsToTop=function(){angular.forEach($scope.dataSheetDataset,function(row,key){if(row.isValid)
{$scope.ValidRecordsBucket.push(row);}
else
{$scope.TempRecordsBucket.push(row);}});$scope.dataSheetDataset=$scope.TempRecordsBucket;$scope.TempRecordsBucket=[];angular.forEach($scope.ValidRecordsBucket,function(row,key){$scope.dataSheetDataset.push(row);});$scope.ValidRecordsBucket=[];};$scope.updateSpecialFields=function(field_name){console.log("Inside $scope.updateSpecialFields...");if($scope.DatastoreTablePrefix==="CreelSurvey")
{if($scope.mapping[field_name])
{if($scope.mapping[field_name].Label===$scope.mappableFields[ACTIVITY_DATE].Label)
{$scope.mappedActivityFields[ACTIVITY_DATE]=field_name;console.log("Found and mapped ACTIVITY_DATE");}
else if($scope.mapping[field_name].Label===$scope.mappableFields[LOCATION_ID].Label)
{$scope.mappedActivityFields[LOCATION_ID]=field_name;console.log("Found and mapped LOCATION_ID");}
else if($scope.mapping[field_name].Label===$scope.mappableFields[FISHERMAN].Label)
{$scope.mappedActivityFields[FISHERMAN]=field_name;console.log("Found and mapped FISHERMAN");}
else
{if($scope.mappedActivityFields[ACTIVITY_DATE]===field_name)
$scope.mappedActivityFields[ACTIVITY_DATE]=false;if($scope.mappedActivityFields[INDEX_FIELD]===field_name)
$scope.mappedActivityFields[INDEX_FIELD]=false;if($scope.mappedActivityFields[ROW_QA_STATUS_ID]===field_name)
$scope.mappedActivityFields[ROW_QA_STATUS_ID]=false;}}}
else
{if($scope.mapping[field_name])
{if($scope.mapping[field_name].Label===$scope.mappableFields[ACTIVITY_DATE].Label)
{$scope.mappedActivityFields[ACTIVITY_DATE]=field_name;console.log("Found and mapped ACTIVITY_DATE");}
else if($scope.mapping[field_name].Label===$scope.mappableFields[INDEX_FIELD].Label)
{$scope.mappedActivityFields[INDEX_FIELD]=field_name;console.log("Found and mapped INDEX_FIELD");}
else if($scope.mapping[field_name].Label===$scope.mappableFields[ROW_QA_STATUS_ID].Label)
{$scope.mappedActivityFields[ROW_QA_STATUS_ID]=field_name;console.log("Found and mapped ROW_QA_STATUS_ID");}
else
{if($scope.mappedActivityFields[ACTIVITY_DATE]===field_name)
$scope.mappedActivityFields[ACTIVITY_DATE]=false;if($scope.mappedActivityFields[INDEX_FIELD]===field_name)
$scope.mappedActivityFields[INDEX_FIELD]=false;if($scope.mappedActivityFields[ROW_QA_STATUS_ID]===field_name)
$scope.mappedActivityFields[ROW_QA_STATUS_ID]=false;}}}
console.log("$scope at end of updateSpecialFields is next...");};$scope.previewUpload=function()
{console.log("Inside previewUpload...");$scope.errors=[];$scope.enablePreview=false;$scope.importing=true;console.log("Set $scope.importing = true...");if($scope.DatastoreTablePrefix==="CreelSurvey")
{if((!$scope.ActivityFields.LocationId)&&(!$scope.mappedActivityFields[LOCATION_ID]))
{$scope.errors.push("Please select an activity location.");}}
else
{if(!$scope.ActivityFields.LocationId)
{$scope.errors.push("Please select an activity location.");}}
console.log("$scope.mappedActivityFields[ACTIVITY_DATE] = "+$scope.mappedActivityFields[ACTIVITY_DATE]);if($scope.mappedActivityFields[ACTIVITY_DATE])
$scope.ActivityFields.ActivityDate=$scope.mappedActivityFields[ACTIVITY_DATE];if(!$scope.ActivityFields.ActivityDate)
{$scope.errors.push("Please select an activity date or map a date source field.");}
if(!$scope.ActivityFields.QAStatusId)
{$scope.errors.push("Please select an activity QA Status.");}
console.log("$scope.errors.length = "+$scope.errors.length);if($scope.errors.length==0)
{console.log("Displaying preview...");$scope.displayImportPreview();}else{$scope.uploadErrorMessage="";angular.forEach($scope.errors,function(anError){$scope.uploadErrorMessage+=anError+"  ";});console.log("Doing nothing since there are errors");$scope.enablePreview=true;}}
$scope.displayImportPreview=function()
{console.log("Inside displayImportPreview");if($scope.mappedActivityFields[ACTIVITY_DATE]||$scope.mappedActivityFields[INDEX_FIELD])
{$scope.showHeaderForm=false;$scope.datasheetColDefs=$scope.RowQAColDef.concat($scope.datasheetColDefs,$scope.HeaderColDefs,$scope.DetailColDefs);}
else
{$scope.showHeaderForm=true;if($scope.DatastoreTablePrefix==="CreelSurvey")
$scope.datasheetColDefs=$scope.RowQAColDef.concat($scope.datasheetColDefs2,$scope.DetailColDefs);else
$scope.datasheetColDefs=$scope.RowQAColDef.concat($scope.DetailColDefs);}
console.log("$scope.showHeaderForm = "+$scope.showHeaderForm);console.log("$scope.datasheetColDefs (after concatentation) is next...");console.dir($scope.datasheetColDefs);$scope.recalculateGridWidth($scope.datasheetColDefs.length);var activityDateType="";var strErrorMessage="";angular.forEach($scope.UploadResults.Data.rows,function(data_row){try
{var new_row={RowQAStatusId:$scope.dataset.DefaultRowQAStatusId};if($scope.mapping[$scope.ActivityFields.LocationId])
new_row.locationId=data_row[$scope.ActivityFields.LocationId];else
new_row.locationId=$scope.ActivityFields.LocationId;if($scope.ActivityFields.InstrumentId)
new_row.InstrumentId=$scope.ActivityFields.InstrumentId;if($scope.mapping[$scope.ActivityFields.ActivityDate])
new_row.activityDate=data_row[$scope.ActivityFields.ActivityDate];else
new_row.activityDate=$scope.ActivityFields.ActivityDate;if($scope.mapping[$scope.ActivityFields.QAStatusId])
new_row.QAStatusId=data_row[$scope.ActivityFields.QAStatusId];else
new_row.QAStatusId=$scope.ActivityFields.QAStatusId;console.log("$scope.mappedActivityFields is next...");console.dir($scope.mappedActivityFields);if($scope.mappedActivityFields[INDEX_FIELD])
new_row.activityIndex=data_row[$scope.mappedActivityFields[INDEX_FIELD]];angular.forEach($scope.mapping,function(field,col){console.log("-----");console.log("field.DbColumnName = "+field.DbColumnName+", field.Label = "+field.Label+", col = "+col);console.log("**data_row[col] = "+data_row[col]+", typeof = "+typeof data_row[col]);try{if(field.Label!=$scope.mappableFields[DO_NOT_MAP])
{if(data_row[col]===null||data_row[col]==="")
{return;}
if($scope.DatastoreTablePrefix==="CreelSurvey")
{if(field.Label==="[-- Fisherman --]")
{new_row.FishermanId=parseInt($scope.getFishermanId(data_row[col]));console.log("new_row.FishermanId = "+new_row.FishermanId);if(new_row.FishermanId<2)
{}}
else if(field.Label==="[-- Location Id --]")
{new_row.locationId=parseInt($scope.getLocationId(data_row[col]));console.log("new_row.locationId = "+new_row.locationId);if(new_row.locationId<0)
$scope.errors.push("Location ["+data_row[col]+"] does not match any name in the Locations table.");}}
else if($scope.DatastoreTablePrefix==="Benthic")
{if(field.DbColumnName==="TareMass")
{if((typeof data_row[col]!=='undefined')&&(data_row[col]!==null))
{tmpValue=parseFloat(Math.round(data_row[col]*10000)/10000);new_row.TareMass=tmpValue}}}
else if(($scope.DatastoreTablePrefix==="WaterTemp")||($scope.DatastoreTablePrefix==="WaterQuality"))
{if(field.Label==$scope.mappableFields[ROW_QA_STATUS_ID].Label)
new_row.RowQAStatusId=data_row[col];}
if(field.ControlType=="number")
{if(!isNumber(data_row[col]))
{return;}
else if($scope.DatastoreTablePrefix==="CreelSurvey")
{if((field.DbColumnName==="FishCount")&&(data_row[col]!==null))
{console.log("Found FishCount.  Value = "+data_row[col]);var strFishCount=data_row[col].toString();if(strFishCount==="0")
new_row.FishCount=0;}
else if((field.DbColumnName==="NumberAnglersObserved")&&(data_row[col]!==null))
{console.log("Found NumberAnglersObserved.  Value = "+data_row[col]);var strNumberAnglersObserved=data_row[col].toString();if(strNumberAnglersObserved==="0")
if($scope.showHeaderForm)
$scope.row.NumberAnglersObserved=0;else
new_row.NumberAnglersObserved=0;else
if($scope.showHeaderForm)
$scope.row.NumberAnglersObserved=data_row[col];else
new_row.NumberAnglersObserved=data_row[col];}
else if((field.DbColumnName==="NumberAnglersInterviewed")&&(data_row[col]!==null))
{console.log("Found NumberAnglersInterviewed.  Value = "+data_row[col]);var strNumberAnglersInterviewed=data_row[col].toString();if(strNumberAnglersInterviewed==="0")
if($scope.showHeaderForm)
$scope.row.NumberAnglersInterviewed=0;else
new_row.NumberAnglersInterviewed=0;else
if($scope.showHeaderForm)
$scope.row.NumberAnglersInterviewed=data_row[col];else
new_row.NumberAnglersInterviewed=data_row[col];}
else
{new_row[field.DbColumnName]=data_row[col];}}
else if($scope.DatastoreTablePrefix==="Benthic")
{var tmpValue=-1;if(field.Validation==='2d')
{tmpValue=parseFloat(Math.round(data_row[col]*100)/100);new_row[field.DbColumnName]=tmpValue}
else if(field.Validation==='p2d')
{if(data_row[col]===0)
new_row[field.DbColumnName]="0";else
{tmpValue=parseFloat(Math.round(data_row[col]*10000)/100);new_row[field.DbColumnName]=tmpValue}}
else
{new_row[field.DbColumnName]=data_row[col];}}
else
{new_row[field.DbColumnName]=data_row[col];}}
else if(field.ControlType=="multiselect")
{if((typeof new_row.activityDate!=='string')&&(!Array.isArray(new_row[field.DbColumnName]))&&(field.FieldRoleId===1))
$scope.row[field.DbColumnName]=[];else
new_row[field.DbColumnName]=[];var row_items=data_row[col].trim().split(",");for(var a=0;a<row_items.length;a++)
{var row_item=row_items[a].trim().toUpperCase();if((typeof new_row.activityDate!=='string')&&(field.FieldRoleId===1)&&(row[field.DbColumnName].indexOf(row_item)==-1))
{$scope.row[field.DbColumnName].push(row_item);}
else if(new_row[field.DbColumnName].indexOf(row_item)==-1)
new_row[field.DbColumnName].push(row_item);}}
else if(field.ControlType==="select"&&data_row[col]&&typeof data_row[col]==="string")
{new_row[field.DbColumnName]=data_row[col].trim().toUpperCase();}
else if(field.ControlType=="datetime")
{try
{if(data_row[col])
{var d=new Date(data_row[col]);if((typeof new_row.activityDate!=='string')&&(field.FieldRoleId===1))
row[field.DbColumnName]=toExactISOString(d);else
new_row[field.DbColumnName]=toExactISOString(d);}}
catch(e)
{console.log("problem converting datetime: "+data_row[col]);console.dir(e);}}
else if(field.ControlType=="time")
{try
{if(data_row[col])
{var theTime=getTimeFromDate(data_row[col]);if((typeof new_row.activityDate!=='string')&&(field.FieldRoleId===1))
{$scope.row[field.DbColumnName]=theTime;}
else
{new_row[field.DbColumnName]=theTime;}}}
catch(e)
{console.log("problem converting time:  DbColumnName = "+field.DbColumnName+", Value = "+data_row[col]);console.dir(e);}}
else
{if($scope.showHeaderForm&&(field.FieldRoleId===1))
{if($scope.DatastoreTablePrefix==="CreelSurvey")
{if((field.DbColumnName==="TimeStart")||(field.DbColumnName==="TimeEnd"))
{$scope.row[field.DbColumnName]=ServiceUtilities.removeTSfromDateTimeString(data_row[col]);var theYear=ServiceUtilities.extractYearFromString(data_row[col]);if(theYear<1901)
{strErrorMessage="["+field.DbColumnName+"] has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";}}
else if(field.DbColumnName==="Location")
{$scope.row[field.DbColumnName]=data_row[col];}
else
{$scope.row[field.DbColumnName]=data_row[col];}}
else if($scope.DatastoreTablePrefix==="SpawningGroundSurvey")
{if(field.DbColumnName==="Time")
{var theYear=ServiceUtilities.extractYearFromString(data_row[col]);if(theYear<1901)
{strErrorMessage="["+field.DbColumnName+"] has a less than 1901 (Excel default year); user must enter a valid year (YYYY)";}}
else
new_row[field.DbColumnName]=data_row[col];}
else
$scope.row[field.DbColumnName]=data_row[col];}
else
{if($scope.DatastoreTablePrefix==="CreelSurvey")
{if((field.DbColumnName==="TimeStart")||(field.DbColumnName==="TimeEnd")||(field.DbColumnName==="InterviewTime"))
{console.log(field.DbColumnName+" = "+data_row[col]);new_row[field.DbColumnName]=ServiceUtilities.removeTSfromDateTimeString(data_row[col]);if(field.DbColumnName==="InterviewTime")
{var strNumberAnglersInterviewed=null;if($scope.showHeaderForm)
strNumberAnglersInterviewed=$scope.row.NumberAnglersInterviewed.toString();else
strNumberAnglersInterviewed=new_row.NumberAnglersInterviewed.toString();if(strNumberAnglersInterviewed==="0")
{$scope.uploadErrorMessage="NumberAnglersInterviewed cannot be 0, if InterviewTime has a time.";new_row.errors.push($scope.uploadErrorMessage);}}}
else if(field.DbColumnName==="TotalTimeFished")
{new_row[field.DbColumnName]=ServiceUtilities.convertMinutesToHhMm(parseInt(data_row[col]));}
else
new_row[field.DbColumnName]=data_row[col];}
else if(field.DbColumnName==="FishReleased")
{new_row[field.DbColumnName]=data_row[col];}
else if(field.DbColumnName==="Time")
{new_row[field.DbColumnName]=ServiceUtilities.extractTimeFromString2(data_row[col]);var theYear=ServiceUtilities.extractYearFromString(data_row[col]);console.log("theYear = "+theYear);if(theYear<0)
{strErrorMessage="Time does not have a year; it must have a valid year (YYYY-MM-DD HH:MM:SS format)";}
else if(theYear<1901)
{strErrorMessage="Time has a year less than 1901 (Excel default year); user must enter a valid year (YYYY-MM-DD HH:MM:SS format)";}}
else
new_row[field.DbColumnName]=data_row[col];}}}}catch(e){console.dir(e);}});if($scope.DatastoreTablePrefix==="Appraisal")
{$scope.importAppraisalLine(new_row);}
var row=new_row;angular.forEach($scope.mapping,function(field,col){var value=null;if(typeof field.DbColumnName!=='undefined')
{value=row[field.DbColumnName];}
if(($scope.DatastoreTablePrefix==="ScrewTrap")&&(field.DbColumnName==="TextualComments"))
{if(typeof new_row.TextualComments!=='undefined')
{if((new_row.TextualComments.length>3&&new_row.TextualComments.indexOf(" U ")>-1)||(new_row.TextualComments.length>2&&new_row.TextualComments.indexOf("U ")>-1)||(new_row.TextualComments.length>2&&new_row.TextualComments.indexOf(" U")>-1)||(new_row.TextualComments.length===1&&new_row.TextualComments.indexOf("U")>-1))
{new_row.ReleaseLocation="UPSTREAM";}
else if((new_row.TextualComments.length>3&&new_row.TextualComments.indexOf(" D ")>-1)||(new_row.TextualComments.length>2&&new_row.TextualComments.indexOf("D ")>-1)||(new_row.TextualComments.length>2&&new_row.TextualComments.indexOf(" D")>-1)||(new_row.TextualComments.length===1&&new_row.TextualComments.indexOf("D")>-1))
{new_row.ReleaseLocation="DOWNSTREAM";}
else
{}}
else
{}}
try{if(field.Field&&field.Field.Rule&&field.Field.Rule.OnChange){eval(field.Field.Rule.OnChange);}
if(field.Rule&&field.Rule.OnChange){eval(field.Rule.OnChange);}}catch(e){console.dir(e);}});console.log("new_row is next...");console.dir(new_row);if(new_row.activityDate)
$scope.dataSheetDataset.push(new_row);}
catch(e)
{$scope.Logger.debug(e);}});$scope.UploadResults.showPreview=true;$scope.toggleDuplicates();console.log("$scope.callingPage = "+$scope.callingPage);$scope.validateGrid($scope);$scope.floatErrorsToTop();console.log("The following are...$scope.dataSheetDataset, $scope.dataset.Datastore.TablePrefix");console.dir($scope.dataSheetDataset);console.log($scope.dataset.Datastore.TablePrefix);ChartService.buildChart($scope,$scope.dataSheetDataset,$scope.dataset.Datastore.TablePrefix,{width:800,height:360});$scope.importing=false;console.log("Set $scope.importing = false...");};$scope.getFishermanId=function(fishermanName)
{var theFishermanId=0;var keepGoing=true;var foundFisherman=false;angular.forEach($scope.fishermenOptions,function(fisherman,key){if(keepGoing)
{if(fishermanName===fisherman)
{theFishermanId=key;foundFisherman=true;keepGoing=false;}}});if(foundFisherman)
return theFishermanId;else
{return-1;}};$scope.getLocationId=function(locationName)
{var theLocationId=0;var keepGoing=true;var foundLocation=false;angular.forEach($scope.locationOptions,function(location,key){if(keepGoing)
{if(locationName===location)
{console.log("Found the location:  "+location);theLocationId=key;foundLocation=true;keepGoing=false;}}});if(foundLocation)
return theLocationId;else
return-1;};$scope.uploadFile=function()
{$scope.loading=true;console.log("serviceUrl = "+serviceUrl);if(typeof $scope.project.Id!=='undefined')
console.log("project.Id = "+$scope.project.Id);else
console.log("project.Id is not set.  User should go to dataset activities page first.");console.log("startOnLine = "+$scope.startOnLine);console.log("file...");console.dir($scope.file);$scope.upload=$upload.upload({url:serviceUrl+'/api/v1/import/uploadimportfile',method:"POST",data:{ProjectId:$scope.project.Id,DatasetId:$scope.dataset.Id,Title:$scope.file.name,Description:"Uploaded file "+$scope.file.name,StartOnLine:$scope.startOnLine},file:$scope.file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data){$scope.UploadResults.Data=angular.fromJson(data);console.log("$scope.UploadResults.Data is next...");console.dir($scope.UploadResults.Data);$scope.fileFields=$scope.UploadResults.Data.columns;$scope.loading=false;$scope.enablePreview=true;}).error(function(data)
{var errorStem="There was a problem uploading your file.\n";var errorSpecificPart1="The form says the column headers start on line "+$scope.startOnLine+".  ";var errorSpecificPart2="Is this correct?  Also verify that the data/time entries are in 24-hour format.";$scope.uploadErrorMessage=errorStem+errorSpecificPart1+errorSpecificPart2;console.log("$scope.upload next...");console.dir($scope.upload);$scope.loading=false;});};$scope.onFileSelect=function($files){$scope.files=$files;$scope.file=$files[0];};$scope.cancel=function(){if($scope.UploadResults.showPreview)
{if(!confirm("Looks like you've made changes.  Are you sure you want to leave this page?"))
return;}
$location.path("/activities/"+$scope.dataset.Id);};$scope.doneButton=function(){$scope.activities=undefined;$route.reload();};$scope.viewButton=function(){$location.path("/activities/"+$scope.dataset.Id);}
$scope.saveDataSheet=function(){console.log("Inside import-controllers.js, $scope.saveDataSheet...");console.log("$scope.dataSheetDataset is next...");console.dir($scope.dataSheetDataset);var strYear=null;var strMonth=null;var strDay=null;if($scope.gridHasErrors)
{if(!confirm("There are validation errors.  Are you sure you want to save anyway?"))
return;}
if($scope.showHeaderForm)
{if($scope.DatastoreTablePrefix==="CreelSurvey")
{if((typeof $scope.row.TimeStart!=='undefined')&&($scope.row.TimeStart!==null))
{$scope.row.TimeStart=$scope.row.TimeStart.replace(" ","T");$scope.row.TimeStart+=":00.000";}
if((typeof $scope.row.TimeEnd!=='undefined')&&($scope.row.TimeEnd!==null))
{$scope.row.TimeEnd=$scope.row.TimeEnd.replace(" ","T");$scope.row.TimeEnd+=":00.000";}}}
for(var i=0;i<$scope.dataSheetDataset.length;i++)
{if($scope.DatastoreTablePrefix==="CreelSurvey")
{if((typeof $scope.dataSheetDataset[i].TotalTimeFished!=='undefined')&&($scope.dataSheetDataset[i].TotalTimeFished!=null))
{$scope.dataSheetDataset[i].TotalTimeFished=ServiceUtilities.convertHhMmToMinutes($scope.dataSheetDataset[i].TotalTimeFished);}
console.log("typeof $scope.dataSheetDataset[i].activityDate = "+typeof $scope.dataSheetDataset[i].activityDate);if(typeof $scope.dataSheetDataset[i].activityDate==='object')
{strYear=""+$scope.dataSheetDataset[i].activityDate.getFullYear();strMonth=""+$scope.dataSheetDataset[i].activityDate.getMonth();strDay=""+$scope.dataSheetDataset[i].activityDate.getDate();}
else if(typeof $scope.dataSheetDataset[i].activityDate==='string')
{strYear=$scope.dataSheetDataset[i].activityDate.substr(0,4);strMonth=$scope.dataSheetDataset[i].activityDate.substr(5,2);if(strMonth.length<2)
strMonth="0"+strMonth;strDay=$scope.dataSheetDataset[i].activityDate.substr(8,2);if(strDay.length<2)
strDay="0"+strDay;}
if((typeof $scope.dataSheetDataset[i].TimeStart!=='undefined')&&($scope.dataSheetDataset[i].TimeStart!==null))
{$scope.dataSheetDataset[i].TimeStart=$scope.dataSheetDataset[i].TimeStart.replace(" ","T");$scope.dataSheetDataset[i].TimeStart=$scope.dataSheetDataset[i].TimeStart+":00.000";}
if((typeof $scope.dataSheetDataset[i].TimeEnd!=='undefined')&&($scope.dataSheetDataset[i].TimeEnd!==null))
{$scope.dataSheetDataset[i].TimeEnd=$scope.dataSheetDataset[i].TimeEnd.replace(" ","T");$scope.dataSheetDataset[i].TimeEnd=$scope.dataSheetDataset[i].TimeEnd+":00.000";}
if((typeof $scope.dataSheetDataset[i].InterviewTime!=='undefined')&&($scope.dataSheetDataset[i].InterviewTime!=null))
{$scope.dataSheetDataset[i].InterviewTime=$scope.dataSheetDataset[i].InterviewTime.replace(" ","T");$scope.dataSheetDataset[i].InterviewTime=$scope.dataSheetDataset[i].InterviewTime+":00.000";}}
if(typeof $scope.dataSheetDataset[i].Dry==='undefined')
$scope.dataSheetDataset[i].Dry="NO";}
for(var i=0;i<$scope.dataSheetDataset.length;i++){var row=$scope.dataSheetDataset[i];if($scope.showHeaderForm)
row=angular.extend(row,$scope.row,$scope.ActivityFields);row.ActivityQAStatus={QAStatusId:""+row.QAStatusId,Comments:row.QAComments};row.QAStatusId=row.RowQAStatusId;}
$scope.activities=ActivityParser.parseActivitySheet($scope.dataSheetDataset,$scope.fields,$scope.DatastoreTablePrefix,"Import",$scope.dataset.QAStatuses);console.log("$scope.activities is next...");console.dir($scope.activities);if(!$scope.activities.errors)
{DatasetService.saveActivities($scope.userId,$scope.dataset.Id,$scope.activities);}};$scope.eventTimer=function(){var d=new Date();console.log(d.toLocaleTimeString(),1000);};$scope.openDuplicatesModal=function(){var modalInstance=$modal.open({templateUrl:'app/core/datasets/components/dataset-import/templates/modal-dataset-duplicates.html',controller:'ModalDuplicatesViewCtrl',scope:$scope,});};$scope.importAppraisalLine=function(row){$scope.map.queryMatchParcel(row['Allotment'],function(features){if(features.length==0)
{console.log("didn't find parcelid: "+row['Allotment']);}
else
{var tsr=features[0].attributes['TSR'];if(tsr)
tsr=tsr.replace("adminstration","admin");row.TSRFiles='[{"Name":"View TSR","Link":"'+tsr+'"}]';row.AppraisalYear='2014';row.AppraisalType='Land Buy Back';row.Appraiser='David Nicholson';row.CobellAppraisalWave='Wave 3';row.AppraisalStatus='Not Started';row.AllotmentStatus='Requested';var map_loc='//gis.ctuir.org/DECD/Appraisals/maps/Round_Basemaps_DECD_';row.MapFiles='[{"Name":"Imagery","Link":"'+map_loc+'Imagery_'+row['Allotment']+'.pdf"},{"Name":"Plat","Link":"'+map_loc+'Plat_'+row['Allotment']+'.pdf"},{"Name":"Soils","Link":"'+map_loc+'Soils_'+row['Allotment']+'.pdf"},{"Name":"Topo","Link":"'+map_loc+'Topo_'+row['Allotment']+'.pdf"},{"Name":"Zoning","Link":"'+map_loc+'Zoning_'+row['Allotment']+'.pdf"}]';row.LastAppraisalRequestDate=new Date();row.Acres=features[0].attributes['ACRES_GIS'];var new_location={LocationTypeId:LOCATION_TYPE_APPRAISAL,SdeFeatureClassId:SDE_FEATURECLASS_TAXLOTQUERY,SdeObjectId:features[0].attributes['OBJECTID'],Label:features[0].attributes['PARCELID'],};var promise=CommonService.saveNewProjectLocation($scope.project.Id,new_location);promise.$promise.then(function(location_data){row.locationId=location_data.Id;});}});}}];define("core/datasets/components/dataset-import/dataset-import",function(){});var modal_dataset_duplicates=['$scope','$modalInstance',function($scope,$modalInstance){$scope.gridDuplicates={data:'DuplicateRecordsBucket',columnDefs:[{field:'locationId',displayName:'Location',cellFilter:'locationNameFilter'},{field:'activityDate',displayName:'Activity Date',cellFilter:'date: \'MM/dd/yyyy\'',}],};$scope.ok=function(){$modalInstance.dismiss();};}];define("core/datasets/components/dataset-import/modal-dataset-duplicates",function(){});var dataset_query=['$scope','$routeParams','DatasetService','$location','$modal','DataSheet','$rootScope','ChartService','ProjectService','CommonService','SubprojectService',function($scope,$routeParams,DatasetService,$location,$modal,DataSheet,$rootScope,ChartService,ProjectService,CommonService,SubprojectService){$scope.dataset=DatasetService.getDataset($routeParams.Id);$scope.headerFields=[];$scope.detailFields=[];$scope.datasheetColDefs=[];$scope.query={results:[]};$scope.dataSheetDataset=[];$scope.dataFields=[];$scope.criteriaList=[];$scope.queryToolVisible=true;$scope.Criteria={};$scope.Criteria.paramActivityDateType="all";var migrationYearDate=new Date();var migrationYear=migrationYearDate.getFullYear();var migrationMonth=migrationYearDate.getMonth();if(migrationMonth>9)
{migrationYear++;}
$scope.Criteria.paramActivityWhereMigrationYear=migrationYear;$scope.AutoExecuteQuery=true;$scope.row={ActivityQAStatus:{}};$scope.sortedLocations=[];$scope.datasetLocationType=0;$scope.datasetLocations=[[]];$scope.primaryProjectLocation=0;$scope.showActivitiesWhereAll=true;$scope.showActivitiesWhereMigrationYear=false;$scope.showActivitiesWhereRunYear=false;$scope.showActivitiesWhereReportYear=false;$scope.showActivitiesWhereSpawningYear=false;$scope.showActivitiesWhereBroodYear=false;$scope.showActivitiesWhereOutmigrationYear=false;$scope.fishermenList=null;$scope.migrationYearsList=[];$scope.runYearsList=[];$scope.reportYearsList=[];$scope.spawningYearsList=[];$scope.broodYearsList=[];$scope.outmigrationYearsList=[];$scope.gridDatasheetOptions={data:'dataSheetDataset',columnDefs:'datasheetColDefs',enableColumnResize:true,enableRowSelection:true,enableCellEdit:false,enableSorting:true,enableCellSelection:true,showFilter:false,showColumnMenu:true,multiSelect:false,};$scope.chartConfig={title:'Fish by Species',tooltips:true,labels:false,legend:{display:true,position:'right'}};$scope.chartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};DataSheet.initScope($scope);$scope.datasheetColDefs=[{field:'LocationId',displayName:'Location',cellFilter:'locationNameFilter'},{field:'ActivityDate',displayName:'Activity Date',cellFilter:'date: \'MM/dd/yyyy\'',},{field:'ActivityQAStatusId',displayName:'QA Status',cellFilter:'QAStatusFilter'},{field:"QAStatusId",displayName:"QA",minWidth:50,maxWidth:200,cellFilter:'RowQAStatusFilter',visible:false,}];$scope.datasheetColDefs2=[{field:'FishermanId',displayName:'Fisherman',cellFilter:'fishermanFilter',}];var fishermenWatcher=$scope.$watch('theFishermen.length',function(){if((typeof $scope.theFishermen!=='undefined')&&($scope.theFishermen!==null))
{console.log("Inside theFishermen watch...");console.log("$scope.theFishermen.length = "+$scope.theFishermen.length)
if($scope.theFishermen.length>0)
{$scope.fishermenOptions=$rootScope.fishermenOptions=makeObjects($scope.project.Fishermen,'Id','FullName');console.log("$scope.fishermenOptions is next...");console.dir($scope.fishermenOptions);}}});$scope.$watch('dataset.Id',function(){if(!$scope.dataset.Fields)
return;console.log("Inside dataset.Id watcher...");$scope.DatastoreTablePrefix=$rootScope.DatastoreTablePrefix=$scope.dataset.Datastore.TablePrefix;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);$scope.datasetLocationType=CommonService.getDatasetLocationType($scope.DatastoreTablePrefix);console.log("LocationType = "+$scope.datasetLocationType);$scope.project=ProjectService.getProject($scope.dataset.ProjectId);$scope.QAStatusOptions=$rootScope.QAStatusOptions=makeObjects($scope.dataset.QAStatuses,'Id','Name');$scope.QAStatusOptions["all"]="- All -";$scope.Criteria.ParamQAStatusId="all";var fieldIndex=0;angular.forEach($scope.dataset.Fields.sort(orderByIndex),function(field){if(field.FieldRoleId===FIELD_ROLE_HEADER)
{parseField(field,$scope);$scope.headerFields.push(field);if(field.Field.PossibleValues)
{field.PossibleValuesList=makeObjectsFromValues(field.DbColumnName,field.Field.PossibleValues);fieldIndex++;}
$scope.datasheetColDefs.push(makeFieldColDef(field,$scope));$scope.dataFields.push(field);}});if($scope.DatastoreTablePrefix==="CreelSurvey")
{console.log("Dataset is Creelsurvey, adding Fisherman field...");$scope.detailFields.push($scope.datasheetColDefs2);$scope.datasheetColDefs.push($scope.datasheetColDefs2[0]);}
else if($scope.DatastoreTablePrefix==="AdultWeir")
{$scope.showActivitiesWhereAll=true;$scope.showActivitiesWhereRunYear=true;$scope.runYearsList=SubprojectService.getRunYears($scope.dataset.Id);}
else if($scope.DatastoreTablePrefix==="ScrewTrap")
{$scope.showActivitiesWhereAll=false;$scope.showActivitiesWhereMigrationYear=true;$scope.Criteria.paramActivityDateType="singleYear";$scope.migrationYearsList=SubprojectService.getMigrationYears($scope.dataset.Id);}
else if(($scope.DatastoreTablePrefix==="Metrics")||($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift"))
{$scope.showActivitiesWhereAll=false;$scope.showActivitiesWhereReportYear=true;$scope.Criteria.paramActivityDateType="singleYear";$scope.reportYearsList=SubprojectService.getReportYears($scope.dataset.Id);$scope.datasheetColDefs=[];$scope.datasheetColDefs=[{field:'LocationId',displayName:'Location',cellFilter:'locationNameFilter'},{field:'ActivityDate',displayName:'Activity Date',cellFilter:'date: \'MM/dd/yyyy\'',},];}
else if($scope.DatastoreTablePrefix==="StreamNet_NOSA")
{$scope.showActivitiesWhereAll=false;$scope.showActivitiesWhereSpawningYear=true;$scope.Criteria.paramActivityDateType="singleYear";$scope.spawningYearsList=SubprojectService.getSpawningYears($scope.dataset.Id);$scope.datasheetColDefs=[];$scope.datasheetColDefs=[{field:'ActivityDate',displayName:'Activity Date',cellFilter:'date: \'MM/dd/yyyy\'',}];}
else if($scope.DatastoreTablePrefix==="StreamNet_RperS")
{$scope.showActivitiesWhereAll=false;$scope.showActivitiesWhereBroodYear=true;$scope.Criteria.paramActivityDateType="singleYear";$scope.broodYearsList=SubprojectService.getBroodYears($scope.dataset.Id);$scope.datasheetColDefs=[];$scope.datasheetColDefs=[{field:'ActivityDate',displayName:'Activity Date',cellFilter:'date: \'MM/dd/yyyy\'',}];}
else if($scope.DatastoreTablePrefix==="StreamNet_SAR")
{$scope.showActivitiesWhereAll=false;$scope.showActivitiesWhereOutmigrationYear=true;$scope.Criteria.paramActivityDateType="singleYear";$scope.outmigrationYearsList=SubprojectService.getOutmigrationYears($scope.dataset.Id);$scope.datasheetColDefs=[];$scope.datasheetColDefs=[{field:'ActivityDate',displayName:'Activity Date',cellFilter:'date: \'MM/dd/yyyy\'',}];}
else if($scope.DatastoreTablePrefix==="WaterTemp")
{$scope.showActivitiesWhereAll=true;}
angular.forEach($scope.dataset.Fields.sort(orderByIndex),function(field){if(field.FieldRoleId==FIELD_ROLE_DETAIL)
{parseField(field,$scope);$scope.detailFields.push(field);if(field.Field.PossibleValues)
{field.PossibleValuesList=makeObjectsFromValues(field.DbColumnName,field.Field.PossibleValues);fieldIndex++;}
$scope.datasheetColDefs.push(makeFieldColDef(field,$scope));$scope.dataFields.push(field);}});$scope.dataFields=$scope.dataFields.sort(orderByAlpha);$scope.recalculateGridWidth($scope.datasheetColDefs.length);$scope.RowQAStatuses=$rootScope.RowQAStatuses=undefined;if(($scope.DatastoreTablePrefix==="WaterTemp")&&($scope.dataset.RowQAStatuses.length>1))
{$scope.RowQAStatuses=$rootScope.RowQAStatuses=makeObjects($scope.dataset.RowQAStatuses,'Id','Name');$scope.datasheetColDefs[3].visible=true;}
console.log("$scope at end of watch dataset.Id is next...");});$scope.$watch('project.Name',function(){if($scope.project.Name){console.log("Inside DataQueryCtrl, project.Name watcher...");console.log("scope in watch project.Name is next...");console.log("$scope.subprojectType = "+$scope.subprojectType);SubprojectService.setServiceSubprojectType($scope.subprojectType);if($scope.DatastoreTablePrefix==="CreelSurvey")
{console.log("Loading Harvest...");$scope.ShowFishermen=true;$scope.theFishermen=ProjectService.getProjectFishermen($scope.project.Id);}
console.log("ProjectLocations is next...");console.dir($scope.project.Locations);if($scope.project.Locations)
{for(var i=0;i<$scope.project.Locations.length;i++)
{if(($scope.DatastoreTablePrefix==="Metrics")||($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift"))
{if(($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType)||($scope.project.Locations[i].LocationTypeId===LOCATION_TYPE_Hab))
{$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);}}
else
{if($scope.project.Locations[i].LocationTypeId===$scope.datasetLocationType)
{$scope.datasetLocations.push([$scope.project.Locations[i].Id,$scope.project.Locations[i].Label]);}}}
console.log("datasetLocations is next...");console.dir($scope.datasetLocations);}
var index=0;angular.forEach($scope.datasetLocations,function(dsLoc)
{if(dsLoc.length===0)
{$scope.datasetLocations.splice(index,1);}
index++;});console.log("datasetLocations after splice is next...");console.dir($scope.datasetLocations);$scope.datasetLocations.sort(order2dArrayByAlpha);console.log("datasetLocations sorted...");console.dir($scope.datasetLocations);for(var i=0;i<$scope.datasetLocations.length;i++)
{$scope.sortedLocations.push({Id:$scope.datasetLocations[i][0],Label:$scope.datasetLocations[i][1]});}
$scope.datasetLocations=[[]];$scope.locationOptions=$rootScope.locationOptions=makeObjects($scope.sortedLocations,'Id','Label');$scope.locationOptions["all"]="- All -";$scope.Criteria.LocationIds=["all"];console.log("locationOptions is next...");console.dir($scope.locationOptions);if(array_count($scope.locationOptions)===2)
{var count=0;angular.forEach(Object.keys($scope.locationOptions),function(key){console.log("key = "+key);if((count=1)&&(key!=="undefined"))
{$scope.row['locationId']=key;console.log("row is next...");console.dir($scope.row['locationId']);}
count++;});}}});$scope.$watch('migrationYearsList.length',function(){if($scope.migrationYearsList.length===0)
{console.log("$scope.migrationYearsList.length is 0");return;}
console.log("Inside watch migrationYearsList.length...");$scope.MigrationYearOptions=[];$scope.RowMigrationYears=[];angular.forEach($scope.migrationYearsList,function(yearRec){$scope.RowMigrationYears.push({Id:yearRec["MigrationYear"],Year:yearRec["MigrationYear"]});});console.log("$scope.RowMigrationYears is next...");console.dir($scope.RowMigrationYears);$scope.MigrationYearOptions=makeObjects($scope.RowMigrationYears,'Id','Year');console.log("$scope.MigrationYearOptions is next...");console.dir($scope.MigrationYearOptions);});$scope.$watch('runYearsList.length',function(){if($scope.runYearsList.length===0)
{console.log("$scope.runYearsList.length is 0");return;}
console.log("Inside watch runYearsList.length...");$scope.RunYearOptions=[];$scope.RowRunYears=[];angular.forEach($scope.runYearsList,function(yearRec){$scope.RowRunYears.push({Id:yearRec["RunYear"],Year:yearRec["RunYear"]});});if($scope.RowRunYears.length>0)
{$scope.RowRunYears.push({Id:["0"],Year:[null]});}
console.log("$scope.RowRunYears is next...");console.dir($scope.RowRunYears);$scope.RunYearOptions=makeObjects($scope.RowRunYears,'Id','Year');console.log("$scope.RunYearOptions is next...");console.dir($scope.RunYearOptions);});$scope.$watch('reportYearsList.length',function(){if($scope.reportYearsList.length===0)
{console.log("$scope.reportYearsList.length is 0");return;}
console.log("Inside watch reportYearsList.length...");console.log("$scope.reportYearsList is next...");console.dir($scope.reportYearsList);$scope.ReportYearOptions=[];$scope.RowReportYears=[];angular.forEach($scope.reportYearsList,function(yearRec){$scope.RowReportYears.push({Id:yearRec["YearReported"],Year:yearRec["YearReported"]});});console.log("$scope.RowReportYears is next...");console.dir($scope.RowReportYears);$scope.ReportYearOptions=makeObjects($scope.RowReportYears,'Id','Year');console.log("$scope.ReportYearOptions is next...");console.dir($scope.ReportYearOptions);});$scope.$watch('spawningYearsList.length',function(){if($scope.spawningYearsList.length===0)
{console.log("$scope.spawningYearsList.length is 0");return;}
console.log("Inside watch spawningYearsList.length...");console.log("$scope.spawningYearsList is next...");console.dir($scope.spawningYearsList);$scope.SpawningYearOptions=[];$scope.RowSpawningYears=[];angular.forEach($scope.spawningYearsList,function(yearRec){$scope.RowSpawningYears.push({Id:yearRec["SpawningYear"],Year:yearRec["SpawningYear"]});});console.log("$scope.RowSpawningYears is next...");console.dir($scope.RowSpawningYears);$scope.SpawningYearOptions=makeObjects($scope.RowSpawningYears,'Id','Year');console.log("$scope.SpawningYearOptions is next...");console.dir($scope.SpawningYearOptions);});$scope.$watch('broodYearsList.length',function(){if($scope.broodYearsList.length===0)
{console.log("$scope.broodYearsList.length is 0");return;}
console.log("Inside watch broodYearsList.length...");console.log("$scope.broodYearsList is next...");console.dir($scope.broodYearsList);$scope.BroodYearOptions=[];$scope.RowBroodYears=[];angular.forEach($scope.broodYearsList,function(yearRec){$scope.RowBroodYears.push({Id:yearRec["BroodYear"],Year:yearRec["BroodYear"]});});console.log("$scope.RowBroodYears is next...");console.dir($scope.RowBroodYears);$scope.BroodYearOptions=makeObjects($scope.RowBroodYears,'Id','Year');console.log("$scope.BroodYearOptions is next...");console.dir($scope.BroodYearOptions);});$scope.$watch('outmigrationYearsList.length',function(){if($scope.outmigrationYearsList.length===0)
{console.log("$scope.outmigrationYearsList.length is 0");return;}
console.log("Inside watch outmigrationYearsList.length...");console.log("$scope.outmigrationYearsList is next...");console.dir($scope.outmigrationYearsList);$scope.OutmigrationYearOptions=[];$scope.RowOutmigrationYears=[];angular.forEach($scope.outmigrationYearsList,function(yearRec){$scope.RowOutmigrationYears.push({Id:yearRec["OutmigrationYear"],Year:yearRec["OutmigrationYear"]});});console.log("$scope.RowOutmigrationYears is next...");console.dir($scope.RowOutmigrationYears);$scope.OutmigrationYearOptions=makeObjects($scope.RowOutmigrationYears,'Id','Year');console.log("$scope.OutmigrationYearOptions is next...");console.dir($scope.OutmigrationYearOptions);});$scope.removeCriteria=function(idx){$scope.criteriaList.splice(idx,1);if($scope.AutoExecuteQuery)
$scope.executeQuery();};$scope.clearValue=function()
{$scope.Criteria.Value=null;};$scope.addCriteria=function(){$scope.criteriaList.push({DbColumnName:$scope.Criteria.ParamFieldSelect[0].DbColumnName,Id:$scope.Criteria.ParamFieldSelect[0].Id,Value:$scope.Criteria.Value,});$scope.Criteria.Value=null;if($scope.AutoExecuteQuery)
$scope.executeQuery();};$scope.buildQuery=function(){console.log("Inside DataQueryCtrl.buildQuery...");console.log("$scope.Criteria.LocationsIds is next...");console.dir($scope.Criteria.LocationsIds);console.log("x "+angular.toJson($scope.Criteria.LocationIds).toString());var query=null;query={criteria:{DatasetId:$scope.dataset.Id,QAStatusId:$scope.Criteria.ParamQAStatusId,RowQAStatusId:$scope.Criteria.ParamRowQAStatusId,Locations:angular.toJson($scope.Criteria.LocationIds).toString(),FromDate:$scope.Criteria.BetweenFromActivityDate,ToDate:$scope.Criteria.BetweenToActivityDate,DateSearchType:$scope.Criteria.paramActivityDateType,Fields:$scope.criteriaList,TablePrefix:$scope.DatastoreTablePrefix,},loading:true,};if($scope.DatastoreTablePrefix==="AdultWeir")
{if(($scope.Criteria.paramActivityWhereRunYear)&&($scope.Criteria.paramActivityWhereRunYear>0))
{query.criteria.DateSearchType=$scope.Criteria.paramActivityDateType="singleYear";query.criteria.RunYear=$scope.Criteria.paramActivityWhereRunYear;}
else
query.criteria.DateSearchType=$scope.Criteria.paramActivityDateType;}
else if($scope.DatastoreTablePrefix==="ScrewTrap")
{query.criteria.MigrationYear=$scope.Criteria.paramActivityWhereMigrationYear;}
else if($scope.DatastoreTablePrefix==="Metrics")
{query.criteria.ReportYear=$scope.Criteria.paramActivityWhereReportYear;}
else if(($scope.DatastoreTablePrefix==="Benthic")||($scope.DatastoreTablePrefix==="Drift"))
{query.criteria.SampleYear=$scope.Criteria.paramActivityWhereSampleYear;}
else if($scope.DatastoreTablePrefix==="StreamNet_NOSA")
{query.criteria.SpawningYear=$scope.Criteria.paramActivityWhereSpawningYear;}
else if($scope.DatastoreTablePrefix==="StreamNet_RperS")
{query.criteria.BroodYear=$scope.Criteria.paramActivityWhereBroodYear;}
else if($scope.DatastoreTablePrefix==="StreamNet_SAR")
{query.criteria.OutmigrationYear=$scope.Criteria.paramActivityWhereOutmigrationYear;}
console.log("query in buildQuery is next...");console.dir(query);if(query.criteria.RowQAStatusId)
query.criteria.RowQAStatusId=angular.toJson(query.criteria.RowQAStatusId).toString();console.log("query criteria before sending...");console.dir(query.criteria);return query;};$scope.executeQuery=function(){console.log("Inside DataQueryCtrl.executeQuery...");$scope.query=$scope.buildQuery();DatasetService.queryActivities($scope.query);};$scope.$watch('query.loading',function(){if(!$scope.dataset.Id)
return;console.log("Inside DataQueryCtrl.query.loading watch -- gathering graph data");$scope.dataSheetDataset=null;$scope.dataSheetDataset=$scope.query.results;$scope.query.results=null;if((typeof $scope.dataSheetDataset!=='undefined')&&($scope.dataSheetDataset!==null))
{console.log("$scope.dataSheetDataset !== 'undefined' and $scope.dataSheetDataset !== null");if($scope.DatastoreTablePrefix==="CreelSurvey")
{for(var i=0;i<$scope.dataSheetDataset.length;i++)
{var strTimeStart=$scope.dataSheetDataset[i].TimeStart;var strTimeEnd=$scope.dataSheetDataset[i].TimeEnd;var intTLoc=-1;if((typeof strTimeStart!=='undefined')&&(strTimeStart!==null))
{intTLoc=strTimeStart.indexOf("T");strTimeStart=strTimeStart.substr(intTLoc+1,5);$scope.dataSheetDataset[i].TimeStart=strTimeStart;if((typeof strTimeEnd!=='undefined')&&(strTimeEnd!==null))
{strTimeEnd=strTimeEnd.substr(intTLoc+1,5);$scope.dataSheetDataset[i].TimeEnd=strTimeEnd;}}
var strInterviewTime=$scope.dataSheetDataset[i].InterviewTime;if((typeof strInterviewTime!=='undefined')&&(strInterviewTime!==null))
{intTLoc=strInterviewTime.indexOf("T");strInterviewTime=strInterviewTime.substr(intTLoc+1,5);$scope.dataSheetDataset[i].InterviewTime=strInterviewTime}}}
ChartService.buildChart($scope,$scope.dataSheetDataset,$scope.dataset.Datastore.TablePrefix,{height:360,width:800});}});$scope.openActivity=function()
{console.log("Inside $scope.openActivity...");$location.path("/dataview/"+$scope.onRow.entity.ActivityId);};$scope.openExportView=function(){var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-exportfile.html',controller:'ModalExportController',scope:$scope,});}}];define("core/datasets/components/dataset-query/dataset-query",function(){});var big_bucket_query=['$scope','$routeParams','CommonService','AdminService','DatasetService','$location','$modal','DataSheet','$rootScope',function($scope,$routeParams,CommonService,AdminService,DatasetService,$location,$modal,DataSheet,$rootScope){$scope.datastoreLocations=CommonService.getLocations($routeParams.Id);$scope.dataFields=AdminService.getFields($routeParams.Id);$scope.datastore=DatasetService.getDatastore($routeParams.Id);$scope.headerFields=[];$scope.detailFields=[];$scope.datasheetColDefs=[];$scope.query={results:[]};$scope.dataSheetDataset=[];$scope.chartData={"series":[],"data":[{"x":"Loading...","y":[0],"tooltip":""}]};$scope.gridDatasheetOptions={data:'dataSheetDataset',columnDefs:'datasheetColDefs',enableColumnResize:true,enableRowSelection:true,enableCellEdit:false,enableSorting:true,enableCellSelection:true,showFilter:false,showColumnMenu:true,multiSelect:false,};DataSheet.initScope($scope);$scope.datasheetColDefs=[{field:'LocationId',displayName:'Location',cellFilter:'locationNameFilter'},{field:'ActivityDate',displayName:'Activity Date',cellFilter:'date: \'MM/dd/yyyy\'',},{field:'ActivityQAStatusId',displayName:'QA Status',cellFilter:'QAStatusFilter'}];$scope.$watch('datastoreLocations',function(){if(!$scope.datastoreLocations)
return;$scope.locationOptions=$rootScope.locationOptions=makeObjects($scope.datastoreLocations,'Id','Label');$scope.locationOptions["all"]="- All -";$scope.Criteria.LocationIds=["all"];},true);$scope.$watch('dataFields',function(){if(!$scope.dataFields)
return;var fieldIndex=0;$scope.dataFields=$scope.dataFields.sort(orderByAlpha);console.log("ordered!");console.dir($scope.dataFields);angular.forEach($scope.dataFields,function(field){parseField(field,$scope);if(field.PossibleValues)
{field.PossibleValuesList=makeObjectsFromValues(field.DbColumnName,field.PossibleValues);fieldIndex++;}
$scope.datasheetColDefs.push(makeFieldColDef(field,$scope));});$scope.recalculateGridWidth($scope.datasheetColDefs.length);},true);$scope.criteriaList=[];$scope.queryToolVisible=true;$scope.Criteria={};$scope.Criteria.paramActivityDateType="all";$scope.QAStatusOptions={};$scope.RowQAStatuses={};$scope.QAStatusOptions["all"]="- All -";$scope.RowQAStatusOptions["all"]="- All -";$scope.Criteria.ParamQAStatusId="all";$scope.Criteria.ParamRowQAStatusId="all";$scope.RowQAStatuses["all"]="- All -";$scope.AutoExecuteQuery=true;$scope.removeCriteria=function(idx){$scope.criteriaList.splice(idx,1);if($scope.AutoExecuteQuery)
$scope.executeQuery();};$scope.addCriteria=function(){$scope.criteriaList.push({DbColumnName:$scope.Criteria.ParamFieldSelect[0].DbColumnName,Id:$scope.Criteria.ParamFieldSelect[0].Id,Value:$scope.Criteria.Value,});$scope.Criteria.Value=null;if($scope.AutoExecuteQuery)
$scope.executeQuery();};$scope.buildQuery=function(){console.log("Inside DatastoreQueryCtrl.buildQuery...");var query={criteria:{DatastoreId:$routeParams.Id,QAStatusId:$scope.Criteria.ParamQAStatusId,Locations:angular.toJson($scope.Criteria.LocationIds).toString(),FromDate:$scope.Criteria.BetweenFromActivityDate,ToDate:$scope.Criteria.BetweenToActivityDate,DateSearchType:$scope.Criteria.paramActivityDateType,Fields:$scope.criteriaList,},loading:true,};console.log("query is next...");console.dir(query);return query;};$scope.executeQuery=function(){console.log("Inside DatastoreQueryCtrl.executeQuery...");$scope.query=$scope.buildQuery();console.log("$scope.query is next...");console.dir($scope.query);DatasetService.queryActivities($scope.query);};$scope.$watch('query.loading',function(){console.log("--- gathering graph data");$scope.chartData=getAdultWeirChartData($scope.query.results);$scope.dataSheetDataset=$scope.query.results;});}];define("core/datasets/components/dataset-query/big-bucket-query",function(){});datasets_module.factory('DatasetFiles',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/file/getdatasetfiles',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);datasets_module.factory('Activities',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/activity/getdatasetactivities',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);datasets_module.factory('ActivitiesForView',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/activity/getdatasetactivitiesview',{},{query:{method:'GET',params:{id:'datasetId'},isArray:true}});}]);datasets_module.factory('Dataset',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/dataset/getdataset',{},{query:{method:'GET',params:{id:'datasetId'},isArray:false}});}]);datasets_module.factory('Datasets',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/dataset/getdatasets',{},{query:{method:'GET',params:{},isArray:true}});}]);datasets_module.factory('Data',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/activity/getdatasetactivitydata',{},{query:{method:'GET',params:{id:'activityId'},isArray:false}});}]);datasets_module.factory('SaveActivitiesAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/activity/savedatasetactivities');}]);datasets_module.factory('UpdateActivitiesAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/activity/updatedatasetactivities');}]);datasets_module.factory('QueryActivitiesAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/query/querydatasetactivities',{},{save:{method:'POST',isArray:true}});}]);datasets_module.factory('ExportActivitiesAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/export/exportdatasetactivities',{},{save:{method:'POST',isArray:false}});}]);datasets_module.factory('DeleteActivitiesAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/activity/deletedatasetactivities');}]);datasets_module.factory('SetQaStatusAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/activity/setqastatus');}]);datasets_module.factory('GetDatastore',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/getdatastore',{},{query:{method:'GET',params:{},isArray:false}});}]);datasets_module.factory('GetAllDatastores',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/getdatastores');}]);datasets_module.factory('GetDatastoreDatasets',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/getdatastoredatasets');}]);datasets_module.factory('GetHeadersDataForDataset',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/dataset/getheadersdatafordataset');}]);datasets_module.factory('DeleteDatasetFile',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/file/deletedatasetfile');}]);datasets_module.factory('GetRelationData',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/dataset/getrelationdata',{},{save:{method:'POST',isArray:true}});}])
datasets_module.service('DatasetService',['$q','DatasetFiles','Activities','ActivitiesForView','Dataset','Datasets','Data','SaveActivitiesAction','UpdateActivitiesAction','QueryActivitiesAction','ExportActivitiesAction','DeleteActivitiesAction','SetQaStatusAction','GetDatastore','GetAllDatastores','GetDatastoreDatasets','GetHeadersDataForDataset','DeleteDatasetFile','GetRelationData',function($q,DatasetFiles,Activities,ActivitiesForView,Dataset,Datasets,Data,SaveActivitiesAction,UpdateActivitiesAction,QueryActivitiesAction,ExportActivitiesAction,DeleteActivitiesAction,SetQaStatusAction,GetDatastore,GetAllDatastores,GetDatastoreDatasets,GetHeadersDataForDataset,DeleteDatasetFile,GetRelationData){var service={datastoreId:null,dataset:null,clearDataset:function(){service.dataset=null;},getDatastore:function(id){return GetDatastore.query({id:id});},getDatastores:function(){return GetAllDatastores.query();},getDatastoreDatasets:function(id){return GetDatastoreDatasets.query({id:id});},getDataset:function(datasetId){if(service.dataset&&service.dataset.Id==datasetId)
return service.dataset;console.log("Inside services.js, getDataset...");service.dataset=Dataset.query({id:datasetId});service.dataset.$promise.then(function(){service.configureDataset(service.dataset);});return service.dataset;},getDatasets:function(){return Datasets.query();},configureDataset:function(dataset,scope){console.log("configuring dataset.Name = "+dataset.Name);dataset.activitiesRoute="activities";console.log("dataset.Config is next...");console.dir(dataset.Config);if((typeof dataset.Config!=='undefined')&&(dataset.Config!==null)&&(dataset.Config!=="NULL")){dataset.Config=angular.fromJson(dataset.Config);if(dataset.Config.ActivitiesPage&&dataset.Config.ActivitiesPage.Route)
dataset.activitiesRoute=dataset.Config.ActivitiesPage.Route;if(typeof scope=='undefined'){console.log("SKIPPING dataset config - no scope is set!");}
else{if(dataset.Config.RestrictRoles){var authorized=false;for(var i=dataset.Config.RestrictRoles.length-1;i>=0;i--){if(angular.rootScope.Profile.hasRole(dataset.Config.RestrictRoles[i]))
authorized=true;};if(!authorized){scope.AuthorizedToViewProject=false;}}}}},getHeadersDataForDataset:function(datasetId){return GetHeadersDataForDataset.query({id:datasetId});},getActivityData:function(id){return Data.query({id:id});},getActivities:function(id){return Activities.query({id:id});},getActivitiesForView:function(id){return ActivitiesForView.query({id:id});},getDatasetFiles:function(datasetId){console.log("Inside getDatasetFiles...");console.log("datasetId = "+datasetId);return DatasetFiles.query({id:datasetId});},deleteDatasetFile:function(projectId,datasetId,file){console.log("Inside deleteDatasetFile");console.log("ProjectId = "+projectId+", DatasetId = "+datasetId+", attempting to delete file...");console.dir(file);return DeleteDatasetFile.save({ProjectId:projectId,DatasetId:datasetId,File:file});},getPossibleRowQAStatuses:function(id){return[{id:1,name:"ok",},{id:2,name:"error",}];},queryActivities:function(query){QueryActivitiesAction.save(query.criteria,function(data){query.results=data;query.errors=undefined;console.log("success!");query.loading=false;},function(data){query.results=undefined;query.errors=["There was a problem running your querying.  Please try again or contact support."];console.log("Failure!");console.dir(data);query.loading=false;});},exportActivities:function(query){ExportActivitiesAction.save(query.criteria,function(data){console.log("success!");query.loading=false;query.exportedFile=data;console.dir(data);},function(data){console.log("Failure!");query.failed=true;query.loading=false;});},updateActivities:function(userId,datasetId,activities,datastoreTablePrefix){activities.saving=true;activities.UserId=userId;activities.DatasetId=datasetId;activities.DatastoreTablePrefix=datastoreTablePrefix;UpdateActivitiesAction.save(activities,function(data){activities.success="Update successful.";activities.errors=false;console.log("Success!");activities.saving=false;},function(data){activities.success=false;activities.errors={saveError:"There was a problem saving your data.  Please try again or contact support."};console.log("Failure!");console.dir(data);activities.saving=false;});},saveActivities:function(userId,datasetId,activities){console.log("Inside saveActivities...starting save...");console.log("activities is next...");console.dir(activities);var theDate=new Date();console.log(formatDate(theDate));activities.saving=true;activities.UserId=userId;activities.DatasetId=datasetId;return SaveActivitiesAction.save(activities,function(data){activities.errors=false;console.log("Set activities.errors...");activities.new_records=data;console.log("Success!");if(typeof activities.addNewSection==='undefined'){console.log("Save and close save successful..., Add Section not clicked.");activities.success="Save successful.";}
else if(activities.addNewSection===false){console.log("Save and close save successful..., Add Section previously clicked.");activities.success="Save successful.";}
else if(activities.addNewSection===true){console.log("Add Section save successful..., Add Section only clicked.");activities.addNewSection=false;}
activities.saving=false;},function(data){activities.success=false;var theErrorText="";if(typeof data.message!=='undefined')
theErrorText=data.message;else if(typeof data.data!=='undefined'){if(typeof data.data.ExceptionMessage!=='undefined'){theErrorText=data.data.ExceptionMessage;console.log("Save error:  theErrorText = "+theErrorText);}
else{theErrorText=data.data;var titleStartLoc=theErrorText.indexOf("<title>")+7;console.log("titleStartLoc = "+titleStartLoc);var titleEndLoc=theErrorText.indexOf("</title>");console.log("titleEndLoc = "+titleEndLoc);theErrorText=theErrorText.substr(titleStartLoc,titleEndLoc-titleStartLoc);}}
var theErrorMessage="There was a problem saving your data ("+theErrorText+").  Please try again or contact support.";activities.errors={saveError:theErrorMessage};console.log("Failure!");console.log(theErrorText);console.log(theErrorMessage);console.dir(data);activities.saving=false;});},deleteActivities:function(userId,datasetId,grid,saveResults){if(!grid.selectedItems){saveResults.success=true;saveResults.message="Nothing to do.";return;}
var payload={UserId:userId,DatasetId:datasetId,Activities:grid.selectedItems,}
DeleteActivitiesAction.save(payload,function(data){saveResults.success=true;saveResults.message="Activities Deleted.";},function(data){saveResults.failure=true;saveResults.message="There was a problem deleting the records.  Please try again or contact support.";});},updateQaStatus:function(ActivityId,QAStatusId,Comments,saveResults){saveResults.saving=true;var payload={QAStatusId:QAStatusId,ActivityId:ActivityId,Comments:Comments,};console.dir(payload);SetQaStatusAction.save(payload,function(data){saveResults.saving=false;saveResults.success=true;},function(data){saveResults.saving=false;saveResults.failure=true;});},getRelationData:function(relationFieldId,activityId,rowId){return GetRelationData.save({FieldId:relationFieldId,ActivityId:activityId,ParentRowId:rowId});},};return service;}]);define("core/datasets/services/dataset-service",function(){});datasets_module.service('ActivityParser',['Logger',function(Logger){var service={parseMetricsActivity:function(heading,fields,qaStatuses){console.log("Inside service, ActivityParser, parseMetricsActivity...");console.log("heading is next...");console.dir(heading);console.log("qaStatuses is next");console.dir(qaStatuses);var activities={activities:{},errors:false};var key=service.makeKey(heading,null);if(key){console.log("trying a single with no rows!");service.addActivity(activities,key,heading,fields,qaStatuses);}
else{service.addError(activities,0,"Both a Location and ActivityDate are required to save a new Activity.");}
return activities;},parseSingleActivity:function(heading,data,fields,qaStatuses){console.log("Inside service, ActivityParser, parseSingleActivity...");console.log("heading is next...");console.dir(heading);console.log("qaStatuses is next");console.dir(qaStatuses);var activities={activities:{},errors:false};var tmpdata=data.slice(0);var key=service.makeKey(heading,null);if(key){if(tmpdata.length>0){angular.forEach(tmpdata,function(data_row,index){service.addActivity(activities,key,angular.extend(data_row,heading),fields,qaStatuses);});}
else{console.log("trying a single with no rows!");service.addActivity(activities,key,heading,fields,qaStatuses);}}
else{service.addError(activities,0,"Both a Location and ActivityDate are required to save a new Activity.");}
return activities;},parseActivitySheet:function(data,fields,datastoreTablePrefix,callingPage,qaStatuses){console.log("Inside services, parseActivitySheet...called by "+callingPage);console.log("data is next...");console.dir(data);console.log("qaStatuses is next...");console.dir(qaStatuses);var activities={activities:{},errors:false};var tmpdata=data.slice(0);var activityDateToday=new Date();var holdRow=tmpdata[0];var rowCount=0;angular.forEach(tmpdata,function(row,index){if((typeof datastoreTablePrefix!=='undefined')&&(datastoreTablePrefix==="WaterTemp")&&(typeof callingPage!=='undefined')&&(callingPage==="DataEntrySheet")){console.log("holdRow is next...");console.dir(holdRow);console.log("holdRow.FieldActivityType.toString() = "+holdRow.FieldActivityType.toString());console.log("row.FieldActivityType.toString() = "+row.FieldActivityType.toString());console.log("holdRow.ReadingDateTime.toString() = "+holdRow.ReadingDateTime.toString());console.log("row.ReadingDateTime.toString() = "+row.ReadingDateTime.toString());if(rowCount>0){}
if(row.FieldActivityType.toString().indexOf("Data File Upload")===-1){console.log("We are working with something other than Data File Upload.");if(rowCount>0){if((row.FieldActivityType.toString().indexOf(holdRow.FieldActivityType.toString())===-1)||(row.ReadingDateTime.toString().indexOf(holdRow.ReadingDateTime.toString())===-1)){console.log("Something changed...");activityDateToday=new Date();}}}
var key=service.makeKey(row,activityDateToday);console.log("row...index");console.dir(row);console.dir(index);console.log("key...");console.dir(key);if(key){service.addActivity(activities,key,row,fields,qaStatuses);}
else
service.addError(activities,index,"Please check for errors, something required is missing to save a new Activity.");rowCount++;holdRow=row;console.log("holdRow.ReadingDateTime = "+holdRow.ReadingDateTime);var utcFormatSeparatorLoc=holdRow.ReadingDateTime.toString().indexOf("-");console.log("utcFormatSeparatorLoc = "+utcFormatSeparatorLoc);if(utcFormatSeparatorLoc>-1){console.log("Reformatting holdRow.ReadingDateTime to friendly date format...");holdRow.ReadingDateTime=formatDateFromUtcToFriendly(holdRow.ReadingDateTime);console.log("Reformatted holdRow.ReadingDateTime = "+holdRow.ReadingDateTime);}}
else{var key=service.makeKey(row,activityDateToday);if(key){service.addActivity(activities,key,row,fields,qaStatuses);}
else
service.addError(activities,index,"Please check for errors, something required is missing to save a new Activity.");}});return activities;},addError:function(activities,index,message){console.log("Inside services.js, parseActivitySheet, addError...");if(!activities.errors){activities.errors={};}
activities.errors.saveError=message;},makeKey:function(row,activityDateToday){if(activityDateToday==null)
activityDateToday=new Date();if(!row.activityDate)
row.activityDate=toExactISOString(activityDateToday);if(row.locationId&&row.activityDate)
return location+'_'+row.activityDate;return undefined;},addActivity:function(activities,key,row,fields,qaStatuses){if(row.Timezone)
var currentTimezone=row.Timezone;if(!activities.activities[key]){var a_date=row.activityDate;if(row.activityDate instanceof Date){a_date=toExactISOString(row.activityDate);console.log(a_date);}
else{a_date=row.activityDate;}
activities.activities[key]={LocationId:row.locationId,ActivityDate:a_date,InstrumentId:row.InstrumentId,Header:{},Details:[],};if(row.AccuracyCheckId)
activities.activities[key].AccuracyCheckId=row.AccuracyCheckId;if(row.PostAccuracyCheckId)
activities.activities[key].PostAccuracyCheckId=row.PostAccuracyCheckId;if(row.Timezone){activities.activities[key].Timezone=angular.toJson(row.Timezone).toString();row.Timezone=undefined;}
if(!row.ActivityQAStatus){row.ActivityQAStatus={QAStatusId:row.QAStatusId,Comments:''};row.QAStatusId=row.RowQAStatusId;}
else{}
if((typeof qaStatuses!=='undefined')&&(qaStatuses!==null)){for(var i=0;i<qaStatuses.length;i++){if(row.ActivityQAStatus.QAStatusId===qaStatuses[i].Id){row.QAStatusName=qaStatuses[i].Name;row.QAStatusDescription=qaStatuses[i].Description;}
else{}}}
else{throw qaStatusError("Services-addActivity, check1 has a problem with QAStatus...");}
activities.activities[key].ActivityQAStatus={QAStatusID:row.ActivityQAStatus.QAStatusId,Comments:row.ActivityQAStatus.Comments,Name:row.QAStatusName,Description:row.QAStatusDescription};if(row.ActivityId)
activities['ActivityId']=row.ActivityId;angular.forEach(fields.header,function(field){if(field.ControlType=="multiselect"&&row[field.DbColumnName]){row[field.DbColumnName]=angular.toJson(row[field.DbColumnName]).toString();}
activities.activities[key].Header[field.DbColumnName]=row[field.DbColumnName];});}
if(!row.ActivityQAStatus){row.ActivityQAStatus={QAStatusId:row.QAStatusId,Comments:''};row.QAStatusId=row.RowQAStatusId;for(var i=0;i<qaStatuses.length;i++){if(row.ActivityQAStatus.QAStatusId===qaStatuses[i].Id){row.QAStatusName=qaStatuses[i].Name;row.QAStatusDescription=qaStatuses[i].Description;}
else{}}}
else{}
if((typeof qaStatuses!=='undefined')&&(qaStatuses!==null)){for(var i=0;i<qaStatuses.length;i++){if(row.ActivityQAStatus.QAStatusId===qaStatuses[i].Id){row.QAStatusName=qaStatuses[i].Name;row.QAStatusDescription=qaStatuses[i].Description;}
else{}}}
else{throw qaStatusError("Services-addActivity, check2 has a problem with QAStatus...");}
var rowHasValue=prepFieldsToSave(row,fields.detail,currentTimezone);angular.forEach(Object.keys(fields.relation),function(relation_field){var rel_grid=row[relation_field];angular.forEach(rel_grid,function(grid_row){var gridHasValue=prepFieldsToSave(grid_row,fields.relation[relation_field],currentTimezone);rowHasValue=(rowHasValue)?rowHasValue:gridHasValue;});});if(rowHasValue)
activities.activities[key].Details.push(row);},};return service;}]);function prepFieldsToSave(row,fields,currentTimezone){var rowHasValue=false;angular.forEach(fields,function(field){if(row[field.DbColumnName]){if(field.ControlType=="multiselect")
row[field.DbColumnName]=angular.toJson(row[field.DbColumnName]).toString();if(field.ControlType=="datetime"&&row[field.DbColumnName]){if(row[field.DbColumnName]instanceof Date){row[field.DbColumnName]=toExactISOString(row[field.DbColumnName]);}
else{try{row[field.DbColumnName]=toExactISOString(new Date(row[field.DbColumnName]));}catch(e){console.log("Error converting date: "+row[field.DbColumnName]);}}}
rowHasValue=true;}});return rowHasValue;};define("core/datasets/services/activity-parser",function(){});datasets_module.service('ConvertStatus',['Logger','$window','$route',function(Logger,$window,$route,$q){var service={convertStatus:function(aStatus){var strStatus=null;if(aStatus===0){strStatus="Active";}
else{strStatus="Inactive";}
return strStatus;},convertOkToCall:function(aStatus){var strStatus=null;if(aStatus===0){strStatus="Yes";}
else{strStatus="No";}
return strStatus;},}
return service;}]);define("core/datasets/services/convert-status",function(){});datasets_module.service('DataSheet',['Logger','$window','$route',function(Logger,$window,$route,$q){var LocationCellEditTemplate='<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'locationId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in locationOptions"/>';var QACellEditTemplate='<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'QAStatusId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in QAStatusOptions"/>';var InstrumentCellEditTemplate='<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'InstrumentId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in instrumentOptions"/>';var FishermanCellEditTemplate='<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'FishermanId\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in fishermenOptions"/>';var TimezoneCellEditTemplate='<select ng-class="\'colt\' + col.index" ng-blur="updateCell(row,\'timezone\')" ng-input="COL_FIELD" ng-model="COL_FIELD" ng-options="id as name for (id, name) in timezoneOptions"/>';var service={initScope:function(scope){scope.CellOptions={};scope.FieldLookup={};scope.onRow=undefined;scope.onField=undefined;scope.autoUpdateUndone=[];scope.deletedRows=[];scope.updatedRows=[];scope.autoUpdateFeatureDisabled=true;scope.headerFieldErrors={};scope.dataChanged=false;scope.gridWidth={width:'2000'};scope.undoAutoUpdate=function(){service.undoAutoUpdate(scope)};scope.updateCell=function(row,field){service.updateCell(row,field,scope)};scope.updateHeaderField=function(row,field){service.updateHeaderField(row,field,scope)};scope.validateGrid=function(){service.validateGrid(scope)};scope.validate=function(row){service.validate(scope,row)};scope.removeRow=function(){service.removeOnRow(scope)};scope.undoRemoveRow=function(){service.undoRemoveOnRow(scope)};scope.getFieldStats=function(){return service.getFieldStats(scope)};scope.onNumberField=function(){if(!scope.onField)
return false;return(scope.onField.ControlType=="number");};scope.recalculateGridWidth=function(length){console.log("recalculateGridWidth with length: "+length);var minwidth=(980<$window.innerWidth)?$window.innerWidth-50:980;var width=150*length;if(width<minwidth)width=minwidth;scope.gridWidth={width:width};setTimeout(function(){scope.gridDatasheetOptions.$gridServices.DomUtilityService.RebuildGrid(scope.gridDatasheetOptions.$gridScope,scope.gridDatasheetOptions.ngGrid);console.log("Width now: "+width);},400);};scope.selectCell=function(field){scope.onField=scope.FieldLookup[field];};if(scope.gridDatasheetOptions.enableCellEdit){scope.gridDatasheetOptions.rowTemplate='<div ng-click="selectCell(col.field)" ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" ng-class="{\'has-validation-error\': !row.getProperty(\'isValid\')}" class="{{col.colIndex()}} ngCell {{col.cellClass}}"><div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div><div ng-cell></div></div>';}
else{scope.gridDatasheetOptions.rowTemplate='<div ng-click="selectCell(col.field)" ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" class="{{col.colIndex()}} ngCell {{col.cellClass}}"><div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div><div ng-cell></div></div>';}
scope.$watch('gridDatasheetOptions.$gridScope.selectionProvider.lastClickedRow',function(){scope.onRow=scope.gridDatasheetOptions.$gridScope.selectionProvider.lastClickedRow;});},getColDefs:function(DatastoreTablePrefix,theMode){console.log("Inside services, getColDefs...");console.log("theMode = "+theMode);console.log("DatastoreTablePrefix = "+DatastoreTablePrefix);if(DatastoreTablePrefix==="WaterTemp")
{if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[{field:'InstrumentId',Label:'Instrument',displayName:'Instrument',cellFilter:'instrumentFilter',editableCellTemplate:InstrumentCellEditTemplate,visible:false,Field:{Description:"Instrument the detected this value."}},];console.log("Water Temp-related form...");}
else{var coldefs=[{field:'locationId',Label:'Location',displayName:'Location',cellFilter:'locationNameFilter',editableCellTemplate:LocationCellEditTemplate,Field:{Description:"What location is this record related to?"}},{field:'InstrumentId',Label:'Instrument',displayName:'Instrument',cellFilter:'instrumentFilter',editableCellTemplate:InstrumentCellEditTemplate,visible:true,Field:{Description:"Instrument the detected this value."}},{field:'QAStatusId',Label:'QA Status',displayName:'QA Status',cellFilter:'QAStatusFilter',editableCellTemplate:QACellEditTemplate,Field:{Description:"Quality Assurance workflow status"}},{field:'Timezone',Label:'Reading Timezone',displayName:'Reading Timezone',editableCellTemplate:TimezoneCellEditTemplate,cellFilter:'timezoneFilter',Field:{Description:"The timezone the reading took place in."}}];}}
else if(DatastoreTablePrefix==="WaterQuality")
{if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[{field:'InstrumentId',Label:'Instrument',displayName:'Instrument',cellFilter:'instrumentFilter',editableCellTemplate:InstrumentCellEditTemplate,visible:false,Field:{Description:"Instrument the detected this value."}},];console.log("Water Quality-related form...");}
else{var coldefs=[{field:'locationId',Label:'Location',displayName:'Location',cellFilter:'locationNameFilter',editableCellTemplate:LocationCellEditTemplate,Field:{Description:"What location is this record related to?"}},{field:'InstrumentId',Label:'Instrument',displayName:'Instrument',cellFilter:'instrumentFilter',editableCellTemplate:InstrumentCellEditTemplate,visible:true,Field:{Description:"Instrument the detected this value."}},{field:'QAStatusId',Label:'QA Status',displayName:'QA Status',cellFilter:'QAStatusFilter',editableCellTemplate:QACellEditTemplate,Field:{Description:"Quality Assurance workflow status"}}];}}
else if(DatastoreTablePrefix==="CreelSurvey")
{if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[{field:'FishermanId',Label:'Fisherman',displayName:'Fisherman',cellFilter:'fishermanFilter',editableCellTemplate:FishermanCellEditTemplate,Field:{Description:"Fisherman that was interviewed."}}];}
else{var coldefs=[{field:'activityDate',Label:'Activity Date',displayName:'Activity Date (MM/DD/YYYY)',cellFilter:'date: \'MM/dd/yyyy\'',editableCellTemplate:'<input ng-blur="updateCell(row,\'activityDate\')" type="text" ng-pattern="'+date_pattern+'" ng-model="COL_FIELD" ng-input="COL_FIELD" />',Field:{Description:"Date of activity in format: '10/22/2014'"}},{field:'locationId',Label:'Location',displayName:'Location',cellFilter:'locationNameFilter',editableCellTemplate:LocationCellEditTemplate,Field:{Description:"What location is this record related to?"}},{field:'FishermanId',Label:'Fisherman',displayName:'Fisherman',cellFilter:'fishermanFilter',editableCellTemplate:FishermanCellEditTemplate,Field:{Description:"Fisherman that was interviewed."}}];}}
else if((DatastoreTablePrefix==="SpawningGroundSurvey")||(DatastoreTablePrefix==="SnorkelFish")||(DatastoreTablePrefix==="FishTransport")||(DatastoreTablePrefix==="Electrofishing")||(DatastoreTablePrefix==="ScrewTrap")||(DatastoreTablePrefix==="ArtificialProduction")||(DatastoreTablePrefix==="BSample")||(DatastoreTablePrefix==="JvRearing")||(DatastoreTablePrefix==="Genetic")||(DatastoreTablePrefix==="Benthic")||(DatastoreTablePrefix==="Drift")||(DatastoreTablePrefix==="AdultWeir")){if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[];}
else{var coldefs=[{field:'locationId',Label:'Location',displayName:'Location',cellFilter:'locationNameFilter',editableCellTemplate:LocationCellEditTemplate,Field:{Description:"What location is this record related to?"}},{field:'activityDate',Label:'Activity Date',displayName:'Activity Date (MM/DD/YYYY)',cellFilter:'date: \'MM/dd/yyyy\'',editableCellTemplate:'<input ng-blur="updateCell(row,\'activityDate\')" type="text" ng-pattern="'+date_pattern+'" ng-model="COL_FIELD" ng-input="COL_FIELD" />',Field:{Description:"Date of activity in format: '10/22/2014'"}},{field:'QAStatusId',Label:'QA Status',displayName:'QA Status',cellFilter:'QAStatusFilter',editableCellTemplate:QACellEditTemplate,Field:{Description:"Quality Assurance workflow status"}}];}}
else if((DatastoreTablePrefix==="StreamNet_RperS")||(DatastoreTablePrefix==="StreamNet_NOSA")||(DatastoreTablePrefix==="StreamNet_SAR")){if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[];}
else{var coldefs=[{field:'locationId',Label:'Location',displayName:'Location',cellFilter:'locationNameFilter',editableCellTemplate:LocationCellEditTemplate,Field:{Description:"What location is this record related to?"}},{field:'activityDate',Label:'Activity Date',displayName:'Activity Date (MM/DD/YYYY)',cellFilter:'date: \'MM/dd/yyyy\'',editableCellTemplate:'<input ng-blur="updateCell(row,\'activityDate\')" type="text" ng-pattern="'+date_pattern+'" ng-model="COL_FIELD" ng-input="COL_FIELD" />',Field:{Description:"Date of activity in format: '10/22/2014'"}},{field:'QAStatusId',Label:'QA Status',displayName:'QA Status',cellFilter:'QAStatusFilter',editableCellTemplate:QACellEditTemplate,Field:{Description:"Quality Assurance workflow status"}}];}}
else if(DatastoreTablePrefix==="FishScales")
{if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[];}
else{var coldefs=[{field:'QAStatusId',Label:'QA Status',displayName:'QA Status',cellFilter:'QAStatusFilter',editableCellTemplate:QACellEditTemplate,Field:{Description:"Quality Assurance workflow status"}}];}}
else if(DatastoreTablePrefix==="Metrics"){if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[];}
else{var coldefs=[{field:'QAStatusId',Label:'QA Status',displayName:'QA Status',cellFilter:'QAStatusFilter',editableCellTemplate:QACellEditTemplate,Field:{Description:"Quality Assurance workflow status"}}];}}
else if(DatastoreTablePrefix==="Appraisal")
{console.log("Configuring for Appraisal...");if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[];}
else{var coldefs=[];}}
else if(DatastoreTablePrefix==="CrppContracts")
{console.log("Configuring for CrppContracts...");if((typeof theMode!=='undefined')&&(theMode.indexOf("form")>-1)){var coldefs=[];}
else{var coldefs=[];}}
else{var coldefs=[{field:'locationId',Label:'Location',displayName:'Location',cellFilter:'locationNameFilter',editableCellTemplate:LocationCellEditTemplate,Field:{Description:"What location is this record related to?"}},{field:'activityDate',Label:'Activity Date',displayName:'Activity Date (MM/DD/YYYY)',cellFilter:'date: \'MM/dd/yyyy\'',editableCellTemplate:'<input ng-blur="updateCell(row,\'activityDate\')" type="text" ng-pattern="'+date_pattern+'" ng-model="COL_FIELD" ng-input="COL_FIELD" />',Field:{Description:"Date of activity in format: '10/22/2014'"}},{field:'QAStatusId',Label:'QA Status',displayName:'QA Status',cellFilter:'QAStatusFilter',editableCellTemplate:QACellEditTemplate,Field:{Description:"Quality Assurance workflow status"}}];}
return coldefs;},validate:function(row,scope){if(row){console.log("Inside validate...");console.log("scope.callingPage = "+scope.callingPage);var row_errors=[];angular.forEach(scope.FieldLookup,function(field,key){if(!row[key])
return;validateField(field,row,key,scope,row_errors);});if(scope.DatastoreTablePrefix==="CreelSurvey"){if((typeof row.LocationId!=='undefined')&&(row.LocationId!==null)){row_errors.push("[LocationId] The Location does not match anything in the Locations table for this dataset.");}
if((typeof row.InterviewTime==='undefined')&&(typeof row.FishermanId==='undefined'))
{console.log("No detail...");}
else if(((typeof row.InterviewTime!=='undefined')&&(row.InterviewTime!==null))&&((typeof row.FishermanId==='undefined')||(row.FishermanId===null))){row_errors.push("[Fisherman] InterviewTime is present, but the Fisherman is missing.");}
else
{var foundName=false;angular.forEach(scope.fishermenList,function(aFisherman){if((typeof row.FishermanId!=='undefined')&&(aFisherman.Id===row.FishermanId)){foundName=true;}});}}
if(row_errors.length>0){row.isValid=false;row.errors=angular.copy(row_errors);scope.gridHasErrors=true;}
else{row.isValid=true;row.errors=undefined;}}},updateHeaderField:function(row,field_name,scope){scope.dataChanged=true;if(typeof field_name==='undefined'){field_name=row;console.log("field_name updated = "+field_name);var value=scope.row[row];}
else{var value=scope.row[field_name];}
console.log("value = "+value);var field=scope.FieldLookup[field_name];var errors=[];var row=scope.row;var headers=[];validateField(field,scope.row,field_name,scope,errors);if(errors.length>0){scope.headerFieldErrors[field_name]=errors;row.isValid=false;scope.onRow.errors=errors;scope.gridHasErrors=true;}
else{delete scope.headerFieldErrors[field_name];row.isValid=true;if(typeof scope.onRow!=='undefined')
scope.onRow.errors=undefined;}
fireRules("OnChange",row,field,value,headers,errors,scope);scope.headerHasErrors=(array_count(scope.headerFieldErrors)>0);},undoAutoUpdate:function(scope){for(var i=0;i<scope.autoUpdate.updated.length;i++){var entityFieldValue=scope.gridDatasheetOptions.$gridScope.renderedRows[i].entity[scope.autoUpdate.field];scope.gridDatasheetOptions.$gridScope.renderedRows[i].entity[scope.autoUpdate.field]=scope.autoUpdate.from;}
scope.gridDatasheetOptions.$gridScope.renderedRows[scope.autoUpdate.origRowIndex].entity[scope.autoUpdate.field]=scope.autoUpdate.to;scope.autoUpdateUndone.push(scope.autoUpdate.field);scope.autoUpdate=undefined;service.validateGrid(scope);},updateCell:function(row,field_name,scope){scope.dataChanged=true;if(scope.onRow.entity){var fromValue=scope.onRow.entity[field_name];var toValue=row.entity[field_name];console.log("Changed "+field+" from: "+fromValue+" to: "+toValue);}
if(row.entity.Id){if(scope.updatedRows.indexOf(row.entity.Id)==-1){scope.updatedRows.push(row.entity.Id);}}
var value=row.entity[field_name];var field=scope.FieldLookup[field_name];row=row.entity;var headers=scope.row;console.log("headers is next...");console.dir(headers);if(typeof scope.onRow.entity.errors==='undefined')
scope.onRow.entity.errors=[];if((typeof field!=='undefined')&&(field.FieldRoleId!==null)&&(field.FieldRoleId==1)){scope.onRow.errors=[];fireRules("OnValidate",row,field,value,headers,scope.onRow.errors,scope);}
else{fireRules("OnValidate",row,field,value,headers,scope.onRow.entity.errors,scope);}
if(field&&value){fireRules("OnChange",row,field,value,headers,[],scope);}
scope.validateGrid(scope);},undoRemoveOnRow:function(scope){var entity=scope.deletedRows.pop();scope.dataSheetDataset.push(entity);scope.validateGrid(scope);},removeOnRow:function(scope){scope.dataChanged=true;scope.deletedRows.push(scope.onRow.entity);var index=scope.dataSheetDataset.indexOf(scope.onRow.entity);scope.dataSheetDataset.splice(index,1);scope.onRow=undefined;scope.validateGrid(scope);},validateGrid:function(scope){console.log("Inside validateGrid...");console.log("scope.callingPage = "+scope.callingPage);if(!scope.gridDatasheetOptions.enableCellEdit)
return;console.log(">>>>>>> validating the whole grid baby");scope.validation_error_count=0;angular.forEach(scope.dataSheetDataset,function(data_row,key){service.validate(data_row,scope);if(!data_row.isValid)
scope.validation_error_count++;});scope.gridHasErrors=(scope.validation_error_count==0)?false:true;},getFieldStats:function(scope){if(!scope.onField||scope.onField.ControlType!="number")
return"";var total=0;var num_recs=0;var max=undefined;var min=undefined;angular.forEach(scope.dataSheetDataset,function(item,key){try{var num=new Number(item[scope.onField.DbColumnName]);if(!isNaN(num))
{total+=num;if(typeof min=="undefined")
min=num;if(typeof max=="undefined")
max=num;if(num>max)
max=num;if(num<min)
min=num;num_recs++;}}
catch(e){console.log("couldn't convert this to a number: "+item[scope.onField.DbColumnName]+" on "+scope.onField.DbColumnName);}});var mean=total/num_recs;var std_total=0;angular.forEach(scope.dataSheetDataset,function(item,key){if(!isNaN(item[scope.onField.DbColumnName]))
std_total+=Math.pow((item[scope.onField.DbColumnName]-mean),2);});var std_dev=Math.sqrt(std_total/(num_recs-1));var stats="Mean: "+mean.toFixed(2);stats+=" / Max: "+max;stats+=" / Min: "+min;stats+=" / Std Dev: "+std_dev.toFixed(2);stats+=" / Total: "+total;return stats;},}
return service;}]);define("core/datasets/services/datasheet",function(){});datasets_module.service('FileUploadService',['$q','$upload',function($q,$upload){var service={uploadFiles:function(filesToUpload,$scope){console.log("Inside FileUploadService, uploadFiles...");$scope.uploadErrorMessage=undefined;var promises=[];angular.forEach(filesToUpload,function(files,field){if(field=="null"||field=="")
return;console.log("handling files for: "+field);console.log("files is next...");console.dir(files);if(typeof files!=='undefined'){for(var i=0;i<files.length;i++){var file=files[i];if($scope.dataset.Id){console.log("Checking if file "+file.Name+" already exists in the dataset files...");for(var p=0;p<$scope.dataset.Files.length;p++){if(file.Name.length<=$scope.dataset.Files[p].Name.length){if($scope.dataset.Files[p].Name.indexOf(file.Name)>-1){$scope.foundDuplicate=true;console.log("...Yes, it does.");}}}}
else{console.log("Checking if file "+file.Name+" already exists in the project files...");for(var p=0;p<$scope.project.Files.length;p++){if(file.Name.length<=$scope.project.Files[p].Name.length){if($scope.project.Files[p].Name.indexOf(file.Name)>-1){$scope.foundDuplicate=true;console.log("...Yes, it does.");}}}}
console.log("$scope.foundDuplicate = "+$scope.foundDuplicate);if($scope.foundDuplicate===false)
console.log("...No, it does not.  The file name is good.")
if(($scope.foundDuplicate===false)&&(file.success!="Success")){var deferred=$q.defer();if($scope.DatastoreTablePrefix==="CrppContracts"){$upload.upload({url:serviceUrl+'/api/v1/crppsubproject/uploadcrppsubprojectfile',method:"POST",data:{ProjectId:$scope.project.Id,SubprojectId:$scope.viewSubproject.Id,Description:"Uploaded file for: "+file.Name,Title:file.Name},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){config.file.success="Success";config.file.data=data;deferred.resolve(data);}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file for the subproject.  Please try again or contact the Helpdesk if this issue continues.";console.log(" error.");config.file.success="Failed";deferred.reject();});promises.push(deferred.promise);}
else{$upload.upload({url:serviceUrl+'/api/v1/file/uploaddatasetfile',method:"POST",data:{ProjectId:$scope.project.Id,DatasetId:$scope.dataset.Id,Description:"Uploaded file for: "+file.Name,Title:file.Name},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){config.file.success="Success";config.file.data=data;deferred.resolve(data);}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";console.log(" error.");config.file.success="Failed";deferred.reject();});promises.push(deferred.promise);}}
else{console.log("$scope.foundDuplicate is true OR file.success == Success");if($scope.DatastoreTablePrefix==="CrppContracts"){$scope.uploadErrorMessage="The file is already in the subproject files.  Please choose another file name, try again, or contact the Helpdesk if this issue continues.";console.log(" error.");var errors=[];errors.push("File "+file.Name+" already exists in the subproject files.");$scope.onRow.errors=errors;}
else{$scope.uploadErrorMessage="The file is already in the project files.  Please choose another file name, try again, or contact the Helpdesk if this issue continues.";console.log(" error.");var errors=[];errors.push("File "+file.Name+" already exists in the project files.");$scope.onRow.errors=errors;}}}}});return $q.all(promises);},uploadSubprojectFiles:function(filesToUpload,$scope){console.log("Inside FileUploadService, uploadSubprojectFiles...");$scope.uploadErrorMessage=undefined;var promises=[];angular.forEach(filesToUpload,function(files,field){if(field=="null"||field=="")
return;console.log("handling files for: "+field)
for(var i=0;i<files.length;i++){var file=files[i];console.log("Checking if file "+file.Name+" already exists in the subproject files...");for(var p=0;p<$scope.viewSubproject.Files.length;p++){if(file.Name.length<=$scope.viewSubproject.Files[p].Name.length){if($scope.viewSubproject.Files[p].Name.indexOf(file.Name)>-1){$scope.foundDuplicate=true;console.log("...Yes, it does.");}}}
console.log("$scope.foundDuplicate = "+$scope.foundDuplicate);if($scope.foundDuplicate===false)
console.log("...No, it does not.  The file name is good.")
console.log("file is next...");console.dir(file);if(($scope.foundDuplicate===false)&&(file.success!="Success")){var deferred=$q.defer();if($scope.DatastoreTablePrefix==="CrppContracts"){$upload.upload({url:serviceUrl+'/api/v1/crppsubproject/uploadcrppsubprojectfile',method:"POST",data:{ProjectId:$scope.project.Id,SubprojectId:$scope.viewSubproject.Id,Description:"Uploaded file for: "+file.Name,Title:file.Name},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){config.file.success="Success";config.file.data=data;deferred.resolve(data);}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file for the subproject.  Please try again or contact the Helpdesk if this issue continues.";console.log(" error.");config.file.success="Failed";deferred.reject();});promises.push(deferred.promise);}
else
{$upload.upload({url:serviceUrl+'/api/v1/habsubproject/uploadhabitatfile',method:"POST",data:{ProjectId:$scope.project.Id,Description:"Uploaded file for: "+file.Name,Title:file.Name},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){config.file.success="Success";config.file.data=data;deferred.resolve(data);}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";console.log(" error.");config.file.success="Failed";deferred.reject();});promises.push(deferred.promise);}}
else{if($scope.DatastoreTablePrefix==="CrppContracts"){$scope.uploadErrorMessage="The file is already in the subproject files.  Please choose another file name, try again, or contact the Helpdesk if this issue continues.";console.log(" error.");var errors=[];errors.push("File "+file.Name+" already exists in the subproject files.");$scope.onRow.errors=errors;}
else{$scope.uploadErrorMessage="The file is already in the project files.  Please choose another file name, try again, or contact the Helpdesk if this issue continues.";console.log(" error.");var errors=[];errors.push("File "+file.Name+" already exists in the project files.");$scope.onRow.errors=errors;}}}});return $q.all(promises);},};return service;}]);define("core/datasets/services/file-upload",function(){});require(['core/datasets/datasets-functions','core/datasets/datasets-filters','core/datasets/components/dataset-activities-list/dataset-activities-list','core/datasets/components/dataset-detail/dataset-detail','core/datasets/components/dataset-editor/dataset-edit-form','core/datasets/components/dataset-entry-form/dataset-entry-form','core/datasets/components/dataset-entry-sheet/dataset-entry-sheet','core/datasets/components/dataset-view/dataset-view','core/datasets/components/dataset-view/modal-qa-update','core/datasets/components/dataset-view/modal-data-entry','core/datasets/components/dataset-import/dataset-import','core/datasets/components/dataset-import/modal-dataset-duplicates','core/datasets/components/dataset-query/dataset-query','core/datasets/components/dataset-query/big-bucket-query','core/datasets/services/dataset-service','core/datasets/services/activity-parser','core/datasets/services/convert-status','core/datasets/services/datasheet','core/datasets/services/file-upload',],function(){datasets_module.controller('DatasetActivitiesCtrl',dataset_activities_list);datasets_module.controller('DatasetDetailsCtrl',dataset_detail);datasets_module.controller('DataEditCtrl',dataset_edit_form);datasets_module.controller('DataEntryFormCtrl',dataset_entry_form);datasets_module.controller('DataEntryDatasheetCtrl',dataset_entry_sheet);datasets_module.controller('DatasetViewCtrl',dataset_view);datasets_module.controller('ModalQaUpdateCtrl',modal_qa_update);datasets_module.controller('ModalDataEntryCtrl',modal_data_entry);datasets_module.controller("DatasetImportCtrl",dataset_import);datasets_module.controller('ModalDuplicatesViewCtrl',modal_dataset_duplicates);datasets_module.controller('DataQueryCtrl',dataset_query);datasets_module.controller('DatastoreQueryCtrl',big_bucket_query);});define("core/datasets/datasets-module",function(){});var admin_view=['$scope','$modal','DatasetService','ProjectService',function($scope,$modal,DatasetService,ProjectService){if(!$scope.Profile.isAdmin())
angular.rootScope.go("/unauthorized");$scope.datastores=DatasetService.getDatastores();$scope.projects=ProjectService.getProjects();var watcher=$scope.$watch('datastores',function(){if($scope.datastores.length>0){watcher();angular.forEach($scope.datastores,function(datastore,key){datastore.Datasets=DatasetService.getDatastoreDatasets(datastore.Id);});}},true);$scope.addNewProjectDataset=function(datastore){$scope.datastore=datastore;var modalInstance=$modal.open({templateUrl:'app/core/admin/components/admin-page/templates/addNewProjectDataset.html',controller:'ModalAddProjectDatasetCtrl',scope:$scope,});};$scope.getProjectName=function(id){var ret="";var project=getMatchingByField($scope.projects,id,'Id');if(project)
ret=" - "+project.Name;}}];define("core/admin/components/admin-page/admin-view",function(){});var add_project_dataset=['$scope','$modalInstance','ProjectService',function($scope,$modalInstance,ProjectService){$scope.row={};$scope.projects=ProjectService.getProjects();$scope.save=function(){$modalInstance.dismiss();};$scope.cancel=function(){$modalInstance.dismiss();};}];define("core/admin/components/admin-page/admin-add-project-dataset",function(){});var admin_edit_dataset=['$scope','$modal','$routeParams','DatasetService','CommonService','ProjectService','AdminService',function($scope,$modal,$routeParams,DatasetService,CommonService,ProjectService,AdminService){$scope.dataset=DatasetService.getDataset($routeParams.Id);$scope.FieldLookup={};$scope.SelectedField=null;$scope.saveResults={};$scope.Sources=CommonService.getSources();$scope.Instruments=ProjectService.getInstruments();$scope.$watch('dataset.Id',function(){if(!$scope.dataset.Id)
return;console.log("Inside dataset.Id watcher...");console.dir($scope.dataset);if(!$scope.MasterFields)
$scope.MasterFields=AdminService.getMasterFields($scope.dataset.Datastore.FieldCategoryId);angular.forEach($scope.dataset.Fields.sort(orderByAlpha),function(field){console.log("field.Field.DbColumnName = "+field.Field.DbColumnName);if(field.Field.PossibleValues)
field.Values=makeObjectsFromValues($scope.dataset.DatastoreId+field.DbColumnName,field.Field.PossibleValues);field.SourceId=""+field.SourceId;field.InstrumentId=""+field.InstrumentId;});$scope.dataFields=$scope.dataset.Fields;if($scope.dataset.Config!==undefined&&$scope.dataset.Config!=null){$scope.dataset.ConfigString=angular.toJson($scope.dataset.Config,true);$scope.parseConfigString();}
$scope.dataset.DefaultActivityQAStatusId=""+$scope.dataset.DefaultActivityQAStatusId;$scope.dataset.DefaultRowQAStatusId=""+$scope.dataset.DefaultRowQAStatusId;$scope.QAStatusList=makeObjects($scope.dataset.QAStatuses,'Id','Name');$scope.RowQAStatuses=makeObjects($scope.dataset.RowQAStatuses,'Id','Name');console.log('-----------------');console.dir($scope.QAStatusList);console.dir($scope.dataset.DefaultActivityQAStatusId);console.dir($scope.dataset);});$scope.logStatus=function(){console.log('-----------------');console.dir($scope.QAStatusList);console.dir($scope.dataset.DefaultActivityQAStatusId);console.log(typeof $scope.dataset.DefaultActivityQAStatusId);console.dir($scope.dataset);};$scope.$watch('Sources',function(){if($scope.Sources.length>0)
$scope.SourcesLookup=makeObjects($scope.Sources,'Id','Name');},true);$scope.$watch('Instruments',function(){if($scope.Instruments.length>0)
$scope.InstrumentsLookup=makeObjects($scope.Instruments,'Id','Name');},true);$scope.$watch('saveResults.success',function(){if(!$scope.saveResults.success)
return;console.log("The result of saveResults: "+$scope.saveResults.success);console.log(" - so now we'll reload the dataset: "+$routeParams.Id);DatasetService.clearDataset();$scope.dataset=DatasetService.getDataset($routeParams.Id);$scope.SelectedField=null;},true);$scope.removeField=function()
{if(!confirm("Are you sure you want to remove '"+$scope.SelectedField.Label+"' from this dataset?"))
return;$scope.saveResults={};AdminService.removeField($scope.dataset.Id,$scope.SelectedField.FieldId,$scope.saveResults);}
$scope.addMasterField=function()
{console.log("Inside admin-controller.js, addMasterField...");$scope.saveResults={};if($scope.newField===null)
$scope.newField=$scope.MasterFields[0].Id;console.log("$scope.newField (after checking) = "+$scope.newField);AdminService.addMasterFieldToDataset($scope.dataset.Id,$scope.newField,$scope.saveResults);};$scope.saveField=function()
{$scope.saveResults={};AdminService.saveDatasetField($scope.SelectedField,$scope.saveResults);};$scope.saveConfig=function(){$scope.saveResults={};dataset.Config=dataset.ConfigString;DatasetService.saveDataset($scope.dataset,$scope.saveResults);};$scope.selectField=function(field){$scope.SelectedField=field;};$scope.parseConfigString=function(){try{var ConfigObject=angular.fromJson($scope.dataset.ConfigString);if(ConfigObject)
$scope.ConfigParse="Parse successful.";}catch(exception){console.dir(exception);$scope.ConfigParse=exception.message;}}}];define("core/admin/components/admin-page/admin-edit-dataset",function(){});var admin_edit_master=['$scope','$modal','DatasetService','AdminService','$routeParams',function($scope,$modal,DatasetService,AdminService,$routeParams){$scope.datastore=DatasetService.getDatastore($routeParams.Id);$scope.SelectedField=null;$scope.$watch('datastore.Id',function(){if($scope.datastore.Id>0)
$scope.datastoreFields=AdminService.getMasterFields($scope.datastore.FieldCategoryId);});$scope.$watch('datastoreFields',function(){if(!$scope.datastoreFields)
return;angular.forEach($scope.datastoreFields,function(field){if(field.PossibleValues)
field.Values=makeObjectsFromValues($scope.datastore.Id+field.DbColumnName,field.PossibleValues);});},true);$scope.saveField=function()
{$scope.saveResults={};AdminService.saveMasterField($scope.SelectedField,$scope.saveResults);}
$scope.selectField=function(field){$scope.SelectedField=field;};}];define("core/admin/components/admin-page/admin-edit-master",function(){});admin_module.factory('SaveDatasetField',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/dataset/savedatasetfield');}]);admin_module.factory('SaveDataset',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/dataset/dataset',{},{save:{method:'PUT'}});}]);admin_module.factory('SaveMasterField',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/savemasterfield');}]);admin_module.factory('DeleteDatasetField',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/dataset/deletedatasetfield');}]);admin_module.factory('GetAllFields',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/getfieldcategoryfields');}]);admin_module.factory('AddMasterFieldToDataset',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/addmasterfieldtodataset');}]);admin_module.factory('GetAllDatastoreFields',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/datastore/getdatastorefields');}]);admin_module.service('AdminService',['$q','SaveDatasetField','SaveMasterField','DeleteDatasetField','GetAllFields','AddMasterFieldToDataset','GetAllDatastoreFields','SaveDataset',function($q,SaveDatasetField,SaveMasterField,DeleteDatasetField,GetAllFields,AddMasterFieldToDataset,GetAllDatastoreFields,SaveDataset){var service={addMasterFieldToDataset:function(datasetId,fieldId,saveResults)
{AddMasterFieldToDataset.save({DatasetId:datasetId,FieldId:fieldId},function(data){saveResults.success=true;},function(data){saveResults.success=false;});},removeField:function(datasetId,fieldId,saveResults)
{console.log("Trying to remove a field... datasetId = "+datasetId+", fieldId = "+fieldId);DeleteDatasetField.save({DatasetId:datasetId,FieldId:fieldId},function(data){saveResults.success=true;},function(data){saveResults.success=false;});},getFields:function(id){return GetAllDatastoreFields.query({id:id});},getMasterFields:function(categoryId){return GetAllFields.query({id:categoryId});},saveDataset:function(dataset,saveResults){saveResults.saving=true;SaveDataset.save({id:dataset.id,dataset:dataset},function(data){saveResults.saving=false;saveResults.success=true;},function(data){saveResults.saving=false;saveResults.failure=true;});},saveDatasetField:function(field,saveResults){saveResults.saving=true;SaveDatasetField.save(field,function(data){saveResults.saving=false;saveResults.success=true;},function(data){saveResults.saving=false;saveResults.failure=true;});},saveMasterField:function(field,saveResults){saveResults.saving=true;SaveMasterField.save(field,function(data){saveResults.saving=false;saveResults.success=true;},function(data){saveResults.saving=false;saveResults.failure=true;});},};return service;}]);define("core/admin/admin-service",function(){});require(['core/admin/components/admin-page/admin-view','core/admin/components/admin-page/admin-add-project-dataset','core/admin/components/admin-page/admin-edit-dataset','core/admin/components/admin-page/admin-edit-master','core/admin/admin-service',],function(){admin_module.controller('AdminCtrl',admin_view);admin_module.controller('ModalAddProjectDatasetCtrl',add_project_dataset);admin_module.controller('AdminEditDatasetCtrl',admin_edit_dataset);admin_module.controller('AdminEditMasterCtrl',admin_edit_master);});define("core/admin/admin-module",function(){});var dataset_preferences=['$scope','$rootScope','$location','DatasetService','PreferencesService','$window',function($scope,$rootScope,$location,DatasetService,PreferencesService,$window){$scope.mydatasets=PreferencesService.getMyDatasets();$scope.favoriteDatasetStores={};$scope.$watch('mydatasets',function(){if($scope.mydatasets.$resolved)
{angular.forEach($scope.mydatasets,function(dataset,key){DatasetService.configureDataset(dataset);if(!$scope.favoriteDatasetStores[dataset.Datastore.Name])
$scope.favoriteDatasetStores[dataset.Datastore.Name]={Datastore:dataset.Datastore,favoriteDatasets:[]};$scope.favoriteDatasetStores[dataset.Datastore.Name].favoriteDatasets.push(dataset);});}},true);$scope.openReportWindow=function(target){$window.open(REPORTSERVER_URL+target,'_blank');};}];define("core/preferences/components/dataset-preferences/dataset-preferences",function(){});var my_preferences=['$scope','PreferencesService','ConvertStatus',function($scope,PreferencesService,ConvertStatus){console.log("Inside MyPreferencesCtrl...");$scope.savePreferences=function(){console.log("Inside savePreferences...");$scope.User={Id:$scope.Profile.Id,Username:$scope.Profile.Username,Description:$scope.Profile.Description,DepartmentId:$scope.Profile.DepartmentId,Fullname:$scope.Profile.Fullname}
console.log("$scope.preferencesUpdate is next...");console.dir($scope.preferencesUpdate);$scope.savePreferencesResults=[];console.log("$scope.savePreferencesResults = "+$scope.savePreferencesResults);PreferencesService.saveUserInfo($scope.User,$scope);};$scope.cancel=function(){window.location="index.html";};$scope.$watch('savePreferencesResults.success',function(){if((typeof $scope.savePreferencesResults!=='undefined')&&($scope.savePreferencesResults!==null)){console.log("Inside MyPreferencesControllers, savePreferencesResults.success watcher...");window.location="index.html";}});}];define("core/preferences/components/my-preferences/my-preferences",function(){});var project_preferences=['$scope','$rootScope','$location','PreferencesService','$window',function($scope,$rootScope,$location,PreferencesService,$window){$scope.myprojects=PreferencesService.getMyProjects();}];define("core/preferences/components/project-preferences/project-preferences",function(){});preferences_module.factory('SaveUserInfo',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/user/saveuserinfo');}]);preferences_module.factory('GetMyProjectsAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/user/getmyprojects',{},{query:{method:'GET',params:{},isArray:true}});}]);preferences_module.factory('SaveUserPreferenceAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/user/saveuserpreference',{},{save:{method:'POST',isArray:false}});}]);preferences_module.factory('GetMyDatasetsAction',['$resource',function($resource){return $resource(serviceUrl+'/api/v1/user/getmydatasets',{},{query:{method:'GET',params:{},isArray:true}});}]);preferences_module.service('PreferencesService',['$q','SaveUserInfo','GetMyProjectsAction','SaveUserPreferenceAction','GetMyDatasetsAction',function($q,SaveUserInfo,GetMyProjectsAction,SaveUserPreferenceAction,GetMyDatasetsAction){var service={getMyDatasets:function(){return GetMyDatasetsAction.query();},getMyProjects:function(){return GetMyProjectsAction.query();},saveUserPreference:function(name,value,results){var payload={UserPreference:{Name:name,Value:value}};SaveUserPreferenceAction.save(payload,function(data){results.done=true;results.success=true;},function(data){results.done=true;results.failure=true;});},saveUserInfo:function(user,scope){console.log("Inside services, DatasetService.saveUserInfo...");var payload={User:user};SaveUserInfo.save(payload,function(data){scope.savePreferencesResults.success=true;console.log("scope.savePreferencesResults.success = "+scope.savePreferencesResults.success);},function(data){scope.savePreferencesResults.failure=true;console.log("scope.savePreferencesResults.failure = "+scope.savePreferencesResults.failure);});},};return service;}]);define("core/preferences/preferences-service",function(){});require(['core/preferences/components/dataset-preferences/dataset-preferences','core/preferences/components/my-preferences/my-preferences','core/preferences/components/project-preferences/project-preferences','core/preferences/preferences-service',],function(){preferences_module.controller('MyPreferencesCtrl',my_preferences);preferences_module.controller('MyDatasetsCtrl',dataset_preferences);preferences_module.controller('MyProjectsCtrl',project_preferences);});define("core/preferences/preferences-module",function(){});var habitat_module=angular.module('HabitatModule',['ui.bootstrap','ngResource']);var crpp_module=angular.module('CrppModule',['ui.bootstrap','ngResource']);var appraisals_module=angular.module('AppraisalsModule',['ui.bootstrap','ngResource']);define("private/all-modules",function(){});var modal_add_correspondence_event=['$scope','$rootScope','$modalInstance','$modal','DatasetService','SubprojectService','ServiceUtilities','$filter','FileUploadService','$upload','$location','$anchorScroll',function($scope,$rootScope,$modalInstance,$modal,DatasetService,SubprojectService,ServiceUtilities,$filter,FileUploadService,$upload,$location,$anchorScroll){console.log("Inside ModalAddCorrespondenceEventCtrl...");if((typeof $scope.viewSubproject!=='undefined')&&($scope.viewSubproject!==null))
$rootScope.subprojectId=$scope.viewSubproject.Id;$scope.filesToUpload={};$scope.verifyActionFormOpen="No";$scope.showOtherResponseType=false;$scope.showOtherCorrespondenceType=false;$scope.ReadyToClose="";$scope.showCloseButton=false;$scope.showCancelButton=true;$scope.showFormItems=true;$scope.fileCount=0;$scope.fileProgress=0;$scope.ce_row=angular.copy($scope.ce_row);console.log("$scope.ce_row is next...");console.dir($scope.ce_row);$scope.ceCorrespondenceType=[];$scope.ceCorrespondenceType.push({Id:0,Label:"Project Notification"});$scope.ceCorrespondenceType.push({Id:1,Label:"Notice of Application"});$scope.ceCorrespondenceType.push({Id:2,Label:"Seeking Concurrence"});$scope.ceCorrespondenceType.push({Id:3,Label:"Document Review"});$scope.ceCorrespondenceType.push({Id:4,Label:"Permit Review"});$scope.ceCorrespondenceType.push({Id:5,Label:"Sending materials for our records"});$scope.ceCorrespondenceType.push({Id:6,Label:"Other"});$scope.ceResponseType=[];$scope.ceResponseType.push({Id:0,Label:"APE letter"});$scope.ceResponseType.push({Id:1,Label:"Asked to be consulting party"});$scope.ceResponseType.push({Id:2,Label:"Defer to other tribe(s)"});$scope.ceResponseType.push({Id:3,Label:"Determination of Eligibility"});$scope.ceResponseType.push({Id:4,Label:"Did not review"});$scope.ceResponseType.push({Id:5,Label:"Emailed Comments"});$scope.ceResponseType.push({Id:6,Label:"Finding of Effect"});$scope.ceResponseType.push({Id:7,Label:"Issued survey/excavation permit"});$scope.ceResponseType.push({Id:8,Label:"Let it go"});$scope.ceResponseType.push({Id:9,Label:"Missed opportunity to review"});$scope.ceResponseType.push({Id:10,Label:"NAGPRA FR Notice"});$scope.ceResponseType.push({Id:11,Label:"NAGPRA inventory/summary"});$scope.ceResponseType.push({Id:12,Label:"none--ok"});$scope.ceResponseType.push({Id:13,Label:"Notice of Application"});$scope.ceResponseType.push({Id:14,Label:"Other"});$scope.ceResponseType.push({Id:15,Label:"Out of area"});$scope.ceResponseType.push({Id:16,Label:"Permit Application"});$scope.ceResponseType.push({Id:17,Label:"Report for Review"});$scope.ceResponseType.push({Id:18,Label:"Requested a monitor"});$scope.ceResponseType.push({Id:19,Label:"Requested a survey"});$scope.ceResponseType.push({Id:20,Label:"Requested additional information"});$scope.ceResponseType.push({Id:21,Label:"Requested report"});$scope.ceResponseType.push({Id:22,Label:"Requested testing"});$scope.ceResponseType.push({Id:23,Label:"Response to comments"});$scope.ceResponseType.push({Id:24,Label:"Reviewed report"});$scope.ceResponseType.push({Id:25,Label:"Same as previously reviewed project"});$scope.ceResponseType.push({Id:26,Label:"Sent letter"});$scope.ceResponseType.push({Id:27,Label:"Signed off on"});$scope.ceResponseType.push({Id:28,Label:"Simple Notification"});console.log("$scope.ceResponseType is next...");console.dir($scope.ceResponseType);var keepGoing=true;var foundIt=false;if($scope.ce_row.CorrespondenceDate)
{angular.forEach($scope.ceResponseType,function(option){if((keepGoing)&&(option.Label===$scope.ce_row.ResponseType))
{foundIt=true;keepGoing=false;}});if(!foundIt)
{console.log("Value of ResponseType is not in the list...");$scope.ce_row.OtherResponseType=$scope.ce_row.ResponseType;$scope.ce_row.ResponseType="Other";$scope.showOtherResponseType=true;}
foundIt=false;keepGoing=true;angular.forEach($scope.ceCorrespondenceType,function(option){if((keepGoing)&&(option.Label===$scope.ce_row.CorrespondenceType))
{foundIt=true;keepGoing=false;}});if(!foundIt)
{console.log("Value of CorrespondenceType is not in the list...");$scope.ce_row.OtherCorrespondenceType=$scope.ce_row.CorrespondenceType;$scope.ce_row.CorrespondenceType="Other";$scope.showOtherCorrespondenceType=true;}}
if($scope.ce_row.Id>0)
{$scope.header_message="Edit Event for Project "+$scope.viewSubproject.ProjectName;}
else
{if((typeof $scope.viewSubproject!=='undefined')&&($scope.viewSubproject!==null))
$scope.header_message="Add Event to Project "+$scope.viewSubproject.ProjectName;else if((typeof $scope.crppProjectName!=='undefined')&&($scope.crppProjectName!==null))
$scope.header_message="Add Event to Project "+$scope.crppProjectName;}
if(!$scope.ce_row.NumberOfDays)
$scope.ce_row.NumberOfDays="Other";$scope.field={DbColumnName:"EventFiles"};$scope.openFileModal=function(row,field)
{console.log("Inside ModalAddCorrespondenceEventCtrl, openFileModal...");console.log("row is next...");console.dir(row);console.log("field is next...");console.dir(field);$scope.file_row=row;$scope.file_field=field;var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file.html',controller:'FileModalCtrl',scope:$scope,});};$scope.selectCorrespondenceType=function(){console.log("Inside selectCorrespondenceType...");console.log("$scope.ce_row at top of selectCorrespondenceType is next...");console.dir($scope.ce_row);if($scope.ce_row.CorrespondenceType==="Other")
$scope.showOtherCorrespondenceType=true;else
{$scope.showOtherCorrespondenceType=false;$scope.ce_row.OtherCorrespondenceType=null;}
console.log("$scope.showOtherCorrespondenceType = "+$scope.showOtherCorrespondenceType);console.log("$scope.ce_row at end of selectCorrespondenceType is next...");console.dir($scope.ce_row);};$scope.selectResponseType=function(){console.log("Inside selectResponseType...");console.log("$scope.ce_row at top of selectResponseType is next...");console.dir($scope.ce_row);if($scope.ce_row.ResponseType==="Other")
$scope.showOtherResponseType=true;else
{$scope.showOtherResponseType=false;$scope.ce_row.OtherResponseType=null;}
console.log("$scope.showOtherResponseType = "+$scope.showOtherResponseType);console.log("$scope.ce_row at end of selectResponseType is next...");console.dir($scope.ce_row);};$scope.GetTypeOfResponse=function(){var theName=[];theName.push($filter('ResponseTypeFilter')($scope.ResponseTypeList,$scope.ce_row.ResponseType.Id))[0];console.log("theName is next...");console.dir(theName);};$scope.onFileSelect=function(field,files)
{console.log("Inside ModalAddCorrespondenceEventCtrl, onFileSelect");console.log("file selected! "+field);$scope.filesToUpload[field]=files;};$scope.calculateDateOfResponse=function(){console.log("Inside calculateDateOfResponse...");console.log("$scope.ShowDateOfResponsePopup = "+$scope.ShowDateOfResponsePopup);console.log("$scope.ce_row is next...");console.dir($scope.ce_row);var dtDateOfResponse='undefined';var strDateOfResponse='undefined';if($scope.ce_row.NumberOfDays.length<3)
{if((!$scope.ce_row.CorrespondenceDate)||($scope.ce_row.CorrespondenceDate===null))
{console.log("Date of Correspondence left blank; using today's date...");dtDateOfResponse=new Date();}
else
{console.log("User picked this date...");console.dir($scope.ce_row.CorrespondenceDate);var strTmpDate=JSON.parse(JSON.stringify($scope.ce_row.CorrespondenceDate));var dtTempDate=new Date(strTmpDate);console.log("dtTempDate "+dtTempDate);dtDateOfResponse=dtTempDate;}
console.log("dtDateOfResponse initial setting is next...");console.dir(dtDateOfResponse);dtDateOfResponse.setDate(dtDateOfResponse.getDate()+parseInt($scope.ce_row.NumberOfDays));var strDateOfResponse=ServiceUtilities.formatDate2(dtDateOfResponse);var intSpaceLocation=strDateOfResponse.indexOf(" ");strDateOfResponse=strDateOfResponse.substring(0,intSpaceLocation);console.log("strDateOfResponse (text version) = "+strDateOfResponse);$scope.ce_row.ResponseDate=strDateOfResponse;console.log("$scope.ce_row.ResponseDate = "+$scope.ce_row.ResponseDate);console.log("$scope.ce_row is next...");console.dir($scope.ce_row);}
else
{$scope.ShowDateOfResponsePopup=false;}};$scope.$watch('fileProgress',function(){console.log("Inside watch fileProgress...");console.log("$scope.fileCount = "+$scope.fileCount+", $scope.fileProgress = "+$scope.fileProgress);if($scope.fileProgress<$scope.fileCount)
return;if($scope.saving)
{$scope.loading=false;$scope.showCloseButton=true;$scope.showCancelButton=false;$scope.showFormItems=false;}});$scope.save=function(){console.log("Inside ModalAddCorrespondenceEventCtrl, save...");$scope.saving=true;$scope.loading=true;console.log("$scope.ce_row.ResponseType = "+$scope.ce_row.ResponseType);var saveRow=angular.copy($scope.ce_row);console.log("saveRow is next, before checking the Id...");console.dir(saveRow);if(!saveRow.Id)
saveRow.Id=0;console.log("saveRow is next, after checking/setting the Id...");console.dir(saveRow);if($scope.foundDuplicate)
{alert("One or more of the files to upload is a duplicate!");return;}
var subprojectId=0;if($scope.viewSubproject)
subprojectId=$scope.viewSubproject.Id
else
subprojectId=$scope.subprojectId;if($scope.filesToUpload.EventFiles)
{$scope.fileCount=0;angular.forEach($scope.filesToUpload.EventFiles,function(aFile){$scope.fileCount++;});console.log("$scope.fileCount = "+$scope.fileCount+", $scope.fileProgress = "+$scope.fileProgress);console.log("$scope.filesToUpload.EventFiles is next...");console.dir($scope.filesToUpload.EventFiles);for(var i=0;i<$scope.filesToUpload.EventFiles.length;i++)
{var file=$scope.filesToUpload.EventFiles[i];console.log("file is next...");console.dir(file);var newFileNameLength=file.name.length;console.log("file name length = "+newFileNameLength);if($scope.foundDuplicate)
alert(errors);else
{console.log("file.success = "+file.success);if(file.success!="Success")
{console.log("No file.success, so let's save the file...");$scope.upload=$upload.upload({url:serviceUrl+'/api/v1/crppsubproject/uploadcrppsubprojectfile',method:"POST",data:{ProjectId:$scope.project.Id,SubprojectId:subprojectId,Description:"Uploaded file "+file.Name,Title:file.Name,DatastoreTablePrefix:$scope.DatastoreTablePrefix},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){console.dir(data);console.dir(status);console.dir(headers);console.dir(config);console.dir(file);config.file.success="Success";console.log("done and success!");$scope.fileProgress++;console.log("$scope.fileCount = "+$scope.fileCount+", $scope.fileProgress = "+$scope.fileProgress);}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";config.file.success="Failed";});console.log("$scope.upload is next...");console.dir($scope.upload);}}}
angular.forEach($scope.filesToUpload,function(files,field){if(field=="null"||field=="")
return;var local_files=[];for(var i=0;i<files.length;i++)
{console.log("$scope is next...")
var file=files[i];console.log("Reviewing results on file "+file.Name);console.dir(file);console.log("$scope.errors is next...");console.dir($scope.errors);console.log("typeof $scope.errors = "+typeof $scope.errors);if(file.data&&file.data.length==1)
{local_files.push(file.data[0]);}
else if(typeof $scope.errors==='undefined')
{console.log("No errors...");}
else
{$scope.foundDuplicate=true;$scope.errors.heading.push("There was a problem saving file: "+file.Name+" - Try a unique filename.");throw"Problem saving file: "+file.Name;}}
console.log("$scope.file_row is next...");console.dir($scope.file_row);console.log("field = "+field);if($scope.file_row[field])
{console.log("On Files field...");var current_files=angular.fromJson($scope.file_row[field]);angular.forEach(current_files,function(file){if(file.Id)
local_files.push(file);});}
$scope.file_row[field]=angular.toJson(local_files);});}
console.log("typeof saveRow.CorrespondenceDate = "+typeof saveRow.CorrespondenceDate);if(typeof saveRow.CorrespondenceDate!=="string")
{var strCorrespondenceDate=ServiceUtilities.toExactISOString(saveRow.CorrespondenceDate);console.log("strCorrespondenceDate = "+strCorrespondenceDate);saveRow.CorrespondenceDate=ServiceUtilities.extractDateFromString(strCorrespondenceDate);console.log("saveRow.CorrespondenceDate = "+saveRow.CorrespondenceDate);}
if(saveRow.ResponseDate)
{console.log("saveRow.ResponseDate initially = "+saveRow.ResponseDate);console.log("typeof saveRow.ResponseDate = "+typeof saveRow.ResponseDate);if(typeof saveRow.ResponseDate!=="string")
{var strResponseDate=ServiceUtilities.toExactISOString(saveRow.ResponseDate);console.log("strResponseDate = "+strResponseDate);}
else
{var dtDateOfResponse=new Date(saveRow.ResponseDate);console.log("dtDateOfResponse = "+dtDateOfResponse);var strResponseDate=ServiceUtilities.toExactISOString(dtDateOfResponse);console.log("strResponseDate = "+strResponseDate);}
saveRow.ResponseDate=ServiceUtilities.extractDateFromString(strResponseDate);console.log("saveRow.ResponseDate after conversion = "+saveRow.ResponseDate);}
console.log("saveRow is next, after processing dates...");console.dir(saveRow);if(saveRow.NumberOfDays==="Other")
saveRow.NumberOfDays=null;if(saveRow.CorrespondenceType==="Other")
{saveRow.CorrespondenceType=saveRow.OtherCorrespondenceType;saveRow.OtherCorrespondenceType='undefined';}
if(saveRow.ResponseType==="Other")
{saveRow.ResponseType=saveRow.OtherResponseType;saveRow.OtherResponseType='undefined';}
if($rootScope.crppProjectName)
$scope.crppProjectName=$rootScope.crppProjectName;if($scope.viewSubproject!==null)
{console.log("$scope.viewSubproject is present, using that...");console.log("$scope.viewSubproject.Id = "+$scope.viewSubproject.Id);var promise=SubprojectService.saveCorrespondenceEvent($scope.project.Id,$scope.viewSubproject.Id,saveRow);if(typeof promise!=='undefined')
{promise.$promise.then(function(){if(saveRow.Id===0)
$scope.postAddCorrespondenceEventUpdateGrid(promise);else
$scope.postEditCorrespondenceEventUpdateGrid(promise);console.log("all done saving correspondence event!");console.log("1 typeof $scope.errors = "+typeof $scope.errors+", $scope.fileCount = "+$scope.fileCount+", $scope.fileProgress = "+$scope.fileProgress);if($scope.fileCount===0){$scope.loading=false;$scope.showCloseButton=true;$scope.showCancelButton=false;$scope.showFormItems=false;}});}}
else if((typeof $scope.crppProjectName!=='undefined')&&($scope.crppProjectName!==null))
{console.log("$scope.viewSubproject missing, using $scope.subprojectId:  "+$scope.subprojectId);var promise=SubprojectService.saveCorrespondenceEvent($scope.project.Id,$scope.subprojectId,saveRow);if(typeof promise!=='undefined')
{promise.$promise.then(function(){$scope.reloadSubprojects();$("#correspondenceEvents").load("correspondenceEvents.html #correspondenceEvents");})
if($scope.fileCount===0)
{$scope.loading=false;$scope.showCloseButton=true;$scope.showCancelButton=false;$scope.showFormItems=false;}}}};$scope.close=function(){console.log("Inside $scope.close...");$modalInstance.dismiss();};$scope.cancel=function(){$modalInstance.dismiss();};$scope.gotoBottom=function(){$location.hash('bottom');$anchorScroll();};$scope.gotoTopCorrespondenceEventsTop=function(){console.log("Inside gotoTopCorrespondenceEventsTop...");$location.hash('ceTop');$anchorScroll();};$scope.gotoCategory=function(category){$location.hash(category);$anchorScroll();};}];define("private/crpp/components/crpp-contracts/modal-add-correspondence-event",function(){});var modal_create_crpp_subproject=['$scope','$rootScope','$modalInstance','DatasetService','SubprojectService','ServiceUtilities','$timeout','$location','$anchorScroll','$document',function($scope,$rootScope,$modalInstance,DatasetService,SubprojectService,ServiceUtilities,$timeout,$location,$anchorScroll,$document){console.log("Inside ModalCreateSubprojectCtrl...");$document.on('keydown',function(e){if((e.keyCode===8)&&(e.target.nodeName==="TEXTAREA")){var keyboardEvent=$document[0].createEvent("KeyboardEvent");var initMethod=typeof keyboardEvent.initKeyboardEvent!=='undefined'?"initKeyboardEvent":"initKeyEvent";keyboardEvent[initMethod]("keydown",true,true,window,false,false,false,false,37,0);document.dispatchEvent(keyboardEvent);keyboardEvent[initMethod]("keydown",true,true,window,false,false,false,false,46,0);return document.dispatchEvent(keyboardEvent);}});$scope.header_message="Create new CRPP project";$rootScope.crppProjectName=$scope.crppProjectName="";$rootScope.projectId=$scope.project.Id;$scope.subproject_row={StatusId:0,};$scope.agencyList=[];$scope.agencyList.push({Id:0,Label:"ACHP"});$scope.agencyList.push({Id:1,Label:"Anderson Perry"});$scope.agencyList.push({Id:2,Label:"Army"});$scope.agencyList.push({Id:3,Label:"Baker County"});$scope.agencyList.push({Id:4,Label:"Benton County"});$scope.agencyList.push({Id:5,Label:"BIA"});$scope.agencyList.push({Id:6,Label:"BLM"});$scope.agencyList.push({Id:7,Label:"Blue Mountain Ranger District"});$scope.agencyList.push({Id:8,Label:"BNSF"});$scope.agencyList.push({Id:9,Label:"BOR"});$scope.agencyList.push({Id:10,Label:"BPA"});$scope.agencyList.push({Id:11,Label:"Camas"});$scope.agencyList.push({Id:12,Label:"CenturyLink"});$scope.agencyList.push({Id:13,Label:"Clark County"});$scope.agencyList.push({Id:14,Label:"College Place"});$scope.agencyList.push({Id:15,Label:"Columbia County"});$scope.agencyList.push({Id:16,Label:"Corps Portland District"});$scope.agencyList.push({Id:17,Label:"Corps Regulatory"});$scope.agencyList.push({Id:18,Label:"Corps Walla Walla District"});$scope.agencyList.push({Id:19,Label:"CRGNSA"});$scope.agencyList.push({Id:20,Label:"CTUIR"});$scope.agencyList.push({Id:21,Label:"DAHP"});$scope.agencyList.push({Id:22,Label:"DECD"});$scope.agencyList.push({Id:23,Label:"Department of Ecology"});$scope.agencyList.push({Id:24,Label:"DEQ"});$scope.agencyList.push({Id:25,Label:"DOE"});$scope.agencyList.push({Id:26,Label:"DOGAMI"});$scope.agencyList.push({Id:27,Label:"DSL"});$scope.agencyList.push({Id:28,Label:"EPA"});$scope.agencyList.push({Id:29,Label:"FAA"});$scope.agencyList.push({Id:30,Label:"FCC"});$scope.agencyList.push({Id:31,Label:"Federal Transit Authority"});$scope.agencyList.push({Id:32,Label:"FEMA"});$scope.agencyList.push({Id:33,Label:"FERC"});$scope.agencyList.push({Id:34,Label:"FHWA"});$scope.agencyList.push({Id:35,Label:"Fisheries"});$scope.agencyList.push({Id:36,Label:"Fort Vancouver (NPS)"});$scope.agencyList.push({Id:37,Label:"Franklin County"});$scope.agencyList.push({Id:38,Label:"FSA"});$scope.agencyList.push({Id:39,Label:"Hells Canyon NRA"});$scope.agencyList.push({Id:40,Label:"Heppner Ranger District"});$scope.agencyList.push({Id:41,Label:"Hermiston"});$scope.agencyList.push({Id:42,Label:"Hood River County"});$scope.agencyList.push({Id:43,Label:"HUD"});$scope.agencyList.push({Id:44,Label:"Idaho Power"});$scope.agencyList.push({Id:45,Label:"Irrigon"});$scope.agencyList.push({Id:46,Label:"John Day Fossil Beds (NPS)"});$scope.agencyList.push({Id:47,Label:"Kennewick"});$scope.agencyList.push({Id:48,Label:"Klickitat County"});$scope.agencyList.push({Id:49,Label:"La Grande Ranger District"});$scope.agencyList.push({Id:50,Label:"Landowner"});$scope.agencyList.push({Id:51,Label:"Malheur National Forest"});$scope.agencyList.push({Id:52,Label:"Morrow County"});$scope.agencyList.push({Id:53,Label:"Navy"});$scope.agencyList.push({Id:54,Label:"Nez Perce National Historical Park (NPS)"});$scope.agencyList.push({Id:55,Label:"North Fork John Day Ranger District"});$scope.agencyList.push({Id:56,Label:"Northwest Pipeline"});$scope.agencyList.push({Id:57,Label:"NPS"});$scope.agencyList.push({Id:58,Label:"NRCS"});$scope.agencyList.push({Id:59,Label:"ODEQ"});$scope.agencyList.push({Id:60,Label:"ODOE"});$scope.agencyList.push({Id:61,Label:"ODOT"});$scope.agencyList.push({Id:62,Label:"OPRD"});$scope.agencyList.push({Id:63,Label:"Oregon City"});$scope.agencyList.push({Id:64,Label:"Oregon Military Department/Oregon Army National Guard"});$scope.agencyList.push({Id:65,Label:"Other"});$scope.agencyList.push({Id:66,Label:"OWRD"});$scope.agencyList.push({Id:67,Label:"PacifiCorp"});$scope.agencyList.push({Id:68,Label:"Pasco"});$scope.agencyList.push({Id:69,Label:"PGE"});$scope.agencyList.push({Id:70,Label:"Planning Dept"});$scope.agencyList.push({Id:71,Label:"Pomeroy Ranger District"});$scope.agencyList.push({Id:72,Label:"Port of Benton"});$scope.agencyList.push({Id:73,Label:"Port of Clarkston"});$scope.agencyList.push({Id:74,Label:"Port of Columbia"});$scope.agencyList.push({Id:75,Label:"Port of Kennewick"});$scope.agencyList.push({Id:76,Label:"Port of Morrow"});$scope.agencyList.push({Id:77,Label:"Port of Umatilla"});$scope.agencyList.push({Id:78,Label:"Port of Walla Walla"});$scope.agencyList.push({Id:79,Label:"Public Works"});$scope.agencyList.push({Id:80,Label:"RAF"});$scope.agencyList.push({Id:81,Label:"Recreation and Conservation Office"});$scope.agencyList.push({Id:82,Label:"Richland"});$scope.agencyList.push({Id:83,Label:"Rural Development"});$scope.agencyList.push({Id:84,Label:"RUS"});$scope.agencyList.push({Id:85,Label:"SHPO Oregon"});$scope.agencyList.push({Id:86,Label:"Skamania County"});$scope.agencyList.push({Id:87,Label:"Skamania County PUD"});$scope.agencyList.push({Id:88,Label:"Umatilla County"});$scope.agencyList.push({Id:89,Label:"Umatilla National Forest"});$scope.agencyList.push({Id:90,Label:"UPRR"});$scope.agencyList.push({Id:91,Label:"USACE"});$scope.agencyList.push({Id:92,Label:"USFWS"});$scope.agencyList.push({Id:93,Label:"VA"});$scope.agencyList.push({Id:94,Label:"Vancouver"});$scope.agencyList.push({Id:95,Label:"Walla Walla City"});$scope.agencyList.push({Id:96,Label:"Walla Walla County"});$scope.agencyList.push({Id:97,Label:"Walla Walla Ranger District"});$scope.agencyList.push({Id:98,Label:"Wallowa County"});$scope.agencyList.push({Id:99,Label:"Wallowa Valley Ranger District"});$scope.agencyList.push({Id:100,Label:"Wallowa-Whitman National Forest"});$scope.agencyList.push({Id:101,Label:"Wasco County"});$scope.agencyList.push({Id:102,Label:"Washington Department of Commerce"});$scope.agencyList.push({Id:103,Label:"Washington Department of Health"});$scope.agencyList.push({Id:104,Label:"Washington Department of Natural Resources"});$scope.agencyList.push({Id:105,Label:"Washington State Parks"});$scope.agencyList.push({Id:106,Label:"Water Resources"});$scope.agencyList.push({Id:107,Label:"WDFW"});$scope.agencyList.push({Id:108,Label:"Western Federal Lands Highway Division"});$scope.agencyList.push({Id:109,Label:"Whitman Mission (NPS)"});$scope.agencyList.push({Id:110,Label:"Whitman Unit"});$scope.agencyList.push({Id:111,Label:"Wildlife"});$scope.agencyList.push({Id:112,Label:"WSDOT"});$scope.agencyList.push({Id:113,Label:"Yellowstone National Park"});console.log("$scope.agencyList is next...");console.dir($scope.agencyList);$scope.counties=[];$scope.countyList=[];$scope.countyList.push({Id:0,Label:"Asotin"});$scope.countyList.push({Id:1,Label:"Baker"});$scope.countyList.push({Id:2,Label:"Benton"});$scope.countyList.push({Id:3,Label:"Clark"});$scope.countyList.push({Id:4,Label:"Columbia"});$scope.countyList.push({Id:5,Label:"Franklin"});$scope.countyList.push({Id:7,Label:"Garfield"});$scope.countyList.push({Id:8,Label:"Gilliam"});$scope.countyList.push({Id:9,Label:"Garfield"});$scope.countyList.push({Id:10,Label:"Grant, WA"});$scope.countyList.push({Id:11,Label:"Grant, OR"});$scope.countyList.push({Id:12,Label:"Hood River"});$scope.countyList.push({Id:13,Label:"Klickitat"});$scope.countyList.push({Id:14,Label:"Malheur"});$scope.countyList.push({Id:15,Label:"Morrow"});$scope.countyList.push({Id:16,Label:"Multnomah"});$scope.countyList.push({Id:17,Label:"Other"});$scope.countyList.push({Id:18,Label:"Sherman"});$scope.countyList.push({Id:19,Label:"Skamania"});$scope.countyList.push({Id:20,Label:"Umatilla"});$scope.countyList.push({Id:21,Label:"Union"});$scope.countyList.push({Id:22,Label:"Walla Walla"});$scope.countyList.push({Id:23,Label:"Wallowa"});$scope.countyList.push({Id:24,Label:"Wasco"});$scope.countyList.push({Id:25,Label:"Wheeler"});$scope.countyList.push({Id:26,Label:"Whitman"});console.log("$scope.countyList is next...");console.dir($scope.countyList);$scope.showOtherAgency=false;$scope.showOtherProjectProponent=false;$scope.showOtherCounty=false;$scope.showCountyOptions=false;$scope.showAddDocument=true;$scope.example1model=[];$scope.example1data=[{id:1,label:"David"},{id:2,label:"Jhon"},{id:3,label:"Danny"}];if($scope.viewSubproject){$scope.header_message="Edit CRPP project: "+$scope.viewSubproject.ProjectName;$scope.subproject_row=angular.copy($scope.viewSubproject);console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);$scope.showAddDocument=false;console.log("$scope.subproject_row.Agency = "+$scope.subproject_row.Agency);var keepGoing=true;var foundIt=false;if((typeof $scope.subproject_row.OtherAgency!=='undefined')&&($scope.subproject_row.OtherAgency!==null))
$scope.showOtherAgency=true;if((typeof $scope.subproject_row.OtherProjectProponent!=='undefined')&&($scope.subproject_row.OtherProjectProponent!==null))
$scope.showOtherProjectProponent=true;if((typeof $scope.subproject_row.County!=='undefined')&&($scope.subproject_row.County!==null)){var strCounty=$scope.subproject_row.County;strCounty=strCounty.replace(/["\[\]]+/g,'');console.log("strCounty = "+strCounty);$scope.subproject_row.County=strCounty;console.log("$scope.subproject_row.County = "+$scope.subproject_row.County);$scope.subproject_row.txtCounty=strCounty;}
if((typeof $scope.subproject_row.OtherCounty!=='undefined')&&($scope.subproject_row.OtherCounty!==null))
$scope.showOtherCounty=true;console.log("$scope.subproject_row.County is next...");console.dir($scope.subproject_row.County);angular.forEach($scope.countyList,function(option){if((keepGoing)&&(option.Label===$scope.subproject_row.County)){foundIt=true;keepGoing=false;}});angular.forEach($scope.subproject_row.County,function(county){if(county==="Other")
foundIt=true;});if(!foundIt){console.log("Value of County is not in the list...");$scope.subproject_row.OtherCounty=$scope.subproject_row.County;$scope.subproject_row.County="Other";$scope.showOtherCounty=true;}}
console.log("$scope inside ModalCreateSubprojectCtrl, after initializing, is next...");$scope.selectAgency=function(){console.log("Inside selectAgency...");console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);$scope.showCountyOptions=false;if($scope.subproject_row.Agency==="Other"){$scope.showOtherAgency=true;$scope.subproject_row.OtherAgency="";}
else{$scope.showOtherAgency=false;$scope.subproject_row.OtherAgency='undefined';}
console.log("$scope.showOtherAgency = "+$scope.showOtherAgency);};$scope.selectProjectProponent=function(){console.log("Inside selectProjectProponent...");console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);$scope.showCountyOptions=false;if($scope.subproject_row.ProjectProponent==="Other"){$scope.showOtherProjectProponent=true;$scope.subproject_row.OtherProjectProponent="";}
else{$scope.showOtherProjectProponent=false;$scope.subproject_row.OtherProjectProponent='undefined';}
console.log("$scope.showOtherProjectProponent = "+$scope.showOtherProjectProponent);};$scope.enteredSelectedCounties=function(){$scope.showCountyOptions=true;};$scope.enteredSomethingElse=function(){$scope.showCountyOptions=false;};$scope.countyChanged=function(){console.log("Inside countyChanged...");console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);$scope.subproject_row.txtCounty=$scope.subproject_row.County.toString();if($scope.subproject_row.txtCounty.indexOf("Other")>-1){$scope.showOtherCounty=true;}
else{$scope.showOtherCounty=false;$scope.subproject_row.OtherCounty=null;}
console.log("$scope.showOtherCounty = "+$scope.showOtherCounty);};$scope.save=function(){console.log("Inside ModalCreateSubprojectCtrl, save...");$scope.subprojectSave=undefined;$scope.subprojectSave=[];$scope.createNewSubproject=false;if((typeof $scope.subproject_row.ProjectName==='undefined')||($scope.subproject_row.ProjectName===null)){console.log("Project name is empty...");$scope.subprojectSave.error=true;}
if(!$scope.subprojectSave.error){console.log("$scope.subproject_row, full is next...");console.dir($scope.subproject_row);var addDocument=$scope.subproject_row.AddDocument;$scope.subproject_row.AddDocument=null;console.log("addDocument = "+addDocument);console.log("$scope.subproject_row, after del is next...");console.dir($scope.subproject_row);var saveRow=angular.copy($scope.subproject_row);console.log("saveRow is next..");console.dir(saveRow);saveRow.County=saveRow.txtCounty;saveRow.YearDate=ServiceUtilities.dateTimeNowToStrYYYYMMDD_HHmmSS();console.log("saveRow.TrackingNumber = "+saveRow.TrackingNumber);if(saveRow.TrackingNumber){var tmpTrackingNumber=saveRow.TrackingNumber;if((tmpTrackingNumber!==null)&&(tmpTrackingNumber.length>0)){tmpTrackingNumber=tmpTrackingNumber.replace(" ","");}
if(tmpTrackingNumber.length===0){saveRow.TrackingNumber=saveRow.YearDate}}
else{}
console.log("saveRow.TrackingNumber = "+saveRow.TrackingNumber);saveRow.CorrespondenceEvents=undefined;console.log("saveRow is next...");console.dir(saveRow);$scope.saveResults={};var promise=SubprojectService.saveSubproject($scope.project.Id,saveRow,$scope.saveResults);if(typeof promise!=='undefined'){promise.$promise.then(function(){console.log("promise is next...");console.dir(promise);$scope.subprojectId=$rootScope.subprojectId=promise.Id;console.log("$scope.subprojectId = "+$scope.subprojectId);$scope.subproject_row='undefined';$scope.crppProjectName=saveRow.ProjectName;$scope.postSaveSubprojectUpdateGrid(promise);if(addDocument==="Yes"){console.log("addDocument = Yes...");SubprojectService.clearSubproject();$scope.reloadSubproject($scope.subprojectId);$modalInstance.dismiss();$scope.openCorrespondenceEventForm();}
else{console.log("addDocument != Yes");$scope.reloadSubproject($scope.subprojectId);$modalInstance.dismiss();}});}}};$scope.cancel=function(){if($scope.subproject_row.OtherAgency){$scope.subproject_row.Agency=$scope.subproject_row.OtherAgency;$scope.subproject_row.OtherAgency=null;}
if($scope.subproject_row.OtherProjectProponent){$scope.subproject_row.ProjectProponent=$scope.subproject_row.OtherProjectProponent;$scope.subproject_row.OtherProjectProponent=null;}
if($scope.subproject_row.OtherCounty){$scope.subproject_row.County=$scope.subproject_row.OtherCounty;$scope.subproject_row.OtherCounty=null;}
$scope.subproject_row='undefined';$modalInstance.dismiss();};}];define("private/crpp/components/crpp-contracts/modal-create-crpp-subproject",function(){});var tab_correspondence=['$scope','$timeout','SubprojectService','ProjectService','DatasetService','CommonService','PreferencesService','$modal','ServiceUtilities','ConvertStatus',function(scope,$timeout,SubprojectService,ProjectService,DatasetService,CommonService,PreferencesService,$modal,ServiceUtilities,ConvertStatus){var otherAgencyTemplate=function(params){return'<span>'+params.node.data.Agency+'</span>'
+((params.node.data.OtherAgency)?('<span> ('+params.node.data.OtherAgency+')</span>'):'');};var EventCount=function(params){if(params.node.data.CorrespondenceEvents===undefined||params.node.data.CorrespondenceEvents===null)
return'0';return''+params.node.data.CorrespondenceEvents.length;};var EditMasterLinksTemplate=function(param){var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.editCrppSubproject(param.data);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.removeCrppSubproject(param.data);});div.appendChild(delBtn);div.appendChild(document.createTextNode("|"));var addBtn=document.createElement('a');addBtn.href='#';addBtn.innerHTML='Add Event';addBtn.addEventListener('click',function(event){event.preventDefault();scope.openCorrespondenceEventForm(param.data,{});});div.appendChild(addBtn);return div;};var FileListCellTemplate=function(params){var list='<div class="event-file-list"><ul>';var file_links=scope.getSubprojectFilesArrayAsLinks(scope.project.Id,params.node.data.SubprojectId,params.node.data.EventFiles);file_links.forEach(function(link){list+='<li>'+link+'</li>';});list+='</ul></div>';return list;};var EditDetailLinksTemplate=function(detailparam){var subproject=getById(scope.subprojectList,detailparam.data.SubprojectId);var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.openCorrespondenceEventForm(subproject,detailparam.data);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.removeCrppCorrespondenceEvent(subproject,detailparam.data);});div.appendChild(delBtn);div.appendChild(document.createTextNode("|"));var addBtn=document.createElement('a');addBtn.href='#';addBtn.innerHTML='Add';addBtn.addEventListener('click',function(event){event.preventDefault();scope.openCorrespondenceEventForm(subproject,{});});div.appendChild(addBtn);return div;};scope.corrAgColumnDefs=[{width:140,cellRenderer:EditMasterLinksTemplate,menuTabs:[],},{headerName:'ID',field:'Id',width:80,cellRenderer:'group',cellRendererParams:{suppressCount:true},menuTabs:['filterMenuTab'],filter:'number'},{field:'EffDt',headerName:'Updated',width:120,valueFormatter:function(params){if(params.node.data.EffDt!==undefined&&params.node.data.EffDt!==null)
return moment(params.node.data.EffDt).format('L');},sort:'desc',menuTabs:[],},{headerName:'Events',width:60,cellRenderer:EventCount,valueGetter:function(params){return(params.data.CorrespondenceEvents!==undefined&&params.data.CorrespondenceEvents.length>0)?params.data.CorrespondenceEvents.length:0;},menuTabs:[],},{field:'ProjectName',headerName:'Name',width:275,menuTabs:['filterMenuTab'],filter:'text'},{field:'ProjectLead',headerName:'Project Lead',width:150,menuTabs:['filterMenuTab'],},{field:'Closed',headerName:'Closed?',width:80,menuTabs:['filterMenuTab'],},{field:'Comments',headerName:'Comments',width:300,cellStyle:{'white-space':'normal'},menuTabs:['filterMenuTab'],filter:'text'},{field:'Agency',headerName:'Agency',cellRenderer:otherAgencyTemplate,width:150,menuTabs:['filterMenuTab'],},{field:'County',headerName:'County',width:150,menuTabs:['filterMenuTab'],},{field:'ProjectProponent',headerName:'Project Proponent',width:150,menuTabs:['filterMenuTab'],},];var detailColumnDefs=[{headerName:'',width:100,cellRenderer:EditDetailLinksTemplate,menuTabs:[],},{headerName:'Notice Date',field:'CorrespondenceDate',width:120,cellClass:'event-record-cell',valueFormatter:function(params){if(params.node.data.CorrespondenceDate!==undefined&&params.data.CorrespondenceDate!==null)
return moment(params.node.data.CorrespondenceDate).format('L');},sort:'desc',menuTabs:[],},{headerName:'Notice Type',field:'CorrespondenceType',cellClass:'event-record-cell',width:150,menuTabs:['filterMenuTab'],},{headerName:'Type of Response',field:'ResponseType',cellClass:'event-record-cell',width:150,menuTabs:['filterMenuTab'],},{headerName:'Days to Respond',field:'NumberOfDays',cellClass:'event-record-cell',width:100,menuTabs:[],},{field:'ResponseDate',headerName:'Date of Response',width:120,valueFormatter:function(params){if(params.data.ResponseDate!==undefined&&params.data.ResponseDate!==null)
return moment(params.node.data.ResponseDate).format('L');},menuTabs:[],},{headerName:'Technician',field:'StaffMember',cellClass:'event-record-cell',width:150,menuTabs:['filterMenuTab'],},{headerName:'Comments',field:'EventComments',cellClass:'event-record-cell',width:300,cellStyle:{'white-space':'normal'},menuTabs:['filterMenuTab'],filter:'text'},{headerName:'Documents',field:'EventFiles',width:300,cellRenderer:FileListCellTemplate,menuTabs:[],},];scope.corrDetailGridOptions={enableSorting:true,enableFilter:true,enableColResize:true,columnDefs:detailColumnDefs,onGridReady:function(params){},getRowHeight:function(params){var comment_length=(params.data.EventComments===null)?1:params.data.EventComments.length;var comment_height=25*(Math.floor(comment_length/45)+1);var file_height=25*(scope.getFilesArrayAsList(params.data.EventFiles).length);return(comment_height>file_height)?comment_height:file_height;},};scope.corrAgGridOptions={masterDetail:true,detailCellRendererParams:{detailGridOptions:scope.corrDetailGridOptions,getDetailRowData:function(params){params.successCallback(params.data.CorrespondenceEvents);},},animateRows:true,enableSorting:true,enableFilter:true,enableColResize:true,showToolPanel:false,columnDefs:scope.corrAgColumnDefs,rowData:null,rowSelection:'single',onSelectionChanged:function(params){console.log("selection changed fired!");},selectedItems:[],onGridReady:function(params){},getRowHeight:function(params){var rowIsDetailRow=params.node.level===1;if(rowIsDetailRow){return 300;}else{var comment_length=(params.data.Comments===null)?1:params.data.Comments.length;return 25*(Math.floor(comment_length/45)+1);}},onRowDoubleClicked:function(row){scope.corrAgGridOptions.api.collapseAll();row.node.setSelected(true);row.node.setExpanded(true);},onRowClicked:function(row){row.node.setSelected(true);},};var crpp_ds_watcher=scope.$parent.$watch('project',function(){if(typeof scope.project==='undefined'||typeof scope.project.Id==='undefined')
return;crpp_ds_watcher();if(scope.isCRPPProject(scope.project)){console.log("Adding Correspondence to tab bar because we are a CRPP project...");scope.ShowSubproject=true;$timeout(function(){var ag_grid_div=document.querySelector('#crpp-correspondence-grid');scope.ag_grid=new agGrid.Grid(ag_grid_div,scope.corrAgGridOptions);scope.corrAgGridOptions.api.showLoadingOverlay();scope.subprojectList=SubprojectService.getSubprojects();var watcher=scope.$watch('subprojectList.length',function(){if(scope.subprojectList===undefined||scope.subprojectList==null||scope.subprojectList.length===0)
return;console.log("our crpp subproject list is back -- build the grid. we have "+scope.subprojectList.length+" of them.");scope.corrAgGridOptions.api.setRowData(scope.subprojectList);watcher();});},0);}else{console.log(" we are NOT a crpp project so no Correspondence tab.");}},true);scope.openCorrespondenceEventForm=function(subproject,ce_row){scope.viewSubproject=subproject;scope.ce_row=ce_row;var modalInstance=$modal.open({templateUrl:'app/private/crpp/components/crpp-contracts/templates/modal-new-correspondenceEvent.html',controller:'ModalAddCorrespondenceEventCtrl',scope:scope,});};scope.removeCrppSubproject=function(subproject){if(!subproject)
return;scope.viewSubproject=subproject;if(scope.viewSubproject.CorrespondenceEvents.length>0){alert("This project has associated correspondence events.  Those must be deleted first.");}else{scope.verifyAction="Delete";scope.verifyingCaller="CrppSubproject";var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-verifyAction.html',controller:'ModalVerifyActionCtrl',scope:scope,});}};scope.postRemoveSubprojectUpdateGrid=function(){console.log("ok - we removed one so update the grid...");scope.subprojectList.forEach(function(item,index){if(item.Id===scope.viewSubproject.Id){scope.subprojectList.splice(index,1);scope.corrAgGridOptions.api.setRowData(scope.subprojectList);}});};scope.postEditCorrespondenceEventUpdateGrid=function(edited_event){console.log("editCrppCorrespondenceEvent..."+edited_event.Id+" for subproject "+edited_event.SubprojectId);scope.subprojectList.forEach(function(item,index){if(item.Id===edited_event.SubprojectId){item.EffDt=moment(new Date()).format()+"";item.CorrespondenceEvents.forEach(function(event_item,event_item_index){if(event_item.Id===edited_event.Id){angular.extend(event_item,edited_event);}});}});scope.corrAgGridOptions.api.setRowData(scope.subprojectList);var the_node=scope.expandSubProjectById(edited_event.SubprojectId);if(the_node!=null)
scope.corrAgGridOptions.api.ensureNodeVisible(the_node);console.log("done reloading grid after removing item.");};scope.postAddCorrespondenceEventUpdateGrid=function(new_event){console.log("saving correspondence event for "+new_event.SubprojectId);var subproject=getById(scope.subprojectList,new_event.SubprojectId);if(subproject===undefined||subproject==null){console.log("no subproject...");}else{scope.subprojectList.forEach(function(item,index){if(item.Id===subproject.Id){item.EffDt=moment(new Date()).format()+"";item.CorrespondenceEvents.push(new_event);}});scope.corrAgGridOptions.api.setRowData(scope.subprojectList);var the_node=scope.expandSubProjectById(subproject.Id);if(the_node!=null)
scope.corrAgGridOptions.api.ensureNodeVisible(the_node);console.log("done reloading grid after removing item.");}};scope.expandSubProjectById=function(id_in){var the_node=null;scope.corrAgGridOptions.api.forEachNode(function(node){if(node.data.Id===id_in){node.setExpanded(true);the_node=node;}});return the_node;};scope.removeCrppCorrespondenceEvent=function(subproject,event){console.log("removeCrppCorrespondenceEvent..."+event.Id+" for subproject "+subproject.Id);if(confirm('Are you sure that you want to delete this Correspondence Event?')){var promise=SubprojectService.removeCorrespondenceEvent(scope.project.Id,subproject.Id,event.Id,scope.DatastoreTablePrefix);promise.$promise.then(function(){scope.subprojectList.forEach(function(item,index){if(item.Id===subproject.Id){item.CorrespondenceEvents.forEach(function(event_item,event_item_index){if(event_item.Id===event.Id){item.CorrespondenceEvents.splice(event_item_index,1);}});}});scope.corrAgGridOptions.api.setRowData(scope.subprojectList);var the_node=scope.expandSubProjectById(subproject.Id);if(the_node!=null)
scope.corrAgGridOptions.api.ensureNodeVisible(the_node);console.log("done reloading grid after removing item.");});}};scope.createCrppSubproject=function(){scope.viewSubproject=null;scope.createNewSubproject=true;scope.subprojectOptions=null;var modalInstance=$modal.open({templateUrl:'app/private/crpp/components/crpp-contracts/templates/modal-create-subproject.html',controller:'ModalCreateSubprojectCtrl',scope:scope,});};scope.postSaveSubprojectUpdateGrid=function(the_promise){var total=scope.subprojectList.length;var count=0;var updated=false;scope.subprojectList.forEach(function(item,index){if(item.Id===the_promise.Id){updated=true;if(the_promise.CorrespondenceEvents!==undefined)
delete the_promise.CorrespondenceEvents;angular.extend(scope.subprojectList[index],the_promise);scope.corrAgGridOptions.api.redrawRows();}
count++;if(count==total&&updated==false)
{the_promise.CorrespondenceEvents=[];the_promise.Files=[];scope.subprojectList.push(the_promise);scope.corrAgGridOptions.api.setRowData([]);scope.corrAgGridOptions.api.setRowData(scope.subprojectList);}});};scope.editCrppSubproject=function(subproject){scope.viewSubproject=subproject;var modalInstance=$modal.open({templateUrl:'app/private/crpp/components/crpp-contracts/templates/modal-create-subproject.html',controller:'ModalCreateSubprojectCtrl',scope:scope,});};scope.redrawRows=function(){scope.corrAgGridOptions.api.setRowData([]);setTimeout(function(){scope.corrAgGridOptions.api.setRowData(scope.subprojectList);},4000);};scope.refreshCells=function(){scope.corrAgGridOptions.api.refreshCells();};scope.refreshMemory=function(){scope.corrAgGridOptions.api.refreshInMemoryRowModel('group');};scope.isCRPPProject=function(a_project)
{return(a_project.MetadataValue[METADATA_PROPERTY_PROGRAM])==="CRPP";}}];define("private/crpp/components/crpp-contracts/tab-correspondence",function(){});define('private/crpp/contracts-map-directive',['app','esri/map','esri/geometry/Point','esri/dijit/InfoWindow','esri/InfoTemplate','esri/dijit/BasemapLayer','esri/dijit/BasemapGallery','esri/dijit/Basemap'],function(app,Map,Point,InfoWindow,InfoTemplate){app.directive('crppDocumentsMap',function($rootScope){return{restrict:'E',scope:false,compile:function($element,$attrs){$element.removeAttr("id");$element.append("<div id="+$attrs.id+"></div>");return function(scope,element,attrs,controller){scope.$watch("center",function(newCenter,oldCenter){if(newCenter!==oldCenter){controller.centerAt(newCenter);}});};},controller:function($scope,$element,$attrs){var mapOptions={center:($attrs.center)?$attrs.center.split(","):$scope.center,zoom:($attrs.zoom)?$attrs.zoom:$scope.zoom,spatialReference:{wkid:102100}};console.log("trying to make the map");var map=new Map($attrs.id,mapOptions);map.selectedBasemap=defaultLayer;map.selectedServiceLayers=[];map.basemaps=[];for(var property in parcelLayerConfig){if(parcelLayerConfig.hasOwnProperty(property))
{map.basemaps.push({label:parcelLayerConfig[property].Display,name:property});}};map.serviceLayers=[];for(var property in servicesLayerConfig){if(servicesLayerConfig.hasOwnProperty(property))
{map.serviceLayers.push({label:servicesLayerConfig[property].Display,name:property});}};map.updateLayers=function(){console.log("Changing Layer: "+map.selectedBasemap);try{console.log("Loading layer: "+parcelLayerConfig[map.selectedBasemap].ServiceURL);map.removeAllLayers();var new_layer=new esri.layers.ArcGISTiledMapServiceLayer(parcelLayerConfig[map.selectedBasemap].ServiceURL);map.addLayer(new_layer);map.currentBasemapLayer=new_layer;for(var i=map.selectedServiceLayers.length-1;i>=0;i--){var service_layer=new esri.layers.ArcGISDynamicMapServiceLayer(servicesLayerConfig[map.selectedServiceLayers[i]].ServiceURL);map.addLayer(service_layer);};map.parcelLayer=new esri.layers.GraphicsLayer();map.addLayer(map.parcelLayer);console.log("done!");map.reposition();}
catch(e)
{console.dir(e);}};map.updateLayers();this.addLayer=function(layer,filter){map.locationLayer=map.addLayer(layer);layer.showLocationsById=function(locationObjectIds){try{this.clearSelection();var definitionExpression="OBJECTID IN ("+locationObjectIds+")";console.log("Definition expression: "+definitionExpression);this.setDefinitionExpression(definitionExpression);this.refresh();}catch(e)
{console.dir(e);}};if(filter&&filter=="location")
{if(typeof $scope.locationObjectIds=="undefined")
{$scope.$watch('locationObjectIds',function(){if(typeof $scope.locationObjectIds=="undefined")
return;layer.showLocationsById($scope.locationObjectIds);layer.show();});}}
return map.locationLayer;};map.querySearchParcel=function(searchParam,callback)
{var queryTask=new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);var query=new esri.tasks.Query();query.where=dojo.string.substitute(parcelLayerConfig[map.selectedBasemap].ParcelQuery,[searchParam]);query.returnGeometry=false;query.outSpatialReference=this.spatialReference;query.outFields=["*"];queryTask.execute(query,function(result){callback(result.features);},function(err){console.log("Failure executing query!");console.dir(err);console.dir(query);});};map.queryMatchParcel=function(searchParam,callback)
{var queryTask=new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);var query=new esri.tasks.Query();query.where=dojo.string.substitute(parcelLayerConfig[map.selectedBasemap].LocateParcelQuery,[searchParam]);query.returnGeometry=false;query.outSpatialReference=this.spatialReference;query.outFields=["*"];queryTask.execute(query,function(result){callback(result.features);},function(err){console.log("Failure executing query!");console.dir(err);console.dir(query);});};map.querySelectParcel=function(mapPoint,objectId,callback){console.log("Running query on: "+parcelLayerConfig[map.selectedBasemap].QueryURL);var queryTask=new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);var query=new esri.tasks.Query();query.outSpatialReference=this.spatialReference;query.returnGeometry=true;query.outFields=["*"];if(mapPoint){query.geometry=mapPoint;}
else{query.objectIds=[objectId];}
query.spatialRelationship=esri.tasks.Query.SPATIAL_REL_INTERSECTS;queryTask.execute(query,function(result){console.dir(result);callback(result.features);},function(err){console.log("Failure executing query!");console.dir(err);console.dir(query);});};map.clearGraphics=function(){this.parcelLayer.clear();}
map.addParcelToMap=function(feature,color,alpha)
{var graphic;if(!color)
color="#FF6600";if(!alpha)
alpha=.25;var lineColor=new dojo.Color();lineColor.setColor(color);var fillColor=new dojo.Color();fillColor.setColor(color);fillColor.a=alpha;var symbol=new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID,lineColor,3),fillColor);graphic=new esri.Graphic(feature.geometry,symbol,feature.attributes);this.parcelLayer.clear();this.parcelLayer.add(graphic);this.selectedFeature=feature;this.selectedGraphic=graphic;$scope.$emit("map.selectedFeature",feature);}
map.centerAndZoomToGraphic=function(graphic)
{var centerPoint=graphic.geometry.getExtent().getCenter();return map.centerAndZoom(centerPoint,15);};this.centerAt=function(center){var point=new Point({x:center[0],y:center[1],spatialReference:{wkid:102100}});map.centerAt(point);};map.on("click",function(e){$scope.$emit("map.click",e);$scope.$apply(function($scope){$scope.click.call($scope,e);});});$scope.map=map;}};});});require(['private/crpp/components/crpp-contracts/modal-add-correspondence-event','private/crpp/components/crpp-contracts/modal-create-crpp-subproject','private/crpp/components/crpp-contracts/tab-correspondence','private/crpp/contracts-map-directive',],function(){crpp_module.controller('ModalAddCorrespondenceEventCtrl',modal_add_correspondence_event);crpp_module.controller('ModalCreateSubprojectCtrl',modal_create_crpp_subproject);crpp_module.controller('TabCorrespondenceController',tab_correspondence);});define("private/crpp/crpp-module",function(){});var modal_add_habitat=['$scope','$rootScope','$modalInstance','$modal','DatasetService','SubprojectService','ServiceUtilities','$filter','FileUploadService','$upload','$location','$anchorScroll',function($scope,$rootScope,$modalInstance,$modal,DatasetService,SubprojectService,ServiceUtilities,$filter,FileUploadService,$upload,$location,$anchorScroll){console.log("Inside ModalAddHabitatItemCtrl...");if((typeof $scope.viewSubproject!=='undefined')&&($scope.viewSubproject!==null))
$rootScope.subprojectId=$scope.viewSubproject.Id;$scope.filesToUpload={};$scope.verifyActionFormOpen="No";$scope.showOtherResponseType=false;$scope.ReadyToClose="";$scope.showCloseButton=false;$scope.showCancelButton=true;$scope.showFormItems=true;$scope.fileCount=0;$scope.fileProgress=0;$rootScope.projectId=$scope.project.Id;console.log("$scope.projectId = "+$scope.projectId);var keepGoing=true;var foundIt=false;if($scope.hi_row.Id>0)
{$scope.header_message="Edit Item for Project "+$scope.viewSubproject.ProjectName;}
else
{if((typeof $scope.viewSubproject!=='undefined')&&($scope.viewSubproject!==null))
$scope.header_message="Add Item to Project "+$scope.viewSubproject.ProjectName;else if((typeof $scope.habProjectName!=='undefined')&&($scope.habProjectName!==null))
$scope.header_message="Add Item to Project "+$scope.habProjectName;}
console.log("$scope.hi_row is next...");console.dir($scope.hi_row);console.log("$scope (after initialization) is next...");$scope.openFileModal=function(row,field)
{console.log("Inside ModalAddHabitatItemCtrl, openFileModal...");console.log("row is next...");console.dir(row);console.log("field is next...");console.dir(field);$scope.file_row=row;$scope.file_field={DbColumnName:"ItemFiles"};var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file.html',controller:'FileModalCtrl',scope:$scope,});};$scope.openLinkModal=function(row,field)
{console.log("Inside ModalAddHabitatItemCtrl, openLinkModal...");console.log("row is next...");console.dir(row);console.log("field is next...");console.dir(field);$scope.link_row=row;$scope.link_field={DbColumnName:"ExternalLinks"};var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-link-field.html',controller:'LinkModalCtrl',scope:$scope,});};$scope.onFileSelect=function(field,files)
{console.log("Inside ModalAddHabitatItemCtrl, onFileSelect");console.log("file selected! "+field);$scope.filesToUpload[field]=files;};$scope.$watch('fileProgress',function(){if($scope.fileProgress<$scope.fileCount)
return;if($scope.saving)
{$scope.loading=false;$scope.showCloseButton=true;$scope.showCancelButton=false;$scope.showFormItems=false;}});$scope.save=function(){console.log("Inside ModalAddHabitatItemCtrl, save...");$scope.saving=true;$scope.loading=true;var saveRow=angular.copy($scope.hi_row);if(!saveRow.Id)
saveRow.Id=0;console.log("saveRow is next, after checking/setting the Id...");console.dir(saveRow);if($scope.foundDuplicate)
{alert("One or more of the files to upload is a duplicate!");return;}
var subprojectId=0;if($scope.viewSubproject)
subprojectId=$scope.viewSubproject.Id
else
subprojectId=$scope.subprojectId;if($scope.filesToUpload.ItemFiles)
{$scope.fileCount=0;angular.forEach($scope.filesToUpload.ItemFiles,function(aFile){$scope.fileCount++;});console.log("$scope.fileCount = "+$scope.fileCount);console.log("$scope.filesToUpload.ItemFiles is next...");console.dir($scope.filesToUpload.ItemFiles);for(var i=0;i<$scope.filesToUpload.ItemFiles.length;i++)
{var file=$scope.filesToUpload.ItemFiles[i];console.log("file is next...");console.dir(file);var newFileNameLength=file.name.length;console.log("file name length = "+newFileNameLength);if($scope.foundDuplicate)
alert(errors);else
{console.log("file is next again...");console.dir(file);console.log("file.success = "+file.success);if(file.success!="Success")
{console.log("No file.success, so let's save the file...");$scope.upload=$upload.upload({url:serviceUrl+'/api/v1/habsubproject/uploadhabitatfile',method:"POST",data:{ProjectId:$scope.project.Id,SubprojectId:subprojectId,Description:"Uploaded file "+file.Name,Title:file.Name,SubprojectType:"Hab"},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){console.log("The following are next:  data, status, headers, config, file");console.dir(data);console.dir(status);console.dir(headers);console.dir(config);console.dir(file);config.file.success="Success";console.log("done and success!");$scope.fileProgress++;}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";config.file.success="Failed";});console.log("$scope.upload is next...");console.dir($scope.upload);}
if(file.success)
{}}}
angular.forEach($scope.filesToUpload,function(files,field){if(field=="null"||field=="")
return;var local_files=[];for(var i=0;i<files.length;i++)
{console.log("$scope is next...")
var file=files[i];console.log("Reviewing results on file "+file.Name);console.dir(file);console.log("$scope.errors is next...");console.dir($scope.errors);console.log("typeof $scope.errors = "+typeof $scope.errors);if(file.data&&file.data.length==1)
{local_files.push(file.data[0]);}
else if(typeof $scope.errors==='undefined')
{console.log("No errors...");}
else
{$scope.foundDuplicate=true;$scope.errors.heading.push("There was a problem saving file: "+file.Name+" - Try a unique filename.");throw"Problem saving file: "+file.Name;}}
console.log("$scope.file_row is next...");console.dir($scope.file_row);console.log("field = "+field);if($scope.file_row[field])
{console.log("On Files field...");var current_files=angular.fromJson($scope.file_row[field]);angular.forEach(current_files,function(file){if(file.Id)
local_files.push(file);});}
$scope.file_row[field]=angular.toJson(local_files);});}
var promise=SubprojectService.saveHabitatItem($scope.projectId,$scope.viewSubproject.Id,saveRow);if(typeof promise!=='undefined'){promise.$promise.then(function(){if(saveRow.Id>0){$scope.postEditHabitatItemUpdateGrid(promise);}else{$scope.postAddHabitatItemUpdateGrid(promise);}
$modalInstance.dismiss();});console.log("1 typeof $scope.errors = "+typeof $scope.errors+", $scope.fileCount = "+$scope.fileCount+", $scope.fileProgress = "+$scope.fileProgress);if($scope.fileCount===0){$scope.loading=false;$scope.showCloseButton=true;$scope.showCancelButton=false;$scope.showFormItems=false;}}};$scope.close=function(){console.log("Inside $scope.close...");$modalInstance.dismiss();};$scope.cancel=function(){$modalInstance.dismiss();};$scope.gotoBottom=function(){$location.hash('bottom');$anchorScroll();};$scope.gotoTopHabitatItemsTop=function(){console.log("Inside gotoTopHabitatItemsTop...");$location.hash('hiTop');$anchorScroll();};$scope.gotoCategory=function(category){$location.hash(category);$anchorScroll();};}];define("private/habitat/components/habitat-sites/modal-add-habitat-item",function(){});var modal_create_habitat_subproject=['$scope','$rootScope','$modalInstance','$modal','DatasetService','CommonService','SubprojectService','ServiceUtilities','$timeout','$location','$anchorScroll','$document','$upload',function($scope,$rootScope,$modalInstance,$modal,DatasetService,CommonService,SubprojectService,ServiceUtilities,$timeout,$location,$anchorScroll,$document,$upload){console.log("Inside ModalCreateHabSubprojectCtrl...");initEdit();$scope.header_message="Create new Habitat project";$rootScope.newSubproject=$scope.newSubproject=true;$scope.waterbodies=CommonService.getWaterBodies();$rootScope.habProjectName=$scope.habProjectName="";$scope.showAddDocument=true;$scope.savingHabSubproject=false;$scope.showFundingBox=false;$rootScope.projectId=$scope.project.Id;$scope.SdeObjectId=angular.copy($scope.SdeObjectId);$scope.NewPoint=false;$scope.fundersPresent=false;$scope.collaboratorPresent=false;$scope.featureImagePresent=false;$scope.subproject_row={StatusId:0,};$scope.subproject_row=angular.copy(DEFAULT_LOCATION_PROJECTION_ZONE);$scope.subproject_row.strFunders="";$scope.subproject_row.Funding=[];$scope.collaboratorList=[];$scope.collaboratorList.push("Blue Mountain Habitat Restoration Council");$scope.collaboratorList.push("Bureau of Reclamation");$scope.collaboratorList.push("Bonneville Power Authority");$scope.collaboratorList.push("Columbia Conservation District");$scope.collaboratorList.push("CTUIR");$scope.collaboratorList.push("Eco Trust");$scope.collaboratorList.push("Grande Ronde Model Watershed");$scope.collaboratorList.push("Landowners");$scope.collaboratorList.push("Nez Perce Tribe");$scope.collaboratorList.push("NF John Day Watershed Council");$scope.collaboratorList.push("Natural Resource Conservation Service");$scope.collaboratorList.push("Oregon Department of Fish and Wildlife");$scope.collaboratorList.push("Oregon Department of Transportation");$scope.collaboratorList.push("Oregon Watershed Enhancement Board");$scope.collaboratorList.push("Other");$scope.collaboratorList.push("Pacific Coastal Salmon Recovery Fund");$scope.collaboratorList.push("Pomeroy Conservation District");$scope.collaboratorList.push("Salmon Recovery Funding Board");$scope.collaboratorList.push("Snake River Salmon Recovery Board");$scope.collaboratorList.push("Umatilla County Soil and Water Conservation District");$scope.collaboratorList.push("Umatilla National Forest");$scope.collaboratorList.push("US Forest Service");$scope.collaboratorList.push("Wallowa Whitman National Forest");$scope.collaboratorList.push("Washington Department of Fish and Wildlife");$scope.showCollaboratorOptions=false;$scope.showOtherCollaborators=false;$scope.showOtherFundingAgency=false;$scope.showFunders=false;$scope.showFundingOptions=false;$scope.subproject_row.strCollaborators="";$scope.subproject_row.Collaborators=[];$scope.uploadComplete=false;var values=null;if($scope.viewSubproject)
{$scope.header_message="Edit Habitat project: "+$scope.viewSubproject.ProjectName;$rootScope.newSubproject=$scope.newSubproject=false;$scope.subprojectFileList=$rootScope.subprojectFileList;$scope.subproject_row=angular.copy($scope.viewSubproject);$scope.showAddDocument=false;if($scope.subproject_row.FeatureImage!==null)
{$scope.subproject_row['ItemFiles']='[{"Name":"'+$scope.subproject_row.FeatureImage+'"}]';}
values=null;try
{values=angular.fromJson($scope.subproject_row.FirstFoods);var strFirstFoods=values.toString();}
catch(e)
{values=$scope.subproject_row.FirstFoods.split(",");var strFirstFoods=$scope.subproject_row.FirstFoods.toString();}
$scope.subproject_row.FirstFoods=values;values=null;try
{values=angular.fromJson($scope.subproject_row.RiverVisionTouchstone);}
catch(e)
{values=$scope.subproject_row.RiverVisionTouchstone.split(",");}
$scope.subproject_row.RiverVisionTouchstone=values;values=null;try
{values=angular.fromJson($scope.subproject_row.HabitatObjectives);}
catch(e)
{values=$scope.subproject_row.HabitatObjectives.split(",");}
$scope.subproject_row.HabitatObjectives=values;values=null;try
{values=angular.fromJson($scope.subproject_row.NoaaEcologicalConcerns);}
catch(e)
{values=$scope.subproject_row.NoaaEcologicalConcerns.split(",");}
$scope.subproject_row.NoaaEcologicalConcerns=values;values=null;try
{values=angular.fromJson($scope.subproject_row.NoaaEcologicalConcernsSubcategories);}
catch(e)
{values=$scope.subproject_row.NoaaEcologicalConcernsSubcategories.split(",");}
$scope.subproject_row.NoaaEcologicalConcernsSubcategories=values;values=null;try
{values=angular.fromJson($scope.subproject_row.LimitingFactors);}
catch(e)
{values=$scope.subproject_row.LimitingFactors.split(",");}
$scope.subproject_row.LimitingFactors=values;}
console.log("$scope inside ModalCreateHabSubprojectCtrl, after initializing, is next...");$scope.$watch('uploadComplete',function(){if(!$scope.uploadComplete)
return;console.log("Inside watch uploadComplete...");angular.forEach($scope.filesToUpload,function(files,field){if(field=="null"||field=="")
return;var local_files=[];for(var i=0;i<files.length;i++)
{console.log("$scope is next...")
var file=files[i];console.log("Reviewing results on file "+file.Name);console.dir(file);console.log("$scope.errors is next...");console.dir($scope.errors);console.log("typeof $scope.errors = "+typeof $scope.errors);if(file.data&&file.data.length==1)
{local_files.push(file.data[0]);}
else if(typeof $scope.errors==='undefined')
{console.log("No errors...");}
else
{$scope.foundDuplicate=true;$scope.errors.heading.push("There was a problem saving file: "+file.Name+" - Try a unique filename.");throw"Problem saving file: "+file.Name;}}
console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);console.log("field = "+field);if($scope.subproject_row[field])
{console.log("On Files field...");var current_files=angular.fromJson($scope.subproject_row[field]);angular.forEach(current_files,function(file){if(file.Id)
local_files.push(file);});}
$scope.subproject_row[field]=angular.toJson(local_files);if($scope.addDocument==="Yes")
{console.log("$scope.addDocument = Yes...");$scope.openHabitatItemForm();}
else
{console.log("$scope.addDocument != Yes");}
SubprojectService.clearSubproject();if(($scope.filesToUpload.ItemFiles)||($scope.NewPoint))
{console.log("Reloading the whole project, because we have a new location or file...");$scope.reloadThisProject();}
else
{console.log("Just reloading the subproject...");$scope.reloadSubproject($scope.subprojectId);}});});$scope.$watch('savingHabSubproject',function(){console.log("Inside ModalCreateHabSubprojectCtrl, watch savingHabSubproject...");console.log("$scope.savingHabSubproject = "+$scope.savingHabSubproject);if($scope.savingHabSubproject===false)
return;var fileAlreadySaved=false;console.log("$scope.subproject_row.LocationId (in watch) = "+$scope.subproject_row.LocationId);var saveRow=angular.copy($scope.subproject_row);console.log("saveRow (before wiping HabitatItems) is next..");console.dir(saveRow);saveRow.HabitatItems=undefined;console.log("saveRow (after wiping HabitatItems) is next...");console.dir(saveRow);var promise=null;promise=SubprojectService.saveHabSubproject(parseInt($scope.projectId),saveRow,$scope.saveResults);if(typeof promise!=='undefined')
{promise.$promise.then(function(){if($scope.NewPoint)
{$scope.subprojectId=$rootScope.subprojectId=promise.Id;console.log("$scope.subprojectId = "+$scope.subprojectId);$scope.locationId=promise.LocationId;console.log("$scope.locationId = "+$scope.locationId);var newLocation=angular.copy(DEFAULT_LOCATION_PROJECTION_ZONE);newLocation.Id=$scope.locationId;newLocation.Label=saveRow.ProjectName;newLocation.Description=saveRow.ProjectDescription;newLocation.GPSEasting=saveRow.GPSEasting;newLocation.GPSNorthing=saveRow.GPSNorthing;newLocation.ProjectId=parseInt($scope.projectId);newLocation.SubprojectId=$scope.subprojectId;newLocation.SdeObjectId=$scope.SdeObjectId;newLocation.LocationTypeId=LOCATION_TYPE_Hab;newLocation.WaterBodyId=saveRow.WaterBodyId;console.log("newLocation is next...");console.dir(newLocation);var loc_promise=CommonService.saveNewProjectLocation($scope.project.Id,newLocation);loc_promise.$promise.then(function(){console.log("Adding this to the project locations: ");console.dir(loc_promise);console.log(" -- locations after");console.dir(scope.project.Locations);scope.project.Locations.push(loc_promise);});}
else
{console.log("We are working with an existing location...");}
var i=0;var fileSize=1;if($scope.filesToUpload.ItemFiles)
{console.log("$scope.filesToUpload.ItemFiles is next...");console.dir($scope.filesToUpload.ItemFiles);$rootScope.featureImagePresent=$scope.featureImagePresent=true;for(i=0;i<$scope.filesToUpload.ItemFiles.length;i++)
{var file=$scope.filesToUpload.ItemFiles[i];console.log("file is next...");console.dir(file);var newFileNameLength=file.name.length;console.log("file name length = "+newFileNameLength);if($scope.foundDuplicate)
alert(errors);else
{console.log("file is next again...");console.dir(file);console.log("file.success = "+file.success);if(file.success!="Success")
{console.log("No file.success means we have not saved the file yet, so let's save it...");$scope.upload=$upload.upload({url:serviceUrl+'/api/v1/habsubproject/uploadhabitatfile',method:"POST",data:{ProjectId:$scope.project.Id,SubprojectId:$scope.subprojectId,Description:"Uploaded file "+file.Name,Title:file.Name,SubprojectType:"Hab",FeatureImage:1},file:file,}).progress(function(evt){console.log('percent: '+parseInt(100.0*evt.loaded/evt.total));}).success(function(data,status,headers,config){console.log("file is next...");console.dir(file);config.file.success="Success";console.log("file is next...");console.dir(file);console.log("done and success!");$scope.refreshProjectLocations();}).error(function(data,status,headers,config){$scope.uploadErrorMessage="There was a problem uploading your file.  Please try again or contact the Helpdesk if this issue continues.";config.file.success="Failed";});}
else
{console.log("We have already saved this file...");fileAlreadySaved=true;}}}
if(i===0)
$rootScope.featureImagePresent=$scope.featureImagePresent=false;if(!fileAlreadySaved)
setTimeout($scope.fileUploadResultsReviewer,(i*1000));}
else
{console.log("Not uploading any new files...");}
setTimeout($scope.finalPart,((i+1)*1000));console.log("----------------------- ***************** ------------ PROMISE return from hab");console.log("promise");console.dir(promise);console.log("and the saverow");console.dir(saveRow);promise.Collaborators=saveRow.Collaborators;promise.Funding=saveRow.Funding;console.log("and here is our final:");$scope.subproject_edited=promise;console.dir($scope.subproject_edited);console.log("and if we do the extends thing:")
var extended=angular.extend({},saveRow,promise);console.dir(extended);});}});$scope.fileUploadResultsReviewer=function(){console.log("Inside $scope.fileUploadResultsReviewer...");angular.forEach($scope.filesToUpload,function(files,field){if(field=="null"||field=="")
return;var local_files=[];console.log("$scope is next...")
for(var i=0;i<files.length;i++)
{var file=files[i];console.log("Reviewing results on file "+file.Name);console.dir(file);console.log("$scope.errors is next...");console.dir($scope.errors);console.log("typeof $scope.errors = "+typeof $scope.errors);if(file.data&&file.data.length==1)
{local_files.push(file.data[0]);}
else if(typeof $scope.errors==='undefined')
{console.log("No errors...");}
else
{$scope.foundDuplicate=true;$scope.errors.heading.push("There was a problem saving file: "+file.Name+" - Try a unique filename.");throw"Problem saving file: "+file.Name;}}
console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);console.log("field = "+field);if($scope.subproject_row[field])
{console.log("On Files field...");var current_files=angular.fromJson($scope.subproject_row[field]);console.log("var current_files is next...");console.dir(current_files);angular.forEach(current_files,function(file){if(file.Id)
local_files.push(file);});}
$scope.subproject_row[field]=angular.toJson(local_files);});};$scope.finalPart=function(){console.log("Inside $scope.finalPart...");$scope.postSaveHabitatSubprojectUpdateGrid($scope.subproject_edited);if($scope.addDocument==="Yes")
{console.log("$scope.addDocument = Yes...");$modalInstance.dismiss();$scope.openHabitatItemForm();}
else
{console.log("$scope.addDocument != Yes");$scope.reloadSubprojectLocations();$modalInstance.dismiss();}};$scope.selectFunder=function(){console.log("Inside selectFunder...");console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);if($scope.subproject_row.fundingName==="Other")
{$scope.showOtherFunder=true;$scope.subproject_row.OtherFundingAgency="";}
else
{$scope.showOtherFunder=false;$scope.subproject_row.OtherFundingAgency='undefined';}
console.log("$scope.showOtherAgency = "+$scope.showOtherAgency);};$scope.selectCollaborator=function(){console.log("Inside selectCollaborator...");console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);if($scope.subproject_row.Collaborators==="Other")
{$scope.showOtherCollaborators=true;$scope.subproject_row.OtherCollaborators="";}
else
{$scope.showOtherCollaborators=false;$scope.subproject_row.OtherCollaborators='undefined';}
console.log("$scope.OtherCollaborators = "+$scope.OtherCollaborators);};$scope.enteredSelectedCollaborators=function(){$scope.showCollaboratorOptions=true;};$scope.enteredSomethingElse=function(){$scope.showCollaboratorOptions=false;};$scope.collaboratorChanged=function(){console.log("Inside collaboratorChanged...");console.log("$scope.subproject_row is next...");console.dir($scope.subproject_row);$scope.subproject_row.strCollaborators=$scope.subproject_row.Collaborators.toString();if($scope.subproject_row.strCollaborators.indexOf("Other")>-1)
{$scope.showOtherCollaborators=true;}
else
{$scope.showOtherCollaborators=false;$scope.subproject_row.OtherCollaborators=null;}
console.log("$scope.showOtherCollaborators = "+$scope.showOtherCollaborators);};$scope.addCollaborator=function(){console.log("+C clicked...");console.log("$scope.subproject_row.strCollaborators = "+$scope.subproject_row.strCollaborators);if(typeof $scope.subproject_row.strCollaborators==='undefined')
$scope.subproject_row.strCollaborators="";if($scope.subproject_row.Collaborators==="Other")
{$scope.subproject_row.strCollaborators+=$scope.subproject_row.OtherCollaborators+";\n";}
else
{$scope.subproject_row.strCollaborators+=$scope.subproject_row.Collaborators+";\n";}
console.log("$scope.subproject_row.strCollaborators = "+$scope.subproject_row.strCollaborators);};$scope.removeCollaborator=function(){console.log("-C clicked...");console.log("$scope.subproject_row.strCollaborators before stripping = "+$scope.subproject_row.strCollaborators);$scope.subproject_row.strCollaborators=$scope.subproject_row.strCollaborators.replace(/(\r\n|\r|\n)/gm,"");console.log("$scope.subproject_row.strCollaborators after stripping = "+$scope.subproject_row.strCollaborators);var aryCollaborators=$scope.subproject_row.strCollaborators.split(";");aryCollaborators.splice(-1,1);console.dir(aryCollaborators);var aryCollaboratorsLength=aryCollaborators.length;if(($scope.subproject_row.Collaborators==="Other")&&($scope.subproject_row.OtherCollaborators))
{for(var i=0;i<aryCollaboratorsLength;i++)
{console.log("aryCollaborators[i] = "+aryCollaborators[i]);if(aryCollaborators[i].indexOf($scope.subproject_row.OtherCollaborators)>-1)
{console.log("Found the item...");aryCollaborators.splice(i,1);console.log("Removed the item.");$scope.subproject_row.strCollaborators="";console.log("Wiped $scope.subproject_row.strCollaborators...");angular.forEach(aryCollaborators,function(item){$scope.subproject_row.strCollaborators+=item+";\n";console.log("Added item...");});i=aryCollaboratorsLength;}}}
else
{for(var i=0;i<aryCollaboratorsLength;i++)
{console.log("aryCollaborators[i] = "+aryCollaborators[i]);if(aryCollaborators[i].indexOf($scope.subproject_row.Collaborators)>-1)
{console.log("Found the item...");aryCollaborators.splice(i,1);console.log("Removed the item.");$scope.subproject_row.strCollaborators="";console.log("Wiped $scope.subproject_row.strCollaborators...");angular.forEach(aryCollaborators,function(item){$scope.subproject_row.strCollaborators+=item+";\n";console.log("Added item...");});i=aryCollaboratorsLength;}}}
console.log("Finished.");};$scope.addFundingAgency=function(){console.log("+FA clicked...");console.log("$scope.subproject_row.strFunders = "+$scope.subproject_row.strFunders);console.log("$scope.subproject_row.fundingAmount = "+$scope.subproject_row.fundingAmount+", typeof $scope.subproject_row.fundingAmount = "+typeof $scope.subproject_row.fundingAmount);if(!$scope.subproject_row.fundingAmount)
{alert("If you add a Funding Agency, you MUST enter a funding amount.");return;}
console.log("$scope.subproject_row.fundingName = "+$scope.subproject_row.fundingName);console.log("$scope.subproject_row.fundingAmount = "+$scope.subproject_row.fundingAmount);if(typeof $scope.subproject_row.strFunders==='undefined')
$scope.subproject_row.strFunders="";if($scope.subproject_row.fundingName==="Other")
{$scope.subproject_row.strFunders+=$scope.subproject_row.OtherFundingAgency+", "+$scope.subproject_row.fundingAmount+";\n";}
else
{$scope.subproject_row.strFunders+=$scope.subproject_row.fundingName+", "+$scope.subproject_row.fundingAmount+";\n";}
console.log("$scope.subproject_row.strFunders = "+$scope.subproject_row.strFunders);};$scope.removeFundingAgency=function(){console.log("- clicked...");console.log("$scope.subproject_row.strFunders before stripping = "+$scope.subproject_row.strFunders);$scope.subproject_row.strFunders=$scope.subproject_row.strFunders.replace(/(\r\n|\r|\n)/gm,"");console.log("$scope.subproject_row.strFunders after stripping = "+$scope.subproject_row.strFunders);var aryFunders=$scope.subproject_row.strFunders.split(";");aryFunders.splice(-1,1);console.dir(aryFunders);var aryFundersLength=aryFunders.length;if(($scope.subproject_row.fundingName==="Other")&&($scope.subproject_row.OtherFundingAgency))
{for(var i=0;i<aryFundersLength;i++)
{console.log("aryFunders[i] = "+aryFunders[i]);if(aryFunders[i].indexOf($scope.subproject_row.OtherFundingAgency)>-1)
{console.log("Found the item...");aryFunders.splice(i,1);console.log("Removed the item.");$scope.subproject_row.strFunders="";console.log("Wiped $scope.subproject_row.strFunders...");angular.forEach(aryFunders,function(item){$scope.subproject_row.strFunders+=item+";\n";console.log("Added item...");});i=aryFundersLength;}}}
else
{for(var i=0;i<aryFundersLength;i++)
{console.log("aryFunders[i] = "+aryFunders[i]);if(aryFunders[i].indexOf($scope.subproject_row.fundingName)>-1)
{console.log("Found the item...");aryFunders.splice(i,1);console.log("Removed the item.");$scope.subproject_row.strFunders="";console.log("Wiped $scope.subproject_row.strFunders...");angular.forEach(aryFunders,function(item){$scope.subproject_row.strFunders+=item+";\n";console.log("Added item...");});i=aryFundersLength;}}}
console.log("Finished.");};$scope.openFileModal=function(row,field)
{console.log("Inside ModalCreateHabSubprojectCtrl, openFileModal...");console.log("row is next...");console.dir(row);console.log("field is next...");console.dir(field);$scope.file_row=row;$scope.file_field={DbColumnName:"ItemFiles"};var modalInstance=$modal.open({templateUrl:'app/core/common/components/file/templates/modal-file.html',controller:'FileModalCtrl',scope:$scope,});};$scope.onFileSelect=function(field,files)
{console.log("Inside ModalCreateHabSubprojectCtrl, onFileSelect");console.log("file selected! "+field);$scope.filesToUpload[field]=files;};$scope.save=function(){console.log("Inside ModalCreateHabSubprojectCtrl, save...");$scope.subprojectSave=undefined;$scope.subprojectSave=[];$scope.subprojectSave.error=false;$scope.subprojectSave.errorMessage="";$scope.savingHabSubproject=false;$scope.subproject_row.Funding=[];$scope.subproject_row.Collaborators=[];$scope.createNewSubproject=false;$scope.locationId=0;$scope.NewPoint=false;if((typeof $scope.subproject_row.ProjectName==='undefined')||($scope.subproject_row.ProjectName===null))
{console.log("Project name is empty...");$scope.subprojectSave.error=true;$scope.subprojectSave.errorMessage="Project Name cannot be blank!  ";}
if((typeof $scope.subproject_row.GPSEasting==='undefined')||(typeof $scope.subproject_row.GPSNorthing==='undefined'))
{console.log("Easting or Northing is blank...");$scope.subprojectSave.error=true;$scope.subprojectSave.errorMessage+="Easting and Northing cannot be blank!  ";}
if(!$scope.subprojectSave.error)
{console.log("$scope.subproject_row, full is next...");console.dir($scope.subproject_row);$scope.addDocument=$scope.subproject_row.AddDocument;$scope.subproject_row.AddDocument=null;if(!$scope.subproject_row.LocationId)
$scope.subproject_row.LocationId=0;if($scope.subproject_row.ProjectStartDate)
{var psDate=new Date(Date.parse($scope.subproject_row.ProjectStartDate));$scope.subproject_row.ProjectStartDate=setDateTo0000(psDate);}
if($scope.subproject_row.ProjectEndDate)
{var peDate=new Date(Date.parse($scope.subproject_row.ProjectEndDate));$scope.subproject_row.ProjectEndDate=setDateTo0000(peDate);}
console.log("$scope.addDocument = "+$scope.addDocument);console.log("$scope.subproject_row, after del is next...");console.dir($scope.subproject_row);$scope.saveResults={};$scope.subprojectSave.error=false;$scope.subprojectSave.errorMessage="";console.log("First Foods = "+$scope.subproject_row.FirstFoods);console.log("$scope.subproject_row.Funding is next...");console.dir($scope.subproject_row.Funding);console.log("type of $scope.subproject_row.Funding = "+typeof $scope.subproject_row.Funding);if((typeof $scope.subproject_row.strFunders!=='undefined')&&($scope.subproject_row.strFunders!==null)&&($scope.subproject_row.strFunders.length>0))
{if($scope.subproject_row.strFunders.length>0)
{$rootScope.fundersPresent=$scope.fundersPresent=true;var strFunders=$scope.subproject_row.strFunders.replace(/(\r\n|\r|\n)/gm,"");var aryFunders=$scope.subproject_row.strFunders.split(";");aryFunders.splice(-1,1);angular.forEach(aryFunders,function(item){console.log("item = "+item);var funderRecord=item.split(",");var fundingOption=new Object();fundingOption.Id=0;fundingOption.Name="";fundingOption.Amount=0;fundingOption.Name=funderRecord[0].trim();console.log("fundingOption.Name = "+fundingOption.Name);fundingOption.Amount=parseFloat(funderRecord[1]);console.log("fundingOption.Amount = "+fundingOption.Amount);$scope.subproject_row.Funding.push(fundingOption);});$scope.subproject_row.strFunders=undefined;}}
console.log("$scope.subproject_row.strCollaborators = "+$scope.subproject_row.strCollaborators);console.log("type of $scope.subproject_row.strCollaborators = "+typeof $scope.subproject_row.strCollaborators);if((typeof $scope.subproject_row.strCollaborators!=='undefined')&&($scope.subproject_row.strCollaborators!==null)&&($scope.subproject_row.strCollaborators.length>0))
{$rootScope.collaboratorPresent=$scope.collaboratorPresent=true;var strCollaborators=$scope.subproject_row.strCollaborators.replace(/(\r\n|\r|\n)/gm,"");console.log("strCollaborators = "+strCollaborators);var aryCollaborators=$scope.subproject_row.strCollaborators.split(";");angular.forEach(aryCollaborators,function(item){item=item.replace(/\n/g,"");if(item.length>0)
{var collaboratorOption=new Object();collaboratorOption.Id=0;collaboratorOption.Name="";collaboratorOption.Name=item.trim();$scope.subproject_row.Collaborators.push(collaboratorOption);}});$scope.subproject_row.strCollaborators=undefined;}
var subprojectId=0;if($scope.viewSubproject)
{console.log("We are editing an existing subproject; no new location needed...");subprojectId=$scope.viewSubproject.Id
$scope.savingHabSubproject=true;}
else
{subprojectId=$scope.subprojectId;console.log("This is a new subproject; creating a new location...");var newLocation=angular.copy(DEFAULT_LOCATION_PROJECTION_ZONE);newLocation.Label=$scope.subproject_row.ProjectName;newLocation.Description=$scope.subproject_row.ProjectDescription;newLocation.GPSEasting=$scope.subproject_row.GPSEasting;newLocation.GPSNorthing=$scope.subproject_row.GPSNorthing;newLocation.ProjectId=parseInt($scope.projectId);newLocation.LocationTypeId=LOCATION_TYPE_Hab;newLocation.WaterBodyId=$scope.subproject_row.WaterBodyId;console.log("newLocation is next...");console.dir(newLocation);var inSR=new esri.SpatialReference({wkt:NAD83_SPATIAL_REFERENCE});var outSR=new esri.SpatialReference({wkid:102100});var geometryService=new esri.tasks.GeometryService(GEOMETRY_SERVICE_URL);$scope.newPoint=new esri.geometry.Point(newLocation.GPSEasting,newLocation.GPSNorthing,inSR);var PrjParams=new esri.tasks.ProjectParameters();PrjParams.geometries=[$scope.newPoint];PrjParams.outSR=outSR;geometryService.project(PrjParams,function(outputpoint){$scope.newPoint=new esri.geometry.Point(outputpoint[0],outSR);$scope.newGraphic=new esri.Graphic($scope.newPoint,new esri.symbol.SimpleMarkerSymbol());$scope.map.graphics.add($scope.newGraphic);$scope.map.locationLayer.applyEdits([$scope.newGraphic],null,null).then(function(results){if(results[0].success)
{newLocation.SdeObjectId=$scope.SdeObjectId=results[0].objectId;$scope.setSdeObjectId($scope.SdeObjectId);console.log("Created a new point! "+newLocation.SdeObjectId);$scope.NewPoint=true;var promise=CommonService.saveNewProjectLocation($scope.project.Id,newLocation);promise.$promise.then(function(result){console.log("done and success!");console.log("result is next...");console.dir(result);angular.forEach(result,function(item,key){if(key==="Id")
{$scope.subproject_row.LocationId=item;console.log("$scope.subproject_row.LocationId = "+$scope.subproject_row.LocationId);$scope.savingHabSubproject=true;}});});}
else
{$scope.subprojectSave.errorMessage="There was a problem saving that location.";}});});}
if($scope.subprojectSave.errorMessage.length>0)
{console.log("Had a problem saving the location.  Stopping the save...");return;}}};$scope.cancel=function(){$scope.subproject_row='undefined';$modalInstance.dismiss();};}];define("private/habitat/components/habitat-sites/modal-create-habitat-subproject",function(){});var tab_sites=['$scope','$timeout','$routeParams','SubprojectService','ProjectService','DatasetService','CommonService','PreferencesService','$rootScope','$modal','$sce','$window','$http','ServiceUtilities','ConvertStatus','$location','$anchorScroll',function(scope,$timeout,routeParams,SubprojectService,ProjectService,DatasetService,CommonService,PreferencesService,$rootScope,$modal,$sce,$window,$http,ServiceUtilities,ConvertStatus,$location,$anchorScroll){scope.subprojectFileList=null;scope.funderList=null;scope.collaboratorList=null;var ItemCount=function(params){if(params.node.data.HabitatItems===undefined||params.node.data.HabitatItems===null)
return'0';return''+params.node.data.HabitatItems.length;};var EditMasterLinksTemplate=function(param){var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.editHabitatSubproject(param.data);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.removeHabitatSubproject(param.data);});div.appendChild(delBtn);div.appendChild(document.createTextNode("|"));var addBtn=document.createElement('a');addBtn.href='#';addBtn.innerHTML='Add Item';addBtn.addEventListener('click',function(event){event.preventDefault();scope.openHabitatItemForm(param.data,{});});div.appendChild(addBtn);return div;};var FileListCellTemplate=function(params){var list='<div class="event-file-list"><ul>';var file_links=scope.getSubprojectFilesArrayAsLinks(scope.project.Id,params.node.data.SubprojectId,params.node.data.ItemFiles);file_links.forEach(function(link){list+='<li>'+link+'</li>';});list+='</ul></div>';return list;};var EditDetailLinksTemplate=function(detailparam){var subproject=getById(scope.subprojectList,detailparam.data.SubprojectId);var div=document.createElement('div');var editBtn=document.createElement('a');editBtn.href='#';editBtn.innerHTML='Edit';editBtn.addEventListener('click',function(event){event.preventDefault();scope.openHabitatItemForm(subproject,detailparam.data);});div.appendChild(editBtn);div.appendChild(document.createTextNode("|"));var delBtn=document.createElement('a');delBtn.href='#';delBtn.innerHTML='Delete';delBtn.addEventListener('click',function(event){event.preventDefault();scope.removeHabitatFileItem(subproject,detailparam.data);});div.appendChild(delBtn);div.appendChild(document.createTextNode("|"));var addBtn=document.createElement('a');addBtn.href='#';addBtn.innerHTML='Add';addBtn.addEventListener('click',function(event){event.preventDefault();scope.openHabitatItemForm(subproject,{});});div.appendChild(addBtn);return div;};scope.sitesColumnDefs=[{width:130,cellRenderer:EditMasterLinksTemplate,menuTabs:[],},{field:'ProjectName',headerName:'Name',width:325,cellRenderer:'group',cellRendererParams:{suppressCount:true},menuTabs:['filterMenuTab'],filter:'text'},{field:'EffDt',headerName:'Updated',width:130,valueFormatter:function(params){if(params.node.data.EffDt!==undefined&&params.node.data.EffDt!==null)
return moment(params.node.data.EffDt).format('L');},sort:'desc',menuTabs:[],},{headerName:'Items',width:60,cellRenderer:ItemCount,valueGetter:function(params){return(params.data.HabitatItems!==undefined&&params.data.HabitatItems.length>0)?params.data.HabitatItems.length:0;},menuTabs:[],},{field:'ProjectStartDate',headerName:'Start Date',width:150,valueFormatter:function(params){if(params.node.data.ProjectStartDate!==undefined&&params.node.data.ProjectStartDate!==null)
return moment(params.node.data.ProjectStartDate).format('L');},menuTabs:[],},{field:'ProjectEndDate',headerName:'End Date',width:150,valueFormatter:function(params){if(params.node.data.ProjectEndDate!==undefined&&params.node.data.ProjectEndDate!==null)
return moment(params.node.data.ProjectEndDate).format('L');},menuTabs:[],},];var detailColumnDefs=[{headerName:'',width:100,cellRenderer:EditDetailLinksTemplate,menuTabs:[],},{headerName:'Item Type',field:'ItemType',cellClass:'item-record-cell',width:100,menuTabs:['filterMenuTab'],},{headerName:'Item Name',field:'ItemName',cellClass:'item-record-cell',width:150,menuTabs:['filterMenuTab'],filter:'text'},{headerName:'Documents',field:'ItemFiles',width:300,cellRenderer:FileListCellTemplate,menuTabs:[],},{headerName:'External Links',field:'ExternalLinks',cellClass:'item-record-cell',width:250,menuTabs:[],},{field:'EffDt',headerName:'Updated',width:150,valueFormatter:function(params){if(params.node.data.EffDt!==undefined&&params.node.data.EffDt!==null)
return moment(params.node.data.EffDt).format('L');},menuTabs:[],},];scope.sitesDetailGridOptions={enableSorting:true,enableFilter:true,enableColResize:true,columnDefs:detailColumnDefs,getRowHeight:function(params){var file_height=25*(scope.getFilesArrayAsList(params.node.data.ItemFiles).length);return(file_height>25)?file_height:25;},};scope.sitesGridOptions={masterDetail:true,detailCellRendererParams:{detailGridOptions:scope.sitesDetailGridOptions,getDetailRowData:function(params){params.successCallback(params.data.HabitatItems);},},animateRows:true,enableSorting:true,enableFilter:true,enableColResize:true,showToolPanel:false,columnDefs:scope.sitesColumnDefs,rowData:null,rowSelection:'single',onSelectionChanged:function(params){console.log("selection changed fired!");var rows=scope.sitesGridOptions.api.getSelectedRows();if(Array.isArray(rows)&&rows[0]!=null)
{console.log("rows:");console.dir(rows);}},selectedItems:[],onGridReady:function(params){},onRowDoubleClicked:function(row){scope.sitesGridOptions.api.collapseAll();row.node.setSelected(true);row.node.setExpanded(true);},onRowClicked:function(row){row.node.setSelected(true);},};var sites_ds_watcher=scope.$parent.$watch('project',function(){if(typeof scope.project==='undefined'||typeof scope.project.Id==='undefined')
return;sites_ds_watcher();if(scope.isHabitatProject(scope.project)){console.log("Turning on Sites tab because we are a habitat project...");scope.$parent.ShowHabitat=true;$timeout(function(){var ag_grid_div=document.querySelector('#hab-sites-grid');scope.ag_grid=new agGrid.Grid(ag_grid_div,scope.sitesGridOptions);scope.sitesGridOptions.api.showLoadingOverlay();scope.subprojectList=SubprojectService.getProjectSubprojects(scope.project.Id);var watcher=scope.$watch('subprojectList.length',function(){if(scope.subprojectList===undefined||scope.subprojectList==null)
return;if(scope.subprojectList.length===0){if(scope.map&&scope.map.locationLayer&&scope.map.locationLayer.hasOwnProperty('showLocationsById')){scope.map.locationLayer.showLocationsById(0);}
return;}
scope.sitesGridOptions.api.setRowData(scope.subprojectList);scope.refreshSubprojectLists();watcher();});},0);}else{console.log(" we are NOT a habitat project so no Sites tab.");}},true);scope.matchLocationsToSubprojects=function(){scope.thisProjectsLocationObjects=[];angular.forEach(scope.subprojectList,function(subproject){angular.forEach(scope.project.Locations,function(location,key){if(subproject.LocationId===location.Id){scope.thisProjectsLocationObjects.push(location.SdeObjectId);subproject.GPSEasting=location.GPSEasting;subproject.GPSNorthing=location.GPSNorthing;subproject.UTMZone=location.UTMZone;subproject.Projection=location.Projection;subproject.WaterBodyId=location.WaterBodyId;}});});if(scope.map!==undefined)
scope.map.locationLayer.showLocationsById(scope.thisProjectsLocationObjects);};scope.matchFilesToSubproject=function(){angular.forEach(scope.subprojectList,function(subproject){angular.forEach(scope.project.SubprojectFileList,function(spFile){if((subproject.Id===spFile.Subproject_CrppId)&&(spFile.FeatureImage===1)){if(!subproject.ItemFiles){subproject.ItemFiles=[];subproject.ItemFiles.push(spFile);}
else
subproject.ItemFiles=angular.copy(spFile);}});});$rootScope.SubprojectFileList=scope.project.SubprojectFileList;};scope.matchFundersToSubproject=function(){var strFunders="";angular.forEach(scope.subprojectList,function(subproject){strFunders="";angular.forEach(scope.project.FunderList,function(funder){if(funder.SubprojectId===subproject.Id){strFunders+=funder.Name+", "+funder.Amount+";\n";}});subproject.strFunders=strFunders;});};scope.matchCollaboratorToSubproject=function(){var strCollaborators="";angular.forEach(scope.subprojectList,function(subproject){strCollaborators="";angular.forEach(scope.project.CollaboratorList,function(collaborator){if(collaborator.SubprojectId===subproject.Id){strCollaborators+=collaborator.Name+";\n";}});subproject.strCollaborators=strCollaborators;});};scope.openHabitatItemForm=function(subproject,hi_row){scope.viewSubproject=subproject;scope.hi_row=hi_row;var modalInstance=$modal.open({templateUrl:'app/private/habitat/components/habitat-sites/templates/modal-new-habitatItem.html',controller:'ModalAddHabitatItemCtrl',scope:scope,});};scope.openGeospatialDataPage=function(){var strUrl="http://ctuirgis.maps.arcgis.com/apps/webappviewer/index.html?id=1669df9b26874c9eb49cc41ec4d57ec5";var strWindowFeatures="location=yes,scrollbars=yes,status=yes";$window.open(strUrl,"_blank",strWindowFeatures);};scope.openCorrespondenceEventForm=function(subproject,ce_row){scope.viewSubproject=subproject;scope.ce_row=ce_row;var modalInstance=$modal.open({templateUrl:'app/private/crpp/components/crpp-contracts/templates/modal-new-correspondenceEvent.html',controller:'ModalAddCorrespondenceEventCtrl',scope:scope,});};scope.postRemoveHabitatSubprojectUpdateGrid=function(){scope.subprojectList.forEach(function(item,index){if(item.Id===scope.viewSubproject.Id){scope.subprojectList.splice(index,1);scope.sitesGridOptions.api.setRowData(scope.subprojectList);}});};scope.postEditHabitatItemUpdateGrid=function(edited_item){scope.subprojectList.forEach(function(item,index){if(item.Id===edited_item.SubprojectId){item.EffDt=moment(new Date()).format()+"";item.HabitatItems.forEach(function(hab_item,hab_item_index){if(hab_item.Id===edited_item.Id){angular.extend(hab_item,edited_item);}});}});scope.sitesGridOptions.api.setRowData(scope.subprojectList);var the_node=scope.expandSubProjectById(edited_item.SubprojectId);if(the_node!=null)
scope.sitesGridOptions.api.ensureNodeVisible(the_node);console.log("done reloading grid after removing item.");};scope.postAddHabitatItemUpdateGrid=function(new_item){var subproject=getById(scope.subprojectList,new_item.SubprojectId);if(subproject===undefined||subproject==null){console.log("no subproject...");}else{scope.subprojectList.forEach(function(item,index){if(item.Id===subproject.Id){item.EffDt=moment(new Date()).format()+"";item.HabitatItems.push(new_item);console.log("Added item "+new_item.Id+" to "+subproject.Id);}});scope.sitesGridOptions.api.setRowData(scope.subprojectList);var the_node=scope.expandSubProjectById(subproject.Id);if(the_node!=null)
scope.sitesGridOptions.api.ensureNodeVisible(the_node);console.log("done reloading grid after removing item.");}};scope.expandSubProjectById=function(id_in){var the_node=null;scope.sitesGridOptions.api.forEachNode(function(node){if(node.data.Id===id_in){node.setExpanded(true);the_node=node;}});return the_node;};scope.removeHabitatFileItem=function(subproject,item){$scope.remove=function(){$scope.hi_rowId=$scope.hi_row.Id;$scope.verifyAction="Delete";$scope.verifyingCaller="HabitatItem";$scope.verifyActionFormOpen="Yes";if(confirm('Are you sure that you want to delete this Habitat Item?')){var promise=SubprojectService.removeHabitatItem($scope.project.Id,$scope.viewSubproject.Id,$scope.hi_rowId);promise.$promise.then(function(){$scope.subprojects=null;$scope.reloadSubprojects();$("#habitatItems").load("habitatItems.html #habitatItems");$modalInstance.dismiss();});}};};scope.removeHabitatFileItem=function(subproject,in_item){if(confirm('Are you sure that you want to delete this Habitat Item?')){var promise=SubprojectService.removeHabitatItem(scope.project.Id,subproject.Id,in_item.Id,scope.DatastoreTablePrefix);promise.$promise.then(function(){scope.subprojectList.forEach(function(item,index){if(item.Id===subproject.Id){item.HabitatItems.forEach(function(hab_item,hab_item_index){if(hab_item.Id===in_item.Id){item.HabitatItems.splice(hab_item_index,1);}});}});scope.sitesGridOptions.api.setRowData(scope.subprojectList);var the_node=scope.expandSubProjectById(subproject.Id);if(the_node!=null)
scope.sitesGridOptions.api.ensureNodeVisible(the_node);console.log("done reloading grid after removing item.");});}};scope.removeHabitatSubproject=function(subproject){if(!subproject)
return;scope.viewSubproject=subproject;if(scope.viewSubproject.HabitatItems.length>0){alert("This project has associated Habitat items.  Those must be deleted first.");}
else{scope.verifyAction="Delete";scope.verifyingCaller="HabSubproject";var modalInstance=$modal.open({templateUrl:'app/core/common/components/modals/templates/modal-verifyAction.html',controller:'ModalVerifyActionCtrl',scope:scope,});}};scope.createHabSubproject=function(){scope.viewSubproject=null;scope.createNewSubproject=true;scope.subprojectOptions=null;var modalInstance=$modal.open({templateUrl:'app/private/habitat/components/habitat-sites/templates/modal-create-habSubproject.html',controller:'ModalCreateHabSubprojectCtrl',scope:scope,});};scope.refreshSubprojectLists=function(){scope.project.SubprojectFileList=SubprojectService.getSubprojectFiles(scope.projectId);scope.project.FunderList=ProjectService.getProjectFunders(scope.projectId);scope.project.CollaboratorList=ProjectService.getProjectCollaborators(scope.projectId);scope.matchLocationsToSubprojects();scope.project.SubprojectFileList.$promise.then(function(){scope.matchFilesToSubproject();});scope.project.FunderList.$promise.then(function(){scope.matchFundersToSubproject();});scope.project.CollaboratorList.$promise.then(function(){scope.matchCollaboratorToSubproject();});};scope.postSaveHabitatSubprojectUpdateGrid=function(the_promise){var total=scope.subprojectList.length;var count=0;var updated=false;scope.subprojectList.forEach(function(item,index){if(item.Id===the_promise.Id){updated=true;if(the_promise.HabitatItems!==undefined)
delete the_promise.HabitatItems;angular.extend(scope.subprojectList[index],the_promise);scope.sitesGridOptions.api.redrawRows();}
count++;if(count==total&&updated==false)
{the_promise.HabitatItems=[];the_promise.Files=[];scope.subprojectList.push(the_promise);scope.sitesGridOptions.api.setRowData([]);scope.sitesGridOptions.api.setRowData(scope.subprojectList);}});console.log("updated the list and the grid... now refreshing the habitat lists");scope.refreshSubprojectLists();};scope.addSubproject=function(){console.log("Inside controllers.addSubproject.");if(!scope.selectedSubproject||scope.selectedSubproject===null||getMatchingByField(scope.project.CrppSubProjects,scope.selectedSubproject,'Id').length>0)
return;var theSubproject=getMatchingByField(scope.correspondenceProjectList,scope.selectedSubproject,'Id');var promise=SubprojectService.saveSubproject(scope.project.Id,theSubproject[0]);promise.$promise.then(function(){scope.reloadProject();});};scope.editHabitatSubproject=function(subproject){scope.viewSubproject=subproject;var modalInstance=$modal.open({templateUrl:'app/private/habitat/components/habitat-sites/templates/modal-create-habSubproject.html',controller:'ModalCreateHabSubprojectCtrl',scope:scope,});};scope.reloadSubprojectLocations=function(){console.log("maybe not used?");console.log("Inside controllers.js, projectDatasetsController, scope.reloadSubprojectLocations...");scope.thisProjectsLocationObjects=[];angular.forEach(scope.subprojectList,function(subproject){angular.forEach(scope.project.Locations,function(location,key){if(subproject.LocationId===location.Id)
scope.thisProjectsLocationObjects.push(location.SdeObjectId);});});if(scope.thisProjectsLocationObjects.length>0){if(scope.map&&scope.map.locationLayer&&scope.map.locationLayer.hasOwnProperty('showLocationsById'))
scope.map.locationLayer.showLocationsById(scope.thisProjectsLocationObjects);}};scope.redrawRows=function(){scope.sitesGridOptions.api.setRowData([]);setTimeout(function(){scope.sitesGridOptions.api.setRowData(scope.subprojectList);},4000);};scope.refreshCells=function(){scope.sitesGridOptions.api.refreshCells();};scope.refreshMemory=function(){scope.sitesGridOptions.api.refreshInMemoryRowModel('group');};scope.isHabitatProject=function(a_project)
{return(a_project.MetadataValue[METADATA_PROPERTY_SUBPROGRAM])==="Habitat";}}];define("private/habitat/components/habitat-sites/tab-sites",function(){});require(['private/habitat/components/habitat-sites/modal-add-habitat-item','private/habitat/components/habitat-sites/modal-create-habitat-subproject','private/habitat/components/habitat-sites/tab-sites',],function(){habitat_module.controller('ModalAddHabitatItemCtrl',modal_add_habitat);habitat_module.controller('ModalCreateHabSubprojectCtrl',modal_create_habitat_subproject);habitat_module.controller('TabSitesController',tab_sites);});define("private/habitat/habitat-module",function(){});var appraisal_activities=['$scope','$route','$routeParams','DatasetService','$modal','$location','$window','$rootScope','ProjectService','CommonService','PreferencesService',function($scope,$route,$routeParams,DatasetService,$modal,$location,$window,$rootScope,ProjectService,CommonService,PreferencesService){console.log("Inside appraisalController...");console.log("$routeParams.Id = "+$routeParams.Id);$scope.dataset=DatasetService.getDataset($routeParams.Id);$scope.activities=DatasetService.getActivities($routeParams.Id);$scope.loading=true;$scope.project=null;$scope.saveResults=null;$scope.isFavorite=$rootScope.Profile.isDatasetFavorite($routeParams.Id);$scope.allActivities=null;$scope.headerdata=DatasetService.getHeadersDataForDataset($routeParams.Id);$scope.filteringActivities=false;$scope.startAppraisalDisabled=true;var linkTemplate='<div class="ngCellText" ng-class="col.colIndex()">'+'<a href="#/dataview/{{row.getProperty(\'Id\')}}">{{row.getProperty("ActivityDate") | date:\'MM/dd/yyyy\'}}</a>'+'</div>';var desclinkTemplate='<div class="ngCellText" ng-class="col.colIndex()">'+'<a href="#/dataview/{{row.getProperty(\'Id\')}}">{{row.getProperty("Description") }}</a>'+'</div>';var allotmentTemplate='<div class="ngCellText" ng-class="col.colIndex()">'+'<a href="#/dataview/{{row.getProperty(\'Id\')}}">{{row.getProperty("headerdata.Allotment") }}</a>'+'</div>';var QATemplate='<div class="ngCellText" ng-class="col.colIndex()">{{QAStatusList[row.getProperty("ActivityQAStatus.QAStatusId")]}}</div>';var editButtonTemplate='<div project-role="editor" class="ngCellText" ng-class="col.colIndex()">'+'<a href="#/edit/{{row.getProperty(\'Id\')}}">Edit</a>'+'</div>';$scope.columnDefs=[{field:'ActivityDate',displayName:'Activity Date',cellTemplate:linkTemplate,width:'100px',visible:false},{field:'headerdata.Allotment',displayName:'Parcel Id',cellTemplate:allotmentTemplate,width:'140px'},{field:'headerdata.AllotmentStatus',displayName:'Status'},{field:'headerdata.CobellAppraisalWave',displayName:'Wave',width:'200px'},{field:'headerdata.LastAppraisalRequestDate',displayName:'Request Date',width:'200px',cellFilter:'date'},{field:'User.Fullname',displayName:'By User',width:'120px'},{field:'QAStatus',displayName:'QA Status',cellTemplate:QATemplate,width:'100px',visible:false},{field:'Actions',displayName:'',cellTemplate:editButtonTemplate,width:'40px'},];$scope.showFilter=false;$scope.selectedActivity=[];$scope.gridOptionsFilter={};$scope.gridOptions={data:'activities',selectedItems:$scope.selectedActivity,showColumnMenu:true,sortInfo:{fields:['headerdata.Allotment'],directions:['desc']},columnDefs:'columnDefs',filterOptions:$scope.gridOptionsFilter,multiSelect:false,};$scope.$watch('dataset.Fields',function(){if(!$scope.dataset.Fields)return;console.log("Inside appraisalController, watch dataset.Fields...");$rootScope.datasetId=$scope.dataset.Id;$scope.project=ProjectService.getProject($scope.dataset.ProjectId);$scope.dataset.Files=DatasetService.getDatasetFiles($scope.dataset.Id);$scope.QAStatusList=makeObjects($scope.dataset.QAStatuses,'Id','Name');$rootScope.DatastoreTablePrefix=$scope.DatastoreTablePrefix=$scope.dataset.Datastore.TablePrefix;console.log("$scope.DatastoreTablePrefix = "+$scope.DatastoreTablePrefix);});$scope.$watch('project.Name',function(){if($scope.project&&$scope.project.$resolved){$scope.reloadProjectLocations();$rootScope.projectId=$scope.project.Id;}});$scope.$watch('activities.$resolved',function(){$scope.loading=true;if($scope.activities&&$scope.activities.$resolved)
{if(!$scope.allActivities)
$scope.allActivities=$scope.activities;$scope.loading=false;if($scope.activities.length>0)
{console.log("$scope.gridOptions is next...");$scope.gridOptions.ngGrid.data.$promise.then(function(){$rootScope.GridActivities=$scope.gridOptions.ngGrid.data;});$scope.startAppraisalDisabled=true;}
else
{$scope.startAppraisalDisabled=false;}}
if(typeof $scope.activities.$resolved=="undefined")
$scope.loading=false;});$scope.activities.$promise.then(function(){$scope.headerdata.$promise.then(function(){angular.forEach($scope.activities,function(activity,key){activity.headerdata=getByField($scope.headerdata,activity.Id,"ActivityId");});});console.log("$scope at end of activities.$promise...");});$scope.$watch('gridOptions.selectedItems',function(){if(!$scope.gridOptions.selectedItems||$scope.gridOptions.selectedItems.length==0)
return;if($scope.map.selectedFeature&&$scope.map.selectedFeature.attributes.OBJECTID==$scope.gridOptions.selectedItems[0].Location.SdeObjectId)
{return;}
$scope.map.selectedFeature=undefined;$scope.map.loading=true;$scope.startAppraisalDisabled=true;var selectedAppraisal=$scope.gridOptions.selectedItems[0];$scope.clearAll();$scope.map.querySelectParcel(null,selectedAppraisal.Location.SdeObjectId,function(features){$scope.map.loading=false;if(features.length==0){return;};$scope.map.addParcelToMap(features[0]);$scope.map.centerAndZoomToGraphic($scope.map.selectedGraphic).then(function(){$scope.map.infoWindow.resize(250,300);$scope.map.infoWindow.setContent($scope.getInfoWindowContent(features[0]));$scope.map.infoWindow.show($scope.map.selectedGraphic.geometry.getExtent().getCenter());});$scope.$apply();});},true);$scope.parcelSearch=function()
{if(!$scope.parcelSearchText)
return;$scope.hasResults=true;$scope.map.searchResults=[];$scope.map.searchMessage="Searching...";$scope.map.querySearchParcel($scope.parcelSearchText,function(features){if(features.length==0)
{$scope.map.searchMessage="No results found.";}
else
{angular.forEach(features,function(feature){$scope.map.searchResults.push(feature.attributes);});}
$scope.$apply();});$scope.startAppraisalDisabled=true;}
$scope.selectParcel=function(parcelObjectId)
{$scope.map.loading=true;$scope.clearAll();$scope.map.querySelectParcel(null,parcelObjectId,function(features){$scope.map.loading=false;if(features.length==0){alert('No parcel polygon found that matches that allotment.');return;};$scope.map.addParcelToMap(features[0]);$scope.map.centerAndZoomToGraphic($scope.map.selectedGraphic).then(function(){$scope.map.infoWindow.resize(250,300);$scope.map.infoWindow.setContent($scope.getInfoWindowContent(features[0]));$scope.map.infoWindow.show($scope.map.selectedGraphic.geometry.getExtent().getCenter());});$scope.startAppraisalDisabled=true;$scope.$apply();});};$scope.clearAll=function()
{$scope.activities=$scope.allActivities;$scope.filteredActivities=undefined;$scope.map.clearGraphics();$scope.map.infoWindow.hide();$scope.map.selectedFeature=undefined;$scope.filteringActivities=false;$scope.startAppraisalDisabled=true;};$scope.click=function(e){$scope.map.loading=true;$scope.clearAll();$scope.map.reposition();$scope.map.querySelectParcel(e.mapPoint,null,function(features){if(features.length==0){alert('No parcel found at that location.');$scope.map.loading=false;$scope.$apply();return;};$scope.map.addParcelToMap(features[0]);$scope.map.infoWindow.resize(250,300);$scope.map.infoWindow.setContent($scope.getInfoWindowContent(features[0]));$scope.map.infoWindow.show($scope.map.selectedGraphic.geometry.getExtent().getCenter());var objectid=$scope.map.selectedFeature.attributes.OBJECTID;console.log("Found objectid: "+objectid);$scope.filteredActivities=[];angular.forEach($scope.allActivities,function(item,index){if(item.Location.SdeObjectId==objectid){$scope.filteredActivities.push(item);}});$scope.activities=$scope.filteredActivities;console.log("$scope.activities is next...");console.dir($scope.activities);if($scope.activities.length===0)
{$scope.startAppraisalDisabled=false;}
$scope.filteringActivities=true;$scope.map.loading=false;$scope.$apply();});};$scope.newRecord=function()
{var new_location={LocationTypeId:LOCATION_TYPE_APPRAISAL,SdeFeatureClassId:SDE_FEATURECLASS_TAXLOTQUERY,SdeObjectId:$scope.map.selectedFeature.attributes.OBJECTID,Label:$scope.map.selectedFeature.attributes.PARCELID,};var promise=CommonService.saveNewProjectLocation($scope.project.Id,new_location);promise.$promise.then(function(){console.log("done and success!");$scope.refreshProjectLocations();$scope.project.$promise.then(function(){var location=getByField($scope.project.Locations,$scope.map.selectedFeature.attributes.OBJECTID,"SdeObjectId");var acres=$scope.map.selectedFeature.attributes.ACRES_GIS;$location.path("/dataentryform/"+$scope.dataset.Id).search({LocationId:location.Id,Allotment:location.Label,Acres:acres});});});};$scope.toggleFavorite=function(){$scope.isFavorite=!$scope.isFavorite;$scope.results={};$rootScope.Profile.toggleDatasetFavorite($scope.dataset);PreferencesService.saveUserPreference("Datasets",$rootScope.Profile.favoriteDatasets.join(),$scope.results);var watcher=$scope.$watch('results',function(){if($scope.results.done)
{if($scope.results.failure)
{$scope.isFavorite=!$scope.isFavorite;$rootScope.Profile.toggleDatasetFavorite($scope.dataset);}
watcher();}},true);};$scope.refreshProjectLocations=function(){ProjectService.clearProject();$scope.project=null;$scope.project=ProjectService.getProject($scope.dataset.ProjectId);};$scope.reloadProjectLocations=function(){console.log("Inside Appraisal-controller.js, $scope.reloadProjectLocations...");$scope.locationsArray=getMatchingByField($scope.project.Locations,LOCATION_TYPE_APPRAISAL,"LocationTypeId");$scope.locationObjectIds=getLocationObjectIdsByType(LOCATION_TYPE_APPRAISAL,$scope.project.Locations);console.log("$scope.locationObjectIds is next...");console.dir($scope.locationObjectIds);if($scope.map&&$scope.map.locationLayer&&$scope.map.locationLayer.hasOwnProperty('showLocationsById'))
$scope.map.locationLayer.showLocationsById($scope.locationObjectIds);};$scope.reloadActivities=function(){$scope.activities=DatasetService.getActivities($routeParams.Id);};$scope.openQueryWindow=function(p){$location.path("/datasetquery/"+$scope.dataset.Id);};$scope.openDetailsWindow=function(p){$location.path("/dataset-details/"+$scope.dataset.Id);};$scope.deleteActivities=function(){$scope.saveResults={};if(!confirm("Are you sure you want to delete this allotment?  There is no undo for this operation."))
return;DatasetService.deleteActivities($rootScope.Profile.Id,$scope.dataset.Id,$scope.gridOptions,$scope.saveResults);var deleteWatcher=$scope.$watch('saveResults',function(){if($scope.saveResults.success)
{$scope.activities=undefined;$route.reload();}
else if($scope.saveResults.failure)
{deleteWatcher();console.log("failure! there was a problem deleting a record...");}},true);};$scope.openDataEntry=function(p){$location.path("/dataentry/"+$scope.dataset.Id);};$scope.getInfoWindowContent=function(feature)
{var attributes=feature.attributes;var location=getByField($scope.locationsArray,feature.attributes.OBJECTID,"SdeObjectId");if(location)
var allotment=getByField($scope.activities,location.Id,"LocationId");$scope.map.infoWindow.setTitle(feature.attributes.PARCELID);var html="";if(allotment&&allotment.headerdata.CobellAppraisalWave)
html+="<b>Wave: </b>"+allotment.headerdata.CobellAppraisalWave+"<br/>";if(allotment&&allotment.headerdata.AllotmentStatus)
html+="<b>Appraisal Status: </b>"+allotment.headerdata.AllotmentStatus+"<hr/>";if(attributes.Address&&attributes.Address.trim()!="")
html+="<b>Address: </b>"+attributes.Address+"<br/>";if(attributes.OWNERSHIPS)
html+="<b>Ownership: </b>"+attributes.OWNERSHIPS+"<br/>";if(attributes.ACRES_GIS)
html+="<b>Acres (GIS): </b>"+attributes.ACRES_GIS;if(allotment&&allotment.Id)
html+="<br/><div class='right'><a href='#dataview/"+allotment.Id+"'>View</a></div>";return html;};}];define("private/appraisals/components/appraisal-activities/appraisal-activities",function(){});define('private/appraisals/appraisal-map-directive',['app','esri/map','esri/geometry/Point','esri/dijit/InfoWindow','esri/InfoTemplate','esri/dijit/BasemapLayer','esri/dijit/BasemapGallery','esri/dijit/Basemap'],function(app,Map,Point,InfoWindow,InfoTemplate){app.directive('appraisalMap',function($rootScope){return{restrict:'E',scope:false,compile:function($element,$attrs){$element.removeAttr("id");$element.append("<div id="+$attrs.id+"></div>");return function(scope,element,attrs,controller){scope.$watch("center",function(newCenter,oldCenter){if(newCenter!==oldCenter){controller.centerAt(newCenter);}});};},controller:function($scope,$element,$attrs){var mapOptions={center:($attrs.center)?$attrs.center.split(","):$scope.center,zoom:($attrs.zoom)?$attrs.zoom:$scope.zoom,spatialReference:{wkid:102100}};console.log("trying to make the map");esri.config.defaults.io.proxyUrl=proxyUrl;esri.config.defaults.io.alwaysUseProxy=true;var map=new Map($attrs.id,mapOptions);map.selectedBasemap=defaultLayer;map.selectedServiceLayers=[];map.basemaps=[];for(var property in parcelLayerConfig){if(parcelLayerConfig.hasOwnProperty(property))
{map.basemaps.push({label:parcelLayerConfig[property].Display,name:property});}};map.serviceLayers=[];for(var property in servicesLayerConfig){if(servicesLayerConfig.hasOwnProperty(property))
{map.serviceLayers.push({label:servicesLayerConfig[property].Display,name:property});}};map.updateLayers=function(){console.log("Changing Layer: "+map.selectedBasemap);try{console.log("Loading layer: "+parcelLayerConfig[map.selectedBasemap].ServiceURL);map.removeAllLayers();var new_layer=new esri.layers.ArcGISTiledMapServiceLayer(parcelLayerConfig[map.selectedBasemap].ServiceURL);map.addLayer(new_layer);map.currentBasemapLayer=new_layer;for(var i=map.selectedServiceLayers.length-1;i>=0;i--){var service_layer=new esri.layers.ArcGISDynamicMapServiceLayer(servicesLayerConfig[map.selectedServiceLayers[i]].ServiceURL);map.addLayer(service_layer);};map.parcelLayer=new esri.layers.GraphicsLayer();map.addLayer(map.parcelLayer);console.log("done!");map.reposition();}
catch(e)
{console.dir(e);}};map.updateLayers();this.addLayer=function(layer,filter){map.locationLayer=map.addLayer(layer);layer.showLocationsById=function(locationObjectIds){try{this.clearSelection();var definitionExpression="OBJECTID IN ("+locationObjectIds+")";console.log("Definition expression: "+definitionExpression);this.setDefinitionExpression(definitionExpression);this.refresh();}catch(e)
{console.dir(e);}};if(filter&&filter=="location")
{if(typeof $scope.locationObjectIds=="undefined")
{$scope.$watch('locationObjectIds',function(){if(typeof $scope.locationObjectIds=="undefined")
return;layer.showLocationsById($scope.locationObjectIds);layer.show();});}}
return map.locationLayer;};map.querySearchParcel=function(searchParam,callback)
{var queryTask=new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);var query=new esri.tasks.Query();query.where=dojo.string.substitute(parcelLayerConfig[map.selectedBasemap].ParcelQuery,[searchParam]);console.log("query.where is next...");console.dir(query.where);query.returnGeometry=false;query.outSpatialReference=this.spatialReference;query.outFields=["*"];queryTask.execute(query,function(result){callback(result.features);},function(err){console.log("Failure executing query!");console.dir(err);console.dir(query);});};map.queryMatchParcel=function(searchParam,callback)
{var queryTask=new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);var query=new esri.tasks.Query();query.where=dojo.string.substitute(parcelLayerConfig[map.selectedBasemap].LocateParcelQuery,[searchParam]);query.returnGeometry=false;query.outSpatialReference=this.spatialReference;query.outFields=["*"];queryTask.execute(query,function(result){callback(result.features);},function(err){console.log("Failure executing query!");console.dir(err);console.dir(query);});};map.querySelectParcel=function(mapPoint,objectId,callback){console.log("Inside AppraisalMap.js...");console.log("Running query on: "+parcelLayerConfig[map.selectedBasemap].QueryURL);var queryTask=new esri.tasks.QueryTask(parcelLayerConfig[map.selectedBasemap].QueryURL);var query=new esri.tasks.Query();query.outSpatialReference=this.spatialReference;query.returnGeometry=true;query.outFields=["*"];if(mapPoint){query.geometry=mapPoint;}
else{query.objectIds=[objectId];}
query.spatialRelationship=esri.tasks.Query.SPATIAL_REL_INTERSECTS;queryTask.execute(query,function(result){console.dir(result);callback(result.features);},function(err){console.log("Failure executing query!");console.dir(err);console.dir(query);});};map.clearGraphics=function(){this.parcelLayer.clear();}
map.addParcelToMap=function(feature,color,alpha)
{var graphic;if(!color)
color="#FF6600";if(!alpha)
alpha=.25;var lineColor=new dojo.Color();lineColor.setColor(color);var fillColor=new dojo.Color();fillColor.setColor(color);fillColor.a=alpha;var symbol=new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID,lineColor,3),fillColor);graphic=new esri.Graphic(feature.geometry,symbol,feature.attributes);this.parcelLayer.clear();this.parcelLayer.add(graphic);this.selectedFeature=feature;this.selectedGraphic=graphic;$scope.$emit("map.selectedFeature",feature);}
map.centerAndZoomToGraphic=function(graphic)
{var centerPoint=graphic.geometry.getExtent().getCenter();return map.centerAndZoom(centerPoint,15);};this.centerAt=function(center){var point=new Point({x:center[0],y:center[1],spatialReference:{wkid:102100}});map.centerAt(point);};map.on("click",function(e){$scope.$emit("map.click",e);$scope.$apply(function($scope){$scope.click.call($scope,e);});});$scope.map=map;}};});});require(['private/appraisals/components/appraisal-activities/appraisal-activities','private/appraisals/appraisal-map-directive',],function(){appraisals_module.controller('AppraisalCtrl',appraisal_activities);});define("private/appraisals/appraisals-module",function(){});(function(angular){var root=location.pathname.replace(new RegExp(/\/[^\/]+$/),'');define('angular',[],function(){return angular;});require({async:true,packages:[{name:'app',location:root+'/app'},{name:'core',location:root+'/app/core'},{name:'private',location:root+'/app/private'},]});require(['angular','dojo/parser','dijit/Menu','dijit/MenuItem','dijit/form/DropDownButton','core/all-modules','core/common/common-module','core/projects/projects-module','core/datasets/datasets-module','core/admin/admin-module','core/preferences/preferences-module','private/all-modules','private/crpp/crpp-module','private/habitat/habitat-module','private/appraisals/appraisals-module',],function(angular,parser){angular.element(document).ready(function(){$.get(WHOAMI_URL,function(data){profile=data;}).fail(function(){window.location=LOGIN_URL;}).always(function(){console.log("Booting dojo...");require(['dojo/domReady!'],function(){console.log("Booting angular...");setTimeout(function(){angular.bootstrap(document.body,['app']);console.log("all systems GO!")},4000);});});});});}(angular));define("init",function(){});